/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class ItemList : Control {
  public static readonly int ICON_MODE_TOP = 0;
  public static readonly int ICON_MODE_LEFT = 1;
  public static readonly int SELECT_SINGLE = 0;
  public static readonly int SELECT_MULTI = 1;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal ItemList(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.ItemList_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected ItemList(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.ItemList_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ItemList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void add_item(string text, SWIGTYPE_p_RefT_Texture_t icon, bool selectable) {
    GodotEnginePINVOKE.ItemList_add_item__SWIG_0(swigCPtr, text, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon), selectable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_item(string text, SWIGTYPE_p_RefT_Texture_t icon) {
    GodotEnginePINVOKE.ItemList_add_item__SWIG_1(swigCPtr, text, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_item(string text) {
    GodotEnginePINVOKE.ItemList_add_item__SWIG_2(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_icon_item(SWIGTYPE_p_RefT_Texture_t icon, bool selectable) {
    GodotEnginePINVOKE.ItemList_add_icon_item__SWIG_0(swigCPtr, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon), selectable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_icon_item(SWIGTYPE_p_RefT_Texture_t icon) {
    GodotEnginePINVOKE.ItemList_add_icon_item__SWIG_1(swigCPtr, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_item_text(int idx, string text) {
    GodotEnginePINVOKE.ItemList_set_item_text(swigCPtr, idx, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_item_text(int idx) {
    string ret = GodotEnginePINVOKE.ItemList_get_item_text(swigCPtr, idx);
    return ret;
  }

  public void set_item_icon(int idx, SWIGTYPE_p_RefT_Texture_t icon) {
    GodotEnginePINVOKE.ItemList_set_item_icon(swigCPtr, idx, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RefT_Texture_t get_item_icon(int idx) {
    SWIGTYPE_p_RefT_Texture_t ret = new SWIGTYPE_p_RefT_Texture_t(GodotEnginePINVOKE.ItemList_get_item_icon(swigCPtr, idx), true);
    return ret;
  }

  public void set_item_icon_region(int idx, SWIGTYPE_p_Rect2 rect) {
    GodotEnginePINVOKE.ItemList_set_item_icon_region(swigCPtr, idx, SWIGTYPE_p_Rect2.getCPtr(rect));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Rect2 get_item_icon_region(int idx) {
    SWIGTYPE_p_Rect2 ret = new SWIGTYPE_p_Rect2(GodotEnginePINVOKE.ItemList_get_item_icon_region(swigCPtr, idx), true);
    return ret;
  }

  public void set_item_selectable(int idx, bool selectable) {
    GodotEnginePINVOKE.ItemList_set_item_selectable(swigCPtr, idx, selectable);
  }

  public bool is_item_selectable(int idx) {
    bool ret = GodotEnginePINVOKE.ItemList_is_item_selectable(swigCPtr, idx);
    return ret;
  }

  public void set_item_disabled(int idx, bool disabled) {
    GodotEnginePINVOKE.ItemList_set_item_disabled(swigCPtr, idx, disabled);
  }

  public bool is_item_disabled(int idx) {
    bool ret = GodotEnginePINVOKE.ItemList_is_item_disabled(swigCPtr, idx);
    return ret;
  }

  public void set_item_metadata(int idx, Variant metadata) {
    GodotEnginePINVOKE.ItemList_set_item_metadata(swigCPtr, idx, Variant.getCPtr(metadata));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_item_metadata(int idx) {
    GodotEnginePINVOKE.ItemList_get_item_metadata(swigCPtr, idx);
  }

  public void set_item_custom_bg_color(int idx, SWIGTYPE_p_Color custom_bg_color) {
    GodotEnginePINVOKE.ItemList_set_item_custom_bg_color(swigCPtr, idx, SWIGTYPE_p_Color.getCPtr(custom_bg_color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_item_custom_bg_color(int idx) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.ItemList_get_item_custom_bg_color(swigCPtr, idx), true);
    return ret;
  }

  public void set_item_tooltip(int idx, string tooltip) {
    GodotEnginePINVOKE.ItemList_set_item_tooltip(swigCPtr, idx, tooltip);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_item_tooltip(int idx) {
    string ret = GodotEnginePINVOKE.ItemList_get_item_tooltip(swigCPtr, idx);
    return ret;
  }

  public void select(int idx, bool single) {
    GodotEnginePINVOKE.ItemList_select__SWIG_0(swigCPtr, idx, single);
  }

  public void select(int idx) {
    GodotEnginePINVOKE.ItemList_select__SWIG_1(swigCPtr, idx);
  }

  public void unselect(int idx) {
    GodotEnginePINVOKE.ItemList_unselect(swigCPtr, idx);
  }

  public bool is_selected(int idx) {
    bool ret = GodotEnginePINVOKE.ItemList_is_selected(swigCPtr, idx);
    return ret;
  }

  public int get_item_count() {
    int ret = GodotEnginePINVOKE.ItemList_get_item_count(swigCPtr);
    return ret;
  }

  public void remove_item(int idx) {
    GodotEnginePINVOKE.ItemList_remove_item(swigCPtr, idx);
  }

  public void clear() {
    GodotEnginePINVOKE.ItemList_clear(swigCPtr);
  }

  public void sort_items_by_text() {
    GodotEnginePINVOKE.ItemList_sort_items_by_text(swigCPtr);
  }

  public void set_fixed_column_width(int width) {
    GodotEnginePINVOKE.ItemList_set_fixed_column_width(swigCPtr, width);
  }

  public int get_fixed_column_width() {
    int ret = GodotEnginePINVOKE.ItemList_get_fixed_column_width(swigCPtr);
    return ret;
  }

  public void set_same_column_width(bool enable) {
    GodotEnginePINVOKE.ItemList_set_same_column_width(swigCPtr, enable);
  }

  public int is_same_column_width() {
    int ret = GodotEnginePINVOKE.ItemList_is_same_column_width(swigCPtr);
    return ret;
  }

  public void set_max_text_lines(int lines) {
    GodotEnginePINVOKE.ItemList_set_max_text_lines(swigCPtr, lines);
  }

  public int get_max_text_lines() {
    int ret = GodotEnginePINVOKE.ItemList_get_max_text_lines(swigCPtr);
    return ret;
  }

  public void set_max_columns(int amount) {
    GodotEnginePINVOKE.ItemList_set_max_columns(swigCPtr, amount);
  }

  public int get_max_columns() {
    int ret = GodotEnginePINVOKE.ItemList_get_max_columns(swigCPtr);
    return ret;
  }

  public void set_select_mode(int mode) {
    GodotEnginePINVOKE.ItemList_set_select_mode(swigCPtr, mode);
  }

  public int get_select_mode() {
    int ret = GodotEnginePINVOKE.ItemList_get_select_mode(swigCPtr);
    return ret;
  }

  public void set_icon_mode(int mode) {
    GodotEnginePINVOKE.ItemList_set_icon_mode(swigCPtr, mode);
  }

  public int get_icon_mode() {
    int ret = GodotEnginePINVOKE.ItemList_get_icon_mode(swigCPtr);
    return ret;
  }

  public void set_min_icon_size(Vector2 size) {
    GodotEnginePINVOKE.ItemList_set_min_icon_size(swigCPtr, Vector2.getCPtr(size));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_min_icon_size() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.ItemList_get_min_icon_size(swigCPtr), true);
    return ret;
  }

  public void set_max_icon_size(Vector2 size) {
    GodotEnginePINVOKE.ItemList_set_max_icon_size(swigCPtr, Vector2.getCPtr(size));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_max_icon_size() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.ItemList_get_max_icon_size(swigCPtr), true);
    return ret;
  }

  public void set_icon_scale(float scale) {
    GodotEnginePINVOKE.ItemList_set_icon_scale(swigCPtr, scale);
  }

  public float get_icon_scale() {
    float ret = GodotEnginePINVOKE.ItemList_get_icon_scale(swigCPtr);
    return ret;
  }

  public void set_allow_rmb_select(bool allow) {
    GodotEnginePINVOKE.ItemList_set_allow_rmb_select(swigCPtr, allow);
  }

  public bool get_allow_rmb_select() {
    bool ret = GodotEnginePINVOKE.ItemList_get_allow_rmb_select(swigCPtr);
    return ret;
  }

  public int get_item_at_pos(Vector2 pos, bool exact) {
    int ret = GodotEnginePINVOKE.ItemList_get_item_at_pos__SWIG_0(swigCPtr, Vector2.getCPtr(pos), exact);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_item_at_pos(Vector2 pos) {
    int ret = GodotEnginePINVOKE.ItemList_get_item_at_pos__SWIG_1(swigCPtr, Vector2.getCPtr(pos));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ensure_current_is_visible() {
    GodotEnginePINVOKE.ItemList_ensure_current_is_visible(swigCPtr);
  }

  public ItemList() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_ItemList());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
