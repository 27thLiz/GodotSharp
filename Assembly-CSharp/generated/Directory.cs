/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Directory : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Directory(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Directory_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Directory(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Directory_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Directory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Directory() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Directory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int open(string path) {
    int ret = GodotEnginePINVOKE.Directory_open(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool list_dir_begin() {
    bool ret = GodotEnginePINVOKE.Directory_list_dir_begin(swigCPtr);
    return ret;
  }

  public string get_next() {
    string ret = GodotEnginePINVOKE.Directory_get_next(swigCPtr);
    return ret;
  }

  public bool current_is_dir() {
    bool ret = GodotEnginePINVOKE.Directory_current_is_dir(swigCPtr);
    return ret;
  }

  public void list_dir_end() {
    GodotEnginePINVOKE.Directory_list_dir_end(swigCPtr);
  }

  public int get_drive_count() {
    int ret = GodotEnginePINVOKE.Directory_get_drive_count(swigCPtr);
    return ret;
  }

  public string get_drive(int idx) {
    string ret = GodotEnginePINVOKE.Directory_get_drive(swigCPtr, idx);
    return ret;
  }

  public int change_dir(string todir) {
    int ret = GodotEnginePINVOKE.Directory_change_dir(swigCPtr, todir);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_current_dir() {
    string ret = GodotEnginePINVOKE.Directory_get_current_dir(swigCPtr);
    return ret;
  }

  public int make_dir(string path) {
    int ret = GodotEnginePINVOKE.Directory_make_dir(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int make_dir_recursive(string path) {
    int ret = GodotEnginePINVOKE.Directory_make_dir_recursive(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool file_exists(string path) {
    bool ret = GodotEnginePINVOKE.Directory_file_exists(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool dir_exists(string path) {
    bool ret = GodotEnginePINVOKE.Directory_dir_exists(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_space_left() {
    int ret = GodotEnginePINVOKE.Directory_get_space_left(swigCPtr);
    return ret;
  }

  public int copy(string from, string to) {
    int ret = GodotEnginePINVOKE.Directory_copy(swigCPtr, from, to);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int rename(string from, string to) {
    int ret = GodotEnginePINVOKE.Directory_rename(swigCPtr, from, to);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int remove(string path) {
    int ret = GodotEnginePINVOKE.Directory_remove(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Directory() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Directory());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
