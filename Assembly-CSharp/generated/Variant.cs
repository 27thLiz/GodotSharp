/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Variant : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Variant(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Variant obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Variant() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Variant(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  // Implicit conversions
  
  public static implicit operator float(Variant from) {
    return from.operator_to_float();
  }
  
  public static implicit operator Object(Variant from) {
    return from.operator_to_Object();
  }
  
  public static implicit operator Node(Variant from) {
    return from.operator_to_Node();
  }
  
  /*public static implicit operator Control(Variant from) {
    return from.operator_to_Control();
  }*/
  
  // Implicit constructors
  
  public static implicit operator Variant(float from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Object from) {
    return new Variant(from);
  }
  
  public float operator_to_float() {
    float ret = GodotEnginePINVOKE.Variant_operator_to_float(swigCPtr);
    return ret;
  }

  public Object operator_to_Object() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Variant_operator_to_Object(swigCPtr);
    Object ret = InternalHelpers.GetManagedObjectFor(cPtr);
    if (ret == null) {
      ret = new Object(cPtr, false);
    }
    return ret;
  }

  public Node operator_to_Node() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Variant_operator_to_Node(swigCPtr);
    Node ret = InternalHelpers.GetManagedObjectFor(cPtr) as Node;
    if (ret == null) {
      ret = new Node(cPtr, false);
    }
    return ret;
  }

  public Variant() : this(GodotEnginePINVOKE.new_Variant__SWIG_0(), true) {
  }

  public Variant(Object p_object) : this(GodotEnginePINVOKE.new_Variant__SWIG_1(Object.getCPtr(p_object)), true) {
  }

  public Variant(float p_float) : this(GodotEnginePINVOKE.new_Variant__SWIG_2(p_float), true) {
  }

}

}
