/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class ButtonArray : Control {
  public static readonly int ALIGN_BEGIN = 0;
  public static readonly int ALIGN_CENTER = 1;
  public static readonly int ALIGN_END = 2;
  public static readonly int ALIGN_FILL = 3;
  public static readonly int ALIGN_EXPAND_FILL = 4;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal ButtonArray(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.ButtonArray_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected ButtonArray(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.ButtonArray_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ButtonArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal ButtonArray() {}


  public void add_button(string text) {
    GodotEnginePINVOKE.ButtonArray_add_button(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_icon_button(Texture icon, string text) {
    GodotEnginePINVOKE.ButtonArray_add_icon_button__SWIG_0(swigCPtr, Texture.getCPtr(icon), text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_icon_button(Texture icon) {
    GodotEnginePINVOKE.ButtonArray_add_icon_button__SWIG_1(swigCPtr, Texture.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_button_text(int button_idx, string text) {
    GodotEnginePINVOKE.ButtonArray_set_button_text(swigCPtr, button_idx, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_button_icon(int button_idx, Texture icon) {
    GodotEnginePINVOKE.ButtonArray_set_button_icon(swigCPtr, button_idx, Texture.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_button_text(int button_idx) {
    string ret = GodotEnginePINVOKE.ButtonArray_get_button_text(swigCPtr, button_idx);
    return ret;
  }

  public Texture get_button_icon(int button_idx) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.ButtonArray_get_button_icon(swigCPtr, button_idx);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    return ret;
}

  public int get_button_count() {
    int ret = GodotEnginePINVOKE.ButtonArray_get_button_count(swigCPtr);
    return ret;
  }

  public int get_selected() {
    int ret = GodotEnginePINVOKE.ButtonArray_get_selected(swigCPtr);
    return ret;
  }

  public int get_hovered() {
    int ret = GodotEnginePINVOKE.ButtonArray_get_hovered(swigCPtr);
    return ret;
  }

  public void set_selected(int button_idx) {
    GodotEnginePINVOKE.ButtonArray_set_selected(swigCPtr, button_idx);
  }

  public void erase_button(int button_idx) {
    GodotEnginePINVOKE.ButtonArray_erase_button(swigCPtr, button_idx);
  }

  public void clear() {
    GodotEnginePINVOKE.ButtonArray_clear(swigCPtr);
  }

}

}
