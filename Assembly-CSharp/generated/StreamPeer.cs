/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class StreamPeer : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal StreamPeer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.StreamPeer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected StreamPeer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.StreamPeer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StreamPeer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StreamPeer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_StreamPeer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal StreamPeer() {}


  public int put_data(SWIGTYPE_p_RawArray data) {
    int ret = GodotEnginePINVOKE.StreamPeer_put_data(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(data));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array put_partial_data(SWIGTYPE_p_RawArray data) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.StreamPeer_put_partial_data(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(data)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array get_data(int bytes) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.StreamPeer_get_data(swigCPtr, bytes), true);
    return ret;
  }

  public SWIGTYPE_p_Array get_partial_data(int bytes) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.StreamPeer_get_partial_data(swigCPtr, bytes), true);
    return ret;
  }

  public int get_available_bytes() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_available_bytes(swigCPtr);
    return ret;
  }

  public void set_big_endian(bool enable) {
    GodotEnginePINVOKE.StreamPeer_set_big_endian(swigCPtr, enable);
  }

  public bool is_big_endian_enabled() {
    bool ret = GodotEnginePINVOKE.StreamPeer_is_big_endian_enabled(swigCPtr);
    return ret;
  }

  public void put_8(int val) {
    GodotEnginePINVOKE.StreamPeer_put_8(swigCPtr, val);
  }

  public void put_u8(int val) {
    GodotEnginePINVOKE.StreamPeer_put_u8(swigCPtr, val);
  }

  public void put_16(int val) {
    GodotEnginePINVOKE.StreamPeer_put_16(swigCPtr, val);
  }

  public void put_u16(int val) {
    GodotEnginePINVOKE.StreamPeer_put_u16(swigCPtr, val);
  }

  public void put_32(int val) {
    GodotEnginePINVOKE.StreamPeer_put_32(swigCPtr, val);
  }

  public void put_u32(int val) {
    GodotEnginePINVOKE.StreamPeer_put_u32(swigCPtr, val);
  }

  public void put_64(int val) {
    GodotEnginePINVOKE.StreamPeer_put_64(swigCPtr, val);
  }

  public void put_u64(int val) {
    GodotEnginePINVOKE.StreamPeer_put_u64(swigCPtr, val);
  }

  public void put_float(float val) {
    GodotEnginePINVOKE.StreamPeer_put_float(swigCPtr, val);
  }

  public void put_double(float val) {
    GodotEnginePINVOKE.StreamPeer_put_double(swigCPtr, val);
  }

  public void put_utf8_string(string val) {
    GodotEnginePINVOKE.StreamPeer_put_utf8_string(swigCPtr, val);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void put_var(Variant val) {
    GodotEnginePINVOKE.StreamPeer_put_var(swigCPtr, Variant.getCPtr(val));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_8() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_8(swigCPtr);
    return ret;
  }

  public int get_u8() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_u8(swigCPtr);
    return ret;
  }

  public int get_16() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_16(swigCPtr);
    return ret;
  }

  public int get_u16() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_u16(swigCPtr);
    return ret;
  }

  public int get_32() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_32(swigCPtr);
    return ret;
  }

  public int get_u32() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_u32(swigCPtr);
    return ret;
  }

  public int get_64() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_64(swigCPtr);
    return ret;
  }

  public int get_u64() {
    int ret = GodotEnginePINVOKE.StreamPeer_get_u64(swigCPtr);
    return ret;
  }

  public float get_float() {
    float ret = GodotEnginePINVOKE.StreamPeer_get_float(swigCPtr);
    return ret;
  }

  public float get_double() {
    float ret = GodotEnginePINVOKE.StreamPeer_get_double(swigCPtr);
    return ret;
  }

  public string get_string(int bytes) {
    string ret = GodotEnginePINVOKE.StreamPeer_get_string(swigCPtr, bytes);
    return ret;
  }

  public string get_utf8_string(int bytes) {
    string ret = GodotEnginePINVOKE.StreamPeer_get_utf8_string(swigCPtr, bytes);
    return ret;
  }

  public Variant get_var() {
    Variant ret = new Variant(GodotEnginePINVOKE.StreamPeer_get_var(swigCPtr), true);
    return ret;
  }

}

}
