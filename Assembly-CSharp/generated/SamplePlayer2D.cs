/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class SamplePlayer2D : SoundPlayer2D {
  public static readonly int INVALID_VOICE = -1;
  public static readonly int NEXT_VOICE = -2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal SamplePlayer2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.SamplePlayer2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected SamplePlayer2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.SamplePlayer2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SamplePlayer2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_sample_library(SWIGTYPE_p_RefT_SampleLibrary_t library) {
    GodotEnginePINVOKE.SamplePlayer2D_set_sample_library(swigCPtr, SWIGTYPE_p_RefT_SampleLibrary_t.getCPtr(library));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RefT_SampleLibrary_t get_sample_library() {
    SWIGTYPE_p_RefT_SampleLibrary_t ret = new SWIGTYPE_p_RefT_SampleLibrary_t(GodotEnginePINVOKE.SamplePlayer2D_get_sample_library(swigCPtr), true);
    return ret;
  }

  public void set_polyphony(int max_voices) {
    GodotEnginePINVOKE.SamplePlayer2D_set_polyphony(swigCPtr, max_voices);
  }

  public int get_polyphony() {
    int ret = GodotEnginePINVOKE.SamplePlayer2D_get_polyphony(swigCPtr);
    return ret;
  }

  public int play(string sample, int voice) {
    int ret = GodotEnginePINVOKE.SamplePlayer2D_play__SWIG_0(swigCPtr, sample, voice);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int play(string sample) {
    int ret = GodotEnginePINVOKE.SamplePlayer2D_play__SWIG_1(swigCPtr, sample);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void voice_set_pitch_scale(int voice, float ratio) {
    GodotEnginePINVOKE.SamplePlayer2D_voice_set_pitch_scale(swigCPtr, voice, ratio);
  }

  public void voice_set_volume_scale_db(int voice, float db) {
    GodotEnginePINVOKE.SamplePlayer2D_voice_set_volume_scale_db(swigCPtr, voice, db);
  }

  public bool is_voice_active(int voice) {
    bool ret = GodotEnginePINVOKE.SamplePlayer2D_is_voice_active(swigCPtr, voice);
    return ret;
  }

  public void stop_voice(int voice) {
    GodotEnginePINVOKE.SamplePlayer2D_stop_voice(swigCPtr, voice);
  }

  public void stop_all() {
    GodotEnginePINVOKE.SamplePlayer2D_stop_all(swigCPtr);
  }

  public void set_random_pitch_scale(float val) {
    GodotEnginePINVOKE.SamplePlayer2D_set_random_pitch_scale(swigCPtr, val);
  }

  public float get_random_pitch_scale() {
    float ret = GodotEnginePINVOKE.SamplePlayer2D_get_random_pitch_scale(swigCPtr);
    return ret;
  }

  public SamplePlayer2D() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_SamplePlayer2D());
    }
  }

}

}
