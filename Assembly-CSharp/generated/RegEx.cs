/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class RegEx : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal RegEx(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.RegEx_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected RegEx(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.RegEx_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RegEx obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int compile(string pattern, int capture) {
    int ret = GodotEnginePINVOKE.RegEx_compile__SWIG_0(swigCPtr, pattern, capture);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int compile(string pattern) {
    int ret = GodotEnginePINVOKE.RegEx_compile__SWIG_1(swigCPtr, pattern);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int find(string text, int start, int end) {
    int ret = GodotEnginePINVOKE.RegEx_find__SWIG_0(swigCPtr, text, start, end);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int find(string text, int start) {
    int ret = GodotEnginePINVOKE.RegEx_find__SWIG_1(swigCPtr, text, start);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int find(string text) {
    int ret = GodotEnginePINVOKE.RegEx_find__SWIG_2(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear() {
    GodotEnginePINVOKE.RegEx_clear(swigCPtr);
  }

  public bool is_valid() {
    bool ret = GodotEnginePINVOKE.RegEx_is_valid(swigCPtr);
    return ret;
  }

  public int get_capture_count() {
    int ret = GodotEnginePINVOKE.RegEx_get_capture_count(swigCPtr);
    return ret;
  }

  public string get_capture(int capture) {
    string ret = GodotEnginePINVOKE.RegEx_get_capture(swigCPtr, capture);
    return ret;
  }

  public int get_capture_start(int capture) {
    int ret = GodotEnginePINVOKE.RegEx_get_capture_start(swigCPtr, capture);
    return ret;
  }

  public SWIGTYPE_p_StringArray get_captures() {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.RegEx_get_captures(swigCPtr), true);
    return ret;
  }

  public RegEx() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_RegEx());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
