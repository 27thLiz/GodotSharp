/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PhysicsDirectSpaceState : Object {
  public static readonly int TYPE_MASK_STATIC_BODY = 1;
  public static readonly int TYPE_MASK_KINEMATIC_BODY = 2;
  public static readonly int TYPE_MASK_RIGID_BODY = 4;
  public static readonly int TYPE_MASK_CHARACTER_BODY = 8;
  public static readonly int TYPE_MASK_AREA = 16;
  public static readonly int TYPE_MASK_COLLISION = 15;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PhysicsDirectSpaceState(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PhysicsDirectSpaceState_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PhysicsDirectSpaceState(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PhysicsDirectSpaceState_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsDirectSpaceState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal PhysicsDirectSpaceState() {}


  public SWIGTYPE_p_Dictionary intersect_ray(Vector3 from, Vector3 to, SWIGTYPE_p_Array exclude, int layer_mask, int type_mask) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.PhysicsDirectSpaceState_intersect_ray__SWIG_0(swigCPtr, ref from, ref to, SWIGTYPE_p_Array.getCPtr(exclude), layer_mask, type_mask), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Dictionary intersect_ray(Vector3 from, Vector3 to, SWIGTYPE_p_Array exclude, int layer_mask) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.PhysicsDirectSpaceState_intersect_ray__SWIG_1(swigCPtr, ref from, ref to, SWIGTYPE_p_Array.getCPtr(exclude), layer_mask), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Dictionary intersect_ray(Vector3 from, Vector3 to, SWIGTYPE_p_Array exclude) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.PhysicsDirectSpaceState_intersect_ray__SWIG_2(swigCPtr, ref from, ref to, SWIGTYPE_p_Array.getCPtr(exclude)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Dictionary intersect_ray(Vector3 from, Vector3 to) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.PhysicsDirectSpaceState_intersect_ray__SWIG_3(swigCPtr, ref from, ref to), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array intersect_shape(PhysicsShapeQueryParameters shape, int max_results) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.PhysicsDirectSpaceState_intersect_shape__SWIG_0(swigCPtr, PhysicsShapeQueryParameters.getCPtr(shape), max_results), true);
    return ret;
  }

  public SWIGTYPE_p_Array intersect_shape(PhysicsShapeQueryParameters shape) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.PhysicsDirectSpaceState_intersect_shape__SWIG_1(swigCPtr, PhysicsShapeQueryParameters.getCPtr(shape)), true);
    return ret;
  }

  public SWIGTYPE_p_Array cast_motion(PhysicsShapeQueryParameters shape, Vector3 motion) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.PhysicsDirectSpaceState_cast_motion(swigCPtr, PhysicsShapeQueryParameters.getCPtr(shape), ref motion), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array collide_shape(PhysicsShapeQueryParameters shape, int max_results) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.PhysicsDirectSpaceState_collide_shape__SWIG_0(swigCPtr, PhysicsShapeQueryParameters.getCPtr(shape), max_results), true);
    return ret;
  }

  public SWIGTYPE_p_Array collide_shape(PhysicsShapeQueryParameters shape) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.PhysicsDirectSpaceState_collide_shape__SWIG_1(swigCPtr, PhysicsShapeQueryParameters.getCPtr(shape)), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_rest_info(PhysicsShapeQueryParameters shape) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.PhysicsDirectSpaceState_get_rest_info(swigCPtr, PhysicsShapeQueryParameters.getCPtr(shape)), true);
    return ret;
  }

}

}
