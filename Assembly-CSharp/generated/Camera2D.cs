/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Camera2D : Node2D {
  public static readonly int ANCHOR_MODE_DRAG_CENTER = 1;
  public static readonly int ANCHOR_MODE_FIXED_TOP_LEFT = 0;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Camera2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Camera2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Camera2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Camera2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Camera2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_offset(Vector2 offset) {
    GodotEnginePINVOKE.Camera2D_set_offset(swigCPtr, Vector2.getCPtr(offset));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_offset() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Camera2D_get_offset(swigCPtr), true);
    return ret;
  }

  public void set_anchor_mode(int anchor_mode) {
    GodotEnginePINVOKE.Camera2D_set_anchor_mode(swigCPtr, anchor_mode);
  }

  public int get_anchor_mode() {
    int ret = GodotEnginePINVOKE.Camera2D_get_anchor_mode(swigCPtr);
    return ret;
  }

  public void set_rotating(bool rotating) {
    GodotEnginePINVOKE.Camera2D_set_rotating(swigCPtr, rotating);
  }

  public bool is_rotating() {
    bool ret = GodotEnginePINVOKE.Camera2D_is_rotating(swigCPtr);
    return ret;
  }

  public void make_current() {
    GodotEnginePINVOKE.Camera2D_make_current(swigCPtr);
  }

  public void clear_current() {
    GodotEnginePINVOKE.Camera2D_clear_current(swigCPtr);
  }

  public bool is_current() {
    bool ret = GodotEnginePINVOKE.Camera2D_is_current(swigCPtr);
    return ret;
  }

  public void set_limit(int margin, int limit) {
    GodotEnginePINVOKE.Camera2D_set_limit(swigCPtr, margin, limit);
  }

  public int get_limit(int margin) {
    int ret = GodotEnginePINVOKE.Camera2D_get_limit(swigCPtr, margin);
    return ret;
  }

  public void set_v_drag_enabled(bool enabled) {
    GodotEnginePINVOKE.Camera2D_set_v_drag_enabled(swigCPtr, enabled);
  }

  public bool is_v_drag_enabled() {
    bool ret = GodotEnginePINVOKE.Camera2D_is_v_drag_enabled(swigCPtr);
    return ret;
  }

  public void set_h_drag_enabled(bool enabled) {
    GodotEnginePINVOKE.Camera2D_set_h_drag_enabled(swigCPtr, enabled);
  }

  public bool is_h_drag_enabled() {
    bool ret = GodotEnginePINVOKE.Camera2D_is_h_drag_enabled(swigCPtr);
    return ret;
  }

  public void set_v_offset(float ofs) {
    GodotEnginePINVOKE.Camera2D_set_v_offset(swigCPtr, ofs);
  }

  public float get_v_offset() {
    float ret = GodotEnginePINVOKE.Camera2D_get_v_offset(swigCPtr);
    return ret;
  }

  public void set_h_offset(float ofs) {
    GodotEnginePINVOKE.Camera2D_set_h_offset(swigCPtr, ofs);
  }

  public float get_h_offset() {
    float ret = GodotEnginePINVOKE.Camera2D_get_h_offset(swigCPtr);
    return ret;
  }

  public void set_drag_margin(int margin, float drag_margin) {
    GodotEnginePINVOKE.Camera2D_set_drag_margin(swigCPtr, margin, drag_margin);
  }

  public float get_drag_margin(int margin) {
    float ret = GodotEnginePINVOKE.Camera2D_get_drag_margin(swigCPtr, margin);
    return ret;
  }

  public Vector2 get_camera_pos() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Camera2D_get_camera_pos(swigCPtr), true);
    return ret;
  }

  public Vector2 get_camera_screen_center() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Camera2D_get_camera_screen_center(swigCPtr), true);
    return ret;
  }

  public void set_zoom(Vector2 zoom) {
    GodotEnginePINVOKE.Camera2D_set_zoom(swigCPtr, Vector2.getCPtr(zoom));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_zoom() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Camera2D_get_zoom(swigCPtr), true);
    return ret;
  }

  public void set_follow_smoothing(float follow_smoothing) {
    GodotEnginePINVOKE.Camera2D_set_follow_smoothing(swigCPtr, follow_smoothing);
  }

  public float get_follow_smoothing() {
    float ret = GodotEnginePINVOKE.Camera2D_get_follow_smoothing(swigCPtr);
    return ret;
  }

  public void set_enable_follow_smoothing(bool follow_smoothing) {
    GodotEnginePINVOKE.Camera2D_set_enable_follow_smoothing(swigCPtr, follow_smoothing);
  }

  public bool is_follow_smoothing_enabled() {
    bool ret = GodotEnginePINVOKE.Camera2D_is_follow_smoothing_enabled(swigCPtr);
    return ret;
  }

  public void force_update_scroll() {
    GodotEnginePINVOKE.Camera2D_force_update_scroll(swigCPtr);
  }

  public Camera2D() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Camera2D());
    }
  }

}

}
