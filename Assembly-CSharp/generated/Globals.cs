/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Globals : Object {
  private static Globals instance;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Globals(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Globals_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Globals(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Globals_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Globals obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static Globals Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal Globals() {}


  public bool has(string name) {
    bool ret = GodotEnginePINVOKE.Globals_has(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_order(string name, int pos) {
    GodotEnginePINVOKE.Globals_set_order(swigCPtr, name, pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_order(string name) {
    int ret = GodotEnginePINVOKE.Globals_get_order(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_persisting(string name, bool enable) {
    GodotEnginePINVOKE.Globals_set_persisting(swigCPtr, name, enable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool is_persisting(string name) {
    bool ret = GodotEnginePINVOKE.Globals_is_persisting(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear(string name) {
    GodotEnginePINVOKE.Globals_clear(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string localize_path(string path) {
    string ret = GodotEnginePINVOKE.Globals_localize_path(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string globalize_path(string path) {
    string ret = GodotEnginePINVOKE.Globals_globalize_path(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save() {
    int ret = GodotEnginePINVOKE.Globals_save(swigCPtr);
    return ret;
  }

  public bool has_singleton(string name) {
    bool ret = GodotEnginePINVOKE.Globals_has_singleton(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Object get_singleton(string name) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Globals_get_singleton(swigCPtr, name);
    Object ret = InternalHelpers.GetManagedObjectFor(cPtr);
    if (ret == null) {
      ret = new Object(cPtr, false);
    }
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool load_resource_pack(string pack) {
    bool ret = GodotEnginePINVOKE.Globals_load_resource_pack(swigCPtr, pack);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save_custom(string file) {
    int ret = GodotEnginePINVOKE.Globals_save_custom(swigCPtr, file);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Globals SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Globals_SingletonGetInstance();
    Globals ret = (cPtr == global::System.IntPtr.Zero) ? null : new Globals(cPtr, false);
    return ret;
  }

}

}
