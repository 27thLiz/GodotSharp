/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PolygonPathFinder : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PolygonPathFinder(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PolygonPathFinder_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PolygonPathFinder(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PolygonPathFinder_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PolygonPathFinder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void setup(SWIGTYPE_p_Vector2Array points, SWIGTYPE_p_IntArray connections) {
    GodotEnginePINVOKE.PolygonPathFinder_setup(swigCPtr, SWIGTYPE_p_Vector2Array.getCPtr(points), SWIGTYPE_p_IntArray.getCPtr(connections));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector2Array find_path(Vector2 from, Vector2 to) {
    SWIGTYPE_p_Vector2Array ret = new SWIGTYPE_p_Vector2Array(GodotEnginePINVOKE.PolygonPathFinder_find_path(swigCPtr, ref from, ref to), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Vector2Array get_intersections(Vector2 from, Vector2 to) {
    SWIGTYPE_p_Vector2Array ret = new SWIGTYPE_p_Vector2Array(GodotEnginePINVOKE.PolygonPathFinder_get_intersections(swigCPtr, ref from, ref to), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2 get_closest_point(Vector2 point) {
    Vector2 ret = GodotEnginePINVOKE.PolygonPathFinder_get_closest_point(swigCPtr, ref point);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public bool is_point_inside(Vector2 point) {
    bool ret = GodotEnginePINVOKE.PolygonPathFinder_is_point_inside(swigCPtr, ref point);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_point_penalty(int idx, float penalty) {
    GodotEnginePINVOKE.PolygonPathFinder_set_point_penalty(swigCPtr, idx, penalty);
  }

  public float get_point_penalty(int idx) {
    float ret = GodotEnginePINVOKE.PolygonPathFinder_get_point_penalty(swigCPtr, idx);
    return ret;
  }

  public SWIGTYPE_p_Rect2 get_bounds() {
    SWIGTYPE_p_Rect2 ret = new SWIGTYPE_p_Rect2(GodotEnginePINVOKE.PolygonPathFinder_get_bounds(swigCPtr), true);
    return ret;
  }

  public PolygonPathFinder() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_PolygonPathFinder());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
