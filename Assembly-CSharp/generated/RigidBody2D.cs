/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class RigidBody2D : PhysicsBody2D {
  public static readonly int MODE_STATIC = 1;
  public static readonly int MODE_KINEMATIC = 3;
  public static readonly int MODE_RIGID = 0;
  public static readonly int MODE_CHARACTER = 2;
  public static readonly int CCD_MODE_DISABLED = 0;
  public static readonly int CCD_MODE_CAST_RAY = 1;
  public static readonly int CCD_MODE_CAST_SHAPE = 2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal RigidBody2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.RigidBody2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected RigidBody2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.RigidBody2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RigidBody2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void _integrate_forces(Physics2DDirectBodyState state) {
    GodotEnginePINVOKE.RigidBody2D__integrate_forces(swigCPtr, Physics2DDirectBodyState.getCPtr(state));
  }

  public void set_mode(int mode) {
    GodotEnginePINVOKE.RigidBody2D_set_mode(swigCPtr, mode);
  }

  public int get_mode() {
    int ret = GodotEnginePINVOKE.RigidBody2D_get_mode(swigCPtr);
    return ret;
  }

  public void set_mass(float mass) {
    GodotEnginePINVOKE.RigidBody2D_set_mass(swigCPtr, mass);
  }

  public float get_mass() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_mass(swigCPtr);
    return ret;
  }

  public float get_inertia() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_inertia(swigCPtr);
    return ret;
  }

  public void set_inertia(float inertia) {
    GodotEnginePINVOKE.RigidBody2D_set_inertia(swigCPtr, inertia);
  }

  public void set_weight(float weight) {
    GodotEnginePINVOKE.RigidBody2D_set_weight(swigCPtr, weight);
  }

  public float get_weight() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_weight(swigCPtr);
    return ret;
  }

  public void set_friction(float friction) {
    GodotEnginePINVOKE.RigidBody2D_set_friction(swigCPtr, friction);
  }

  public float get_friction() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_friction(swigCPtr);
    return ret;
  }

  public void set_bounce(float bounce) {
    GodotEnginePINVOKE.RigidBody2D_set_bounce(swigCPtr, bounce);
  }

  public float get_bounce() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_bounce(swigCPtr);
    return ret;
  }

  public void set_gravity_scale(float gravity_scale) {
    GodotEnginePINVOKE.RigidBody2D_set_gravity_scale(swigCPtr, gravity_scale);
  }

  public float get_gravity_scale() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_gravity_scale(swigCPtr);
    return ret;
  }

  public void set_linear_damp(float linear_damp) {
    GodotEnginePINVOKE.RigidBody2D_set_linear_damp(swigCPtr, linear_damp);
  }

  public float get_linear_damp() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_linear_damp(swigCPtr);
    return ret;
  }

  public void set_angular_damp(float angular_damp) {
    GodotEnginePINVOKE.RigidBody2D_set_angular_damp(swigCPtr, angular_damp);
  }

  public float get_angular_damp() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_angular_damp(swigCPtr);
    return ret;
  }

  public void set_linear_velocity(Vector2 linear_velocity) {
    GodotEnginePINVOKE.RigidBody2D_set_linear_velocity(swigCPtr, ref linear_velocity);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_linear_velocity() {
    Vector2 ret = GodotEnginePINVOKE.RigidBody2D_get_linear_velocity(swigCPtr);
    return ret;
}

  public void set_angular_velocity(float angular_velocity) {
    GodotEnginePINVOKE.RigidBody2D_set_angular_velocity(swigCPtr, angular_velocity);
  }

  public float get_angular_velocity() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_angular_velocity(swigCPtr);
    return ret;
  }

  public void set_max_contacts_reported(int amount) {
    GodotEnginePINVOKE.RigidBody2D_set_max_contacts_reported(swigCPtr, amount);
  }

  public int get_max_contacts_reported() {
    int ret = GodotEnginePINVOKE.RigidBody2D_get_max_contacts_reported(swigCPtr);
    return ret;
  }

  public void set_use_custom_integrator(bool enable) {
    GodotEnginePINVOKE.RigidBody2D_set_use_custom_integrator(swigCPtr, enable);
  }

  public bool is_using_custom_integrator() {
    bool ret = GodotEnginePINVOKE.RigidBody2D_is_using_custom_integrator(swigCPtr);
    return ret;
  }

  public void set_contact_monitor(bool enabled) {
    GodotEnginePINVOKE.RigidBody2D_set_contact_monitor(swigCPtr, enabled);
  }

  public bool is_contact_monitor_enabled() {
    bool ret = GodotEnginePINVOKE.RigidBody2D_is_contact_monitor_enabled(swigCPtr);
    return ret;
  }

  public void set_continuous_collision_detection_mode(int mode) {
    GodotEnginePINVOKE.RigidBody2D_set_continuous_collision_detection_mode(swigCPtr, mode);
  }

  public int get_continuous_collision_detection_mode() {
    int ret = GodotEnginePINVOKE.RigidBody2D_get_continuous_collision_detection_mode(swigCPtr);
    return ret;
  }

  public void set_axis_velocity(Vector2 axis_velocity) {
    GodotEnginePINVOKE.RigidBody2D_set_axis_velocity(swigCPtr, ref axis_velocity);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void apply_impulse(Vector2 offset, Vector2 impulse) {
    GodotEnginePINVOKE.RigidBody2D_apply_impulse(swigCPtr, ref offset, ref impulse);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_applied_force(Vector2 force) {
    GodotEnginePINVOKE.RigidBody2D_set_applied_force(swigCPtr, ref force);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_applied_force() {
    Vector2 ret = GodotEnginePINVOKE.RigidBody2D_get_applied_force(swigCPtr);
    return ret;
}

  public void set_applied_torque(float torque) {
    GodotEnginePINVOKE.RigidBody2D_set_applied_torque(swigCPtr, torque);
  }

  public float get_applied_torque() {
    float ret = GodotEnginePINVOKE.RigidBody2D_get_applied_torque(swigCPtr);
    return ret;
  }

  public void add_force(Vector2 offset, Vector2 force) {
    GodotEnginePINVOKE.RigidBody2D_add_force(swigCPtr, ref offset, ref force);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_sleeping(bool sleeping) {
    GodotEnginePINVOKE.RigidBody2D_set_sleeping(swigCPtr, sleeping);
  }

  public bool is_sleeping() {
    bool ret = GodotEnginePINVOKE.RigidBody2D_is_sleeping(swigCPtr);
    return ret;
  }

  public void set_can_sleep(bool able_to_sleep) {
    GodotEnginePINVOKE.RigidBody2D_set_can_sleep(swigCPtr, able_to_sleep);
  }

  public bool is_able_to_sleep() {
    bool ret = GodotEnginePINVOKE.RigidBody2D_is_able_to_sleep(swigCPtr);
    return ret;
  }

  public bool test_motion(Vector2 motion, float margin, Physics2DTestMotionResult result) {
    bool ret = GodotEnginePINVOKE.RigidBody2D_test_motion__SWIG_0(swigCPtr, ref motion, margin, Physics2DTestMotionResult.getCPtr(result));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool test_motion(Vector2 motion, float margin) {
    bool ret = GodotEnginePINVOKE.RigidBody2D_test_motion__SWIG_1(swigCPtr, ref motion, margin);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool test_motion(Vector2 motion) {
    bool ret = GodotEnginePINVOKE.RigidBody2D_test_motion__SWIG_2(swigCPtr, ref motion);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array get_colliding_bodies() {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.RigidBody2D_get_colliding_bodies(swigCPtr), true);
    return ret;
  }

  public RigidBody2D() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_RigidBody2D());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
