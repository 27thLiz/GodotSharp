/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Thread : Reference {
  public static readonly int PRIORITY_LOW = 0;
  public static readonly int PRIORITY_NORMAL = 1;
  public static readonly int PRIORITY_HIGH = 2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Thread(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Thread_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Thread(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Thread_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Thread obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Thread() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Thread(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int start(Object instance, string method, Variant userdata, int priority) {
    int ret = GodotEnginePINVOKE.Thread_start__SWIG_0(swigCPtr, Object.getCPtr(instance), method, Variant.getCPtr(userdata), priority);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int start(Object instance, string method, Variant userdata) {
    int ret = GodotEnginePINVOKE.Thread_start__SWIG_1(swigCPtr, Object.getCPtr(instance), method, Variant.getCPtr(userdata));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int start(Object instance, string method) {
    int ret = GodotEnginePINVOKE.Thread_start__SWIG_2(swigCPtr, Object.getCPtr(instance), method);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_id() {
    string ret = GodotEnginePINVOKE.Thread_get_id(swigCPtr);
    return ret;
  }

  public bool is_active() {
    bool ret = GodotEnginePINVOKE.Thread_is_active(swigCPtr);
    return ret;
  }

  public Variant wait_to_finish() {
    Variant ret = new Variant(GodotEnginePINVOKE.Thread_wait_to_finish(swigCPtr), true);
    return ret;
  }

  public Thread() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Thread());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
