/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Camera : Spatial {
  public static readonly int PROJECTION_PERSPECTIVE = 0;
  public static readonly int PROJECTION_ORTHOGONAL = 1;
  public static readonly int KEEP_WIDTH = 0;
  public static readonly int KEEP_HEIGHT = 1;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Camera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Camera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Camera(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Camera_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Camera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public SWIGTYPE_p_Vector3 project_ray_normal(Vector2 screen_point) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.Camera_project_ray_normal(swigCPtr, ref screen_point), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Vector3 project_local_ray_normal(Vector2 screen_point) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.Camera_project_local_ray_normal(swigCPtr, ref screen_point), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Vector3 project_ray_origin(Vector2 screen_point) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.Camera_project_ray_origin(swigCPtr, ref screen_point), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2 unproject_position(SWIGTYPE_p_Vector3 world_point) {
    Vector2 ret = GodotEnginePINVOKE.Camera_unproject_position(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(world_point));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public bool is_position_behind(SWIGTYPE_p_Vector3 world_point) {
    bool ret = GodotEnginePINVOKE.Camera_is_position_behind(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(world_point));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Vector3 project_position(Vector2 screen_point) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.Camera_project_position(swigCPtr, ref screen_point), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_perspective(float fov, float z_near, float z_far) {
    GodotEnginePINVOKE.Camera_set_perspective(swigCPtr, fov, z_near, z_far);
  }

  public void set_orthogonal(float size, float z_near, float z_far) {
    GodotEnginePINVOKE.Camera_set_orthogonal(swigCPtr, size, z_near, z_far);
  }

  public void make_current() {
    GodotEnginePINVOKE.Camera_make_current(swigCPtr);
  }

  public void clear_current() {
    GodotEnginePINVOKE.Camera_clear_current(swigCPtr);
  }

  public bool is_current() {
    bool ret = GodotEnginePINVOKE.Camera_is_current(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Transform get_camera_transform() {
    SWIGTYPE_p_Transform ret = new SWIGTYPE_p_Transform(GodotEnginePINVOKE.Camera_get_camera_transform(swigCPtr), true);
    return ret;
  }

  public float get_fov() {
    float ret = GodotEnginePINVOKE.Camera_get_fov(swigCPtr);
    return ret;
  }

  public float get_size() {
    float ret = GodotEnginePINVOKE.Camera_get_size(swigCPtr);
    return ret;
  }

  public float get_zfar() {
    float ret = GodotEnginePINVOKE.Camera_get_zfar(swigCPtr);
    return ret;
  }

  public float get_znear() {
    float ret = GodotEnginePINVOKE.Camera_get_znear(swigCPtr);
    return ret;
  }

  public int get_projection() {
    int ret = GodotEnginePINVOKE.Camera_get_projection(swigCPtr);
    return ret;
  }

  public void set_visible_layers(int mask) {
    GodotEnginePINVOKE.Camera_set_visible_layers(swigCPtr, mask);
  }

  public int get_visible_layers() {
    int ret = GodotEnginePINVOKE.Camera_get_visible_layers(swigCPtr);
    return ret;
  }

  public void set_environment(SWIGTYPE_p_RefT_Environment_t env) {
    GodotEnginePINVOKE.Camera_set_environment(swigCPtr, SWIGTYPE_p_RefT_Environment_t.getCPtr(env));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RefT_Environment_t get_environment() {
    SWIGTYPE_p_RefT_Environment_t ret = new SWIGTYPE_p_RefT_Environment_t(GodotEnginePINVOKE.Camera_get_environment(swigCPtr), true);
    return ret;
  }

  public void set_keep_aspect_mode(int mode) {
    GodotEnginePINVOKE.Camera_set_keep_aspect_mode(swigCPtr, mode);
  }

  public int get_keep_aspect_mode() {
    int ret = GodotEnginePINVOKE.Camera_get_keep_aspect_mode(swigCPtr);
    return ret;
  }

  public Camera() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Camera());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
