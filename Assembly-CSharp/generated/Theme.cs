/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Theme : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Theme(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Theme_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Theme(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Theme_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Theme obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Theme() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Theme(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_icon(string name, string type, Texture texture) {
    GodotEnginePINVOKE.Theme_set_icon(swigCPtr, name, type, Texture.getCPtr(texture));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Texture get_icon(string name, string type) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Theme_get_icon(swigCPtr, name, type);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public bool has_icon(string name, string type) {
    bool ret = GodotEnginePINVOKE.Theme_has_icon(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_icon(string name, string type) {
    GodotEnginePINVOKE.Theme_clear_icon(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_StringArray get_icon_list(string type) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_icon_list(swigCPtr, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_stylebox(string name, string type, StyleBox texture) {
    GodotEnginePINVOKE.Theme_set_stylebox(swigCPtr, name, type, StyleBox.getCPtr(texture));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public StyleBox get_stylebox(string name, string type) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Theme_get_stylebox(swigCPtr, name, type);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    StyleBox ret = InternalHelpers.UnmanagedGetManaged(cPtr) as StyleBox;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public bool has_stylebox(string name, string type) {
    bool ret = GodotEnginePINVOKE.Theme_has_stylebox(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_stylebox(string name, string type) {
    GodotEnginePINVOKE.Theme_clear_stylebox(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_StringArray get_stylebox_list(string type) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_stylebox_list(swigCPtr, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_StringArray get_stylebox_types() {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_stylebox_types(swigCPtr), true);
    return ret;
  }

  public void set_font(string name, string type, Font font) {
    GodotEnginePINVOKE.Theme_set_font(swigCPtr, name, type, Font.getCPtr(font));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Font get_font(string name, string type) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Theme_get_font(swigCPtr, name, type);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Font ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Font;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public bool has_font(string name, string type) {
    bool ret = GodotEnginePINVOKE.Theme_has_font(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_font(string name, string type) {
    GodotEnginePINVOKE.Theme_clear_font(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_StringArray get_font_list(string type) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_font_list(swigCPtr, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_color(string name, string type, SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.Theme_set_color(swigCPtr, name, type, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_color(string name, string type) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.Theme_get_color(swigCPtr, name, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_color(string name, string type) {
    bool ret = GodotEnginePINVOKE.Theme_has_color(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_color(string name, string type) {
    GodotEnginePINVOKE.Theme_clear_color(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_StringArray get_color_list(string type) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_color_list(swigCPtr, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_constant(string name, string type, int constant) {
    GodotEnginePINVOKE.Theme_set_constant(swigCPtr, name, type, constant);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_constant(string name, string type) {
    int ret = GodotEnginePINVOKE.Theme_get_constant(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_constant(string name, string type) {
    bool ret = GodotEnginePINVOKE.Theme_has_constant(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_constant(string name, string type) {
    GodotEnginePINVOKE.Theme_clear_constant(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_StringArray get_constant_list(string type) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_constant_list(swigCPtr, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_default_font(Object font) {
    GodotEnginePINVOKE.Theme_set_default_font(swigCPtr, Object.getCPtr(font));
  }

  public Object get_default_font() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Theme_get_default_font(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public SWIGTYPE_p_StringArray get_type_list(string type) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.Theme_get_type_list(swigCPtr, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void copy_default_theme() {
    GodotEnginePINVOKE.Theme_copy_default_theme(swigCPtr);
  }

  public Theme() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Theme());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
