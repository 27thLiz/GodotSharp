/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PhysicsServer : Object {
  private static PhysicsServer instance;
  public static readonly int JOINT_PIN = 0;
  public static readonly int JOINT_HINGE = 1;
  public static readonly int JOINT_SLIDER = 2;
  public static readonly int JOINT_CONE_TWIST = 3;
  public static readonly int JOINT_6DOF = 4;
  public static readonly int PIN_JOINT_BIAS = 0;
  public static readonly int PIN_JOINT_DAMPING = 1;
  public static readonly int PIN_JOINT_IMPULSE_CLAMP = 2;
  public static readonly int HINGE_JOINT_BIAS = 0;
  public static readonly int HINGE_JOINT_LIMIT_UPPER = 1;
  public static readonly int HINGE_JOINT_LIMIT_LOWER = 2;
  public static readonly int HINGE_JOINT_LIMIT_BIAS = 3;
  public static readonly int HINGE_JOINT_LIMIT_SOFTNESS = 4;
  public static readonly int HINGE_JOINT_LIMIT_RELAXATION = 5;
  public static readonly int HINGE_JOINT_MOTOR_TARGET_VELOCITY = 6;
  public static readonly int HINGE_JOINT_MOTOR_MAX_IMPULSE = 7;
  public static readonly int HINGE_JOINT_FLAG_USE_LIMIT = 0;
  public static readonly int HINGE_JOINT_FLAG_ENABLE_MOTOR = 1;
  public static readonly int SLIDER_JOINT_LINEAR_LIMIT_UPPER = 0;
  public static readonly int SLIDER_JOINT_LINEAR_LIMIT_LOWER = 1;
  public static readonly int SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS = 2;
  public static readonly int SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION = 3;
  public static readonly int SLIDER_JOINT_LINEAR_LIMIT_DAMPING = 4;
  public static readonly int SLIDER_JOINT_LINEAR_MOTION_SOFTNESS = 5;
  public static readonly int SLIDER_JOINT_LINEAR_MOTION_RESTITUTION = 6;
  public static readonly int SLIDER_JOINT_LINEAR_MOTION_DAMPING = 7;
  public static readonly int SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS = 8;
  public static readonly int SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION = 9;
  public static readonly int SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING = 10;
  public static readonly int SLIDER_JOINT_ANGULAR_LIMIT_UPPER = 11;
  public static readonly int SLIDER_JOINT_ANGULAR_LIMIT_LOWER = 12;
  public static readonly int SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS = 13;
  public static readonly int SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION = 14;
  public static readonly int SLIDER_JOINT_ANGULAR_LIMIT_DAMPING = 15;
  public static readonly int SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS = 16;
  public static readonly int SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION = 17;
  public static readonly int SLIDER_JOINT_ANGULAR_MOTION_DAMPING = 18;
  public static readonly int SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS = 19;
  public static readonly int SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION = 20;
  public static readonly int SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING = 21;
  public static readonly int SLIDER_JOINT_MAX = 22;
  public static readonly int CONE_TWIST_JOINT_SWING_SPAN = 0;
  public static readonly int CONE_TWIST_JOINT_TWIST_SPAN = 1;
  public static readonly int CONE_TWIST_JOINT_BIAS = 2;
  public static readonly int CONE_TWIST_JOINT_SOFTNESS = 3;
  public static readonly int CONE_TWIST_JOINT_RELAXATION = 4;
  public static readonly int G6DOF_JOINT_LINEAR_LOWER_LIMIT = 0;
  public static readonly int G6DOF_JOINT_LINEAR_UPPER_LIMIT = 1;
  public static readonly int G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS = 2;
  public static readonly int G6DOF_JOINT_LINEAR_RESTITUTION = 3;
  public static readonly int G6DOF_JOINT_LINEAR_DAMPING = 4;
  public static readonly int G6DOF_JOINT_ANGULAR_LOWER_LIMIT = 5;
  public static readonly int G6DOF_JOINT_ANGULAR_UPPER_LIMIT = 6;
  public static readonly int G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS = 7;
  public static readonly int G6DOF_JOINT_ANGULAR_DAMPING = 8;
  public static readonly int G6DOF_JOINT_ANGULAR_RESTITUTION = 9;
  public static readonly int G6DOF_JOINT_ANGULAR_FORCE_LIMIT = 10;
  public static readonly int G6DOF_JOINT_ANGULAR_ERP = 11;
  public static readonly int G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY = 12;
  public static readonly int G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT = 13;
  public static readonly int G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT = 0;
  public static readonly int G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT = 1;
  public static readonly int G6DOF_JOINT_FLAG_ENABLE_MOTOR = 2;
  public static readonly int SHAPE_PLANE = 0;
  public static readonly int SHAPE_RAY = 1;
  public static readonly int SHAPE_SPHERE = 2;
  public static readonly int SHAPE_BOX = 3;
  public static readonly int SHAPE_CAPSULE = 4;
  public static readonly int SHAPE_CONVEX_POLYGON = 5;
  public static readonly int SHAPE_CONCAVE_POLYGON = 6;
  public static readonly int SHAPE_HEIGHTMAP = 7;
  public static readonly int SHAPE_CUSTOM = 8;
  public static readonly int AREA_PARAM_GRAVITY = 0;
  public static readonly int AREA_PARAM_GRAVITY_VECTOR = 1;
  public static readonly int AREA_PARAM_GRAVITY_IS_POINT = 2;
  public static readonly int AREA_PARAM_GRAVITY_DISTANCE_SCALE = 3;
  public static readonly int AREA_PARAM_GRAVITY_POINT_ATTENUATION = 4;
  public static readonly int AREA_PARAM_LINEAR_DAMP = 5;
  public static readonly int AREA_PARAM_ANGULAR_DAMP = 6;
  public static readonly int AREA_PARAM_PRIORITY = 7;
  public static readonly int AREA_SPACE_OVERRIDE_DISABLED = 0;
  public static readonly int AREA_SPACE_OVERRIDE_COMBINE = 1;
  public static readonly int AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2;
  public static readonly int AREA_SPACE_OVERRIDE_REPLACE = 3;
  public static readonly int AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4;
  public static readonly int BODY_MODE_STATIC = 0;
  public static readonly int BODY_MODE_KINEMATIC = 1;
  public static readonly int BODY_MODE_RIGID = 2;
  public static readonly int BODY_MODE_CHARACTER = 3;
  public static readonly int BODY_PARAM_BOUNCE = 0;
  public static readonly int BODY_PARAM_FRICTION = 1;
  public static readonly int BODY_PARAM_MASS = 2;
  public static readonly int BODY_PARAM_GRAVITY_SCALE = 3;
  public static readonly int BODY_PARAM_ANGULAR_DAMP = 5;
  public static readonly int BODY_PARAM_LINEAR_DAMP = 4;
  public static readonly int BODY_PARAM_MAX = 6;
  public static readonly int BODY_STATE_TRANSFORM = 0;
  public static readonly int BODY_STATE_LINEAR_VELOCITY = 1;
  public static readonly int BODY_STATE_ANGULAR_VELOCITY = 2;
  public static readonly int BODY_STATE_SLEEPING = 3;
  public static readonly int BODY_STATE_CAN_SLEEP = 4;
  public static readonly int AREA_BODY_ADDED = 0;
  public static readonly int AREA_BODY_REMOVED = 1;
  public static readonly int INFO_ACTIVE_OBJECTS = 0;
  public static readonly int INFO_COLLISION_PAIRS = 1;
  public static readonly int INFO_ISLAND_COUNT = 2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PhysicsServer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PhysicsServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PhysicsServer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PhysicsServer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static PhysicsServer Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal PhysicsServer() {}


  public SWIGTYPE_p_RID shape_create(int type) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_shape_create(swigCPtr, type), true);
    return ret;
  }

  public void shape_set_data(SWIGTYPE_p_RID shape, Variant data) {
    GodotEnginePINVOKE.PhysicsServer_shape_set_data(swigCPtr, SWIGTYPE_p_RID.getCPtr(shape), Variant.getCPtr(data));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int shape_get_type(SWIGTYPE_p_RID shape) {
    int ret = GodotEnginePINVOKE.PhysicsServer_shape_get_type(swigCPtr, SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void shape_get_data(SWIGTYPE_p_RID shape) {
    GodotEnginePINVOKE.PhysicsServer_shape_get_data(swigCPtr, SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID space_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_space_create(swigCPtr), true);
    return ret;
  }

  public void space_set_active(SWIGTYPE_p_RID space, bool active) {
    GodotEnginePINVOKE.PhysicsServer_space_set_active(swigCPtr, SWIGTYPE_p_RID.getCPtr(space), active);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool space_is_active(SWIGTYPE_p_RID space) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_space_is_active(swigCPtr, SWIGTYPE_p_RID.getCPtr(space));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void space_set_param(SWIGTYPE_p_RID space, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_space_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(space), param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float space_get_param(SWIGTYPE_p_RID space, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_space_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(space), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PhysicsDirectSpaceState space_get_direct_state(SWIGTYPE_p_RID space) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PhysicsServer_space_get_direct_state(swigCPtr, SWIGTYPE_p_RID.getCPtr(space));
    PhysicsDirectSpaceState ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhysicsDirectSpaceState(cPtr, false);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID area_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_area_create(swigCPtr), true);
    return ret;
  }

  public void area_set_space(SWIGTYPE_p_RID area, SWIGTYPE_p_RID space) {
    GodotEnginePINVOKE.PhysicsServer_area_set_space(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), SWIGTYPE_p_RID.getCPtr(space));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID area_get_space(SWIGTYPE_p_RID area) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_area_get_space(swigCPtr, SWIGTYPE_p_RID.getCPtr(area)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void area_set_space_override_mode(SWIGTYPE_p_RID area, int mode) {
    GodotEnginePINVOKE.PhysicsServer_area_set_space_override_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), mode);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int area_get_space_override_mode(SWIGTYPE_p_RID area) {
    int ret = GodotEnginePINVOKE.PhysicsServer_area_get_space_override_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(area));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void area_add_shape(SWIGTYPE_p_RID area, SWIGTYPE_p_RID shape, SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.PhysicsServer_area_add_shape__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), SWIGTYPE_p_RID.getCPtr(shape), SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_add_shape(SWIGTYPE_p_RID area, SWIGTYPE_p_RID shape) {
    GodotEnginePINVOKE.PhysicsServer_area_add_shape__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_shape(SWIGTYPE_p_RID area, int shape_idx, SWIGTYPE_p_RID shape) {
    GodotEnginePINVOKE.PhysicsServer_area_set_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), shape_idx, SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_shape_transform(SWIGTYPE_p_RID area, int shape_idx, SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.PhysicsServer_area_set_shape_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), shape_idx, SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int area_get_shape_count(SWIGTYPE_p_RID area) {
    int ret = GodotEnginePINVOKE.PhysicsServer_area_get_shape_count(swigCPtr, SWIGTYPE_p_RID.getCPtr(area));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID area_get_shape(SWIGTYPE_p_RID area, int shape_idx) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_area_get_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), shape_idx), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Transform area_get_shape_transform(SWIGTYPE_p_RID area, int shape_idx) {
    SWIGTYPE_p_Transform ret = new SWIGTYPE_p_Transform(GodotEnginePINVOKE.PhysicsServer_area_get_shape_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), shape_idx), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void area_remove_shape(SWIGTYPE_p_RID area, int shape_idx) {
    GodotEnginePINVOKE.PhysicsServer_area_remove_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), shape_idx);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_clear_shapes(SWIGTYPE_p_RID area) {
    GodotEnginePINVOKE.PhysicsServer_area_clear_shapes(swigCPtr, SWIGTYPE_p_RID.getCPtr(area));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_layer_mask(SWIGTYPE_p_RID area, int mask) {
    GodotEnginePINVOKE.PhysicsServer_area_set_layer_mask(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), mask);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_collision_mask(SWIGTYPE_p_RID area, int mask) {
    GodotEnginePINVOKE.PhysicsServer_area_set_collision_mask(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), mask);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_param(SWIGTYPE_p_RID area, int param, Variant value) {
    GodotEnginePINVOKE.PhysicsServer_area_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), param, Variant.getCPtr(value));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_transform(SWIGTYPE_p_RID area, SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.PhysicsServer_area_set_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_get_param(SWIGTYPE_p_RID area, int param) {
    GodotEnginePINVOKE.PhysicsServer_area_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Transform area_get_transform(SWIGTYPE_p_RID area) {
    SWIGTYPE_p_Transform ret = new SWIGTYPE_p_Transform(GodotEnginePINVOKE.PhysicsServer_area_get_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(area)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void area_attach_object_instance_ID(SWIGTYPE_p_RID area, int id) {
    GodotEnginePINVOKE.PhysicsServer_area_attach_object_instance_ID(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), id);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int area_get_object_instance_ID(SWIGTYPE_p_RID area) {
    int ret = GodotEnginePINVOKE.PhysicsServer_area_get_object_instance_ID(swigCPtr, SWIGTYPE_p_RID.getCPtr(area));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void area_set_monitor_callback(SWIGTYPE_p_RID area, Object receiver, string method) {
    GodotEnginePINVOKE.PhysicsServer_area_set_monitor_callback(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), Object.getCPtr(receiver), method);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void area_set_ray_pickable(SWIGTYPE_p_RID area, bool enable) {
    GodotEnginePINVOKE.PhysicsServer_area_set_ray_pickable(swigCPtr, SWIGTYPE_p_RID.getCPtr(area), enable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool area_is_ray_pickable(SWIGTYPE_p_RID area) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_area_is_ray_pickable(swigCPtr, SWIGTYPE_p_RID.getCPtr(area));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID body_create(int mode, bool init_sleeping) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_body_create__SWIG_0(swigCPtr, mode, init_sleeping), true);
    return ret;
  }

  public SWIGTYPE_p_RID body_create(int mode) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_body_create__SWIG_1(swigCPtr, mode), true);
    return ret;
  }

  public SWIGTYPE_p_RID body_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_body_create__SWIG_2(swigCPtr), true);
    return ret;
  }

  public void body_set_space(SWIGTYPE_p_RID body, SWIGTYPE_p_RID space) {
    GodotEnginePINVOKE.PhysicsServer_body_set_space(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_RID.getCPtr(space));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID body_get_space(SWIGTYPE_p_RID body) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_body_get_space(swigCPtr, SWIGTYPE_p_RID.getCPtr(body)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_mode(SWIGTYPE_p_RID body, int mode) {
    GodotEnginePINVOKE.PhysicsServer_body_set_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), mode);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_mode(SWIGTYPE_p_RID body) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_layer_mask(SWIGTYPE_p_RID body, int mask) {
    GodotEnginePINVOKE.PhysicsServer_body_set_layer_mask(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), mask);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_layer_mask(SWIGTYPE_p_RID body, int arg1_) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_layer_mask(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_collision_mask(SWIGTYPE_p_RID body, int mask) {
    GodotEnginePINVOKE.PhysicsServer_body_set_collision_mask(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), mask);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_collision_mask(SWIGTYPE_p_RID body, int arg1_) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_collision_mask(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_add_shape(SWIGTYPE_p_RID body, SWIGTYPE_p_RID shape, SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.PhysicsServer_body_add_shape__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_RID.getCPtr(shape), SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_add_shape(SWIGTYPE_p_RID body, SWIGTYPE_p_RID shape) {
    GodotEnginePINVOKE.PhysicsServer_body_add_shape__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_shape(SWIGTYPE_p_RID body, int shape_idx, SWIGTYPE_p_RID shape) {
    GodotEnginePINVOKE.PhysicsServer_body_set_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), shape_idx, SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_shape_transform(SWIGTYPE_p_RID body, int shape_idx, SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.PhysicsServer_body_set_shape_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), shape_idx, SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_shape_count(SWIGTYPE_p_RID body) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_shape_count(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID body_get_shape(SWIGTYPE_p_RID body, int shape_idx) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_body_get_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), shape_idx), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Transform body_get_shape_transform(SWIGTYPE_p_RID body, int shape_idx) {
    SWIGTYPE_p_Transform ret = new SWIGTYPE_p_Transform(GodotEnginePINVOKE.PhysicsServer_body_get_shape_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), shape_idx), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_remove_shape(SWIGTYPE_p_RID body, int shape_idx) {
    GodotEnginePINVOKE.PhysicsServer_body_remove_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), shape_idx);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_clear_shapes(SWIGTYPE_p_RID body) {
    GodotEnginePINVOKE.PhysicsServer_body_clear_shapes(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_attach_object_instance_ID(SWIGTYPE_p_RID body, int id) {
    GodotEnginePINVOKE.PhysicsServer_body_attach_object_instance_ID(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), id);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_object_instance_ID(SWIGTYPE_p_RID body) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_object_instance_ID(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_enable_continuous_collision_detection(SWIGTYPE_p_RID body, bool enable) {
    GodotEnginePINVOKE.PhysicsServer_body_set_enable_continuous_collision_detection(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), enable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool body_is_continuous_collision_detection_enabled(SWIGTYPE_p_RID body) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_body_is_continuous_collision_detection_enabled(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_param(SWIGTYPE_p_RID body, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_body_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float body_get_param(SWIGTYPE_p_RID body, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_body_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_state(SWIGTYPE_p_RID body, int state, Variant value) {
    GodotEnginePINVOKE.PhysicsServer_body_set_state(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), state, Variant.getCPtr(value));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_get_state(SWIGTYPE_p_RID body, int state) {
    GodotEnginePINVOKE.PhysicsServer_body_get_state(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), state);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_apply_impulse(SWIGTYPE_p_RID body, SWIGTYPE_p_Vector3 pos, SWIGTYPE_p_Vector3 impulse) {
    GodotEnginePINVOKE.PhysicsServer_body_apply_impulse(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_Vector3.getCPtr(pos), SWIGTYPE_p_Vector3.getCPtr(impulse));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_axis_velocity(SWIGTYPE_p_RID body, SWIGTYPE_p_Vector3 axis_velocity) {
    GodotEnginePINVOKE.PhysicsServer_body_set_axis_velocity(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_Vector3.getCPtr(axis_velocity));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_axis_lock(SWIGTYPE_p_RID body, int axis) {
    GodotEnginePINVOKE.PhysicsServer_body_set_axis_lock(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), axis);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_axis_lock(SWIGTYPE_p_RID body) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_axis_lock(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_add_collision_exception(SWIGTYPE_p_RID body, SWIGTYPE_p_RID excepted_body) {
    GodotEnginePINVOKE.PhysicsServer_body_add_collision_exception(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_RID.getCPtr(excepted_body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_remove_collision_exception(SWIGTYPE_p_RID body, SWIGTYPE_p_RID excepted_body) {
    GodotEnginePINVOKE.PhysicsServer_body_remove_collision_exception(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), SWIGTYPE_p_RID.getCPtr(excepted_body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_max_contacts_reported(SWIGTYPE_p_RID body, int amount) {
    GodotEnginePINVOKE.PhysicsServer_body_set_max_contacts_reported(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), amount);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int body_get_max_contacts_reported(SWIGTYPE_p_RID body) {
    int ret = GodotEnginePINVOKE.PhysicsServer_body_get_max_contacts_reported(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_omit_force_integration(SWIGTYPE_p_RID body, bool enable) {
    GodotEnginePINVOKE.PhysicsServer_body_set_omit_force_integration(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), enable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool body_is_omitting_force_integration(SWIGTYPE_p_RID body) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_body_is_omitting_force_integration(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void body_set_force_integration_callback(SWIGTYPE_p_RID body, Object receiver, string method, Variant userdata) {
    GodotEnginePINVOKE.PhysicsServer_body_set_force_integration_callback__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), Object.getCPtr(receiver), method, Variant.getCPtr(userdata));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_force_integration_callback(SWIGTYPE_p_RID body, Object receiver, string method) {
    GodotEnginePINVOKE.PhysicsServer_body_set_force_integration_callback__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), Object.getCPtr(receiver), method);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void body_set_ray_pickable(SWIGTYPE_p_RID body, bool enable) {
    GodotEnginePINVOKE.PhysicsServer_body_set_ray_pickable(swigCPtr, SWIGTYPE_p_RID.getCPtr(body), enable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool body_is_ray_pickable(SWIGTYPE_p_RID body) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_body_is_ray_pickable(swigCPtr, SWIGTYPE_p_RID.getCPtr(body));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID joint_create_pin(SWIGTYPE_p_RID body_A, SWIGTYPE_p_Vector3 local_A, SWIGTYPE_p_RID body_B, SWIGTYPE_p_Vector3 local_B) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_joint_create_pin(swigCPtr, SWIGTYPE_p_RID.getCPtr(body_A), SWIGTYPE_p_Vector3.getCPtr(local_A), SWIGTYPE_p_RID.getCPtr(body_B), SWIGTYPE_p_Vector3.getCPtr(local_B)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void pin_joint_set_param(SWIGTYPE_p_RID joint, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_pin_joint_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float pin_joint_get_param(SWIGTYPE_p_RID joint, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_pin_joint_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void pin_joint_set_local_A(SWIGTYPE_p_RID joint, SWIGTYPE_p_Vector3 local_A) {
    GodotEnginePINVOKE.PhysicsServer_pin_joint_set_local_A(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), SWIGTYPE_p_Vector3.getCPtr(local_A));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector3 pin_joint_get_local_A(SWIGTYPE_p_RID joint) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.PhysicsServer_pin_joint_get_local_A(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void pin_joint_set_local_B(SWIGTYPE_p_RID joint, SWIGTYPE_p_Vector3 local_B) {
    GodotEnginePINVOKE.PhysicsServer_pin_joint_set_local_B(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), SWIGTYPE_p_Vector3.getCPtr(local_B));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector3 pin_joint_get_local_B(SWIGTYPE_p_RID joint) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.PhysicsServer_pin_joint_get_local_B(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID joint_create_hinge(SWIGTYPE_p_RID body_A, SWIGTYPE_p_Transform hinge_A, SWIGTYPE_p_RID body_B, SWIGTYPE_p_Transform hinge_B) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_joint_create_hinge(swigCPtr, SWIGTYPE_p_RID.getCPtr(body_A), SWIGTYPE_p_Transform.getCPtr(hinge_A), SWIGTYPE_p_RID.getCPtr(body_B), SWIGTYPE_p_Transform.getCPtr(hinge_B)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void hinge_joint_set_param(SWIGTYPE_p_RID joint, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_hinge_joint_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float hinge_joint_get_param(SWIGTYPE_p_RID joint, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_hinge_joint_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void hinge_joint_set_flag(SWIGTYPE_p_RID joint, int flag, bool enabled) {
    GodotEnginePINVOKE.PhysicsServer_hinge_joint_set_flag(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), flag, enabled);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hinge_joint_get_flag(SWIGTYPE_p_RID joint, int flag) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_hinge_joint_get_flag(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), flag);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID joint_create_slider(SWIGTYPE_p_RID body_A, SWIGTYPE_p_Transform local_ref_A, SWIGTYPE_p_RID body_B, SWIGTYPE_p_Transform local_ref_B) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_joint_create_slider(swigCPtr, SWIGTYPE_p_RID.getCPtr(body_A), SWIGTYPE_p_Transform.getCPtr(local_ref_A), SWIGTYPE_p_RID.getCPtr(body_B), SWIGTYPE_p_Transform.getCPtr(local_ref_B)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void slider_joint_set_param(SWIGTYPE_p_RID joint, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_slider_joint_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float slider_joint_get_param(SWIGTYPE_p_RID joint, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_slider_joint_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID joint_create_cone_twist(SWIGTYPE_p_RID body_A, SWIGTYPE_p_Transform local_ref_A, SWIGTYPE_p_RID body_B, SWIGTYPE_p_Transform local_ref_B) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_joint_create_cone_twist(swigCPtr, SWIGTYPE_p_RID.getCPtr(body_A), SWIGTYPE_p_Transform.getCPtr(local_ref_A), SWIGTYPE_p_RID.getCPtr(body_B), SWIGTYPE_p_Transform.getCPtr(local_ref_B)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void cone_twist_joint_set_param(SWIGTYPE_p_RID joint, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_cone_twist_joint_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float cone_twist_joint_get_param(SWIGTYPE_p_RID joint, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_cone_twist_joint_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int joint_get_type(SWIGTYPE_p_RID joint) {
    int ret = GodotEnginePINVOKE.PhysicsServer_joint_get_type(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void joint_set_solver_priority(SWIGTYPE_p_RID joint, int priority) {
    GodotEnginePINVOKE.PhysicsServer_joint_set_solver_priority(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), priority);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int joint_get_solver_priority(SWIGTYPE_p_RID joint) {
    int ret = GodotEnginePINVOKE.PhysicsServer_joint_get_solver_priority(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID joint_create_generic_6dof(SWIGTYPE_p_RID body_A, SWIGTYPE_p_Transform local_ref_A, SWIGTYPE_p_RID body_B, SWIGTYPE_p_Transform local_ref_B) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsServer_joint_create_generic_6dof(swigCPtr, SWIGTYPE_p_RID.getCPtr(body_A), SWIGTYPE_p_Transform.getCPtr(local_ref_A), SWIGTYPE_p_RID.getCPtr(body_B), SWIGTYPE_p_Transform.getCPtr(local_ref_B)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void generic_6dof_joint_set_param(SWIGTYPE_p_RID joint, int axis, int param, float value) {
    GodotEnginePINVOKE.PhysicsServer_generic_6dof_joint_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), axis, param, value);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float generic_6dof_joint_get_param(SWIGTYPE_p_RID joint, int axis, int param) {
    float ret = GodotEnginePINVOKE.PhysicsServer_generic_6dof_joint_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), axis, param);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void generic_6dof_joint_set_flag(SWIGTYPE_p_RID joint, int axis, int flag, bool enable) {
    GodotEnginePINVOKE.PhysicsServer_generic_6dof_joint_set_flag(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), axis, flag, enable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool generic_6dof_joint_get_flag(SWIGTYPE_p_RID joint, int axis, int flag) {
    bool ret = GodotEnginePINVOKE.PhysicsServer_generic_6dof_joint_get_flag(swigCPtr, SWIGTYPE_p_RID.getCPtr(joint), axis, flag);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void free_rid(SWIGTYPE_p_RID rid) {
    GodotEnginePINVOKE.PhysicsServer_free_rid(swigCPtr, SWIGTYPE_p_RID.getCPtr(rid));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_active(bool active) {
    GodotEnginePINVOKE.PhysicsServer_set_active(swigCPtr, active);
  }

  public int get_process_info(int process_info) {
    int ret = GodotEnginePINVOKE.PhysicsServer_get_process_info(swigCPtr, process_info);
    return ret;
  }

  private static PhysicsServer SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PhysicsServer_SingletonGetInstance();
    PhysicsServer ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhysicsServer(cPtr, false);
    return ret;
  }

}

}
