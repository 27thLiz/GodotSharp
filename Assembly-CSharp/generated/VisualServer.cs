/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class VisualServer : Object {
  private static VisualServer instance;
  public static readonly int NO_INDEX_ARRAY = -1;
  public static readonly int CUSTOM_ARRAY_SIZE = 8;
  public static readonly int ARRAY_WEIGHTS_SIZE = 4;
  public static readonly int MAX_PARTICLE_COLOR_PHASES = 4;
  public static readonly int MAX_PARTICLE_ATTRACTORS = 4;
  public static readonly int MAX_CURSORS = 8;
  public static readonly int TEXTURE_FLAG_MIPMAPS = 1;
  public static readonly int TEXTURE_FLAG_REPEAT = 2;
  public static readonly int TEXTURE_FLAG_FILTER = 4;
  public static readonly int TEXTURE_FLAG_CUBEMAP = 2048;
  public static readonly int TEXTURE_FLAGS_DEFAULT = 7;
  public static readonly int CUBEMAP_LEFT = 0;
  public static readonly int CUBEMAP_RIGHT = 1;
  public static readonly int CUBEMAP_BOTTOM = 2;
  public static readonly int CUBEMAP_TOP = 3;
  public static readonly int CUBEMAP_FRONT = 4;
  public static readonly int CUBEMAP_BACK = 5;
  public static readonly int SHADER_MATERIAL = 0;
  public static readonly int SHADER_POST_PROCESS = 2;
  public static readonly int MATERIAL_FLAG_VISIBLE = 0;
  public static readonly int MATERIAL_FLAG_DOUBLE_SIDED = 1;
  public static readonly int MATERIAL_FLAG_INVERT_FACES = 2;
  public static readonly int MATERIAL_FLAG_UNSHADED = 3;
  public static readonly int MATERIAL_FLAG_ONTOP = 4;
  public static readonly int MATERIAL_FLAG_MAX = 7;
  public static readonly int MATERIAL_BLEND_MODE_MIX = 0;
  public static readonly int MATERIAL_BLEND_MODE_ADD = 1;
  public static readonly int MATERIAL_BLEND_MODE_SUB = 2;
  public static readonly int MATERIAL_BLEND_MODE_MUL = 3;
  public static readonly int FIXED_MATERIAL_PARAM_DIFFUSE = 0;
  public static readonly int FIXED_MATERIAL_PARAM_DETAIL = 1;
  public static readonly int FIXED_MATERIAL_PARAM_SPECULAR = 2;
  public static readonly int FIXED_MATERIAL_PARAM_EMISSION = 3;
  public static readonly int FIXED_MATERIAL_PARAM_SPECULAR_EXP = 4;
  public static readonly int FIXED_MATERIAL_PARAM_GLOW = 5;
  public static readonly int FIXED_MATERIAL_PARAM_NORMAL = 6;
  public static readonly int FIXED_MATERIAL_PARAM_SHADE_PARAM = 7;
  public static readonly int FIXED_MATERIAL_PARAM_MAX = 8;
  public static readonly int FIXED_MATERIAL_TEXCOORD_SPHERE = 3;
  public static readonly int FIXED_MATERIAL_TEXCOORD_UV = 0;
  public static readonly int FIXED_MATERIAL_TEXCOORD_UV_TRANSFORM = 1;
  public static readonly int FIXED_MATERIAL_TEXCOORD_UV2 = 2;
  public static readonly int ARRAY_VERTEX = 0;
  public static readonly int ARRAY_NORMAL = 1;
  public static readonly int ARRAY_TANGENT = 2;
  public static readonly int ARRAY_COLOR = 3;
  public static readonly int ARRAY_TEX_UV = 4;
  public static readonly int ARRAY_BONES = 6;
  public static readonly int ARRAY_WEIGHTS = 7;
  public static readonly int ARRAY_INDEX = 8;
  public static readonly int ARRAY_MAX = 9;
  public static readonly int ARRAY_FORMAT_VERTEX = 1;
  public static readonly int ARRAY_FORMAT_NORMAL = 2;
  public static readonly int ARRAY_FORMAT_TANGENT = 4;
  public static readonly int ARRAY_FORMAT_COLOR = 8;
  public static readonly int ARRAY_FORMAT_TEX_UV = 16;
  public static readonly int ARRAY_FORMAT_BONES = 64;
  public static readonly int ARRAY_FORMAT_WEIGHTS = 128;
  public static readonly int ARRAY_FORMAT_INDEX = 256;
  public static readonly int PRIMITIVE_POINTS = 0;
  public static readonly int PRIMITIVE_LINES = 1;
  public static readonly int PRIMITIVE_LINE_STRIP = 2;
  public static readonly int PRIMITIVE_LINE_LOOP = 3;
  public static readonly int PRIMITIVE_TRIANGLES = 4;
  public static readonly int PRIMITIVE_TRIANGLE_STRIP = 5;
  public static readonly int PRIMITIVE_TRIANGLE_FAN = 6;
  public static readonly int PRIMITIVE_MAX = 7;
  public static readonly int PARTICLE_LIFETIME = 0;
  public static readonly int PARTICLE_SPREAD = 1;
  public static readonly int PARTICLE_GRAVITY = 2;
  public static readonly int PARTICLE_LINEAR_VELOCITY = 3;
  public static readonly int PARTICLE_ANGULAR_VELOCITY = 4;
  public static readonly int PARTICLE_LINEAR_ACCELERATION = 5;
  public static readonly int PARTICLE_RADIAL_ACCELERATION = 6;
  public static readonly int PARTICLE_TANGENTIAL_ACCELERATION = 7;
  public static readonly int PARTICLE_INITIAL_SIZE = 9;
  public static readonly int PARTICLE_FINAL_SIZE = 10;
  public static readonly int PARTICLE_INITIAL_ANGLE = 11;
  public static readonly int PARTICLE_HEIGHT = 12;
  public static readonly int PARTICLE_HEIGHT_SPEED_SCALE = 13;
  public static readonly int PARTICLE_VAR_MAX = 14;
  public static readonly int LIGHT_DIRECTIONAL = 0;
  public static readonly int LIGHT_OMNI = 1;
  public static readonly int LIGHT_SPOT = 2;
  public static readonly int LIGHT_COLOR_DIFFUSE = 0;
  public static readonly int LIGHT_COLOR_SPECULAR = 1;
  public static readonly int LIGHT_PARAM_SPOT_ATTENUATION = 0;
  public static readonly int LIGHT_PARAM_SPOT_ANGLE = 1;
  public static readonly int LIGHT_PARAM_RADIUS = 2;
  public static readonly int LIGHT_PARAM_ENERGY = 3;
  public static readonly int LIGHT_PARAM_ATTENUATION = 4;
  public static readonly int LIGHT_PARAM_MAX = 10;
  public static readonly int SCENARIO_DEBUG_DISABLED = 0;
  public static readonly int SCENARIO_DEBUG_WIREFRAME = 1;
  public static readonly int SCENARIO_DEBUG_OVERDRAW = 2;
  public static readonly int INSTANCE_MESH = 1;
  public static readonly int INSTANCE_MULTIMESH = 2;
  public static readonly int INSTANCE_PARTICLES = 4;
  public static readonly int INSTANCE_LIGHT = 5;
  public static readonly int INSTANCE_ROOM = 6;
  public static readonly int INSTANCE_PORTAL = 7;
  public static readonly int INSTANCE_GEOMETRY_MASK = 30;
  public static readonly int INFO_OBJECTS_IN_FRAME = 0;
  public static readonly int INFO_VERTICES_IN_FRAME = 1;
  public static readonly int INFO_MATERIAL_CHANGES_IN_FRAME = 2;
  public static readonly int INFO_SHADER_CHANGES_IN_FRAME = 3;
  public static readonly int INFO_SURFACE_CHANGES_IN_FRAME = 4;
  public static readonly int INFO_DRAW_CALLS_IN_FRAME = 5;
  public static readonly int INFO_USAGE_VIDEO_MEM_TOTAL = 6;
  public static readonly int INFO_VIDEO_MEM_USED = 7;
  public static readonly int INFO_TEXTURE_MEM_USED = 8;
  public static readonly int INFO_VERTEX_MEM_USED = 9;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal VisualServer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.VisualServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected VisualServer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.VisualServer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VisualServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static VisualServer Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal VisualServer() {}


  public SWIGTYPE_p_RID texture_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_texture_create(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_RID texture_create_from_image(SWIGTYPE_p_Image arg0_, int arg1_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_texture_create_from_image__SWIG_0(swigCPtr, SWIGTYPE_p_Image.getCPtr(arg0_), arg1_), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID texture_create_from_image(SWIGTYPE_p_Image arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_texture_create_from_image__SWIG_1(swigCPtr, SWIGTYPE_p_Image.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void texture_set_flags(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_texture_set_flags(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int texture_get_flags(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_texture_get_flags(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int texture_get_width(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_texture_get_width(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int texture_get_height(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_texture_get_height(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void texture_set_shrink_all_x2_on_set_data(bool shrink) {
    GodotEnginePINVOKE.VisualServer_texture_set_shrink_all_x2_on_set_data(swigCPtr, shrink);
  }

  public SWIGTYPE_p_RID shader_create(int mode) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_shader_create__SWIG_0(swigCPtr, mode), true);
    return ret;
  }

  public SWIGTYPE_p_RID shader_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_shader_create__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void shader_set_mode(SWIGTYPE_p_RID shader, int mode) {
    GodotEnginePINVOKE.VisualServer_shader_set_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(shader), mode);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID material_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_material_create(swigCPtr), true);
    return ret;
  }

  public void material_set_shader(SWIGTYPE_p_RID shader, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_material_set_shader(swigCPtr, SWIGTYPE_p_RID.getCPtr(shader), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID material_get_shader(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_material_get_shader(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void material_set_param(SWIGTYPE_p_RID arg0_, string arg1_, Variant arg2_) {
    GodotEnginePINVOKE.VisualServer_material_set_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, Variant.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void material_get_param(SWIGTYPE_p_RID arg0_, string arg1_) {
    GodotEnginePINVOKE.VisualServer_material_get_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void material_set_flag(SWIGTYPE_p_RID arg0_, int arg1_, bool arg2_) {
    GodotEnginePINVOKE.VisualServer_material_set_flag(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool material_get_flag(SWIGTYPE_p_RID arg0_, int arg1_) {
    bool ret = GodotEnginePINVOKE.VisualServer_material_get_flag(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void material_set_blend_mode(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_material_set_blend_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int material_get_blend_mode(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_material_get_blend_mode(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void material_set_line_width(SWIGTYPE_p_RID arg0_, float arg1_) {
    GodotEnginePINVOKE.VisualServer_material_set_line_width(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float material_get_line_width(SWIGTYPE_p_RID arg0_) {
    float ret = GodotEnginePINVOKE.VisualServer_material_get_line_width(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID mesh_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_mesh_create(swigCPtr), true);
    return ret;
  }

  public void mesh_add_surface(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_Array arg2_, SWIGTYPE_p_Array arg3_, bool arg4_) {
    GodotEnginePINVOKE.VisualServer_mesh_add_surface__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_Array.getCPtr(arg2_), SWIGTYPE_p_Array.getCPtr(arg3_), arg4_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void mesh_add_surface(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_Array arg2_, SWIGTYPE_p_Array arg3_) {
    GodotEnginePINVOKE.VisualServer_mesh_add_surface__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_Array.getCPtr(arg2_), SWIGTYPE_p_Array.getCPtr(arg3_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void mesh_surface_set_material(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_RID arg2_, bool arg3_) {
    GodotEnginePINVOKE.VisualServer_mesh_surface_set_material__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), arg3_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void mesh_surface_set_material(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_RID arg2_) {
    GodotEnginePINVOKE.VisualServer_mesh_surface_set_material__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_RID.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID mesh_surface_get_material(SWIGTYPE_p_RID arg0_, int arg1_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_mesh_surface_get_material(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int mesh_surface_get_array_len(SWIGTYPE_p_RID arg0_, int arg1_) {
    int ret = GodotEnginePINVOKE.VisualServer_mesh_surface_get_array_len(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int mesh_surface_get_array_index_len(SWIGTYPE_p_RID arg0_, int arg1_) {
    int ret = GodotEnginePINVOKE.VisualServer_mesh_surface_get_array_index_len(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int mesh_surface_get_format(SWIGTYPE_p_RID arg0_, int arg1_) {
    int ret = GodotEnginePINVOKE.VisualServer_mesh_surface_get_format(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int mesh_surface_get_primitive_type(SWIGTYPE_p_RID arg0_, int arg1_) {
    int ret = GodotEnginePINVOKE.VisualServer_mesh_surface_get_primitive_type(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void mesh_remove_surface(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_mesh_remove_surface(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int mesh_get_surface_count(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_mesh_get_surface_count(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID multimesh_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_multimesh_create(swigCPtr), true);
    return ret;
  }

  public void multimesh_set_mesh(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_multimesh_set_mesh(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void multimesh_set_aabb(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_AABB arg1_) {
    GodotEnginePINVOKE.VisualServer_multimesh_set_aabb(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_AABB.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void multimesh_instance_set_transform(SWIGTYPE_p_RID arg0_, int arg1_, Transform arg2_) {
    GodotEnginePINVOKE.VisualServer_multimesh_instance_set_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, ref arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void multimesh_instance_set_color(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_Color arg2_) {
    GodotEnginePINVOKE.VisualServer_multimesh_instance_set_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_Color.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID multimesh_get_mesh(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_multimesh_get_mesh(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_AABB multimesh_get_aabb(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_AABB arg1_) {
    SWIGTYPE_p_AABB ret = new SWIGTYPE_p_AABB(GodotEnginePINVOKE.VisualServer_multimesh_get_aabb(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_AABB.getCPtr(arg1_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Transform multimesh_instance_get_transform(SWIGTYPE_p_RID arg0_, int arg1_) {
    Transform ret = GodotEnginePINVOKE.VisualServer_multimesh_instance_get_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public SWIGTYPE_p_Color multimesh_instance_get_color(SWIGTYPE_p_RID arg0_, int arg1_) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.VisualServer_multimesh_instance_get_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID particles_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_particles_create(swigCPtr), true);
    return ret;
  }

  public void particles_set_amount(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_amount(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int particles_get_amount(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_particles_get_amount(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_emitting(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_emitting(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool particles_is_emitting(SWIGTYPE_p_RID arg0_) {
    bool ret = GodotEnginePINVOKE.VisualServer_particles_is_emitting(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_visibility_aabb(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_AABB arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_visibility_aabb(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_AABB.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_AABB particles_get_visibility_aabb(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_AABB ret = new SWIGTYPE_p_AABB(GodotEnginePINVOKE.VisualServer_particles_get_visibility_aabb(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_variable(SWIGTYPE_p_RID arg0_, int arg1_, float arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_variable(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float particles_get_variable(SWIGTYPE_p_RID arg0_, int arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_particles_get_variable(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_randomness(SWIGTYPE_p_RID arg0_, int arg1_, float arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_randomness(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float particles_get_randomness(SWIGTYPE_p_RID arg0_, int arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_particles_get_randomness(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_color_phases(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_color_phases(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int particles_get_color_phases(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_particles_get_color_phases(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_color_phase_pos(SWIGTYPE_p_RID arg0_, int arg1_, float arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_color_phase_pos(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float particles_get_color_phase_pos(SWIGTYPE_p_RID arg0_, int arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_particles_get_color_phase_pos(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_color_phase_color(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_Color arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_color_phase_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_Color.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color particles_get_color_phase_color(SWIGTYPE_p_RID arg0_, int arg1_) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.VisualServer_particles_get_color_phase_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_attractors(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_attractors(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int particles_get_attractors(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_particles_get_attractors(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_attractor_pos(SWIGTYPE_p_RID arg0_, int arg1_, Vector3 arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_attractor_pos(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, ref arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 particles_get_attractor_pos(SWIGTYPE_p_RID arg0_, int arg1_) {
    Vector3 ret = GodotEnginePINVOKE.VisualServer_particles_get_attractor_pos(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public void particles_set_attractor_strength(SWIGTYPE_p_RID arg0_, int arg1_, float arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_attractor_strength(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float particles_get_attractor_strength(SWIGTYPE_p_RID arg0_, int arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_particles_get_attractor_strength(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void particles_set_material(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_, bool arg2_) {
    GodotEnginePINVOKE.VisualServer_particles_set_material__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_), arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void particles_set_material(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_material__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void particles_set_height_from_velocity(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_particles_set_height_from_velocity(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool particles_has_height_from_velocity(SWIGTYPE_p_RID arg0_) {
    bool ret = GodotEnginePINVOKE.VisualServer_particles_has_height_from_velocity(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID light_create(int arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_light_create(swigCPtr, arg0_), true);
    return ret;
  }

  public int light_get_type(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_light_get_type(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void light_set_color(SWIGTYPE_p_RID arg0_, int arg1_, SWIGTYPE_p_Color arg2_) {
    GodotEnginePINVOKE.VisualServer_light_set_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, SWIGTYPE_p_Color.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color light_get_color(SWIGTYPE_p_RID arg0_, int arg1_) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.VisualServer_light_get_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void light_set_shadow(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_light_set_shadow(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool light_has_shadow(SWIGTYPE_p_RID arg0_) {
    bool ret = GodotEnginePINVOKE.VisualServer_light_has_shadow(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void light_set_volumetric(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_light_set_volumetric(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool light_is_volumetric(SWIGTYPE_p_RID arg0_) {
    bool ret = GodotEnginePINVOKE.VisualServer_light_is_volumetric(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void light_set_projector(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_light_set_projector(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID light_get_projector(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_light_get_projector(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void light_set_var(SWIGTYPE_p_RID arg0_, int arg1_, float arg2_) {
    GodotEnginePINVOKE.VisualServer_light_set_var(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float light_get_var(SWIGTYPE_p_RID arg0_, int arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_light_get_var(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID skeleton_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_skeleton_create(swigCPtr), true);
    return ret;
  }

  public void skeleton_resize(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_skeleton_resize(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int skeleton_get_bone_count(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_skeleton_get_bone_count(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void skeleton_bone_set_transform(SWIGTYPE_p_RID arg0_, int arg1_, Transform arg2_) {
    GodotEnginePINVOKE.VisualServer_skeleton_bone_set_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, ref arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Transform skeleton_bone_get_transform(SWIGTYPE_p_RID arg0_, int arg1_) {
    Transform ret = GodotEnginePINVOKE.VisualServer_skeleton_bone_get_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public SWIGTYPE_p_RID room_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_room_create(swigCPtr), true);
    return ret;
  }

  public void room_set_bounds(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_Dictionary arg1_) {
    GodotEnginePINVOKE.VisualServer_room_set_bounds(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_Dictionary.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Dictionary room_get_bounds(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.VisualServer_room_get_bounds(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID portal_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_portal_create(swigCPtr), true);
    return ret;
  }

  public void portal_set_shape(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_Vector2Array arg1_) {
    GodotEnginePINVOKE.VisualServer_portal_set_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_Vector2Array.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector2Array portal_get_shape(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_Vector2Array ret = new SWIGTYPE_p_Vector2Array(GodotEnginePINVOKE.VisualServer_portal_get_shape(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void portal_set_enabled(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_portal_set_enabled(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool portal_is_enabled(SWIGTYPE_p_RID arg0_) {
    bool ret = GodotEnginePINVOKE.VisualServer_portal_is_enabled(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void portal_set_disable_distance(SWIGTYPE_p_RID arg0_, float arg1_) {
    GodotEnginePINVOKE.VisualServer_portal_set_disable_distance(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float portal_get_disable_distance(SWIGTYPE_p_RID arg0_) {
    float ret = GodotEnginePINVOKE.VisualServer_portal_get_disable_distance(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void portal_set_disabled_color(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_Color arg1_) {
    GodotEnginePINVOKE.VisualServer_portal_set_disabled_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_Color.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color portal_get_disabled_color(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.VisualServer_portal_get_disabled_color(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID camera_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_camera_create(swigCPtr), true);
    return ret;
  }

  public void camera_set_perspective(SWIGTYPE_p_RID arg0_, float arg1_, float arg2_, float arg3_) {
    GodotEnginePINVOKE.VisualServer_camera_set_perspective(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_, arg3_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void camera_set_orthogonal(SWIGTYPE_p_RID arg0_, float arg1_, float arg2_, float arg3_) {
    GodotEnginePINVOKE.VisualServer_camera_set_orthogonal(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, arg2_, arg3_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void camera_set_transform(SWIGTYPE_p_RID arg0_, Transform arg1_) {
    GodotEnginePINVOKE.VisualServer_camera_set_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID viewport_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_viewport_create(swigCPtr), true);
    return ret;
  }

  public void viewport_set_rect(SWIGTYPE_p_RID arg0_, Rect2 arg1_) {
    GodotEnginePINVOKE.VisualServer_viewport_set_rect(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Rect2 viewport_get_rect(SWIGTYPE_p_RID arg0_) {
    Rect2 ret = GodotEnginePINVOKE.VisualServer_viewport_get_rect(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public void viewport_attach_camera(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_viewport_attach_camera__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void viewport_attach_camera(SWIGTYPE_p_RID arg0_) {
    GodotEnginePINVOKE.VisualServer_viewport_attach_camera__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID viewport_get_attached_camera(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_viewport_get_attached_camera(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID viewport_get_scenario(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_viewport_get_scenario(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void viewport_attach_canvas(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_viewport_attach_canvas(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void viewport_remove_canvas(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_viewport_remove_canvas(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void viewport_set_global_canvas_transform(SWIGTYPE_p_RID arg0_, Matrix32 arg1_) {
    GodotEnginePINVOKE.VisualServer_viewport_set_global_canvas_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID scenario_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_scenario_create(swigCPtr), true);
    return ret;
  }

  public void scenario_set_debug(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_scenario_set_debug(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID instance_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_create(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_RID instance_get_base(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_get_base(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID instance_get_base_aabb(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_get_base_aabb(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void instance_set_transform(SWIGTYPE_p_RID arg0_, Transform arg1_) {
    GodotEnginePINVOKE.VisualServer_instance_set_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Transform instance_get_transform(SWIGTYPE_p_RID arg0_) {
    Transform ret = GodotEnginePINVOKE.VisualServer_instance_get_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public void instance_attach_object_instance_ID(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_instance_attach_object_instance_ID(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int instance_get_object_instance_ID(SWIGTYPE_p_RID arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_instance_get_object_instance_ID(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void instance_attach_skeleton(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_instance_attach_skeleton(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID instance_get_skeleton(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_get_skeleton(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void instance_set_room(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_instance_set_room(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID instance_get_room(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_get_room(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void instance_set_exterior(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_instance_set_exterior(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool instance_is_exterior(SWIGTYPE_p_RID arg0_) {
    bool ret = GodotEnginePINVOKE.VisualServer_instance_is_exterior(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array instances_cull_aabb(SWIGTYPE_p_AABB arg0_, SWIGTYPE_p_RID arg1_) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.VisualServer_instances_cull_aabb(swigCPtr, SWIGTYPE_p_AABB.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array instances_cull_ray(Vector3 arg0_, Vector3 arg1_, SWIGTYPE_p_RID arg2_) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.VisualServer_instances_cull_ray(swigCPtr, ref arg0_, ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Array instances_cull_convex(SWIGTYPE_p_Array arg0_, SWIGTYPE_p_RID arg1_) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.VisualServer_instances_cull_convex(swigCPtr, SWIGTYPE_p_Array.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID instance_geometry_override_material_param(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_geometry_override_material_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID instance_geometry_get_material_param(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_instance_geometry_get_material_param(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RID get_test_cube() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_get_test_cube(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_RID canvas_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_canvas_create(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_RID canvas_item_create() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_canvas_item_create(swigCPtr), true);
    return ret;
  }

  public void canvas_item_set_parent(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_parent(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID canvas_item_get_parent(SWIGTYPE_p_RID arg0_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_canvas_item_get_parent(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_)), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void canvas_item_set_transform(SWIGTYPE_p_RID arg0_, Matrix32 arg1_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_set_custom_rect(SWIGTYPE_p_RID arg0_, bool arg1_, Rect2 arg2_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_custom_rect(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_, ref arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_set_clip(SWIGTYPE_p_RID arg0_, bool arg1_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_clip(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_set_opacity(SWIGTYPE_p_RID arg0_, float arg1_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_opacity(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float canvas_item_get_opacity(SWIGTYPE_p_RID arg0_, float arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_canvas_item_get_opacity(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void canvas_item_set_self_opacity(SWIGTYPE_p_RID arg0_, float arg1_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_self_opacity(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float canvas_item_get_self_opacity(SWIGTYPE_p_RID arg0_, float arg1_) {
    float ret = GodotEnginePINVOKE.VisualServer_canvas_item_get_self_opacity(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void canvas_item_set_z(SWIGTYPE_p_RID arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_set_z(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_line(SWIGTYPE_p_RID arg0_, Vector2 arg1_, Vector2 arg2_, SWIGTYPE_p_Color arg3_, float arg4_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_line__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, ref arg2_, SWIGTYPE_p_Color.getCPtr(arg3_), arg4_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_line(SWIGTYPE_p_RID arg0_, Vector2 arg1_, Vector2 arg2_, SWIGTYPE_p_Color arg3_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_line__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, ref arg2_, SWIGTYPE_p_Color.getCPtr(arg3_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_rect(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_Color arg2_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_rect(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_Color.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_texture_rect(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_RID arg2_, bool arg3_, SWIGTYPE_p_Color arg4_, bool arg5_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_texture_rect__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), arg3_, SWIGTYPE_p_Color.getCPtr(arg4_), arg5_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_texture_rect(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_RID arg2_, bool arg3_, SWIGTYPE_p_Color arg4_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_texture_rect__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), arg3_, SWIGTYPE_p_Color.getCPtr(arg4_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_texture_rect(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_RID arg2_, bool arg3_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_texture_rect__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), arg3_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_texture_rect_region(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_RID arg2_, Rect2 arg3_, SWIGTYPE_p_Color arg4_, bool arg5_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_texture_rect_region__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), ref arg3_, SWIGTYPE_p_Color.getCPtr(arg4_), arg5_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_texture_rect_region(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_RID arg2_, Rect2 arg3_, SWIGTYPE_p_Color arg4_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_texture_rect_region__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), ref arg3_, SWIGTYPE_p_Color.getCPtr(arg4_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_texture_rect_region(SWIGTYPE_p_RID arg0_, Rect2 arg1_, SWIGTYPE_p_RID arg2_, Rect2 arg3_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_texture_rect_region__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, SWIGTYPE_p_RID.getCPtr(arg2_), ref arg3_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_style_box(SWIGTYPE_p_RID arg0_, Rect2 arg1_, Rect2 arg2_, SWIGTYPE_p_RID arg3_, SWIGTYPE_p_RealArray arg4_, SWIGTYPE_p_Color arg5_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_style_box__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, ref arg2_, SWIGTYPE_p_RID.getCPtr(arg3_), SWIGTYPE_p_RealArray.getCPtr(arg4_), SWIGTYPE_p_Color.getCPtr(arg5_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_style_box(SWIGTYPE_p_RID arg0_, Rect2 arg1_, Rect2 arg2_, SWIGTYPE_p_RID arg3_, SWIGTYPE_p_RealArray arg4_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_style_box__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, ref arg2_, SWIGTYPE_p_RID.getCPtr(arg3_), SWIGTYPE_p_RealArray.getCPtr(arg4_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_add_circle(SWIGTYPE_p_RID arg0_, Vector2 arg1_, float arg2_, SWIGTYPE_p_Color arg3_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_add_circle(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, arg2_, SWIGTYPE_p_Color.getCPtr(arg3_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void viewport_set_canvas_transform(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_RID arg1_, Matrix32 arg2_) {
    GodotEnginePINVOKE.VisualServer_viewport_set_canvas_transform(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_RID.getCPtr(arg1_), ref arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_clear(SWIGTYPE_p_RID arg0_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_clear(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void canvas_item_raise(SWIGTYPE_p_RID arg0_) {
    GodotEnginePINVOKE.VisualServer_canvas_item_raise(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void cursor_set_rotation(float arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_cursor_set_rotation(swigCPtr, arg0_, arg1_);
  }

  public void cursor_set_texture(SWIGTYPE_p_RID arg0_, Vector2 arg1_, int arg2_) {
    GodotEnginePINVOKE.VisualServer_cursor_set_texture(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), ref arg1_, arg2_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void cursor_set_visible(bool arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_cursor_set_visible(swigCPtr, arg0_, arg1_);
  }

  public void cursor_set_pos(Vector2 arg0_, int arg1_) {
    GodotEnginePINVOKE.VisualServer_cursor_set_pos(swigCPtr, ref arg0_, arg1_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void black_bars_set_margins(int left, int top, int right, int bottom) {
    GodotEnginePINVOKE.VisualServer_black_bars_set_margins(swigCPtr, left, top, right, bottom);
  }

  public void black_bars_set_images(SWIGTYPE_p_RID left, SWIGTYPE_p_RID top, SWIGTYPE_p_RID right, SWIGTYPE_p_RID bottom) {
    GodotEnginePINVOKE.VisualServer_black_bars_set_images(swigCPtr, SWIGTYPE_p_RID.getCPtr(left), SWIGTYPE_p_RID.getCPtr(top), SWIGTYPE_p_RID.getCPtr(right), SWIGTYPE_p_RID.getCPtr(bottom));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID make_sphere_mesh(int arg0_, int arg1_, float arg2_) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.VisualServer_make_sphere_mesh(swigCPtr, arg0_, arg1_, arg2_), true);
    return ret;
  }

  public void mesh_add_surface_from_planes(SWIGTYPE_p_RID arg0_, SWIGTYPE_p_Array arg1_) {
    GodotEnginePINVOKE.VisualServer_mesh_add_surface_from_planes(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_), SWIGTYPE_p_Array.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw() {
    GodotEnginePINVOKE.VisualServer_draw(swigCPtr);
  }

  public void sync() {
    GodotEnginePINVOKE.VisualServer_sync(swigCPtr);
  }

  public void free_rid(SWIGTYPE_p_RID arg0_) {
    GodotEnginePINVOKE.VisualServer_free_rid(swigCPtr, SWIGTYPE_p_RID.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_default_clear_color(SWIGTYPE_p_Color arg0_) {
    GodotEnginePINVOKE.VisualServer_set_default_clear_color(swigCPtr, SWIGTYPE_p_Color.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_render_info(int arg0_) {
    int ret = GodotEnginePINVOKE.VisualServer_get_render_info(swigCPtr, arg0_);
    return ret;
  }

  private static VisualServer SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.VisualServer_SingletonGetInstance();
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    VisualServer ret = InternalHelpers.UnmanagedGetManaged(cPtr) as VisualServer;
    return ret;
  }

}

}
