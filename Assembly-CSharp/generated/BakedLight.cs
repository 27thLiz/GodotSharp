/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class BakedLight : Resource {
  public static readonly int MODE_OCTREE = 0;
  public static readonly int MODE_LIGHTMAPS = 1;
  public static readonly int BAKE_DIFFUSE = 0;
  public static readonly int BAKE_SPECULAR = 1;
  public static readonly int BAKE_TRANSLUCENT = 2;
  public static readonly int BAKE_CONSERVE_ENERGY = 3;
  public static readonly int BAKE_MAX = 5;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal BakedLight(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.BakedLight_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected BakedLight(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.BakedLight_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BakedLight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_mode(int mode) {
    GodotEnginePINVOKE.BakedLight_set_mode(swigCPtr, mode);
  }

  public int get_mode() {
    int ret = GodotEnginePINVOKE.BakedLight_get_mode(swigCPtr);
    return ret;
  }

  public void set_octree(SWIGTYPE_p_RawArray octree) {
    GodotEnginePINVOKE.BakedLight_set_octree(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(octree));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RawArray get_octree() {
    SWIGTYPE_p_RawArray ret = new SWIGTYPE_p_RawArray(GodotEnginePINVOKE.BakedLight_get_octree(swigCPtr), true);
    return ret;
  }

  public void set_light(SWIGTYPE_p_RawArray light) {
    GodotEnginePINVOKE.BakedLight_set_light(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(light));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RawArray get_light() {
    SWIGTYPE_p_RawArray ret = new SWIGTYPE_p_RawArray(GodotEnginePINVOKE.BakedLight_get_light(swigCPtr), true);
    return ret;
  }

  public void set_sampler_octree(SWIGTYPE_p_IntArray sampler_octree) {
    GodotEnginePINVOKE.BakedLight_set_sampler_octree(swigCPtr, SWIGTYPE_p_IntArray.getCPtr(sampler_octree));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_IntArray get_sampler_octree() {
    SWIGTYPE_p_IntArray ret = new SWIGTYPE_p_IntArray(GodotEnginePINVOKE.BakedLight_get_sampler_octree(swigCPtr), true);
    return ret;
  }

  public void add_lightmap(SWIGTYPE_p_RefT_Texture_t texture, Vector2 gen_size) {
    GodotEnginePINVOKE.BakedLight_add_lightmap(swigCPtr, SWIGTYPE_p_RefT_Texture_t.getCPtr(texture), Vector2.getCPtr(gen_size));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void erase_lightmap(int id) {
    GodotEnginePINVOKE.BakedLight_erase_lightmap(swigCPtr, id);
  }

  public void clear_lightmaps() {
    GodotEnginePINVOKE.BakedLight_clear_lightmaps(swigCPtr);
  }

  public void set_cell_subdivision(int cell_subdivision) {
    GodotEnginePINVOKE.BakedLight_set_cell_subdivision(swigCPtr, cell_subdivision);
  }

  public int get_cell_subdivision() {
    int ret = GodotEnginePINVOKE.BakedLight_get_cell_subdivision(swigCPtr);
    return ret;
  }

  public void set_initial_lattice_subdiv(int cell_subdivision) {
    GodotEnginePINVOKE.BakedLight_set_initial_lattice_subdiv(swigCPtr, cell_subdivision);
  }

  public int get_initial_lattice_subdiv() {
    int ret = GodotEnginePINVOKE.BakedLight_get_initial_lattice_subdiv(swigCPtr);
    return ret;
  }

  public void set_plot_size(float plot_size) {
    GodotEnginePINVOKE.BakedLight_set_plot_size(swigCPtr, plot_size);
  }

  public float get_plot_size() {
    float ret = GodotEnginePINVOKE.BakedLight_get_plot_size(swigCPtr);
    return ret;
  }

  public void set_bounces(int bounces) {
    GodotEnginePINVOKE.BakedLight_set_bounces(swigCPtr, bounces);
  }

  public int get_bounces() {
    int ret = GodotEnginePINVOKE.BakedLight_get_bounces(swigCPtr);
    return ret;
  }

  public void set_cell_extra_margin(float cell_extra_margin) {
    GodotEnginePINVOKE.BakedLight_set_cell_extra_margin(swigCPtr, cell_extra_margin);
  }

  public float get_cell_extra_margin() {
    float ret = GodotEnginePINVOKE.BakedLight_get_cell_extra_margin(swigCPtr);
    return ret;
  }

  public void set_edge_damp(float edge_damp) {
    GodotEnginePINVOKE.BakedLight_set_edge_damp(swigCPtr, edge_damp);
  }

  public float get_edge_damp() {
    float ret = GodotEnginePINVOKE.BakedLight_get_edge_damp(swigCPtr);
    return ret;
  }

  public void set_normal_damp(float normal_damp) {
    GodotEnginePINVOKE.BakedLight_set_normal_damp(swigCPtr, normal_damp);
  }

  public float get_normal_damp() {
    float ret = GodotEnginePINVOKE.BakedLight_get_normal_damp(swigCPtr);
    return ret;
  }

  public void set_tint(float tint) {
    GodotEnginePINVOKE.BakedLight_set_tint(swigCPtr, tint);
  }

  public float get_tint() {
    float ret = GodotEnginePINVOKE.BakedLight_get_tint(swigCPtr);
    return ret;
  }

  public void set_saturation(float saturation) {
    GodotEnginePINVOKE.BakedLight_set_saturation(swigCPtr, saturation);
  }

  public float get_saturation() {
    float ret = GodotEnginePINVOKE.BakedLight_get_saturation(swigCPtr);
    return ret;
  }

  public void set_ao_radius(float ao_radius) {
    GodotEnginePINVOKE.BakedLight_set_ao_radius(swigCPtr, ao_radius);
  }

  public float get_ao_radius() {
    float ret = GodotEnginePINVOKE.BakedLight_get_ao_radius(swigCPtr);
    return ret;
  }

  public void set_ao_strength(float ao_strength) {
    GodotEnginePINVOKE.BakedLight_set_ao_strength(swigCPtr, ao_strength);
  }

  public float get_ao_strength() {
    float ret = GodotEnginePINVOKE.BakedLight_get_ao_strength(swigCPtr);
    return ret;
  }

  public void set_realtime_color_enabled(bool enabled) {
    GodotEnginePINVOKE.BakedLight_set_realtime_color_enabled(swigCPtr, enabled);
  }

  public bool get_realtime_color_enabled() {
    bool ret = GodotEnginePINVOKE.BakedLight_get_realtime_color_enabled(swigCPtr);
    return ret;
  }

  public void set_realtime_color(SWIGTYPE_p_Color tint) {
    GodotEnginePINVOKE.BakedLight_set_realtime_color(swigCPtr, SWIGTYPE_p_Color.getCPtr(tint));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_realtime_color() {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.BakedLight_get_realtime_color(swigCPtr), true);
    return ret;
  }

  public void set_realtime_energy(float energy) {
    GodotEnginePINVOKE.BakedLight_set_realtime_energy(swigCPtr, energy);
  }

  public float get_realtime_energy() {
    float ret = GodotEnginePINVOKE.BakedLight_get_realtime_energy(swigCPtr);
    return ret;
  }

  public void set_format(int format) {
    GodotEnginePINVOKE.BakedLight_set_format(swigCPtr, format);
  }

  public int get_format() {
    int ret = GodotEnginePINVOKE.BakedLight_get_format(swigCPtr);
    return ret;
  }

  public void set_transfer_lightmaps_only_to_uv2(bool enable) {
    GodotEnginePINVOKE.BakedLight_set_transfer_lightmaps_only_to_uv2(swigCPtr, enable);
  }

  public bool get_transfer_lightmaps_only_to_uv2() {
    bool ret = GodotEnginePINVOKE.BakedLight_get_transfer_lightmaps_only_to_uv2(swigCPtr);
    return ret;
  }

  public void set_energy_multiplier(float energy_multiplier) {
    GodotEnginePINVOKE.BakedLight_set_energy_multiplier(swigCPtr, energy_multiplier);
  }

  public float get_energy_multiplier() {
    float ret = GodotEnginePINVOKE.BakedLight_get_energy_multiplier(swigCPtr);
    return ret;
  }

  public void set_gamma_adjust(float gamma_adjust) {
    GodotEnginePINVOKE.BakedLight_set_gamma_adjust(swigCPtr, gamma_adjust);
  }

  public float get_gamma_adjust() {
    float ret = GodotEnginePINVOKE.BakedLight_get_gamma_adjust(swigCPtr);
    return ret;
  }

  public void set_bake_flag(int flag, bool enabled) {
    GodotEnginePINVOKE.BakedLight_set_bake_flag(swigCPtr, flag, enabled);
  }

  public bool get_bake_flag(int flag) {
    bool ret = GodotEnginePINVOKE.BakedLight_get_bake_flag(swigCPtr, flag);
    return ret;
  }

  public BakedLight() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_BakedLight());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
