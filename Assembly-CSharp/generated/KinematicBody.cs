/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class KinematicBody : PhysicsBody {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal KinematicBody(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.KinematicBody_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected KinematicBody(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.KinematicBody_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KinematicBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public KinematicBody() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_KinematicBody());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public Vector3 move(Vector3 rel_vec) {
    Vector3 ret = GodotEnginePINVOKE.KinematicBody_move(swigCPtr, ref rel_vec);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Vector3 move_to(Vector3 position) {
    Vector3 ret = GodotEnginePINVOKE.KinematicBody_move_to(swigCPtr, ref position);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public bool can_teleport_to(Vector3 position) {
    bool ret = GodotEnginePINVOKE.KinematicBody_can_teleport_to(swigCPtr, ref position);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_colliding() {
    bool ret = GodotEnginePINVOKE.KinematicBody_is_colliding(swigCPtr);
    return ret;
  }

  public Vector3 get_collision_pos() {
    Vector3 ret = GodotEnginePINVOKE.KinematicBody_get_collision_pos(swigCPtr);
    return ret;
}

  public Vector3 get_collision_normal() {
    Vector3 ret = GodotEnginePINVOKE.KinematicBody_get_collision_normal(swigCPtr);
    return ret;
}

  public Vector3 get_collider_velocity() {
    Vector3 ret = GodotEnginePINVOKE.KinematicBody_get_collider_velocity(swigCPtr);
    return ret;
}

  public Object get_collider() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.KinematicBody_get_collider(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public int get_collider_shape() {
    int ret = GodotEnginePINVOKE.KinematicBody_get_collider_shape(swigCPtr);
    return ret;
  }

  public void set_collide_with_static_bodies(bool enable) {
    GodotEnginePINVOKE.KinematicBody_set_collide_with_static_bodies(swigCPtr, enable);
  }

  public bool can_collide_with_static_bodies() {
    bool ret = GodotEnginePINVOKE.KinematicBody_can_collide_with_static_bodies(swigCPtr);
    return ret;
  }

  public void set_collide_with_kinematic_bodies(bool enable) {
    GodotEnginePINVOKE.KinematicBody_set_collide_with_kinematic_bodies(swigCPtr, enable);
  }

  public bool can_collide_with_kinematic_bodies() {
    bool ret = GodotEnginePINVOKE.KinematicBody_can_collide_with_kinematic_bodies(swigCPtr);
    return ret;
  }

  public void set_collide_with_rigid_bodies(bool enable) {
    GodotEnginePINVOKE.KinematicBody_set_collide_with_rigid_bodies(swigCPtr, enable);
  }

  public bool can_collide_with_rigid_bodies() {
    bool ret = GodotEnginePINVOKE.KinematicBody_can_collide_with_rigid_bodies(swigCPtr);
    return ret;
  }

  public void set_collide_with_character_bodies(bool enable) {
    GodotEnginePINVOKE.KinematicBody_set_collide_with_character_bodies(swigCPtr, enable);
  }

  public bool can_collide_with_character_bodies() {
    bool ret = GodotEnginePINVOKE.KinematicBody_can_collide_with_character_bodies(swigCPtr);
    return ret;
  }

  public void set_collision_margin(float pixels) {
    GodotEnginePINVOKE.KinematicBody_set_collision_margin(swigCPtr, pixels);
  }

  public float get_collision_margin() {
    float ret = GodotEnginePINVOKE.KinematicBody_get_collision_margin(swigCPtr);
    return ret;
  }

}

}
