/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Texture : Resource {
  public static readonly int FLAG_MIPMAPS = 1;
  public static readonly int FLAG_REPEAT = 2;
  public static readonly int FLAG_FILTER = 4;
  public static readonly int FLAG_VIDEO_SURFACE = 4096;
  public static readonly int FLAGS_DEFAULT = 7;
  public static readonly int FLAG_ANISOTROPIC_FILTER = 8;
  public static readonly int FLAG_CONVERT_TO_LINEAR = 16;
  public static readonly int FLAG_MIRRORED_REPEAT = 32;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Texture(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Texture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Texture(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Texture_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Texture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Texture() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Texture(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal Texture() {}


  public int get_width() {
    int ret = GodotEnginePINVOKE.Texture_get_width(swigCPtr);
    return ret;
  }

  public int get_height() {
    int ret = GodotEnginePINVOKE.Texture_get_height(swigCPtr);
    return ret;
  }

  public Vector2 get_size() {
    Vector2 ret = GodotEnginePINVOKE.Texture_get_size(swigCPtr);
    return ret;
}

  public new SWIGTYPE_p_RID get_rid() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.Texture_get_rid(swigCPtr), true);
    return ret;
  }

  public bool has_alpha() {
    bool ret = GodotEnginePINVOKE.Texture_has_alpha(swigCPtr);
    return ret;
  }

  public void set_flags(int flags) {
    GodotEnginePINVOKE.Texture_set_flags(swigCPtr, flags);
  }

  public int get_flags() {
    int ret = GodotEnginePINVOKE.Texture_get_flags(swigCPtr);
    return ret;
  }

  public void draw(SWIGTYPE_p_RID canvas_item, Vector2 pos, SWIGTYPE_p_Color modulate, bool transpose) {
    GodotEnginePINVOKE.Texture_draw__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), ref pos, SWIGTYPE_p_Color.getCPtr(modulate), transpose);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw(SWIGTYPE_p_RID canvas_item, Vector2 pos, SWIGTYPE_p_Color modulate) {
    GodotEnginePINVOKE.Texture_draw__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), ref pos, SWIGTYPE_p_Color.getCPtr(modulate));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw(SWIGTYPE_p_RID canvas_item, Vector2 pos) {
    GodotEnginePINVOKE.Texture_draw__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw_rect(SWIGTYPE_p_RID canvas_item, SWIGTYPE_p_Rect2 rect, bool tile, SWIGTYPE_p_Color modulate, bool transpose) {
    GodotEnginePINVOKE.Texture_draw_rect__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), SWIGTYPE_p_Rect2.getCPtr(rect), tile, SWIGTYPE_p_Color.getCPtr(modulate), transpose);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw_rect(SWIGTYPE_p_RID canvas_item, SWIGTYPE_p_Rect2 rect, bool tile, SWIGTYPE_p_Color modulate) {
    GodotEnginePINVOKE.Texture_draw_rect__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), SWIGTYPE_p_Rect2.getCPtr(rect), tile, SWIGTYPE_p_Color.getCPtr(modulate));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw_rect(SWIGTYPE_p_RID canvas_item, SWIGTYPE_p_Rect2 rect, bool tile) {
    GodotEnginePINVOKE.Texture_draw_rect__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), SWIGTYPE_p_Rect2.getCPtr(rect), tile);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw_rect_region(SWIGTYPE_p_RID canvas_item, SWIGTYPE_p_Rect2 rect, SWIGTYPE_p_Rect2 src_rect, SWIGTYPE_p_Color modulate, bool transpose) {
    GodotEnginePINVOKE.Texture_draw_rect_region__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), SWIGTYPE_p_Rect2.getCPtr(rect), SWIGTYPE_p_Rect2.getCPtr(src_rect), SWIGTYPE_p_Color.getCPtr(modulate), transpose);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw_rect_region(SWIGTYPE_p_RID canvas_item, SWIGTYPE_p_Rect2 rect, SWIGTYPE_p_Rect2 src_rect, SWIGTYPE_p_Color modulate) {
    GodotEnginePINVOKE.Texture_draw_rect_region__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), SWIGTYPE_p_Rect2.getCPtr(rect), SWIGTYPE_p_Rect2.getCPtr(src_rect), SWIGTYPE_p_Color.getCPtr(modulate));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw_rect_region(SWIGTYPE_p_RID canvas_item, SWIGTYPE_p_Rect2 rect, SWIGTYPE_p_Rect2 src_rect) {
    GodotEnginePINVOKE.Texture_draw_rect_region__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), SWIGTYPE_p_Rect2.getCPtr(rect), SWIGTYPE_p_Rect2.getCPtr(src_rect));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
