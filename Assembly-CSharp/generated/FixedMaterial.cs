/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class FixedMaterial : Material {
  public static readonly int PARAM_DIFFUSE = 0;
  public static readonly int PARAM_DETAIL = 1;
  public static readonly int PARAM_SPECULAR = 2;
  public static readonly int PARAM_EMISSION = 3;
  public static readonly int PARAM_SPECULAR_EXP = 4;
  public static readonly int PARAM_GLOW = 5;
  public static readonly int PARAM_NORMAL = 6;
  public static readonly int PARAM_SHADE_PARAM = 7;
  public static readonly int PARAM_MAX = 8;
  public static readonly int TEXCOORD_SPHERE = 3;
  public static readonly int TEXCOORD_UV = 0;
  public static readonly int TEXCOORD_UV_TRANSFORM = 1;
  public static readonly int TEXCOORD_UV2 = 2;
  public static readonly int FLAG_USE_ALPHA = 0;
  public static readonly int FLAG_USE_COLOR_ARRAY = 1;
  public static readonly int FLAG_USE_POINT_SIZE = 2;
  public static readonly int FLAG_DISCARD_ALPHA = 3;
  public static readonly int LIGHT_SHADER_LAMBERT = 0;
  public static readonly int LIGHT_SHADER_WRAP = 1;
  public static readonly int LIGHT_SHADER_VELVET = 2;
  public static readonly int LIGHT_SHADER_TOON = 3;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal FixedMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.FixedMaterial_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected FixedMaterial(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.FixedMaterial_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FixedMaterial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_parameter(int param, Variant value) {
    GodotEnginePINVOKE.FixedMaterial_set_parameter(swigCPtr, param, Variant.getCPtr(value));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_parameter(int param) {
    GodotEnginePINVOKE.FixedMaterial_get_parameter(swigCPtr, param);
  }

  public void set_texture(int param, SWIGTYPE_p_RefT_Texture_t texture) {
    GodotEnginePINVOKE.FixedMaterial_set_texture(swigCPtr, param, SWIGTYPE_p_RefT_Texture_t.getCPtr(texture));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RefT_Texture_t get_texture(int param) {
    SWIGTYPE_p_RefT_Texture_t ret = new SWIGTYPE_p_RefT_Texture_t(GodotEnginePINVOKE.FixedMaterial_get_texture(swigCPtr, param), true);
    return ret;
  }

  public void set_texcoord_mode(int param, int mode) {
    GodotEnginePINVOKE.FixedMaterial_set_texcoord_mode(swigCPtr, param, mode);
  }

  public int get_texcoord_mode(int param) {
    int ret = GodotEnginePINVOKE.FixedMaterial_get_texcoord_mode(swigCPtr, param);
    return ret;
  }

  public void set_fixed_flag(int flag, bool value) {
    GodotEnginePINVOKE.FixedMaterial_set_fixed_flag(swigCPtr, flag, value);
  }

  public bool get_fixed_flag(int flag) {
    bool ret = GodotEnginePINVOKE.FixedMaterial_get_fixed_flag(swigCPtr, flag);
    return ret;
  }

  public void set_uv_transform(SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.FixedMaterial_set_uv_transform(swigCPtr, SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Transform get_uv_transform() {
    SWIGTYPE_p_Transform ret = new SWIGTYPE_p_Transform(GodotEnginePINVOKE.FixedMaterial_get_uv_transform(swigCPtr), true);
    return ret;
  }

  public void set_light_shader(int shader) {
    GodotEnginePINVOKE.FixedMaterial_set_light_shader(swigCPtr, shader);
  }

  public int get_light_shader() {
    int ret = GodotEnginePINVOKE.FixedMaterial_get_light_shader(swigCPtr);
    return ret;
  }

  public void set_point_size(float size) {
    GodotEnginePINVOKE.FixedMaterial_set_point_size(swigCPtr, size);
  }

  public float get_point_size() {
    float ret = GodotEnginePINVOKE.FixedMaterial_get_point_size(swigCPtr);
    return ret;
  }

  public FixedMaterial() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_FixedMaterial());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
