/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { if (ptr) memdelete(ptr); }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; if (ptr) { memdelete(oldptr); } ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(memnew(T(t))); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_GodotEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_GodotEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_GodotEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_GodotEngine(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#include "core/variant.h"

// Built-in Types
#include "core/math/math_2d.h"
#include "core/ustring.h"

// Object Types
#include "core/object.h"
#include "core/path_remap.h"
#include "main/performance.h"
#include "servers/physics_2d_server.h"
#include "servers/physics_2d/body_2d_sw.h"
#include "servers/physics_2d/physics_2d_server_sw.h"
#include "servers/physics_server.h"
#include "servers/physics/body_sw.h"
#include "servers/physics/physics_server_sw.h"
#include "core/reference.h"
#include "drivers/nrex/regex.h"
#include "core/resource.h"
#include "core/io/resource_loader.h"
#include "scene/resources/room.h"
#include "scene/resources/sample.h"
#include "scene/resources/sample_library.h"
#include "scene/resources/packed_scene.h"
#include "core/script_language.h"
#include "scene/resources/shader.h"
#include "scene/resources/shader_graph.h"
#include "scene/resources/shape.h"
#include "scene/resources/shape_2d.h"
#include "scene/3d/spatial.h"
#include "servers/spatial_sound_2d_server.h"
#include "servers/spatial_sound_2d/spatial_sound_2d_server_sw.h"
#include "servers/spatial_sound_server.h"
#include "servers/spatial_sound/spatial_sound_server_sw.h"
#include "scene/resources/sphere_shape.h"
#include "scene/2d/animated_sprite.h"
#include "core/io/stream_peer.h"
#include "core/io/stream_peer_ssl.h"
#include "core/io/stream_peer_tcp.h"
#include "scene/resources/style_box.h"
#include "scene/resources/surface_tool.h"
#include "core/io/tcp_server.h"
#include "scene/resources/texture.h"
#include "scene/resources/theme.h"
#include "scene/resources/tile_set.h"
#include "core/translation.h"
#include "scene/gui/tree.h"
#include "core/undo_redo.h"
#include "scene/resources/video_stream.h"
#include "drivers/theora/video_stream_theora.h"
#include "servers/visual_server.h"
#include "scene/resources/world.h"
#include "scene/resources/world_2d.h"
#include "core/io/xml_parser.h"
#include "core/bind/core_bind.h"
#include "scene/resources/animation.h"
#include "servers/audio_server.h"
#include "servers/audio/audio_server_sw.h"
#include "scene/resources/audio_stream.h"
#include "drivers/mpc/audio_stream_mpc.h"
#include "drivers/vorbis/audio_stream_ogg_vorbis.h"
#include "drivers/opus/audio_stream_opus.h"
#include "drivers/speex/audio_stream_speex.h"
#include "scene/resources/baked_light.h"
#include "scene/resources/bit_mask.h"
#include "scene/resources/box_shape.h"
#include "modules/csharp/csharp_script.h"
#include "scene/2d/canvas_item.h"
#include "scene/resources/capsule_shape.h"
#include "scene/resources/capsule_shape_2d.h"
#include "scene/resources/circle_shape_2d.h"
#include "scene/resources/color_ramp.h"
#include "scene/resources/concave_polygon_shape.h"
#include "scene/resources/concave_polygon_shape_2d.h"
#include "core/io/config_file.h"
#include "scene/resources/convex_polygon_shape.h"
#include "scene/resources/convex_polygon_shape_2d.h"
#include "scene/resources/curve.h"
#include "scene/resources/dynamic_font.h"
#include "tools/editor/editor_import_export.h"
#include "tools/editor/io_plugins/editor_scene_import_plugin.h"
#include "tools/editor/editor_run_script.h"
#include "tools/editor/editor_data.h"
#include "tools/editor/editor_settings.h"
#include "tools/editor/spatial_editor_gizmos.h"
#include "scene/resources/environment.h"
#include "scene/resources/event_stream.h"
#include "drivers/chibi/event_stream_chibi.h"
#include "scene/resources/font.h"
#include "core/func_ref.h"
#include "modules/gdscript/gd_script.h"
#include "core/globals.h"
#include "core/io/http_client.h"
#include "core/io/ip.h"
#include "drivers/unix/ip_unix.h"
#include "core/os/input.h"
#include "main/input_default.h"
#include "core/input_map.h"
#include "scene/resources/shape_line_2d.h"
#include "core/os/main_loop.h"
#include "scene/resources/material.h"
#include "scene/resources/mesh.h"
#include "scene/resources/mesh_data_tool.h"
#include "scene/resources/mesh_library.h"
#include "scene/resources/multimesh.h"
#include "scene/3d/navigation_mesh.h"
#include "scene/2d/navigation_polygon.h"
#include "scene/main/node.h"
#include "scene/2d/light_occluder_2d.h"
#include "tools/pck/pck_packer.h"
#include "core/compressed_translation.h"
#include "core/packed_data_container.h"
#include "core/io/packet_peer.h"
#include "core/io/packet_peer_udp.h"
#include "scene/resources/plane_shape.h"
#include "scene/resources/polygon_path_finder.h"
#include "scene/resources/ray_shape.h"
#include "scene/resources/segment_shape_2d.h"
#include "scene/resources/rectangle_shape_2d.h"
#include "scene/main/viewport.h"
#include "scene/main/resource_preloader.h"
#include "scene/audio/sample_player.h"
#include "scene/main/scene_main_loop.h"
#include "scene/audio/sound_room_params.h"
#include "scene/3d/spatial_player.h"
#include "scene/3d/spatial_sample_player.h"
#include "scene/3d/spatial_stream_player.h"
#include "scene/audio/stream_player.h"
#include "scene/main/timer.h"
#include "scene/animation/tween.h"
#include "scene/3d/vehicle_body.h"
#include "scene/3d/visibility_notifier.h"
#include "scene/3d/visual_instance.h"
#include "scene/3d/scenario_fx.h"
#include "scene/animation/animation_player.h"
#include "scene/animation/animation_tree_player.h"
#include "scene/3d/baked_light_instance.h"
#include "scene/3d/bone_attachment.h"
#include "scene/3d/camera.h"
#include "scene/main/canvas_layer.h"
#include "scene/3d/collision_object.h"
#include "scene/3d/collision_polygon.h"
#include "scene/3d/body_shape.h"
#include "scene/gui/control.h"
#include "tools/editor/editor_plugin.h"
#include "scene/audio/event_player.h"
#include "scene/gui/graph_edit.h"
#include "modules/gridmap/grid_map.h"
#include "scene/main/http_request.h"
#include "scene/3d/immediate_geometry.h"
#include "scene/main/instance_placeholder.h"
#include "scene/3d/interpolated_camera.h"
#include "modules/ik/ik.h"
#include "scene/gui/item_list.h"
#include "scene/3d/physics_joint.h"
#include "scene/gui/label.h"
#include "scene/3d/light.h"
#include "scene/gui/line_edit.h"
#include "scene/3d/mesh_instance.h"
#include "scene/3d/multimesh_instance.h"
#include "scene/3d/navigation.h"
#include "scene/2d/node_2d.h"
#include "scene/gui/panel.h"
#include "scene/2d/parallax_background.h"
#include "scene/2d/parallax_layer.h"
#include "scene/2d/particles_2d.h"
#include "scene/3d/particles.h"
#include "scene/gui/patch_9_frame.h"
#include "scene/3d/path.h"
#include "scene/2d/path_2d.h"
#include "scene/3d/physics_body.h"
#include "scene/2d/polygon_2d.h"
#include "scene/gui/popup.h"
#include "scene/gui/dialogs.h"
#include "scene/gui/popup_menu.h"
#include "scene/3d/portal.h"
#include "scene/2d/position_2d.h"
#include "scene/3d/position_3d.h"
#include "scene/3d/proximity_group.h"
#include "scene/3d/quad.h"
#include "scene/gui/range.h"
#include "scene/3d/ray_cast.h"
#include "scene/2d/ray_cast_2d.h"
#include "scene/gui/reference_frame.h"
#include "scene/2d/remote_transform_2d.h"
#include "scene/gui/rich_text_label.h"
#include "scene/3d/room_instance.h"
#include "scene/gui/scroll_bar.h"
#include "scene/gui/separator.h"
#include "scene/3d/skeleton.h"
#include "scene/gui/slider.h"
#include "scene/2d/sound_player_2d.h"
#include "scene/gui/spin_box.h"
#include "scene/2d/sprite.h"
#include "scene/3d/sprite_3d.h"
#include "scene/gui/tab_container.h"
#include "scene/gui/tabs.h"
#include "scene/3d/test_cube.h"
#include "scene/gui/text_edit.h"
#include "scene/gui/texture_frame.h"
#include "scene/gui/texture_progress.h"
#include "scene/2d/tile_map.h"
#include "scene/2d/screen_button.h"
#include "scene/gui/video_player.h"
#include "scene/2d/visibility_notifier_2d.h"
#include "scene/2d/y_sort.h"
#include "scene/3d/area.h"
#include "scene/2d/back_buffer_copy.h"
#include "scene/gui/base_button.h"
#include "scene/gui/button.h"
#include "scene/gui/button_array.h"
#include "scene/2d/camera_2d.h"
#include "scene/2d/canvas_modulate.h"
#include "scene/gui/check_box.h"
#include "scene/gui/check_button.h"
#include "scene/2d/collision_object_2d.h"
#include "scene/2d/collision_polygon_2d.h"
#include "scene/2d/collision_shape_2d.h"
#include "scene/gui/color_picker.h"
#include "scene/gui/container.h"
#include "tools/editor/editor_file_dialog.h"
#include "scene/gui/file_dialog.h"
#include "scene/gui/graph_node.h"
#include "scene/gui/grid_container.h"
#include "scene/2d/joints_2d.h"
#include "scene/2d/light_2d.h"
#include "scene/gui/link_button.h"
#include "scene/gui/margin_container.h"
#include "scene/gui/menu_button.h"
#include "scene/2d/navigation2d.h"
#include "scene/gui/option_button.h"
#include "scene/gui/panel_container.h"
#include "scene/2d/physics_body_2d.h"
#include "scene/gui/progress_bar.h"
#include "scene/2d/sample_player_2d.h"
#include "scene/gui/scroll_container.h"
#include "scene/gui/split_container.h"
#include "scene/gui/texture_button.h"
#include "scene/gui/tool_button.h"
#include "scene/2d/area_2d.h"
#include "scene/gui/box_container.h"
#include "scene/gui/button_group.h"
#include "scene/gui/center_container.h"

typedef DVector<uint8_t> RawArray;

SWIGINTERN void Object__get(Object *self,String const &property){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "_get");
  const void* __args[1] = { &property };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array Object__get_property_list(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "_get_property_list");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object__init(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "_init");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Object__notification(Object *self,int what){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "_notification");
  const void* __args[1] = { &what };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Object__set(Object *self,String const &property,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "_set");
  const void* __args[2] = { &property, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Object_free(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "free");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN String Object_get_type(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_type");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Object_is_type(Object *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "is_type");
  const void* __args[1] = { &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Object_set(Object *self,String const &property,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "set");
  const void* __args[2] = { &property, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Object_get(Object *self,String const &property){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get");
  const void* __args[1] = { &property };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array Object_get_property_list(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_property_list");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Object_get_method_list(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_method_list");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object_notification__SWIG_0(Object *self,int what,bool reversed=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "notification");
  const void* __args[2] = { &what, &reversed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Object_get_instance_ID(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_instance_ID");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object_set_script(Object *self,Script *script){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "set_script");
  const void* __args[1] = { script };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Script > Object_get_script(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_script");
  Ref<Script> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object_set_meta(Object *self,String const &name,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "set_meta");
  const void* __args[2] = { &name, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Object_get_meta(Object *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_meta");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Object_has_meta(Object *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "has_meta");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray Object_get_meta_list(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_meta_list");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object_add_user_signal__SWIG_0(Object *self,String const &signal,Array const &arguments_=Array()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "add_user_signal");
  const void* __args[2] = { &signal, &arguments_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Object_has_user_signal(Object *self,String const &signal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "has_user_signal");
  const void* __args[1] = { &signal };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Object_emit_signal__SWIG_0(Object *self,String const &signal,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "emit_signal");
  const void* __args[6] = { &signal, &arg0_, &arg1_, &arg2_, &arg3_, &arg4_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Object_has_method(Object *self,String const &method){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "has_method");
  const void* __args[1] = { &method };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Object_get_signal_list(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_signal_list");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Object_get_signal_connection_list(Object *self,String const &signal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "get_signal_connection_list");
  const void* __args[1] = { &signal };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Object_connect__SWIG_0(Object *self,String const &signal,Object *target,String const &method,Array const &binds=Array(),int flags=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "connect");
  const void* __args[5] = { &signal, target, &method, &binds, &flags };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Object_disconnect(Object *self,String const &signal,Object *target,String const &method){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "disconnect");
  const void* __args[3] = { &signal, target, &method };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Object_is_connected(Object *self,String const &signal,Object *target,String const &method){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "is_connected");
  const void* __args[3] = { &signal, target, &method };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Object_set_block_signals(Object *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "set_block_signals");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Object_is_blocking_signals(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "is_blocking_signals");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object_set_message_translation(Object *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "set_message_translation");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Object_can_translate_messages(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "can_translate_messages");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Object_property_list_changed_notify(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "property_list_changed_notify");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN String Object_XL_MESSAGE(Object *self,String const &message){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "XL_MESSAGE");
  const void* __args[1] = { &message };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String Object_tr(Object *self,String const &message){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "tr");
  const void* __args[1] = { &message };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Object_is_queued_for_deletion(Object *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Object", "is_queued_for_deletion");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathRemap_add_remap__SWIG_0(PathRemap *self,String const &from,String const &to,String const &locale=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathRemap", "add_remap");
  const void* __args[3] = { &from, &to, &locale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PathRemap_has_remap(PathRemap *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathRemap", "has_remap");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String PathRemap_get_remap(PathRemap *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathRemap", "get_remap");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PathRemap_erase_remap(PathRemap *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathRemap", "erase_remap");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PathRemap_clear_remaps(PathRemap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathRemap", "clear_remaps");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN PathRemap *PathRemap_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("PathRemap")->cast_to<PathRemap>(); }
SWIGINTERN float Performance_get_monitor(Performance *self,int monitor){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Performance", "get_monitor");
  const void* __args[1] = { &monitor };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Performance *Performance_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Performance")->cast_to<Performance>(); }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_total_gravity(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_total_gravity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Physics2DDirectBodyState_get_total_linear_damp(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_total_linear_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Physics2DDirectBodyState_get_total_angular_damp(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_total_angular_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Physics2DDirectBodyState_get_inverse_mass(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_inverse_mass");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Physics2DDirectBodyState_get_inverse_inertia(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_inverse_inertia");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DDirectBodyState_set_linear_velocity(Physics2DDirectBodyState *self,Vector2 const &velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "set_linear_velocity");
  const void* __args[1] = { &velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Physics2DDirectBodyState_get_linear_velocity(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_linear_velocity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DDirectBodyState_set_angular_velocity(Physics2DDirectBodyState *self,float velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "set_angular_velocity");
  const void* __args[1] = { &velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DDirectBodyState_get_angular_velocity(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_angular_velocity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DDirectBodyState_set_transform(Physics2DDirectBodyState *self,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "set_transform");
  const void* __args[1] = { &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 Physics2DDirectBodyState_get_transform(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DDirectBodyState_set_sleep_state(Physics2DDirectBodyState *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "set_sleep_state");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Physics2DDirectBodyState_is_sleeping(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "is_sleeping");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Physics2DDirectBodyState_get_contact_count(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_local_pos(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_local_pos");
  const void* __args[1] = { &contact_idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_local_normal(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_local_normal");
  const void* __args[1] = { &contact_idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Physics2DDirectBodyState_get_contact_local_shape(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_local_shape");
  const void* __args[1] = { &contact_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DDirectBodyState_get_contact_collider(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider");
  const void* __args[1] = { &contact_idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_collider_pos(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider_pos");
  const void* __args[1] = { &contact_idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Physics2DDirectBodyState_get_contact_collider_id(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider_id");
  const void* __args[1] = { &contact_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *Physics2DDirectBodyState_get_contact_collider_object(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider_object");
  const void* __args[1] = { &contact_idx };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Physics2DDirectBodyState_get_contact_collider_shape(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider_shape");
  const void* __args[1] = { &contact_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Variant Physics2DDirectBodyState_get_contact_collider_shape_metadata(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider_shape_metadata");
  const void* __args[1] = { &contact_idx };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_collider_velocity_at_pos(Physics2DDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_contact_collider_velocity_at_pos");
  const void* __args[1] = { &contact_idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float Physics2DDirectBodyState_get_step(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_step");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DDirectBodyState_integrate_forces(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "integrate_forces");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Physics2DDirectSpaceState *Physics2DDirectBodyState_get_space_state(Physics2DDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectBodyState", "get_space_state");
  Physics2DDirectSpaceState* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Physics2DDirectSpaceState_intersect_point__SWIG_0(Physics2DDirectSpaceState *self,Vector2 const &point,int max_results=32,Array const &exclude=Array(),int layer_mask=2147483647,int type_mask=15){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectSpaceState", "intersect_point");
  const void* __args[5] = { &point, &max_results, &exclude, &layer_mask, &type_mask };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary Physics2DDirectSpaceState_intersect_ray__SWIG_0(Physics2DDirectSpaceState *self,Vector2 const &from,Vector2 const &to,Array const &exclude=Array(),int layer_mask=2147483647,int type_mask=15){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectSpaceState", "intersect_ray");
  const void* __args[5] = { &from, &to, &exclude, &layer_mask, &type_mask };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Physics2DDirectSpaceState_intersect_shape__SWIG_0(Physics2DDirectSpaceState *self,Physics2DShapeQueryParameters *shape,int max_results=32){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectSpaceState", "intersect_shape");
  const void* __args[2] = { shape, &max_results };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Physics2DDirectSpaceState_cast_motion(Physics2DDirectSpaceState *self,Physics2DShapeQueryParameters *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectSpaceState", "cast_motion");
  const void* __args[1] = { shape };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Physics2DDirectSpaceState_collide_shape__SWIG_0(Physics2DDirectSpaceState *self,Physics2DShapeQueryParameters *shape,int max_results=32){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectSpaceState", "collide_shape");
  const void* __args[2] = { shape, &max_results };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary Physics2DDirectSpaceState_get_rest_info(Physics2DDirectSpaceState *self,Physics2DShapeQueryParameters *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DDirectSpaceState", "get_rest_info");
  const void* __args[1] = { shape };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_shape_create(Physics2DServer *self,int type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "shape_create");
  const void* __args[1] = { &type };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_shape_set_data(Physics2DServer *self,RID const &shape,Variant const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "shape_set_data");
  const void* __args[2] = { &shape, &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_shape_get_type(Physics2DServer *self,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "shape_get_type");
  const void* __args[1] = { &shape };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_shape_get_data(Physics2DServer *self,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "shape_get_data");
  const void* __args[1] = { &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID Physics2DServer_space_create(Physics2DServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "space_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_space_set_active(Physics2DServer *self,RID const &space,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "space_set_active");
  const void* __args[2] = { &space, &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Physics2DServer_space_is_active(Physics2DServer *self,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "space_is_active");
  const void* __args[1] = { &space };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_space_set_param(Physics2DServer *self,RID const &space,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "space_set_param");
  const void* __args[3] = { &space, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DServer_space_get_param(Physics2DServer *self,RID const &space,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "space_get_param");
  const void* __args[2] = { &space, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Physics2DDirectSpaceState *Physics2DServer_space_get_direct_state(Physics2DServer *self,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "space_get_direct_state");
  const void* __args[1] = { &space };
  Physics2DDirectSpaceState* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_area_create(Physics2DServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_area_set_space(Physics2DServer *self,RID const &area,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_space");
  const void* __args[2] = { &area, &space };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID Physics2DServer_area_get_space(Physics2DServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_space");
  const void* __args[1] = { &area };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_area_set_space_override_mode(Physics2DServer *self,RID const &area,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_space_override_mode");
  const void* __args[2] = { &area, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_area_get_space_override_mode(Physics2DServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_space_override_mode");
  const void* __args[1] = { &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_area_add_shape__SWIG_0(Physics2DServer *self,RID const &area,RID const &shape,Matrix32 const &transform=Matrix32()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_add_shape");
  const void* __args[3] = { &area, &shape, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_set_shape(Physics2DServer *self,RID const &area,int shape_idx,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_shape");
  const void* __args[3] = { &area, &shape_idx, &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_set_shape_transform(Physics2DServer *self,RID const &area,int shape_idx,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_shape_transform");
  const void* __args[3] = { &area, &shape_idx, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_area_get_shape_count(Physics2DServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_shape_count");
  const void* __args[1] = { &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_area_get_shape(Physics2DServer *self,RID const &area,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_shape");
  const void* __args[2] = { &area, &shape_idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Matrix32 Physics2DServer_area_get_shape_transform(Physics2DServer *self,RID const &area,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_shape_transform");
  const void* __args[2] = { &area, &shape_idx };
  Matrix32 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_area_remove_shape(Physics2DServer *self,RID const &area,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_remove_shape");
  const void* __args[2] = { &area, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_clear_shapes(Physics2DServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_clear_shapes");
  const void* __args[1] = { &area };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_set_layer_mask(Physics2DServer *self,RID const &area,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_layer_mask");
  const void* __args[2] = { &area, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_set_collision_mask(Physics2DServer *self,RID const &area,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_collision_mask");
  const void* __args[2] = { &area, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_set_param(Physics2DServer *self,RID const &area,int param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_param");
  const void* __args[3] = { &area, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_set_transform(Physics2DServer *self,RID const &area,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_transform");
  const void* __args[2] = { &area, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_area_get_param(Physics2DServer *self,RID const &area,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_param");
  const void* __args[2] = { &area, &param };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 Physics2DServer_area_get_transform(Physics2DServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_transform");
  const void* __args[1] = { &area };
  Matrix32 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_area_attach_object_instance_ID(Physics2DServer *self,RID const &area,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_attach_object_instance_ID");
  const void* __args[2] = { &area, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_area_get_object_instance_ID(Physics2DServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_get_object_instance_ID");
  const void* __args[1] = { &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_area_set_monitor_callback(Physics2DServer *self,RID const &area,Object *receiver,String const &method){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "area_set_monitor_callback");
  const void* __args[3] = { &area, receiver, &method };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID Physics2DServer_body_create__SWIG_0(Physics2DServer *self,int mode=2,bool init_sleeping=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_create");
  const void* __args[2] = { &mode, &init_sleeping };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_space(Physics2DServer *self,RID const &body,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_space");
  const void* __args[2] = { &body, &space };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID Physics2DServer_body_get_space(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_space");
  const void* __args[1] = { &body };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_mode(Physics2DServer *self,RID const &body,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_mode");
  const void* __args[2] = { &body, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_mode(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_mode");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_add_shape__SWIG_0(Physics2DServer *self,RID const &body,RID const &shape,Matrix32 const &transform=Matrix32()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_add_shape");
  const void* __args[3] = { &body, &shape, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_set_shape(Physics2DServer *self,RID const &body,int shape_idx,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_shape");
  const void* __args[3] = { &body, &shape_idx, &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_set_shape_transform(Physics2DServer *self,RID const &body,int shape_idx,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_shape_transform");
  const void* __args[3] = { &body, &shape_idx, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_set_shape_metadata(Physics2DServer *self,RID const &body,int shape_idx,Variant const &metadata){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_shape_metadata");
  const void* __args[3] = { &body, &shape_idx, &metadata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_shape_count(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_shape_count");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_body_get_shape(Physics2DServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_shape");
  const void* __args[2] = { &body, &shape_idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Matrix32 Physics2DServer_body_get_shape_transform(Physics2DServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_shape_transform");
  const void* __args[2] = { &body, &shape_idx };
  Matrix32 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_get_shape_metadata(Physics2DServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_shape_metadata");
  const void* __args[2] = { &body, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_remove_shape(Physics2DServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_remove_shape");
  const void* __args[2] = { &body, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_clear_shapes(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_clear_shapes");
  const void* __args[1] = { &body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_set_shape_as_trigger(Physics2DServer *self,RID const &body,int shape_idx,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_shape_as_trigger");
  const void* __args[3] = { &body, &shape_idx, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Physics2DServer_body_is_shape_set_as_trigger(Physics2DServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_is_shape_set_as_trigger");
  const void* __args[2] = { &body, &shape_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_attach_object_instance_ID(Physics2DServer *self,RID const &body,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_attach_object_instance_ID");
  const void* __args[2] = { &body, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_object_instance_ID(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_object_instance_ID");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_continuous_collision_detection_mode(Physics2DServer *self,RID const &body,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_continuous_collision_detection_mode");
  const void* __args[2] = { &body, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_continuous_collision_detection_mode(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_continuous_collision_detection_mode");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_layer_mask(Physics2DServer *self,RID const &body,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_layer_mask");
  const void* __args[2] = { &body, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_layer_mask(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_layer_mask");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_collision_mask(Physics2DServer *self,RID const &body,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_collision_mask");
  const void* __args[2] = { &body, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_collision_mask(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_collision_mask");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_param(Physics2DServer *self,RID const &body,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_param");
  const void* __args[3] = { &body, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DServer_body_get_param(Physics2DServer *self,RID const &body,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_param");
  const void* __args[2] = { &body, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_state(Physics2DServer *self,RID const &body,int state,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_state");
  const void* __args[3] = { &body, &state, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_get_state(Physics2DServer *self,RID const &body,int state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_state");
  const void* __args[2] = { &body, &state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_apply_impulse(Physics2DServer *self,RID const &body,Vector2 const &pos,Vector2 const &impulse){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_apply_impulse");
  const void* __args[3] = { &body, &pos, &impulse };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_add_force(Physics2DServer *self,RID const &body,Vector2 const &offset,Vector2 const &force){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_add_force");
  const void* __args[3] = { &body, &offset, &force };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_set_axis_velocity(Physics2DServer *self,RID const &body,Vector2 const &axis_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_axis_velocity");
  const void* __args[2] = { &body, &axis_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_add_collision_exception(Physics2DServer *self,RID const &body,RID const &excepted_body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_add_collision_exception");
  const void* __args[2] = { &body, &excepted_body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_remove_collision_exception(Physics2DServer *self,RID const &body,RID const &excepted_body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_remove_collision_exception");
  const void* __args[2] = { &body, &excepted_body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_body_set_max_contacts_reported(Physics2DServer *self,RID const &body,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_max_contacts_reported");
  const void* __args[2] = { &body, &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_body_get_max_contacts_reported(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_max_contacts_reported");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_one_way_collision_direction(Physics2DServer *self,RID const &body,Vector2 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_one_way_collision_direction");
  const void* __args[2] = { &body, &normal };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Physics2DServer_body_get_one_way_collision_direction(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_one_way_collision_direction");
  const void* __args[1] = { &body };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_one_way_collision_max_depth(Physics2DServer *self,RID const &body,float depth){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_one_way_collision_max_depth");
  const void* __args[2] = { &body, &depth };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DServer_body_get_one_way_collision_max_depth(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_get_one_way_collision_max_depth");
  const void* __args[1] = { &body };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_omit_force_integration(Physics2DServer *self,RID const &body,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_omit_force_integration");
  const void* __args[2] = { &body, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Physics2DServer_body_is_omitting_force_integration(Physics2DServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_is_omitting_force_integration");
  const void* __args[1] = { &body };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_body_set_force_integration_callback__SWIG_0(Physics2DServer *self,RID const &body,Object *receiver,String const &method,Variant const &userdata=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_set_force_integration_callback");
  const void* __args[4] = { &body, receiver, &method, &userdata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Physics2DServer_body_test_motion__SWIG_0(Physics2DServer *self,RID const &body,Vector2 const &motion,float margin=0.08,Physics2DTestMotionResult *result=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "body_test_motion");
  const void* __args[4] = { &body, &motion, &margin, result };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_joint_set_param(Physics2DServer *self,RID const &joint,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "joint_set_param");
  const void* __args[3] = { &joint, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DServer_joint_get_param(Physics2DServer *self,RID const &joint,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "joint_get_param");
  const void* __args[2] = { &joint, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_pin_joint_create__SWIG_0(Physics2DServer *self,Vector2 const &anchor,RID const &body_a,RID const &body_b=RID()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "pin_joint_create");
  const void* __args[3] = { &anchor, &body_a, &body_b };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_groove_joint_create__SWIG_0(Physics2DServer *self,Vector2 const &groove1_a,Vector2 const &groove2_a,Vector2 const &anchor_b,RID const &body_a=RID(),RID const &body_b=RID()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "groove_joint_create");
  const void* __args[5] = { &groove1_a, &groove2_a, &anchor_b, &body_a, &body_b };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID Physics2DServer_damped_spring_joint_create__SWIG_0(Physics2DServer *self,Vector2 const &anchor_a,Vector2 const &anchor_b,RID const &body_a,RID const &body_b=RID()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "damped_spring_joint_create");
  const void* __args[4] = { &anchor_a, &anchor_b, &body_a, &body_b };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_damped_string_joint_set_param(Physics2DServer *self,RID const &joint,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "damped_string_joint_set_param");
  const void* __args[3] = { &joint, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DServer_damped_string_joint_get_param(Physics2DServer *self,RID const &joint,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "damped_string_joint_get_param");
  const void* __args[2] = { &joint, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Physics2DServer_joint_get_type(Physics2DServer *self,RID const &joint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "joint_get_type");
  const void* __args[1] = { &joint };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Physics2DServer_free_rid(Physics2DServer *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "free_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DServer_set_active(Physics2DServer *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "set_active");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DServer_get_process_info(Physics2DServer *self,int process_info){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DServer", "get_process_info");
  const void* __args[1] = { &process_info };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Physics2DServer *Physics2DServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Physics2DServer")->cast_to<Physics2DServer>(); }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_total_gravity(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_total_gravity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float PhysicsDirectBodyState_get_total_linear_damp(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_total_linear_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float PhysicsDirectBodyState_get_total_angular_damp(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_total_angular_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float PhysicsDirectBodyState_get_inverse_mass(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_inverse_mass");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_inverse_inertia(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_inverse_inertia");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsDirectBodyState_set_linear_velocity(PhysicsDirectBodyState *self,Vector3 const &velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "set_linear_velocity");
  const void* __args[1] = { &velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_linear_velocity(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_linear_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsDirectBodyState_set_angular_velocity(PhysicsDirectBodyState *self,Vector3 const &velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "set_angular_velocity");
  const void* __args[1] = { &velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_angular_velocity(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_angular_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsDirectBodyState_set_transform(PhysicsDirectBodyState *self,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "set_transform");
  const void* __args[1] = { &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform PhysicsDirectBodyState_get_transform(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsDirectBodyState_add_force(PhysicsDirectBodyState *self,Vector3 const &force,Vector3 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "add_force");
  const void* __args[2] = { &force, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsDirectBodyState_apply_impulse(PhysicsDirectBodyState *self,Vector3 const &pos,Vector3 const &j){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "apply_impulse");
  const void* __args[2] = { &pos, &j };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsDirectBodyState_set_sleep_state(PhysicsDirectBodyState *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "set_sleep_state");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsDirectBodyState_is_sleeping(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "is_sleeping");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PhysicsDirectBodyState_get_contact_count(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_local_pos(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_local_pos");
  const void* __args[1] = { &contact_idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_local_normal(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_local_normal");
  const void* __args[1] = { &contact_idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PhysicsDirectBodyState_get_contact_local_shape(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_local_shape");
  const void* __args[1] = { &contact_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsDirectBodyState_get_contact_collider(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_collider");
  const void* __args[1] = { &contact_idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_collider_pos(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_collider_pos");
  const void* __args[1] = { &contact_idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PhysicsDirectBodyState_get_contact_collider_id(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_collider_id");
  const void* __args[1] = { &contact_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *PhysicsDirectBodyState_get_contact_collider_object(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_collider_object");
  const void* __args[1] = { &contact_idx };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PhysicsDirectBodyState_get_contact_collider_shape(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_collider_shape");
  const void* __args[1] = { &contact_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(PhysicsDirectBodyState *self,int contact_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_contact_collider_velocity_at_pos");
  const void* __args[1] = { &contact_idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float PhysicsDirectBodyState_get_step(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_step");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsDirectBodyState_integrate_forces(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "integrate_forces");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN PhysicsDirectSpaceState *PhysicsDirectBodyState_get_space_state(PhysicsDirectBodyState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectBodyState", "get_space_state");
  PhysicsDirectSpaceState* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Dictionary PhysicsDirectSpaceState_intersect_ray__SWIG_0(PhysicsDirectSpaceState *self,Vector3 const &from,Vector3 const &to,Array const &exclude=Array(),int layer_mask=2147483647,int type_mask=15){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectSpaceState", "intersect_ray");
  const void* __args[5] = { &from, &to, &exclude, &layer_mask, &type_mask };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array PhysicsDirectSpaceState_intersect_shape__SWIG_0(PhysicsDirectSpaceState *self,PhysicsShapeQueryParameters *shape,int max_results=32){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectSpaceState", "intersect_shape");
  const void* __args[2] = { shape, &max_results };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array PhysicsDirectSpaceState_cast_motion(PhysicsDirectSpaceState *self,PhysicsShapeQueryParameters *shape,Vector3 const &motion){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectSpaceState", "cast_motion");
  const void* __args[2] = { shape, &motion };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array PhysicsDirectSpaceState_collide_shape__SWIG_0(PhysicsDirectSpaceState *self,PhysicsShapeQueryParameters *shape,int max_results=32){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectSpaceState", "collide_shape");
  const void* __args[2] = { shape, &max_results };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary PhysicsDirectSpaceState_get_rest_info(PhysicsDirectSpaceState *self,PhysicsShapeQueryParameters *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsDirectSpaceState", "get_rest_info");
  const void* __args[1] = { shape };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_shape_create(PhysicsServer *self,int type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "shape_create");
  const void* __args[1] = { &type };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_shape_set_data(PhysicsServer *self,RID const &shape,Variant const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "shape_set_data");
  const void* __args[2] = { &shape, &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_shape_get_type(PhysicsServer *self,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "shape_get_type");
  const void* __args[1] = { &shape };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_shape_get_data(PhysicsServer *self,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "shape_get_data");
  const void* __args[1] = { &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID PhysicsServer_space_create(PhysicsServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "space_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_space_set_active(PhysicsServer *self,RID const &space,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "space_set_active");
  const void* __args[2] = { &space, &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_space_is_active(PhysicsServer *self,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "space_is_active");
  const void* __args[1] = { &space };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_space_set_param(PhysicsServer *self,RID const &space,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "space_set_param");
  const void* __args[3] = { &space, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_space_get_param(PhysicsServer *self,RID const &space,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "space_get_param");
  const void* __args[2] = { &space, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN PhysicsDirectSpaceState *PhysicsServer_space_get_direct_state(PhysicsServer *self,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "space_get_direct_state");
  const void* __args[1] = { &space };
  PhysicsDirectSpaceState* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_area_create(PhysicsServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_area_set_space(PhysicsServer *self,RID const &area,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_space");
  const void* __args[2] = { &area, &space };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID PhysicsServer_area_get_space(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_space");
  const void* __args[1] = { &area };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_area_set_space_override_mode(PhysicsServer *self,RID const &area,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_space_override_mode");
  const void* __args[2] = { &area, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_area_get_space_override_mode(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_space_override_mode");
  const void* __args[1] = { &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_area_add_shape__SWIG_0(PhysicsServer *self,RID const &area,RID const &shape,Transform const &transform=Transform()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_add_shape");
  const void* __args[3] = { &area, &shape, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_shape(PhysicsServer *self,RID const &area,int shape_idx,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_shape");
  const void* __args[3] = { &area, &shape_idx, &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_shape_transform(PhysicsServer *self,RID const &area,int shape_idx,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_shape_transform");
  const void* __args[3] = { &area, &shape_idx, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_area_get_shape_count(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_shape_count");
  const void* __args[1] = { &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_area_get_shape(PhysicsServer *self,RID const &area,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_shape");
  const void* __args[2] = { &area, &shape_idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Transform PhysicsServer_area_get_shape_transform(PhysicsServer *self,RID const &area,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_shape_transform");
  const void* __args[2] = { &area, &shape_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_area_remove_shape(PhysicsServer *self,RID const &area,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_remove_shape");
  const void* __args[2] = { &area, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_clear_shapes(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_clear_shapes");
  const void* __args[1] = { &area };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_layer_mask(PhysicsServer *self,RID const &area,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_layer_mask");
  const void* __args[2] = { &area, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_collision_mask(PhysicsServer *self,RID const &area,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_collision_mask");
  const void* __args[2] = { &area, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_param(PhysicsServer *self,RID const &area,int param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_param");
  const void* __args[3] = { &area, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_transform(PhysicsServer *self,RID const &area,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_transform");
  const void* __args[2] = { &area, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_get_param(PhysicsServer *self,RID const &area,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_param");
  const void* __args[2] = { &area, &param };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform PhysicsServer_area_get_transform(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_transform");
  const void* __args[1] = { &area };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_area_attach_object_instance_ID(PhysicsServer *self,RID const &area,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_attach_object_instance_ID");
  const void* __args[2] = { &area, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_area_get_object_instance_ID(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_get_object_instance_ID");
  const void* __args[1] = { &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_area_set_monitor_callback(PhysicsServer *self,RID const &area,Object *receiver,String const &method){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_monitor_callback");
  const void* __args[3] = { &area, receiver, &method };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_area_set_ray_pickable(PhysicsServer *self,RID const &area,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_set_ray_pickable");
  const void* __args[2] = { &area, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_area_is_ray_pickable(PhysicsServer *self,RID const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "area_is_ray_pickable");
  const void* __args[1] = { &area };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_body_create__SWIG_0(PhysicsServer *self,int mode=2,bool init_sleeping=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_create");
  const void* __args[2] = { &mode, &init_sleeping };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_space(PhysicsServer *self,RID const &body,RID const &space){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_space");
  const void* __args[2] = { &body, &space };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID PhysicsServer_body_get_space(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_space");
  const void* __args[1] = { &body };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_mode(PhysicsServer *self,RID const &body,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_mode");
  const void* __args[2] = { &body, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_mode(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_mode");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_layer_mask(PhysicsServer *self,RID const &body,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_layer_mask");
  const void* __args[2] = { &body, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_layer_mask(PhysicsServer *self,RID const &body,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_layer_mask");
  const void* __args[2] = { &body, &arg1_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_collision_mask(PhysicsServer *self,RID const &body,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_collision_mask");
  const void* __args[2] = { &body, &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_collision_mask(PhysicsServer *self,RID const &body,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_collision_mask");
  const void* __args[2] = { &body, &arg1_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_add_shape__SWIG_0(PhysicsServer *self,RID const &body,RID const &shape,Transform const &transform=Transform()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_add_shape");
  const void* __args[3] = { &body, &shape, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_set_shape(PhysicsServer *self,RID const &body,int shape_idx,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_shape");
  const void* __args[3] = { &body, &shape_idx, &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_set_shape_transform(PhysicsServer *self,RID const &body,int shape_idx,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_shape_transform");
  const void* __args[3] = { &body, &shape_idx, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_shape_count(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_shape_count");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_body_get_shape(PhysicsServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_shape");
  const void* __args[2] = { &body, &shape_idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Transform PhysicsServer_body_get_shape_transform(PhysicsServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_shape_transform");
  const void* __args[2] = { &body, &shape_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_remove_shape(PhysicsServer *self,RID const &body,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_remove_shape");
  const void* __args[2] = { &body, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_clear_shapes(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_clear_shapes");
  const void* __args[1] = { &body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_attach_object_instance_ID(PhysicsServer *self,RID const &body,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_attach_object_instance_ID");
  const void* __args[2] = { &body, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_object_instance_ID(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_object_instance_ID");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_enable_continuous_collision_detection(PhysicsServer *self,RID const &body,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_enable_continuous_collision_detection");
  const void* __args[2] = { &body, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_body_is_continuous_collision_detection_enabled(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_is_continuous_collision_detection_enabled");
  const void* __args[1] = { &body };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_param(PhysicsServer *self,RID const &body,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_param");
  const void* __args[3] = { &body, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_body_get_param(PhysicsServer *self,RID const &body,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_param");
  const void* __args[2] = { &body, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_state(PhysicsServer *self,RID const &body,int state,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_state");
  const void* __args[3] = { &body, &state, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_get_state(PhysicsServer *self,RID const &body,int state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_state");
  const void* __args[2] = { &body, &state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_apply_impulse(PhysicsServer *self,RID const &body,Vector3 const &pos,Vector3 const &impulse){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_apply_impulse");
  const void* __args[3] = { &body, &pos, &impulse };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_set_axis_velocity(PhysicsServer *self,RID const &body,Vector3 const &axis_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_axis_velocity");
  const void* __args[2] = { &body, &axis_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_set_axis_lock(PhysicsServer *self,RID const &body,int axis){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_axis_lock");
  const void* __args[2] = { &body, &axis };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_axis_lock(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_axis_lock");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_add_collision_exception(PhysicsServer *self,RID const &body,RID const &excepted_body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_add_collision_exception");
  const void* __args[2] = { &body, &excepted_body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_remove_collision_exception(PhysicsServer *self,RID const &body,RID const &excepted_body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_remove_collision_exception");
  const void* __args[2] = { &body, &excepted_body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_set_max_contacts_reported(PhysicsServer *self,RID const &body,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_max_contacts_reported");
  const void* __args[2] = { &body, &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_body_get_max_contacts_reported(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_get_max_contacts_reported");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_omit_force_integration(PhysicsServer *self,RID const &body,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_omit_force_integration");
  const void* __args[2] = { &body, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_body_is_omitting_force_integration(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_is_omitting_force_integration");
  const void* __args[1] = { &body };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_body_set_force_integration_callback__SWIG_0(PhysicsServer *self,RID const &body,Object *receiver,String const &method,Variant const &userdata=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_force_integration_callback");
  const void* __args[4] = { &body, receiver, &method, &userdata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_body_set_ray_pickable(PhysicsServer *self,RID const &body,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_set_ray_pickable");
  const void* __args[2] = { &body, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_body_is_ray_pickable(PhysicsServer *self,RID const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "body_is_ray_pickable");
  const void* __args[1] = { &body };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_joint_create_pin(PhysicsServer *self,RID const &body_A,Vector3 const &local_A,RID const &body_B,Vector3 const &local_B){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_create_pin");
  const void* __args[4] = { &body_A, &local_A, &body_B, &local_B };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_pin_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "pin_joint_set_param");
  const void* __args[3] = { &joint, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_pin_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "pin_joint_get_param");
  const void* __args[2] = { &joint, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_pin_joint_set_local_A(PhysicsServer *self,RID const &joint,Vector3 const &local_A){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "pin_joint_set_local_A");
  const void* __args[2] = { &joint, &local_A };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 PhysicsServer_pin_joint_get_local_A(PhysicsServer *self,RID const &joint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "pin_joint_get_local_A");
  const void* __args[1] = { &joint };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_pin_joint_set_local_B(PhysicsServer *self,RID const &joint,Vector3 const &local_B){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "pin_joint_set_local_B");
  const void* __args[2] = { &joint, &local_B };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 PhysicsServer_pin_joint_get_local_B(PhysicsServer *self,RID const &joint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "pin_joint_get_local_B");
  const void* __args[1] = { &joint };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_joint_create_hinge(PhysicsServer *self,RID const &body_A,Transform const &hinge_A,RID const &body_B,Transform const &hinge_B){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_create_hinge");
  const void* __args[4] = { &body_A, &hinge_A, &body_B, &hinge_B };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_hinge_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "hinge_joint_set_param");
  const void* __args[3] = { &joint, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_hinge_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "hinge_joint_get_param");
  const void* __args[2] = { &joint, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_hinge_joint_set_flag(PhysicsServer *self,RID const &joint,int flag,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "hinge_joint_set_flag");
  const void* __args[3] = { &joint, &flag, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_hinge_joint_get_flag(PhysicsServer *self,RID const &joint,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "hinge_joint_get_flag");
  const void* __args[2] = { &joint, &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_joint_create_slider(PhysicsServer *self,RID const &body_A,Transform const &local_ref_A,RID const &body_B,Transform const &local_ref_B){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_create_slider");
  const void* __args[4] = { &body_A, &local_ref_A, &body_B, &local_ref_B };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_slider_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "slider_joint_set_param");
  const void* __args[3] = { &joint, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_slider_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "slider_joint_get_param");
  const void* __args[2] = { &joint, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_joint_create_cone_twist(PhysicsServer *self,RID const &body_A,Transform const &local_ref_A,RID const &body_B,Transform const &local_ref_B){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_create_cone_twist");
  const void* __args[4] = { &body_A, &local_ref_A, &body_B, &local_ref_B };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_cone_twist_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "cone_twist_joint_set_param");
  const void* __args[3] = { &joint, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_cone_twist_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "cone_twist_joint_get_param");
  const void* __args[2] = { &joint, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PhysicsServer_joint_get_type(PhysicsServer *self,RID const &joint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_get_type");
  const void* __args[1] = { &joint };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_joint_set_solver_priority(PhysicsServer *self,RID const &joint,int priority){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_set_solver_priority");
  const void* __args[2] = { &joint, &priority };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_joint_get_solver_priority(PhysicsServer *self,RID const &joint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_get_solver_priority");
  const void* __args[1] = { &joint };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID PhysicsServer_joint_create_generic_6dof(PhysicsServer *self,RID const &body_A,Transform const &local_ref_A,RID const &body_B,Transform const &local_ref_B){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "joint_create_generic_6dof");
  const void* __args[4] = { &body_A, &local_ref_A, &body_B, &local_ref_B };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_generic_6dof_joint_set_param(PhysicsServer *self,RID const &joint,int axis,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "generic_6dof_joint_set_param");
  const void* __args[4] = { &joint, &axis, &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsServer_generic_6dof_joint_get_param(PhysicsServer *self,RID const &joint,int axis,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "generic_6dof_joint_get_param");
  const void* __args[3] = { &joint, &axis, &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_generic_6dof_joint_set_flag(PhysicsServer *self,RID const &joint,int axis,int flag,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "generic_6dof_joint_set_flag");
  const void* __args[4] = { &joint, &axis, &flag, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsServer_generic_6dof_joint_get_flag(PhysicsServer *self,RID const &joint,int axis,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "generic_6dof_joint_get_flag");
  const void* __args[3] = { &joint, &axis, &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsServer_free_rid(PhysicsServer *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "free_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsServer_set_active(PhysicsServer *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "set_active");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsServer_get_process_info(PhysicsServer *self,int process_info){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsServer", "get_process_info");
  const void* __args[1] = { &process_info };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN PhysicsServer *PhysicsServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("PhysicsServer")->cast_to<PhysicsServer>(); }
SWIGINTERN bool Reference_init_ref(Reference *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Reference", "init_ref");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Reference_reference(Reference *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Reference", "reference");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool Reference_unreference(Reference *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Reference", "unreference");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Reference(Reference *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int RegEx_compile__SWIG_0(RegEx *self,String const &pattern,int capture=9){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "compile");
  const void* __args[2] = { &pattern, &capture };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int RegEx_find__SWIG_0(RegEx *self,String const &text,int start=0,int end=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "find");
  const void* __args[3] = { &text, &start, &end };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void RegEx_clear(RegEx *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool RegEx_is_valid(RegEx *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "is_valid");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int RegEx_get_capture_count(RegEx *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "get_capture_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String RegEx_get_capture(RegEx *self,int capture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "get_capture");
  const void* __args[1] = { &capture };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int RegEx_get_capture_start(RegEx *self,int capture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "get_capture_start");
  const void* __args[1] = { &capture };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray RegEx_get_captures(RegEx *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RegEx", "get_captures");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_RegEx(RegEx *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Resource_set_path(Resource *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "set_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Resource_take_over_path(Resource *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "take_over_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Resource_get_path(Resource *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "get_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Resource_set_name(Resource *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "set_name");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Resource_get_name(Resource *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "get_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID Resource_get_rid(Resource *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "get_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Resource_set_import_metadata(Resource *self,Object *metadata){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "set_import_metadata");
  const void* __args[1] = { metadata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *Resource_get_import_metadata(Resource *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "get_import_metadata");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *Resource_duplicate__SWIG_0(Resource *self,bool subresources=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Resource", "duplicate");
  const void* __args[1] = { &subresources };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Resource(Resource *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ResourceImportMetadata_set_editor(ResourceImportMetadata *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "set_editor");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ResourceImportMetadata_get_editor(ResourceImportMetadata *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "get_editor");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ResourceImportMetadata_add_source__SWIG_0(ResourceImportMetadata *self,String const &path,String const &md5=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "add_source");
  const void* __args[2] = { &path, &md5 };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ResourceImportMetadata_get_source_path(ResourceImportMetadata *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "get_source_path");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String ResourceImportMetadata_get_source_md5(ResourceImportMetadata *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "get_source_md5");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ResourceImportMetadata_set_source_md5(ResourceImportMetadata *self,int idx,String const &md5){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "set_source_md5");
  const void* __args[2] = { &idx, &md5 };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ResourceImportMetadata_remove_source(ResourceImportMetadata *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "remove_source");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ResourceImportMetadata_get_source_count(ResourceImportMetadata *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "get_source_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ResourceImportMetadata_set_option(ResourceImportMetadata *self,String const &key,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "set_option");
  const void* __args[2] = { &key, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ResourceImportMetadata_get_option(ResourceImportMetadata *self,String const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "get_option");
  const void* __args[1] = { &key };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray ResourceImportMetadata_get_options(ResourceImportMetadata *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceImportMetadata", "get_options");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ResourceImportMetadata(ResourceImportMetadata *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Object *ResourceInteractiveLoader_get_resource(ResourceInteractiveLoader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceInteractiveLoader", "get_resource");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ResourceInteractiveLoader_poll(ResourceInteractiveLoader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceInteractiveLoader", "poll");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ResourceInteractiveLoader_wait(ResourceInteractiveLoader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceInteractiveLoader", "wait");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ResourceInteractiveLoader_get_stage(ResourceInteractiveLoader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceInteractiveLoader", "get_stage");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ResourceInteractiveLoader_get_stage_count(ResourceInteractiveLoader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourceInteractiveLoader", "get_stage_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ResourceInteractiveLoader(ResourceInteractiveLoader *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void RoomBounds_set_bounds(RoomBounds *self,Dictionary const &bsp_tree){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RoomBounds", "set_bounds");
  const void* __args[1] = { &bsp_tree };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Dictionary RoomBounds_get_bounds(RoomBounds *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RoomBounds", "get_bounds");
  Dictionary ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RoomBounds_set_geometry_hint(RoomBounds *self,Vector3Array const &triangles){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RoomBounds", "set_geometry_hint");
  const void* __args[1] = { &triangles };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array RoomBounds_get_geometry_hint(RoomBounds *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RoomBounds", "get_geometry_hint");
  Vector3Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RoomBounds_regenerate_bsp(RoomBounds *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RoomBounds", "regenerate_bsp");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RoomBounds_regenerate_bsp_cubic(RoomBounds *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RoomBounds", "regenerate_bsp_cubic");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_RoomBounds(RoomBounds *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Sample_create(Sample *self,int format,bool stereo,int length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "create");
  const void* __args[3] = { &format, &stereo, &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sample_get_format(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_format");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Sample_is_stereo(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "is_stereo");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Sample_get_length(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_length");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sample_set_data(Sample *self,RawArray const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "set_data");
  const void* __args[1] = { &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RawArray Sample_get_data(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_data");
  RawArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sample_set_mix_rate(Sample *self,int hz){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "set_mix_rate");
  const void* __args[1] = { &hz };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sample_get_mix_rate(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_mix_rate");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sample_set_loop_format(Sample *self,int format){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "set_loop_format");
  const void* __args[1] = { &format };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sample_get_loop_format(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_loop_format");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sample_set_loop_begin(Sample *self,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "set_loop_begin");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sample_get_loop_begin(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_loop_begin");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sample_set_loop_end(Sample *self,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "set_loop_end");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sample_get_loop_end(Sample *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sample", "get_loop_end");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Sample(Sample *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void SampleLibrary_add_sample(SampleLibrary *self,String const &name,Sample *sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "add_sample");
  const void* __args[2] = { &name, sample };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Sample > SampleLibrary_get_sample(SampleLibrary *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "get_sample");
  const void* __args[1] = { &name };
  Ref<Sample> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool SampleLibrary_has_sample(SampleLibrary *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "has_sample");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SampleLibrary_remove_sample(SampleLibrary *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "remove_sample");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SampleLibrary_sample_set_volume_db(SampleLibrary *self,String const &name,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "sample_set_volume_db");
  const void* __args[2] = { &name, &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SampleLibrary_sample_get_volume_db(SampleLibrary *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "sample_get_volume_db");
  const void* __args[1] = { &name };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SampleLibrary_sample_set_pitch_scale(SampleLibrary *self,String const &name,float pitch){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "sample_set_pitch_scale");
  const void* __args[2] = { &name, &pitch };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SampleLibrary_sample_get_pitch_scale(SampleLibrary *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SampleLibrary", "sample_get_pitch_scale");
  const void* __args[1] = { &name };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_SampleLibrary(SampleLibrary *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int SceneState_get_node_count(SceneState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String SceneState_get_node_type(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_type");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String SceneState_get_node_name(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_name");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN NodePath SceneState_get_node_path__SWIG_0(SceneState *self,int idx,bool for_parent=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_path");
  const void* __args[2] = { &idx, &for_parent };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN NodePath SceneState_get_node_owner_path(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_owner_path");
  const void* __args[1] = { &idx };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool SceneState_is_node_instance_placeholder(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "is_node_instance_placeholder");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String SceneState_get_node_instance_placeholder(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_instance_placeholder");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< PackedScene > SceneState_get_node_instance(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_instance");
  const void* __args[1] = { &idx };
  Ref<PackedScene> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray SceneState_get_node_groups(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_groups");
  const void* __args[1] = { &idx };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int SceneState_get_node_property_count(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_property_count");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String SceneState_get_node_property_name(SceneState *self,int idx,int prop_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_property_name");
  const void* __args[2] = { &idx, &prop_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SceneState_get_node_property_value(SceneState *self,int idx,int prop_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_node_property_value");
  const void* __args[2] = { &idx, &prop_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SceneState_get_connection_count(SceneState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN NodePath SceneState_get_connection_source(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_source");
  const void* __args[1] = { &idx };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String SceneState_get_connection_signal(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_signal");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN NodePath SceneState_get_connection_target(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_target");
  const void* __args[1] = { &idx };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String SceneState_get_connection_method(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_method");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int SceneState_get_connection_flags(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_flags");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array SceneState_get_connection_binds(SceneState *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneState", "get_connection_binds");
  const void* __args[1] = { &idx };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_SceneState(SceneState *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN bool Script_can_instance(Script *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Script", "can_instance");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Script_instance_has(Script *self,Object *base_object){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Script", "instance_has");
  const void* __args[1] = { base_object };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Script_has_source_code(Script *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Script", "has_source_code");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String Script_get_source_code(Script *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Script", "get_source_code");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Script_set_source_code(Script *self,String const &source){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Script", "set_source_code");
  const void* __args[1] = { &source };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Script_reload__SWIG_0(Script *self,bool keep_state=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Script", "reload");
  const void* __args[1] = { &keep_state };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Script(Script *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int Shader_get_mode(Shader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Shader_set_code__SWIG_0(Shader *self,String const &vcode,String const &fcode,String const &lcode,int fofs=0,int lofs=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "set_code");
  const void* __args[5] = { &vcode, &fcode, &lcode, &fofs, &lofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Shader_get_vertex_code(Shader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "get_vertex_code");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String Shader_get_fragment_code(Shader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "get_fragment_code");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String Shader_get_light_code(Shader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "get_light_code");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Shader_set_default_texture_param(Shader *self,String const &param,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "set_default_texture_param");
  const void* __args[2] = { &param, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Shader_get_default_texture_param(Shader *self,String const &param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "get_default_texture_param");
  const void* __args[1] = { &param };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Shader_has_param(Shader *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shader", "has_param");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Shader(Shader *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ShaderGraph_node_add(ShaderGraph *self,int shader_type,int node_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_add");
  const void* __args[3] = { &shader_type, &node_type, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ShaderGraph_node_remove(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_remove");
  const void* __args[2] = { &shader_type, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ShaderGraph_node_set_pos(ShaderGraph *self,int shader_type,int id,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_set_pos");
  const void* __args[3] = { &shader_type, &id, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ShaderGraph_node_get_pos(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_get_pos");
  const void* __args[2] = { &shader_type, &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ShaderGraph_node_get_type(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_get_type");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array ShaderGraph_get_node_list(ShaderGraph *self,int shader_type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "get_node_list");
  const void* __args[1] = { &shader_type };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_default_set_value(ShaderGraph *self,int shader_type,int id,int param_id,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "default_set_value");
  const void* __args[4] = { &shader_type, &id, &param_id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ShaderGraph_default_get_value(ShaderGraph *self,int shader_type,int id,int param_id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "default_get_value");
  const void* __args[3] = { &shader_type, &id, &param_id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ShaderGraph_scalar_const_node_set_value(ShaderGraph *self,int shader_type,int id,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_const_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ShaderGraph_scalar_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_const_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_vec_const_node_set_value(ShaderGraph *self,int shader_type,int id,Vector3 const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_const_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 ShaderGraph_vec_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_const_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_rgb_const_node_set_value(ShaderGraph *self,int shader_type,int id,Color const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "rgb_const_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ShaderGraph_rgb_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "rgb_const_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_xform_const_node_set_value(ShaderGraph *self,int shader_type,int id,Transform const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "xform_const_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform ShaderGraph_xform_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "xform_const_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_texture_node_set_filter_size(ShaderGraph *self,int shader_type,int id,int filter_size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "texture_node_set_filter_size");
  const void* __args[3] = { &shader_type, &id, &filter_size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_texture_node_get_filter_size(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "texture_node_get_filter_size");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_texture_node_set_filter_strength(ShaderGraph *self,int shader_type,float id,float filter_strength){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "texture_node_set_filter_strength");
  const void* __args[3] = { &shader_type, &id, &filter_strength };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ShaderGraph_texture_node_get_filter_strength(ShaderGraph *self,int shader_type,float id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "texture_node_get_filter_strength");
  const void* __args[2] = { &shader_type, &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_scalar_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_op_node_set_op");
  const void* __args[3] = { &shader_type, &id, &op };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_scalar_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_op_node_get_op");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_vec_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_op_node_set_op");
  const void* __args[3] = { &shader_type, &id, &op };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_vec_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_op_node_get_op");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_vec_scalar_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_scalar_op_node_set_op");
  const void* __args[3] = { &shader_type, &id, &op };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_vec_scalar_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_scalar_op_node_get_op");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_rgb_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "rgb_op_node_set_op");
  const void* __args[3] = { &shader_type, &id, &op };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_rgb_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "rgb_op_node_get_op");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_xform_vec_mult_node_set_no_translation(ShaderGraph *self,int shader_type,int id,bool disable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "xform_vec_mult_node_set_no_translation");
  const void* __args[3] = { &shader_type, &id, &disable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ShaderGraph_xform_vec_mult_node_get_no_translation(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "xform_vec_mult_node_get_no_translation");
  const void* __args[2] = { &shader_type, &id };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_scalar_func_node_set_function(ShaderGraph *self,int shader_type,int id,int func){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_func_node_set_function");
  const void* __args[3] = { &shader_type, &id, &func };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_scalar_func_node_get_function(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_func_node_get_function");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_vec_func_node_set_function(ShaderGraph *self,int shader_type,int id,int func){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_func_node_set_function");
  const void* __args[3] = { &shader_type, &id, &func };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ShaderGraph_vec_func_node_get_function(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_func_node_get_function");
  const void* __args[2] = { &shader_type, &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_input_node_set_name(ShaderGraph *self,int shader_type,int id,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "input_node_set_name");
  const void* __args[3] = { &shader_type, &id, &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ShaderGraph_input_node_get_name(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "input_node_get_name");
  const void* __args[2] = { &shader_type, &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_scalar_input_node_set_value(ShaderGraph *self,int shader_type,int id,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_input_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ShaderGraph_scalar_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "scalar_input_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_vec_input_node_set_value(ShaderGraph *self,int shader_type,int id,Vector3 const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_input_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 ShaderGraph_vec_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "vec_input_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_rgb_input_node_set_value(ShaderGraph *self,int shader_type,int id,Color const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "rgb_input_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ShaderGraph_rgb_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "rgb_input_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_xform_input_node_set_value(ShaderGraph *self,int shader_type,int id,Transform const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "xform_input_node_set_value");
  const void* __args[3] = { &shader_type, &id, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform ShaderGraph_xform_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "xform_input_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_texture_input_node_set_value(ShaderGraph *self,int shader_type,int id,Texture *value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "texture_input_node_set_value");
  const void* __args[3] = { &shader_type, &id, value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > ShaderGraph_texture_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "texture_input_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_cubemap_input_node_set_value(ShaderGraph *self,int shader_type,int id,CubeMap *value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "cubemap_input_node_set_value");
  const void* __args[3] = { &shader_type, &id, value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< CubeMap > ShaderGraph_cubemap_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "cubemap_input_node_get_value");
  const void* __args[2] = { &shader_type, &id };
  Ref<CubeMap> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_comment_node_set_text(ShaderGraph *self,int shader_type,int id,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "comment_node_set_text");
  const void* __args[3] = { &shader_type, &id, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ShaderGraph_comment_node_get_text(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "comment_node_get_text");
  const void* __args[2] = { &shader_type, &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_color_ramp_node_set_ramp(ShaderGraph *self,int shader_type,int id,ColorArray const &colors,RealArray const &offsets){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "color_ramp_node_set_ramp");
  const void* __args[4] = { &shader_type, &id, &colors, &offsets };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN ColorArray ShaderGraph_color_ramp_node_get_colors(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "color_ramp_node_get_colors");
  const void* __args[2] = { &shader_type, &id };
  ColorArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RealArray ShaderGraph_color_ramp_node_get_offsets(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "color_ramp_node_get_offsets");
  const void* __args[2] = { &shader_type, &id };
  RealArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_curve_map_node_set_points(ShaderGraph *self,int shader_type,int id,Vector2Array const &points){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "curve_map_node_set_points");
  const void* __args[3] = { &shader_type, &id, &points };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array ShaderGraph_curve_map_node_get_points(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "curve_map_node_get_points");
  const void* __args[2] = { &shader_type, &id };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ShaderGraph_connect_node(ShaderGraph *self,int shader_type,int src_id,int src_slot,int dst_id,int dst_slot){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "connect_node");
  const void* __args[5] = { &shader_type, &src_id, &src_slot, &dst_id, &dst_slot };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool ShaderGraph_is_node_connected(ShaderGraph *self,int shader_type,int src_id,int src_slot,int dst_id,int dst_slot){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "is_node_connected");
  const void* __args[5] = { &shader_type, &src_id, &src_slot, &dst_id, &dst_slot };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_disconnect_node(ShaderGraph *self,int shader_type,int src_id,int src_slot,int dst_id,int dst_slot){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "disconnect_node");
  const void* __args[5] = { &shader_type, &src_id, &src_slot, &dst_id, &dst_slot };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array ShaderGraph_get_node_connections(ShaderGraph *self,int shader_type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "get_node_connections");
  const void* __args[1] = { &shader_type };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ShaderGraph_clear(ShaderGraph *self,int shader_type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "clear");
  const void* __args[1] = { &shader_type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ShaderGraph_node_set_state(ShaderGraph *self,int shader_type,int id,Variant const &state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_set_state");
  const void* __args[3] = { &shader_type, &id, &state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Variant ShaderGraph_node_get_state(ShaderGraph *self,int shader_type,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderGraph", "node_get_state");
  const void* __args[2] = { &shader_type, &id };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_ShaderGraph(ShaderGraph *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_Shape(Shape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Shape2D_set_custom_solver_bias(Shape2D *self,float bias){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shape2D", "set_custom_solver_bias");
  const void* __args[1] = { &bias };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Shape2D_get_custom_solver_bias(Shape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shape2D", "get_custom_solver_bias");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Shape2D_collide(Shape2D *self,Matrix32 const &local_xform,Shape2D *with_shape,Matrix32 const &shape_xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shape2D", "collide");
  const void* __args[3] = { &local_xform, with_shape, &shape_xform };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Shape2D_collide_with_motion(Shape2D *self,Matrix32 const &local_xform,Vector2 const &local_motion,Shape2D *with_shape,Matrix32 const &shape_xform,Vector2 const &shape_motion){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shape2D", "collide_with_motion");
  const void* __args[5] = { &local_xform, &local_motion, with_shape, &shape_xform, &shape_motion };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Variant Shape2D_collide_and_get_contacts(Shape2D *self,Matrix32 const &local_xform,Shape2D *with_shape,Matrix32 const &shape_xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shape2D", "collide_and_get_contacts");
  const void* __args[3] = { &local_xform, with_shape, &shape_xform };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Variant Shape2D_collide_with_motion_and_get_contacts(Shape2D *self,Matrix32 const &local_xform,Vector2 const &local_motion,Shape2D *with_shape,Matrix32 const &shape_xform,Vector2 const &shape_motion){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Shape2D", "collide_with_motion_and_get_contacts");
  const void* __args[5] = { &local_xform, &local_motion, with_shape, &shape_xform, &shape_motion };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Shape2D(Shape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ShortCut_set_shortcut(ShortCut *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShortCut", "set_shortcut");
  const void* __args[1] = { &event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN InputEvent ShortCut_get_shortcut(ShortCut *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShortCut", "get_shortcut");
  InputEvent ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool ShortCut_is_valid(ShortCut *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShortCut", "is_valid");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool ShortCut_is_shortcut(ShortCut *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShortCut", "is_shortcut");
  const void* __args[1] = { &event };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String ShortCut_get_as_text(ShortCut *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShortCut", "get_as_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ShortCut(ShortCut *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_SpatialGizmo(SpatialGizmo *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN SpatialSound2DServer *SpatialSound2DServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("SpatialSound2DServer")->cast_to<SpatialSound2DServer>(); }
SWIGINTERN SpatialSoundServer *SpatialSoundServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("SpatialSoundServer")->cast_to<SpatialSoundServer>(); }
SWIGINTERN void SphereShape_set_radius(SphereShape *self,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SphereShape", "set_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SphereShape_get_radius(SphereShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SphereShape", "get_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_SphereShape(SphereShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void SpriteFrames_add_animation(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "add_animation");
  const void* __args[1] = { &anim };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpriteFrames_has_animation(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "has_animation");
  const void* __args[1] = { &anim };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpriteFrames_remove_animation(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "remove_animation");
  const void* __args[1] = { &anim };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpriteFrames_rename_animation(SpriteFrames *self,String const &anim,String const &newname){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "rename_animation");
  const void* __args[2] = { &anim, &newname };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpriteFrames_set_animation_speed(SpriteFrames *self,String const &anim,float speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "set_animation_speed");
  const void* __args[2] = { &anim, &speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpriteFrames_get_animation_speed(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "get_animation_speed");
  const void* __args[1] = { &anim };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpriteFrames_set_animation_loop(SpriteFrames *self,String const &anim,bool loop){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "set_animation_loop");
  const void* __args[2] = { &anim, &loop };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpriteFrames_get_animation_loop(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "get_animation_loop");
  const void* __args[1] = { &anim };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpriteFrames_add_frame__SWIG_0(SpriteFrames *self,String const &anim,Object *frame,int atpos=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "add_frame");
  const void* __args[3] = { &anim, frame, &atpos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SpriteFrames_get_frame_count(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "get_frame_count");
  const void* __args[1] = { &anim };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *SpriteFrames_get_frame(SpriteFrames *self,String const &anim,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "get_frame");
  const void* __args[2] = { &anim, &idx };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpriteFrames_set_frame(SpriteFrames *self,String const &anim,int idx,Object *txt){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "set_frame");
  const void* __args[3] = { &anim, &idx, txt };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpriteFrames_remove_frame(SpriteFrames *self,String const &anim,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "remove_frame");
  const void* __args[2] = { &anim, &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpriteFrames_clear(SpriteFrames *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "clear");
  const void* __args[1] = { &anim };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpriteFrames_clear_all(SpriteFrames *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteFrames", "clear_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_SpriteFrames(SpriteFrames *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int StreamPeer_put_data(StreamPeer *self,RawArray const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_data");
  const void* __args[1] = { &data };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array StreamPeer_put_partial_data(StreamPeer *self,RawArray const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_partial_data");
  const void* __args[1] = { &data };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array StreamPeer_get_data(StreamPeer *self,int bytes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_data");
  const void* __args[1] = { &bytes };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array StreamPeer_get_partial_data(StreamPeer *self,int bytes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_partial_data");
  const void* __args[1] = { &bytes };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_available_bytes(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_available_bytes");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPeer_set_big_endian(StreamPeer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "set_big_endian");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StreamPeer_is_big_endian_enabled(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "is_big_endian_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPeer_put_8(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_8");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_u8(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_u8");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_16(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_16");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_u16(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_u16");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_32(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_32");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_u32(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_u32");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_64(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_64");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_u64(StreamPeer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_u64");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_float(StreamPeer *self,float val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_float");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_double(StreamPeer *self,float val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_double");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_utf8_string(StreamPeer *self,String const &val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_utf8_string");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPeer_put_var(StreamPeer *self,Variant const &val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "put_var");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int StreamPeer_get_8(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_8");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_u8(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_u8");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_16(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_16");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_u16(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_u16");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_32(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_32");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_u32(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_u32");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_64(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_64");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeer_get_u64(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_u64");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float StreamPeer_get_float(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_float");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float StreamPeer_get_double(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_double");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String StreamPeer_get_string(StreamPeer *self,int bytes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_string");
  const void* __args[1] = { &bytes };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String StreamPeer_get_utf8_string(StreamPeer *self,int bytes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_utf8_string");
  const void* __args[1] = { &bytes };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Variant StreamPeer_get_var(StreamPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeer", "get_var");
  Variant ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_StreamPeer(StreamPeer *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int StreamPeerSSL_accept(StreamPeerSSL *self,StreamPeer *stream){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerSSL", "accept");
  const void* __args[1] = { stream };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int StreamPeerSSL_connect__SWIG_0(StreamPeerSSL *self,StreamPeer *stream,bool validate_certs=false,String const &for_hostname=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerSSL", "connect");
  const void* __args[3] = { stream, &validate_certs, &for_hostname };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int StreamPeerSSL_get_status(StreamPeerSSL *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerSSL", "get_status");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPeerSSL_disconnect(StreamPeerSSL *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerSSL", "disconnect");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN StreamPeerSSL *new_StreamPeerSSL(){ return StreamPeerSSL::create(); }
SWIGINTERN void delete_StreamPeerSSL(StreamPeerSSL *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int StreamPeerTCP_connect(StreamPeerTCP *self,String const &host,int port){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerTCP", "connect");
  const void* __args[2] = { &host, &port };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool StreamPeerTCP_is_connected(StreamPeerTCP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerTCP", "is_connected");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeerTCP_get_status(StreamPeerTCP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerTCP", "get_status");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String StreamPeerTCP_get_connected_host(StreamPeerTCP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerTCP", "get_connected_host");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPeerTCP_get_connected_port(StreamPeerTCP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerTCP", "get_connected_port");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPeerTCP_disconnect(StreamPeerTCP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPeerTCP", "disconnect");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN StreamPeerTCP *new_StreamPeerTCP(){ return StreamPeerTCP::create(); }
SWIGINTERN void delete_StreamPeerTCP(StreamPeerTCP *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN bool StyleBox_test_mask(StyleBox *self,Vector2 const &point,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "test_mask");
  const void* __args[2] = { &point, &rect };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void StyleBox_set_default_margin(StyleBox *self,int margin,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "set_default_margin");
  const void* __args[2] = { &margin, &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StyleBox_get_default_margin(StyleBox *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "get_default_margin");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float StyleBox_get_margin(StyleBox *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "get_margin");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 StyleBox_get_minimum_size(StyleBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "get_minimum_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 StyleBox_get_center_size(StyleBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "get_center_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 StyleBox_get_offset(StyleBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBox_draw(StyleBox *self,RID const &canvas_item,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBox", "draw");
  const void* __args[2] = { &canvas_item, &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_StyleBox(StyleBox *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_StyleBoxEmpty(StyleBoxEmpty *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void StyleBoxFlat_set_bg_color(StyleBoxFlat *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "set_bg_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color StyleBoxFlat_get_bg_color(StyleBoxFlat *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "get_bg_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxFlat_set_light_color(StyleBoxFlat *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "set_light_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color StyleBoxFlat_get_light_color(StyleBoxFlat *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "get_light_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxFlat_set_dark_color(StyleBoxFlat *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "set_dark_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color StyleBoxFlat_get_dark_color(StyleBoxFlat *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "get_dark_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxFlat_set_border_size(StyleBoxFlat *self,int size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "set_border_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int StyleBoxFlat_get_border_size(StyleBoxFlat *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "get_border_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxFlat_set_border_blend(StyleBoxFlat *self,bool blend){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "set_border_blend");
  const void* __args[1] = { &blend };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StyleBoxFlat_get_border_blend(StyleBoxFlat *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "get_border_blend");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxFlat_set_draw_center(StyleBoxFlat *self,bool size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "set_draw_center");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StyleBoxFlat_get_draw_center(StyleBoxFlat *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxFlat", "get_draw_center");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_StyleBoxFlat(StyleBoxFlat *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void StyleBoxImageMask_set_image(StyleBoxImageMask *self,Image const &image){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxImageMask", "set_image");
  const void* __args[1] = { &image };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Image StyleBoxImageMask_get_image(StyleBoxImageMask *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxImageMask", "get_image");
  Image ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxImageMask_set_expand(StyleBoxImageMask *self,bool expand){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxImageMask", "set_expand");
  const void* __args[1] = { &expand };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StyleBoxImageMask_get_expand(StyleBoxImageMask *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxImageMask", "get_expand");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxImageMask_set_expand_margin_size(StyleBoxImageMask *self,int margin,float size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxImageMask", "set_expand_margin_size");
  const void* __args[2] = { &margin, &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StyleBoxImageMask_get_expand_margin_size(StyleBoxImageMask *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxImageMask", "get_expand_margin_size");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_StyleBoxImageMask(StyleBoxImageMask *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void StyleBoxTexture_set_texture(StyleBoxTexture *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > StyleBoxTexture_get_texture(StyleBoxTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "get_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxTexture_set_margin_size(StyleBoxTexture *self,int margin,float size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "set_margin_size");
  const void* __args[2] = { &margin, &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StyleBoxTexture_get_margin_size(StyleBoxTexture *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "get_margin_size");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void StyleBoxTexture_set_expand_margin_size(StyleBoxTexture *self,int margin,float size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "set_expand_margin_size");
  const void* __args[2] = { &margin, &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StyleBoxTexture_get_expand_margin_size(StyleBoxTexture *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "get_expand_margin_size");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void StyleBoxTexture_set_region_rect(StyleBoxTexture *self,Rect2 const &region){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "set_region_rect");
  const void* __args[1] = { &region };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 StyleBoxTexture_get_region_rect(StyleBoxTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "get_region_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StyleBoxTexture_set_draw_center(StyleBoxTexture *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "set_draw_center");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StyleBoxTexture_get_draw_center(StyleBoxTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StyleBoxTexture", "get_draw_center");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_StyleBoxTexture(StyleBoxTexture *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void SurfaceTool_begin(SurfaceTool *self,int primitive){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "begin");
  const void* __args[1] = { &primitive };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_vertex(SurfaceTool *self,Vector3 const &vertex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_vertex");
  const void* __args[1] = { &vertex };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_color(SurfaceTool *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_normal(SurfaceTool *self,Vector3 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_normal");
  const void* __args[1] = { &normal };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_tangent(SurfaceTool *self,Plane const &tangent){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_tangent");
  const void* __args[1] = { &tangent };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_uv(SurfaceTool *self,Vector2 const &uv){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_uv");
  const void* __args[1] = { &uv };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_uv2(SurfaceTool *self,Vector2 const &uv2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_uv2");
  const void* __args[1] = { &uv2 };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_bones(SurfaceTool *self,IntArray const &bones){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_bones");
  const void* __args[1] = { &bones };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_weights(SurfaceTool *self,RealArray const &weights){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_weights");
  const void* __args[1] = { &weights };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_smooth_group(SurfaceTool *self,bool smooth){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_smooth_group");
  const void* __args[1] = { &smooth };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_add_triangle_fan__SWIG_0(SurfaceTool *self,Vector3Array const &vertexes,Vector2Array const &uvs=Vector2Array(),ColorArray const &colors=ColorArray(),Vector2Array const &uv2s=Vector2Array(),Vector3Array const &normals=Vector3Array(),Array const &tangents=Array()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "add_triangle_fan");
  const void* __args[6] = { &vertexes, &uvs, &colors, &uv2s, &normals, &tangents };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_set_material(SurfaceTool *self,Material *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "set_material");
  const void* __args[1] = { material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SurfaceTool_index(SurfaceTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "index");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void SurfaceTool_deindex(SurfaceTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "deindex");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void SurfaceTool_generate_normals(SurfaceTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "generate_normals");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Ref< Mesh > SurfaceTool_commit__SWIG_0(SurfaceTool *self,Mesh *existing=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "commit");
  const void* __args[1] = { existing };
  Ref<Mesh> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SurfaceTool_clear(SurfaceTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SurfaceTool", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_SurfaceTool(SurfaceTool *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int TCP_Server_listen__SWIG_0(TCP_Server *self,int port,StringArray const &accepted_hosts=StringArray()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TCP_Server", "listen");
  const void* __args[2] = { &port, &accepted_hosts };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool TCP_Server_is_connection_available(TCP_Server *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TCP_Server", "is_connection_available");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *TCP_Server_take_connection(TCP_Server *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TCP_Server", "take_connection");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TCP_Server_stop(TCP_Server *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TCP_Server", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN TCP_Server *new_TCP_Server(){ return TCP_Server::create(); }
SWIGINTERN void delete_TCP_Server(TCP_Server *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int Texture_get_width(Texture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "get_width");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Texture_get_height(Texture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "get_height");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Texture_get_size(Texture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "get_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID Texture_get_rid(Texture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "get_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Texture_has_alpha(Texture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "has_alpha");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Texture_set_flags(Texture *self,int flags){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "set_flags");
  const void* __args[1] = { &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Texture_get_flags(Texture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "get_flags");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Texture_draw__SWIG_0(Texture *self,RID const &canvas_item,Vector2 const &pos,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "draw");
  const void* __args[4] = { &canvas_item, &pos, &modulate, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Texture_draw_rect__SWIG_0(Texture *self,RID const &canvas_item,Rect2 const &rect,bool tile,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "draw_rect");
  const void* __args[5] = { &canvas_item, &rect, &tile, &modulate, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Texture_draw_rect_region__SWIG_0(Texture *self,RID const &canvas_item,Rect2 const &rect,Rect2 const &src_rect,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Texture", "draw_rect_region");
  const void* __args[5] = { &canvas_item, &rect, &src_rect, &modulate, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_Texture(Texture *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Theme_set_icon(Theme *self,String const &name,String const &type,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "set_icon");
  const void* __args[3] = { &name, &type, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Theme_get_icon(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_icon");
  const void* __args[2] = { &name, &type };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Theme_has_icon(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "has_icon");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_clear_icon(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "clear_icon");
  const void* __args[2] = { &name, &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray Theme_get_icon_list(Theme *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_icon_list");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_set_stylebox(Theme *self,String const &name,String const &type,StyleBox *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "set_stylebox");
  const void* __args[3] = { &name, &type, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< StyleBox > Theme_get_stylebox(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_stylebox");
  const void* __args[2] = { &name, &type };
  Ref<StyleBox> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Theme_has_stylebox(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "has_stylebox");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_clear_stylebox(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "clear_stylebox");
  const void* __args[2] = { &name, &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray Theme_get_stylebox_list(Theme *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_stylebox_list");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray Theme_get_stylebox_types(Theme *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_stylebox_types");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Theme_set_font(Theme *self,String const &name,String const &type,Font *font){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "set_font");
  const void* __args[3] = { &name, &type, font };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Font > Theme_get_font(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_font");
  const void* __args[2] = { &name, &type };
  Ref<Font> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Theme_has_font(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "has_font");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_clear_font(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "clear_font");
  const void* __args[2] = { &name, &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray Theme_get_font_list(Theme *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_font_list");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_set_color(Theme *self,String const &name,String const &type,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "set_color");
  const void* __args[3] = { &name, &type, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Theme_get_color(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_color");
  const void* __args[2] = { &name, &type };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Theme_has_color(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "has_color");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_clear_color(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "clear_color");
  const void* __args[2] = { &name, &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray Theme_get_color_list(Theme *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_color_list");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_set_constant(Theme *self,String const &name,String const &type,int constant){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "set_constant");
  const void* __args[3] = { &name, &type, &constant };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Theme_get_constant(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_constant");
  const void* __args[2] = { &name, &type };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Theme_has_constant(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "has_constant");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_clear_constant(Theme *self,String const &name,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "clear_constant");
  const void* __args[2] = { &name, &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray Theme_get_constant_list(Theme *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_constant_list");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_set_default_font(Theme *self,Object *font){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "set_default_font");
  const void* __args[1] = { font };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *Theme_get_default_font(Theme *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_default_font");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN StringArray Theme_get_type_list(Theme *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "get_type_list");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Theme_copy_default_theme(Theme *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Theme", "copy_default_theme");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_Theme(Theme *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void TileSet_create_tile(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "create_tile");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TileSet_tile_set_name(TileSet *self,int id,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_name");
  const void* __args[2] = { &id, &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String TileSet_tile_get_name(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_name");
  const void* __args[1] = { &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_texture(TileSet *self,int id,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_texture");
  const void* __args[2] = { &id, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > TileSet_tile_get_texture(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_texture");
  const void* __args[1] = { &id };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_material(TileSet *self,int id,CanvasItemMaterial *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_material");
  const void* __args[2] = { &id, material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< CanvasItemMaterial > TileSet_tile_get_material(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_material");
  const void* __args[1] = { &id };
  Ref<CanvasItemMaterial> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_texture_offset(TileSet *self,int id,Vector2 const &texture_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_texture_offset");
  const void* __args[2] = { &id, &texture_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 TileSet_tile_get_texture_offset(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_texture_offset");
  const void* __args[1] = { &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_shape_offset(TileSet *self,int id,Vector2 const &shape_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_shape_offset");
  const void* __args[2] = { &id, &shape_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 TileSet_tile_get_shape_offset(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_shape_offset");
  const void* __args[1] = { &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_region(TileSet *self,int id,Rect2 const &region){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_region");
  const void* __args[2] = { &id, &region };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 TileSet_tile_get_region(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_region");
  const void* __args[1] = { &id };
  Rect2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_shape(TileSet *self,int id,Shape2D *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_shape");
  const void* __args[2] = { &id, shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Shape2D > TileSet_tile_get_shape(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_shape");
  const void* __args[1] = { &id };
  Ref<Shape2D> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_shapes(TileSet *self,int id,Array const &shapes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_shapes");
  const void* __args[2] = { &id, &shapes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array TileSet_tile_get_shapes(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_shapes");
  const void* __args[1] = { &id };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_navigation_polygon(TileSet *self,int id,NavigationPolygon *navigation_polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_navigation_polygon");
  const void* __args[2] = { &id, navigation_polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< NavigationPolygon > TileSet_tile_get_navigation_polygon(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_navigation_polygon");
  const void* __args[1] = { &id };
  Ref<NavigationPolygon> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_navigation_polygon_offset(TileSet *self,int id,Vector2 const &navigation_polygon_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_navigation_polygon_offset");
  const void* __args[2] = { &id, &navigation_polygon_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 TileSet_tile_get_navigation_polygon_offset(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_navigation_polygon_offset");
  const void* __args[1] = { &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_light_occluder(TileSet *self,int id,OccluderPolygon2D *light_occluder){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_light_occluder");
  const void* __args[2] = { &id, light_occluder };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< OccluderPolygon2D > TileSet_tile_get_light_occluder(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_light_occluder");
  const void* __args[1] = { &id };
  Ref<OccluderPolygon2D> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_tile_set_occluder_offset(TileSet *self,int id,Vector2 const &occluder_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_set_occluder_offset");
  const void* __args[2] = { &id, &occluder_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 TileSet_tile_get_occluder_offset(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "tile_get_occluder_offset");
  const void* __args[1] = { &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileSet_remove_tile(TileSet *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "remove_tile");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TileSet_clear(TileSet *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int TileSet_get_last_unused_tile_id(TileSet *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "get_last_unused_tile_id");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TileSet_find_tile_by_name(TileSet *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "find_tile_by_name");
  const void* __args[1] = { &name };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array TileSet_get_tiles_ids(TileSet *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileSet", "get_tiles_ids");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_TileSet(TileSet *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Translation_set_locale(Translation *self,String const &locale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "set_locale");
  const void* __args[1] = { &locale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Translation_get_locale(Translation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "get_locale");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Translation_add_message(Translation *self,String const &src_message,String const &xlated_message){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "add_message");
  const void* __args[2] = { &src_message, &xlated_message };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Translation_get_message(Translation *self,String const &src_message){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "get_message");
  const void* __args[1] = { &src_message };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Translation_erase_message(Translation *self,String const &src_message){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "erase_message");
  const void* __args[1] = { &src_message };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray Translation_get_message_list(Translation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "get_message_list");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Translation_get_message_count(Translation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Translation", "get_message_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Translation(Translation *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void TranslationServer_set_locale(TranslationServer *self,String const &locale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TranslationServer", "set_locale");
  const void* __args[1] = { &locale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String TranslationServer_get_locale(TranslationServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TranslationServer", "get_locale");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String TranslationServer_translate(TranslationServer *self,String const &message){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TranslationServer", "translate");
  const void* __args[1] = { &message };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TranslationServer_add_translation(TranslationServer *self,Translation *translation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TranslationServer", "add_translation");
  const void* __args[1] = { translation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TranslationServer_remove_translation(TranslationServer *self,Translation *translation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TranslationServer", "remove_translation");
  const void* __args[1] = { translation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TranslationServer_clear(TranslationServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TranslationServer", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN TranslationServer *TranslationServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("TranslationServer")->cast_to<TranslationServer>(); }
SWIGINTERN void TreeItem_set_cell_mode(TreeItem *self,int column,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_cell_mode");
  const void* __args[2] = { &column, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TreeItem_get_cell_mode(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_cell_mode");
  const void* __args[1] = { &column };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_checked(TreeItem *self,int column,bool checked){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_checked");
  const void* __args[2] = { &column, &checked };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TreeItem_is_checked(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "is_checked");
  const void* __args[1] = { &column };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_text(TreeItem *self,int column,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_text");
  const void* __args[2] = { &column, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String TreeItem_get_text(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_text");
  const void* __args[1] = { &column };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_icon(TreeItem *self,int column,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_icon");
  const void* __args[2] = { &column, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > TreeItem_get_icon(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_icon");
  const void* __args[1] = { &column };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_icon_region(TreeItem *self,int column,Rect2 const &region){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_icon_region");
  const void* __args[2] = { &column, &region };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 TreeItem_get_icon_region(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_icon_region");
  const void* __args[1] = { &column };
  Rect2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_icon_max_width(TreeItem *self,int column,int width){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_icon_max_width");
  const void* __args[2] = { &column, &width };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TreeItem_get_icon_max_width(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_icon_max_width");
  const void* __args[1] = { &column };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_range(TreeItem *self,int column,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_range");
  const void* __args[2] = { &column, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float TreeItem_get_range(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_range");
  const void* __args[1] = { &column };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_range_config__SWIG_0(TreeItem *self,int column,float min,float max,float step,bool expr=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_range_config");
  const void* __args[5] = { &column, &min, &max, &step, &expr };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Dictionary TreeItem_get_range_config(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_range_config");
  const void* __args[1] = { &column };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_metadata(TreeItem *self,int column,Variant const &meta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_metadata");
  const void* __args[2] = { &column, &meta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_get_metadata(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_metadata");
  const void* __args[1] = { &column };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_set_custom_draw(TreeItem *self,int column,Object *object,String const &callback){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_custom_draw");
  const void* __args[3] = { &column, object, &callback };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_set_collapsed(TreeItem *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_collapsed");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TreeItem_is_collapsed(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "is_collapsed");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_get_next(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_next");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_get_prev(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_prev");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_get_parent(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_parent");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_get_children(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_children");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_get_next_visible(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_next_visible");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_get_prev_visible(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_prev_visible");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *TreeItem_remove_child(TreeItem *self,Object *child){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "remove_child");
  const void* __args[1] = { child };
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_selectable(TreeItem *self,int column,bool selectable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_selectable");
  const void* __args[2] = { &column, &selectable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TreeItem_is_selectable(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "is_selectable");
  const void* __args[1] = { &column };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool TreeItem_is_selected(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "is_selected");
  const void* __args[1] = { &column };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_select(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "select");
  const void* __args[1] = { &column };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_deselect(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "deselect");
  const void* __args[1] = { &column };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_set_editable(TreeItem *self,int column,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_editable");
  const void* __args[2] = { &column, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TreeItem_is_editable(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "is_editable");
  const void* __args[1] = { &column };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_custom_color(TreeItem *self,int column,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_custom_color");
  const void* __args[2] = { &column, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_clear_custom_color(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "clear_custom_color");
  const void* __args[1] = { &column };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_set_custom_bg_color__SWIG_0(TreeItem *self,int column,Color const &color,bool just_outline=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_custom_bg_color");
  const void* __args[3] = { &column, &color, &just_outline };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TreeItem_clear_custom_bg_color(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "clear_custom_bg_color");
  const void* __args[1] = { &column };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color TreeItem_get_custom_bg_color(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_custom_bg_color");
  const void* __args[1] = { &column };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_add_button__SWIG_0(TreeItem *self,int column,Texture *button,int button_idx=-1,bool disabled=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "add_button");
  const void* __args[4] = { &column, button, &button_idx, &disabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TreeItem_get_button_count(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_button_count");
  const void* __args[1] = { &column };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > TreeItem_get_button(TreeItem *self,int column,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_button");
  const void* __args[2] = { &column, &button_idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_erase_button(TreeItem *self,int column,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "erase_button");
  const void* __args[2] = { &column, &button_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TreeItem_is_button_disabled(TreeItem *self,int column,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "is_button_disabled");
  const void* __args[2] = { &column, &button_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_set_tooltip(TreeItem *self,int column,String const &tooltip){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "set_tooltip");
  const void* __args[2] = { &column, &tooltip };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String TreeItem_get_tooltip(TreeItem *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "get_tooltip");
  const void* __args[1] = { &column };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TreeItem_move_to_top(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "move_to_top");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TreeItem_move_to_bottom(TreeItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TreeItem", "move_to_bottom");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void UndoRedo_create_action__SWIG_0(UndoRedo *self,String const &name,bool mergeable=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "create_action");
  const void* __args[2] = { &name, &mergeable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_commit_action(UndoRedo *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "commit_action");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void UndoRedo_add_do_method__SWIG_0(UndoRedo *self,Object *object,String const &method,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "add_do_method");
  const void* __args[7] = { object, &method, &arg0_, &arg1_, &arg2_, &arg3_, &arg4_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_add_undo_method__SWIG_0(UndoRedo *self,Object *object,String const &method,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "add_undo_method");
  const void* __args[7] = { object, &method, &arg0_, &arg1_, &arg2_, &arg3_, &arg4_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_add_do_property(UndoRedo *self,Object *object,String const &property,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "add_do_property");
  const void* __args[3] = { object, &property, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_add_undo_property(UndoRedo *self,Object *object,String const &property,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "add_undo_property");
  const void* __args[3] = { object, &property, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_add_do_reference(UndoRedo *self,Object *object){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "add_do_reference");
  const void* __args[1] = { object };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_add_undo_reference(UndoRedo *self,Object *object){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "add_undo_reference");
  const void* __args[1] = { object };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void UndoRedo_clear_history(UndoRedo *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "clear_history");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN String UndoRedo_get_current_action_name(UndoRedo *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "get_current_action_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int UndoRedo_get_version(UndoRedo *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("UndoRedo", "get_version");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_VideoStream(VideoStream *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_VideoStreamTheora(VideoStreamTheora *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN RID VisualServer_texture_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_texture_create_from_image__SWIG_0(VisualServer *self,Image const &arg0_,int arg1_=7){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_create_from_image");
  const void* __args[2] = { &arg0_, &arg1_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_texture_set_flags(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_set_flags");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_texture_get_flags(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_get_flags");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_texture_get_width(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_get_width");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_texture_get_height(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_get_height");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_texture_set_shrink_all_x2_on_set_data(VisualServer *self,bool shrink){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "texture_set_shrink_all_x2_on_set_data");
  const void* __args[1] = { &shrink };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_shader_create__SWIG_0(VisualServer *self,int mode=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "shader_create");
  const void* __args[1] = { &mode };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_shader_set_mode(VisualServer *self,RID const &shader,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "shader_set_mode");
  const void* __args[2] = { &shader, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_material_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_material_set_shader(VisualServer *self,RID const &shader,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_set_shader");
  const void* __args[2] = { &shader, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_material_get_shader(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_get_shader");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_material_set_param(VisualServer *self,RID const &arg0_,String const &arg1_,Variant const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_set_param");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_material_get_param(VisualServer *self,RID const &arg0_,String const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_get_param");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_material_set_flag(VisualServer *self,RID const &arg0_,int arg1_,bool arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_set_flag");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_material_get_flag(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_get_flag");
  const void* __args[2] = { &arg0_, &arg1_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_material_set_blend_mode(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_set_blend_mode");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_material_get_blend_mode(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_get_blend_mode");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_material_set_line_width(VisualServer *self,RID const &arg0_,float arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_set_line_width");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_material_get_line_width(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "material_get_line_width");
  const void* __args[1] = { &arg0_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_mesh_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_mesh_add_surface__SWIG_0(VisualServer *self,RID const &arg0_,int arg1_,Array const &arg2_,Array const &arg3_,bool arg4_=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_add_surface");
  const void* __args[5] = { &arg0_, &arg1_, &arg2_, &arg3_, &arg4_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_mesh_surface_set_material__SWIG_0(VisualServer *self,RID const &arg0_,int arg1_,RID const &arg2_,bool arg3_=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_surface_set_material");
  const void* __args[4] = { &arg0_, &arg1_, &arg2_, &arg3_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_mesh_surface_get_material(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_surface_get_material");
  const void* __args[2] = { &arg0_, &arg1_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_mesh_surface_get_array_len(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_surface_get_array_len");
  const void* __args[2] = { &arg0_, &arg1_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_mesh_surface_get_array_index_len(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_surface_get_array_index_len");
  const void* __args[2] = { &arg0_, &arg1_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_mesh_surface_get_format(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_surface_get_format");
  const void* __args[2] = { &arg0_, &arg1_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_mesh_surface_get_primitive_type(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_surface_get_primitive_type");
  const void* __args[2] = { &arg0_, &arg1_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_mesh_remove_surface(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_remove_surface");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_mesh_get_surface_count(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_get_surface_count");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_multimesh_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_multimesh_set_mesh(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_set_mesh");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_multimesh_set_aabb(VisualServer *self,RID const &arg0_,AABB const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_set_aabb");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_multimesh_instance_set_transform(VisualServer *self,RID const &arg0_,int arg1_,Transform const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_instance_set_transform");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_multimesh_instance_set_color(VisualServer *self,RID const &arg0_,int arg1_,Color const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_instance_set_color");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_multimesh_get_mesh(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_get_mesh");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN AABB VisualServer_multimesh_get_aabb(VisualServer *self,RID const &arg0_,AABB const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_get_aabb");
  const void* __args[2] = { &arg0_, &arg1_ };
  AABB ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Transform VisualServer_multimesh_instance_get_transform(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_instance_get_transform");
  const void* __args[2] = { &arg0_, &arg1_ };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color VisualServer_multimesh_instance_get_color(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "multimesh_instance_get_color");
  const void* __args[2] = { &arg0_, &arg1_ };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_particles_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_amount(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_amount");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_particles_get_amount(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_amount");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_emitting(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_emitting");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_particles_is_emitting(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_is_emitting");
  const void* __args[1] = { &arg0_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_visibility_aabb(VisualServer *self,RID const &arg0_,AABB const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_visibility_aabb");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN AABB VisualServer_particles_get_visibility_aabb(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_visibility_aabb");
  const void* __args[1] = { &arg0_ };
  AABB ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_variable(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_variable");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_particles_get_variable(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_variable");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_randomness(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_randomness");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_particles_get_randomness(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_randomness");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_color_phases(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_color_phases");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_particles_get_color_phases(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_color_phases");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_color_phase_pos(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_color_phase_pos");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_particles_get_color_phase_pos(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_color_phase_pos");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_color_phase_color(VisualServer *self,RID const &arg0_,int arg1_,Color const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_color_phase_color");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color VisualServer_particles_get_color_phase_color(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_color_phase_color");
  const void* __args[2] = { &arg0_, &arg1_ };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_attractors(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_attractors");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_particles_get_attractors(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_attractors");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_attractor_pos(VisualServer *self,RID const &arg0_,int arg1_,Vector3 const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_attractor_pos");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 VisualServer_particles_get_attractor_pos(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_attractor_pos");
  const void* __args[2] = { &arg0_, &arg1_ };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_attractor_strength(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_attractor_strength");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_particles_get_attractor_strength(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_get_attractor_strength");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_particles_set_material__SWIG_0(VisualServer *self,RID const &arg0_,RID const &arg1_,bool arg2_=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_material");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_particles_set_height_from_velocity(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_set_height_from_velocity");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_particles_has_height_from_velocity(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "particles_has_height_from_velocity");
  const void* __args[1] = { &arg0_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_light_create(VisualServer *self,int arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_create");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int VisualServer_light_get_type(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_get_type");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_light_set_color(VisualServer *self,RID const &arg0_,int arg1_,Color const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_set_color");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color VisualServer_light_get_color(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_get_color");
  const void* __args[2] = { &arg0_, &arg1_ };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_light_set_shadow(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_set_shadow");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_light_has_shadow(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_has_shadow");
  const void* __args[1] = { &arg0_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_light_set_volumetric(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_set_volumetric");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_light_is_volumetric(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_is_volumetric");
  const void* __args[1] = { &arg0_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_light_set_projector(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_set_projector");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_light_get_projector(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_get_projector");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_light_set_var(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_set_var");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_light_get_var(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "light_get_var");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_skeleton_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "skeleton_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_skeleton_resize(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "skeleton_resize");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_skeleton_get_bone_count(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "skeleton_get_bone_count");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_skeleton_bone_set_transform(VisualServer *self,RID const &arg0_,int arg1_,Transform const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "skeleton_bone_set_transform");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform VisualServer_skeleton_bone_get_transform(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "skeleton_bone_get_transform");
  const void* __args[2] = { &arg0_, &arg1_ };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_room_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "room_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_room_set_bounds(VisualServer *self,RID const &arg0_,Dictionary const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "room_set_bounds");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Dictionary VisualServer_room_get_bounds(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "room_get_bounds");
  const void* __args[1] = { &arg0_ };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_portal_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_portal_set_shape(VisualServer *self,RID const &arg0_,Vector2Array const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_set_shape");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array VisualServer_portal_get_shape(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_get_shape");
  const void* __args[1] = { &arg0_ };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_portal_set_enabled(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_set_enabled");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_portal_is_enabled(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_is_enabled");
  const void* __args[1] = { &arg0_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_portal_set_disable_distance(VisualServer *self,RID const &arg0_,float arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_set_disable_distance");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_portal_get_disable_distance(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_get_disable_distance");
  const void* __args[1] = { &arg0_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_portal_set_disabled_color(VisualServer *self,RID const &arg0_,Color const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_set_disabled_color");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color VisualServer_portal_get_disabled_color(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "portal_get_disabled_color");
  const void* __args[1] = { &arg0_ };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_camera_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "camera_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_camera_set_perspective(VisualServer *self,RID const &arg0_,float arg1_,float arg2_,float arg3_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "camera_set_perspective");
  const void* __args[4] = { &arg0_, &arg1_, &arg2_, &arg3_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_camera_set_orthogonal(VisualServer *self,RID const &arg0_,float arg1_,float arg2_,float arg3_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "camera_set_orthogonal");
  const void* __args[4] = { &arg0_, &arg1_, &arg2_, &arg3_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_camera_set_transform(VisualServer *self,RID const &arg0_,Transform const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "camera_set_transform");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_viewport_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_viewport_set_rect(VisualServer *self,RID const &arg0_,Rect2 const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_set_rect");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 VisualServer_viewport_get_rect(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_get_rect");
  const void* __args[1] = { &arg0_ };
  Rect2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_viewport_attach_camera__SWIG_0(VisualServer *self,RID const &arg0_,RID const &arg1_=RID()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_attach_camera");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_viewport_get_attached_camera(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_get_attached_camera");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_viewport_get_scenario(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_get_scenario");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_viewport_attach_canvas(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_attach_canvas");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_viewport_remove_canvas(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_remove_canvas");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_viewport_set_global_canvas_transform(VisualServer *self,RID const &arg0_,Matrix32 const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_set_global_canvas_transform");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_scenario_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "scenario_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_scenario_set_debug(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "scenario_set_debug");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_instance_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_instance_get_base(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_get_base");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_instance_get_base_aabb(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_get_base_aabb");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_instance_set_transform(VisualServer *self,RID const &arg0_,Transform const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_set_transform");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform VisualServer_instance_get_transform(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_get_transform");
  const void* __args[1] = { &arg0_ };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_instance_attach_object_instance_ID(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_attach_object_instance_ID");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_instance_get_object_instance_ID(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_get_object_instance_ID");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_instance_attach_skeleton(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_attach_skeleton");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_instance_get_skeleton(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_get_skeleton");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_instance_set_room(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_set_room");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_instance_get_room(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_get_room");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_instance_set_exterior(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_set_exterior");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisualServer_instance_is_exterior(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_is_exterior");
  const void* __args[1] = { &arg0_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array VisualServer_instances_cull_aabb(VisualServer *self,AABB const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instances_cull_aabb");
  const void* __args[2] = { &arg0_, &arg1_ };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array VisualServer_instances_cull_ray(VisualServer *self,Vector3 const &arg0_,Vector3 const &arg1_,RID const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instances_cull_ray");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array VisualServer_instances_cull_convex(VisualServer *self,Array const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instances_cull_convex");
  const void* __args[2] = { &arg0_, &arg1_ };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_instance_geometry_override_material_param(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_geometry_override_material_param");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_instance_geometry_get_material_param(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "instance_geometry_get_material_param");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_get_test_cube(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "get_test_cube");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_canvas_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID VisualServer_canvas_item_create(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualServer_canvas_item_set_parent(VisualServer *self,RID const &arg0_,RID const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_parent");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_canvas_item_get_parent(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_get_parent");
  const void* __args[1] = { &arg0_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_canvas_item_set_transform(VisualServer *self,RID const &arg0_,Matrix32 const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_transform");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_set_custom_rect(VisualServer *self,RID const &arg0_,bool arg1_,Rect2 const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_custom_rect");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_set_clip(VisualServer *self,RID const &arg0_,bool arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_clip");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_set_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_opacity");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_canvas_item_get_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_get_opacity");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_canvas_item_set_self_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_self_opacity");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VisualServer_canvas_item_get_self_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_get_self_opacity");
  const void* __args[2] = { &arg0_, &arg1_ };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_canvas_item_set_z(VisualServer *self,RID const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_set_z");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_add_line__SWIG_0(VisualServer *self,RID const &arg0_,Vector2 const &arg1_,Vector2 const &arg2_,Color const &arg3_,float arg4_=1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_add_line");
  const void* __args[5] = { &arg0_, &arg1_, &arg2_, &arg3_, &arg4_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_add_rect(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,Color const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_add_rect");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_add_texture_rect__SWIG_0(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,RID const &arg2_,bool arg3_,Color const &arg4_=Color(1,1,1,1),bool arg5_=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_add_texture_rect");
  const void* __args[6] = { &arg0_, &arg1_, &arg2_, &arg3_, &arg4_, &arg5_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_add_texture_rect_region__SWIG_0(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,RID const &arg2_,Rect2 const &arg3_,Color const &arg4_=Color(1,1,1,1),bool arg5_=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_add_texture_rect_region");
  const void* __args[6] = { &arg0_, &arg1_, &arg2_, &arg3_, &arg4_, &arg5_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_add_style_box__SWIG_0(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,Rect2 const &arg2_,RID const &arg3_,RealArray const &arg4_,Color const &arg5_=Color(1,1,1,1)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_add_style_box");
  const void* __args[6] = { &arg0_, &arg1_, &arg2_, &arg3_, &arg4_, &arg5_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_add_circle(VisualServer *self,RID const &arg0_,Vector2 const &arg1_,float arg2_,Color const &arg3_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_add_circle");
  const void* __args[4] = { &arg0_, &arg1_, &arg2_, &arg3_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_viewport_set_canvas_transform(VisualServer *self,RID const &arg0_,RID const &arg1_,Matrix32 const &arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "viewport_set_canvas_transform");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_clear(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_clear");
  const void* __args[1] = { &arg0_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_canvas_item_raise(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "canvas_item_raise");
  const void* __args[1] = { &arg0_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_cursor_set_rotation(VisualServer *self,float arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "cursor_set_rotation");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_cursor_set_texture(VisualServer *self,RID const &arg0_,Vector2 const &arg1_,int arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "cursor_set_texture");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_cursor_set_visible(VisualServer *self,bool arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "cursor_set_visible");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_cursor_set_pos(VisualServer *self,Vector2 const &arg0_,int arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "cursor_set_pos");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_black_bars_set_margins(VisualServer *self,int left,int top,int right,int bottom){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "black_bars_set_margins");
  const void* __args[4] = { &left, &top, &right, &bottom };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_black_bars_set_images(VisualServer *self,RID const &left,RID const &top,RID const &right,RID const &bottom){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "black_bars_set_images");
  const void* __args[4] = { &left, &top, &right, &bottom };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID VisualServer_make_sphere_mesh(VisualServer *self,int arg0_,int arg1_,float arg2_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "make_sphere_mesh");
  const void* __args[3] = { &arg0_, &arg1_, &arg2_ };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisualServer_mesh_add_surface_from_planes(VisualServer *self,RID const &arg0_,Array const &arg1_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "mesh_add_surface_from_planes");
  const void* __args[2] = { &arg0_, &arg1_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_draw(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "draw");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void VisualServer_sync(VisualServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "sync");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void VisualServer_free_rid(VisualServer *self,RID const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "free_rid");
  const void* __args[1] = { &arg0_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualServer_set_default_clear_color(VisualServer *self,Color const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "set_default_clear_color");
  const void* __args[1] = { &arg0_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualServer_get_render_info(VisualServer *self,int arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualServer", "get_render_info");
  const void* __args[1] = { &arg0_ };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN VisualServer *VisualServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("VisualServer")->cast_to<VisualServer>(); }
SWIGINTERN Object *WeakRef_get_ref(WeakRef *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("WeakRef", "get_ref");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_WeakRef(WeakRef *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN RID World_get_space(World *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World", "get_space");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID World_get_scenario(World *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World", "get_scenario");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID World_get_sound_space(World *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World", "get_sound_space");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void World_set_environment(World *self,Environment *env){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World", "set_environment");
  const void* __args[1] = { env };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Environment > World_get_environment(World *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World", "get_environment");
  Ref<Environment> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN PhysicsDirectSpaceState *World_get_direct_space_state(World *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World", "get_direct_space_state");
  PhysicsDirectSpaceState* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_World(World *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN RID World2D_get_canvas(World2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World2D", "get_canvas");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID World2D_get_space(World2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World2D", "get_space");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID World2D_get_sound_space(World2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World2D", "get_sound_space");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Physics2DDirectSpaceState *World2D_get_direct_space_state(World2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("World2D", "get_direct_space_state");
  Physics2DDirectSpaceState* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_World2D(World2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int XMLParser_read(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "read");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int XMLParser_get_node_type(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_node_type");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String XMLParser_get_node_name(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_node_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String XMLParser_get_node_data(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_node_data");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int XMLParser_get_node_offset(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_node_offset");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int XMLParser_get_attribute_count(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_attribute_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String XMLParser_get_attribute_name(XMLParser *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_attribute_name");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String XMLParser_get_attribute_value(XMLParser *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_attribute_value");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool XMLParser_has_attribute(XMLParser *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "has_attribute");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String XMLParser_get_named_attribute_value(XMLParser *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_named_attribute_value");
  const void* __args[1] = { &name };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String XMLParser_get_named_attribute_value_safe(XMLParser *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_named_attribute_value_safe");
  const void* __args[1] = { &name };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool XMLParser_is_empty(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "is_empty");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int XMLParser_get_current_line(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "get_current_line");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void XMLParser_skip_section(XMLParser *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "skip_section");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int XMLParser_seek(XMLParser *self,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "seek");
  const void* __args[1] = { &pos };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int XMLParser_open(XMLParser *self,String const &file){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "open");
  const void* __args[1] = { &file };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int XMLParser_open_buffer(XMLParser *self,RawArray const &buffer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("XMLParser", "open_buffer");
  const void* __args[1] = { &buffer };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_XMLParser(XMLParser *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int _Directory_open(_Directory *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "open");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _Directory_list_dir_begin(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "list_dir_begin");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _Directory_get_next(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "get_next");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _Directory_current_is_dir(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "current_is_dir");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _Directory_list_dir_end(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "list_dir_end");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int _Directory_get_drive_count(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "get_drive_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _Directory_get_drive(_Directory *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "get_drive");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _Directory_change_dir(_Directory *self,String const &todir){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "change_dir");
  const void* __args[1] = { &todir };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _Directory_get_current_dir(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "get_current_dir");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _Directory_make_dir(_Directory *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "make_dir");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _Directory_make_dir_recursive(_Directory *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "make_dir_recursive");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _Directory_file_exists(_Directory *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "file_exists");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _Directory_dir_exists(_Directory *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "dir_exists");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _Directory_get_space_left(_Directory *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "get_space_left");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _Directory_copy(_Directory *self,String const &from,String const &to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "copy");
  const void* __args[2] = { &from, &to };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _Directory_rename(_Directory *self,String const &from,String const &to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "rename");
  const void* __args[2] = { &from, &to };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _Directory_remove(_Directory *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Directory", "remove");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete__Directory(_Directory *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int _File_open_encrypted(_File *self,String const &path,int mode_flags,RawArray const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "open_encrypted");
  const void* __args[3] = { &path, &mode_flags, &key };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _File_open_encrypted_with_pass(_File *self,String const &path,int mode_flags,String const &pass){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "open_encrypted_with_pass");
  const void* __args[3] = { &path, &mode_flags, &pass };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _File_open(_File *self,String const &path,int flags){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "open");
  const void* __args[2] = { &path, &flags };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _File_close(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "close");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool _File_is_open(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "is_open");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _File_seek(_File *self,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "seek");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_seek_end__SWIG_0(_File *self,int pos=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "seek_end");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _File_get_pos(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_pos");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _File_get_len(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_len");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _File_eof_reached(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "eof_reached");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _File_get_8(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_8");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _File_get_16(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_16");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _File_get_32(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_32");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _File_get_64(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_64");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float _File_get_float(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_float");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float _File_get_double(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_double");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float _File_get_real(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_real");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RawArray _File_get_buffer(_File *self,int len){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_buffer");
  const void* __args[1] = { &len };
  RawArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _File_get_line(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_line");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _File_get_as_text(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_as_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _File_get_md5(_File *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_md5");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _File_get_sha256(_File *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_sha256");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _File_get_endian_swap(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_endian_swap");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _File_set_endian_swap(_File *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "set_endian_swap");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _File_get_error(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_error");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _File_get_var(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_var");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN StringArray _File_get_csv_line__SWIG_0(_File *self,String const &delim=","){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_csv_line");
  const void* __args[1] = { &delim };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _File_store_8(_File *self,int value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_8");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_16(_File *self,int value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_16");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_32(_File *self,int value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_32");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_64(_File *self,int value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_64");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_float(_File *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_float");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_double(_File *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_double");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_real(_File *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_real");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_buffer(_File *self,RawArray const &buffer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_buffer");
  const void* __args[1] = { &buffer };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_line(_File *self,String const &line){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_line");
  const void* __args[1] = { &line };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_string(_File *self,String const &string){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_string");
  const void* __args[1] = { &string };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_var(_File *self,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_var");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _File_store_pascal_string(_File *self,String const &string){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "store_pascal_string");
  const void* __args[1] = { &string };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String _File_get_pascal_string(_File *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "get_pascal_string");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _File_file_exists(_File *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_File", "file_exists");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete__File(_File *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Array _Geometry_build_box_planes(_Geometry *self,Vector3 const &extents){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "build_box_planes");
  const void* __args[1] = { &extents };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array _Geometry_build_cylinder_planes__SWIG_0(_Geometry *self,float radius,float height,int sides,int axis=2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "build_cylinder_planes");
  const void* __args[4] = { &radius, &height, &sides, &axis };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array _Geometry_build_capsule_planes__SWIG_0(_Geometry *self,float radius,float height,int sides,int lats,int axis=2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "build_capsule_planes");
  const void* __args[5] = { &radius, &height, &sides, &lats, &axis };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float _Geometry_segment_intersects_circle(_Geometry *self,Vector2 const &segment_from,Vector2 const &segment_to,Vector2 const &circle_pos,float circle_radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "segment_intersects_circle");
  const void* __args[4] = { &segment_from, &segment_to, &circle_pos, &circle_radius };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _Geometry_segment_intersects_segment_2d(_Geometry *self,Vector2 const &from_a,Vector2 const &to_a,Vector2 const &from_b,Vector2 const &to_b){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "segment_intersects_segment_2d");
  const void* __args[4] = { &from_a, &to_a, &from_b, &to_b };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array _Geometry_get_closest_points_between_segments_2d(_Geometry *self,Vector2 const &p1,Vector2 const &q1,Vector2 const &p2,Vector2 const &q2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "get_closest_points_between_segments_2d");
  const void* __args[4] = { &p1, &q1, &p2, &q2 };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3Array _Geometry_get_closest_points_between_segments(_Geometry *self,Vector3 const &p1,Vector3 const &p2,Vector3 const &q1,Vector3 const &q2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "get_closest_points_between_segments");
  const void* __args[4] = { &p1, &p2, &q1, &q2 };
  Vector3Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 _Geometry_get_closest_point_to_segment(_Geometry *self,Vector3 const &point,Vector3 const &s1,Vector3 const &s2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "get_closest_point_to_segment");
  const void* __args[3] = { &point, &s1, &s2 };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _Geometry_get_uv84_normal_bit(_Geometry *self,Vector3 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "get_uv84_normal_bit");
  const void* __args[1] = { &normal };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _Geometry_ray_intersects_triangle(_Geometry *self,Vector3 const &from,Vector3 const &dir,Vector3 const &a,Vector3 const &b,Vector3 const &c){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "ray_intersects_triangle");
  const void* __args[5] = { &from, &dir, &a, &b, &c };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _Geometry_segment_intersects_triangle(_Geometry *self,Vector3 const &from,Vector3 const &to,Vector3 const &a,Vector3 const &b,Vector3 const &c){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "segment_intersects_triangle");
  const void* __args[5] = { &from, &to, &a, &b, &c };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array _Geometry_segment_intersects_sphere(_Geometry *self,Vector3 const &from,Vector3 const &to,Vector3 const &spos,float sradius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "segment_intersects_sphere");
  const void* __args[4] = { &from, &to, &spos, &sradius };
  Vector3Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3Array _Geometry_segment_intersects_cylinder(_Geometry *self,Vector3 const &from,Vector3 const &to,float height,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "segment_intersects_cylinder");
  const void* __args[4] = { &from, &to, &height, &radius };
  Vector3Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3Array _Geometry_segment_intersects_convex(_Geometry *self,Vector3 const &from,Vector3 const &to,Array const &planes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "segment_intersects_convex");
  const void* __args[3] = { &from, &to, &planes };
  Vector3Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _Geometry_point_is_inside_triangle(_Geometry *self,Vector2 const &point,Vector2 const &a,Vector2 const &b,Vector2 const &c){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "point_is_inside_triangle");
  const void* __args[4] = { &point, &a, &b, &c };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN IntArray _Geometry_triangulate_polygon(_Geometry *self,Vector2Array const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "triangulate_polygon");
  const void* __args[1] = { &polygon };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary _Geometry_make_atlas(_Geometry *self,Vector2Array const &sizes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Geometry", "make_atlas");
  const void* __args[1] = { &sizes };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN _Geometry *_Geometry_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Geometry")->cast_to<_Geometry>(); }
SWIGINTERN String _Marshalls_variant_to_base64(_Marshalls *self,Variant const &variant){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Marshalls", "variant_to_base64");
  const void* __args[1] = { &variant };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Variant _Marshalls_base64_to_variant(_Marshalls *self,String const &base64_str){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Marshalls", "base64_to_variant");
  const void* __args[1] = { &base64_str };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _Marshalls_raw_to_base64(_Marshalls *self,RawArray const &array){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Marshalls", "raw_to_base64");
  const void* __args[1] = { &array };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RawArray _Marshalls_base64_to_raw(_Marshalls *self,String const &base64_str){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Marshalls", "base64_to_raw");
  const void* __args[1] = { &base64_str };
  RawArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _Marshalls_utf8_to_base64(_Marshalls *self,String const &utf8_str){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Marshalls", "utf8_to_base64");
  const void* __args[1] = { &utf8_str };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _Marshalls_base64_to_utf8(_Marshalls *self,String const &base64_str){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Marshalls", "base64_to_utf8");
  const void* __args[1] = { &base64_str };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN _Marshalls *_Marshalls_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Marshalls")->cast_to<_Marshalls>(); }
SWIGINTERN void delete__Marshalls(_Marshalls *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void _Mutex_lock(_Mutex *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Mutex", "lock");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int _Mutex_try_lock(_Mutex *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Mutex", "try_lock");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _Mutex_unlock(_Mutex *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Mutex", "unlock");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete__Mutex(_Mutex *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void _OS_set_clipboard(_OS *self,String const &clipboard){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_clipboard");
  const void* __args[1] = { &clipboard };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String _OS_get_clipboard(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_clipboard");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_video_mode__SWIG_0(_OS *self,Vector2 const &size,bool fullscreen,bool resizable,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_video_mode");
  const void* __args[4] = { &size, &fullscreen, &resizable, &screen };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 _OS_get_video_mode_size__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_video_mode_size");
  const void* __args[1] = { &screen };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _OS_is_video_mode_fullscreen__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_video_mode_fullscreen");
  const void* __args[1] = { &screen };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _OS_is_video_mode_resizable__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_video_mode_resizable");
  const void* __args[1] = { &screen };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array _OS_get_fullscreen_mode_list__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_fullscreen_mode_list");
  const void* __args[1] = { &screen };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_get_screen_count(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_screen_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_current_screen(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_current_screen");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_current_screen(_OS *self,int screen){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_current_screen");
  const void* __args[1] = { &screen };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 _OS_get_screen_position__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_screen_position");
  const void* __args[1] = { &screen };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 _OS_get_screen_size__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_screen_size");
  const void* __args[1] = { &screen };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_get_screen_dpi__SWIG_0(_OS *self,int screen=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_screen_dpi");
  const void* __args[1] = { &screen };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 _OS_get_window_position(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_window_position");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_window_position(_OS *self,Vector2 const &position){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_position");
  const void* __args[1] = { &position };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 _OS_get_window_size(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_window_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_window_size(_OS *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_set_window_fullscreen(_OS *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_fullscreen");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_window_fullscreen(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_window_fullscreen");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_window_resizable(_OS *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_resizable");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_window_resizable(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_window_resizable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_window_minimized(_OS *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_minimized");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_window_minimized(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_window_minimized");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_window_maximized(_OS *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_maximized");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_window_maximized(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_window_maximized");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_borderless_window(_OS *self,bool borderless){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_borderless_window");
  const void* __args[1] = { &borderless };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_get_borderless_window(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_borderless_window");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_screen_orientation(_OS *self,int orientation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_screen_orientation");
  const void* __args[1] = { &orientation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _OS_get_screen_orientation(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_screen_orientation");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_keep_screen_on(_OS *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_keep_screen_on");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_keep_screen_on(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_keep_screen_on");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_iterations_per_second(_OS *self,int iterations_per_second){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_iterations_per_second");
  const void* __args[1] = { &iterations_per_second };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _OS_get_iterations_per_second(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_iterations_per_second");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_target_fps(_OS *self,int target_fps){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_target_fps");
  const void* __args[1] = { &target_fps };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float _OS_get_target_fps(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_target_fps");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_time_scale(_OS *self,float time_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_time_scale");
  const void* __args[1] = { &time_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float _OS_get_time_scale(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_time_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _OS_has_touchscreen_ui_hint(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "has_touchscreen_ui_hint");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_window_title(_OS *self,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_window_title");
  const void* __args[1] = { &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_set_low_processor_usage_mode(_OS *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_low_processor_usage_mode");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_in_low_processor_usage_mode(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_in_low_processor_usage_mode");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_processor_count(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_processor_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_executable_path(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_executable_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_execute__SWIG_0(_OS *self,String const &path,StringArray const &arguments_,bool blocking,Array const &output=Array()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "execute");
  const void* __args[4] = { &path, &arguments_, &blocking, &output };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_kill(_OS *self,int pid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "kill");
  const void* __args[1] = { &pid };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_shell_open(_OS *self,String const &uri){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "shell_open");
  const void* __args[1] = { &uri };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_get_process_ID(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_process_ID");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_environment(_OS *self,String const &environment){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_environment");
  const void* __args[1] = { &environment };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _OS_has_environment(_OS *self,String const &environment){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "has_environment");
  const void* __args[1] = { &environment };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _OS_get_name(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN StringArray _OS_get_cmdline_args(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_cmdline_args");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *_OS_get_main_loop(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_main_loop");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Dictionary _OS_get_datetime__SWIG_0(_OS *self,bool utc=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_datetime");
  const void* __args[1] = { &utc };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary _OS_get_date__SWIG_0(_OS *self,bool utc=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_date");
  const void* __args[1] = { &utc };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary _OS_get_time__SWIG_0(_OS *self,bool utc=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_time");
  const void* __args[1] = { &utc };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Dictionary _OS_get_time_zone_info(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_time_zone_info");
  Dictionary ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_unix_time(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_unix_time");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Dictionary _OS_get_datetime_from_unix_time(_OS *self,int unix_time_val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_datetime_from_unix_time");
  const void* __args[1] = { &unix_time_val };
  Dictionary ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_get_unix_time_from_datetime(_OS *self,Dictionary const &datetime){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_unix_time_from_datetime");
  const void* __args[1] = { &datetime };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_get_system_time_secs(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_system_time_secs");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_set_icon(_OS *self,Image const &icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_icon");
  const void* __args[1] = { &icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_delay_usec(_OS *self,int usec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "delay_usec");
  const void* __args[1] = { &usec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_delay_msec(_OS *self,int msec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "delay_msec");
  const void* __args[1] = { &msec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _OS_get_ticks_msec(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_ticks_msec");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_splash_tick_msec(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_splash_tick_msec");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_locale(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_locale");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_model_name(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_model_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_custom_level(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_custom_level");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _OS_can_draw(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "can_draw");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_frames_drawn(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_frames_drawn");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _OS_is_stdout_verbose(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_stdout_verbose");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _OS_can_use_threads(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "can_use_threads");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _OS_is_debug_build(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_debug_build");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_dump_memory_to_file(_OS *self,String const &file){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "dump_memory_to_file");
  const void* __args[1] = { &file };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_dump_resources_to_file(_OS *self,String const &file){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "dump_resources_to_file");
  const void* __args[1] = { &file };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_print_resources_in_use__SWIG_0(_OS *self,bool short_=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "print_resources_in_use");
  const void* __args[1] = { &short_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_print_all_resources__SWIG_0(_OS *self,String const &tofile=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "print_all_resources");
  const void* __args[1] = { &tofile };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _OS_get_static_memory_usage(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_static_memory_usage");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_static_memory_peak_usage(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_static_memory_peak_usage");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _OS_get_dynamic_memory_usage(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_dynamic_memory_usage");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_data_dir(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_data_dir");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String _OS_get_system_dir(_OS *self,int dir){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_system_dir");
  const void* __args[1] = { &dir };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _OS_get_unique_ID(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_unique_ID");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _OS_is_ok_left_and_cancel_right(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_ok_left_and_cancel_right");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float _OS_get_frames_per_second(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_frames_per_second");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_print_all_textures_by_size(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "print_all_textures_by_size");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void _OS_print_resources_by_type(_OS *self,StringArray const &types){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "print_resources_by_type");
  const void* __args[1] = { &types };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _OS_native_video_play(_OS *self,String const &path,float volume,String const &audio_track,String const &subtitle_track){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "native_video_play");
  const void* __args[4] = { &path, &volume, &audio_track, &subtitle_track };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _OS_native_video_is_playing(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "native_video_is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void _OS_native_video_stop(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "native_video_stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void _OS_native_video_pause(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "native_video_pause");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void _OS_native_video_unpause(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "native_video_unpause");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN String _OS_get_scancode_string(_OS *self,int code){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "get_scancode_string");
  const void* __args[1] = { &code };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _OS_is_scancode_unicode(_OS *self,int code){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_scancode_unicode");
  const void* __args[1] = { &code };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int _OS_find_scancode_from_string(_OS *self,String const &string){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "find_scancode_from_string");
  const void* __args[1] = { &string };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _OS_set_use_file_access_save_and_swap(_OS *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_use_file_access_save_and_swap");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void _OS_alert__SWIG_0(_OS *self,String const &text,String const &title="Alert!"){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "alert");
  const void* __args[2] = { &text, &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int _OS_set_thread_name(_OS *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_thread_name");
  const void* __args[1] = { &name };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _OS_set_use_vsync(_OS *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "set_use_vsync");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool _OS_is_vsnc_enabled(_OS *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_OS", "is_vsnc_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN _OS *_OS_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("OS")->cast_to<_OS>(); }
SWIGINTERN Ref< ResourceInteractiveLoader > _ResourceLoader_load_interactive__SWIG_0(_ResourceLoader *self,String const &path,String const &type_hint=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "load_interactive");
  const void* __args[2] = { &path, &type_hint };
  Ref<ResourceInteractiveLoader> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Resource > _ResourceLoader_load__SWIG_0(_ResourceLoader *self,String const &path,String const &type_hint="",bool p_no_cache=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "load");
  const void* __args[3] = { &path, &type_hint, &p_no_cache };
  Ref<Resource> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< ResourceImportMetadata > _ResourceLoader_load_import_metadata(_ResourceLoader *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "load_import_metadata");
  const void* __args[1] = { &path };
  Ref<ResourceImportMetadata> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray _ResourceLoader_get_recognized_extensions_for_type(_ResourceLoader *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "get_recognized_extensions_for_type");
  const void* __args[1] = { &type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void _ResourceLoader_set_abort_on_missing_resources(_ResourceLoader *self,bool abort){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "set_abort_on_missing_resources");
  const void* __args[1] = { &abort };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray _ResourceLoader_get_dependencies(_ResourceLoader *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "get_dependencies");
  const void* __args[1] = { &path };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool _ResourceLoader_has(_ResourceLoader *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceLoader", "has");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN _ResourceLoader *_ResourceLoader_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("ResourceLoader")->cast_to<_ResourceLoader>(); }
SWIGINTERN int _ResourceSaver_save__SWIG_0(_ResourceSaver *self,String const &path,Resource *resource,int flags=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceSaver", "save");
  const void* __args[3] = { &path, resource, &flags };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray _ResourceSaver_get_recognized_extensions(_ResourceSaver *self,Object *type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_ResourceSaver", "get_recognized_extensions");
  const void* __args[1] = { type };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN _ResourceSaver *_ResourceSaver_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("ResourceSaver")->cast_to<_ResourceSaver>(); }
SWIGINTERN int _Semaphore_wait(_Semaphore *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Semaphore", "wait");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int _Semaphore_post(_Semaphore *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Semaphore", "post");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete__Semaphore(_Semaphore *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int _Thread_start__SWIG_0(_Thread *self,Object *instance,String const &method,Variant const &userdata=Variant(),int priority=1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Thread", "start");
  const void* __args[4] = { instance, &method, &userdata, &priority };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String _Thread_get_id(_Thread *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Thread", "get_id");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool _Thread_is_active(_Thread *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Thread", "is_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Variant _Thread_wait_to_finish(_Thread *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("_Thread", "wait_to_finish");
  Variant ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete__Thread(_Thread *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int Animation_add_track__SWIG_0(Animation *self,int type,int at_pos=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "add_track");
  const void* __args[2] = { &type, &at_pos };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_remove_track(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "remove_track");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Animation_get_track_count(Animation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "get_track_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Animation_track_get_type(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_type");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN NodePath Animation_track_get_path(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_path");
  const void* __args[1] = { &idx };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_track_set_path(Animation *self,int idx,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_set_path");
  const void* __args[2] = { &idx, &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Animation_find_track(Animation *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "find_track");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_track_move_up(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_move_up");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_track_move_down(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_move_down");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_track_set_imported(Animation *self,int idx,bool imported){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_set_imported");
  const void* __args[2] = { &idx, &imported };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Animation_track_is_imported(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_is_imported");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Animation_transform_track_insert_key(Animation *self,int idx,float time,Vector3 const &loc,Quat const &rot,Vector3 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "transform_track_insert_key");
  const void* __args[5] = { &idx, &time, &loc, &rot, &scale };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_track_insert_key__SWIG_0(Animation *self,int idx,float time,Variant const &key,float transition=1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_insert_key");
  const void* __args[4] = { &idx, &time, &key, &transition };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_track_remove_key(Animation *self,int idx,int key_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_remove_key");
  const void* __args[2] = { &idx, &key_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_track_remove_key_at_pos(Animation *self,int idx,float pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_remove_key_at_pos");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_track_set_key_value(Animation *self,int idx,int key,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_set_key_value");
  const void* __args[3] = { &idx, &key, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_track_set_key_transition(Animation *self,int idx,int key_idx,float transition){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_set_key_transition");
  const void* __args[3] = { &idx, &key_idx, &transition };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Animation_track_get_key_transition(Animation *self,int idx,int key_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_key_transition");
  const void* __args[2] = { &idx, &key_idx };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Animation_track_get_key_count(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_key_count");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_track_get_key_value(Animation *self,int idx,int key_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_key_value");
  const void* __args[2] = { &idx, &key_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Animation_track_get_key_time(Animation *self,int idx,int key_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_key_time");
  const void* __args[2] = { &idx, &key_idx };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Animation_track_find_key__SWIG_0(Animation *self,int idx,float time,bool exact=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_find_key");
  const void* __args[3] = { &idx, &time, &exact };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_track_set_interpolation_type(Animation *self,int idx,int interpolation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_set_interpolation_type");
  const void* __args[2] = { &idx, &interpolation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Animation_track_get_interpolation_type(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "track_get_interpolation_type");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Animation_transform_track_interpolate(Animation *self,int idx,float time_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "transform_track_interpolate");
  const void* __args[2] = { &idx, &time_sec };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_value_track_set_update_mode(Animation *self,int idx,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "value_track_set_update_mode");
  const void* __args[2] = { &idx, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Animation_value_track_get_update_mode(Animation *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "value_track_get_update_mode");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN IntArray Animation_value_track_get_key_indices(Animation *self,int idx,float time_sec,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "value_track_get_key_indices");
  const void* __args[3] = { &idx, &time_sec, &delta };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN IntArray Animation_method_track_get_key_indices(Animation *self,int idx,float time_sec,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "method_track_get_key_indices");
  const void* __args[3] = { &idx, &time_sec, &delta };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String Animation_method_track_get_name(Animation *self,int idx,int key_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "method_track_get_name");
  const void* __args[2] = { &idx, &key_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Animation_method_track_get_params(Animation *self,int idx,int key_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "method_track_get_params");
  const void* __args[2] = { &idx, &key_idx };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Animation_set_length(Animation *self,float time_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "set_length");
  const void* __args[1] = { &time_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Animation_get_length(Animation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Animation_set_loop(Animation *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "set_loop");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Animation_set_loop_interpolation(Animation *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "set_loop_interpolation");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Animation_has_loop(Animation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Animation_has_loop_interpolation(Animation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "has_loop_interpolation");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Animation_set_step(Animation *self,float size_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "set_step");
  const void* __args[1] = { &size_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Animation_get_step(Animation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "get_step");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Animation_clear(Animation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Animation", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_Animation(Animation *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void AtlasTexture_set_atlas(AtlasTexture *self,Texture *atlas){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AtlasTexture", "set_atlas");
  const void* __args[1] = { atlas };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > AtlasTexture_get_atlas(AtlasTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AtlasTexture", "get_atlas");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AtlasTexture_set_region(AtlasTexture *self,Rect2 const &region){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AtlasTexture", "set_region");
  const void* __args[1] = { &region };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 AtlasTexture_get_region(AtlasTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AtlasTexture", "get_region");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AtlasTexture_set_margin(AtlasTexture *self,Rect2 const &margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AtlasTexture", "set_margin");
  const void* __args[1] = { &margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 AtlasTexture_get_margin(AtlasTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AtlasTexture", "get_margin");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_AtlasTexture(AtlasTexture *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN RID AudioServer_sample_create(AudioServer *self,int format,bool stereo,int length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_create");
  const void* __args[3] = { &format, &stereo, &length };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_sample_set_description(AudioServer *self,RID const &sample,String const &description){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_description");
  const void* __args[2] = { &sample, &description };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AudioServer_sample_get_description(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_description");
  const void* __args[1] = { &sample };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AudioServer_sample_get_format(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_format");
  const void* __args[1] = { &sample };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool AudioServer_sample_is_stereo(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_is_stereo");
  const void* __args[1] = { &sample };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AudioServer_sample_get_length(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_length");
  const void* __args[1] = { &sample };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_sample_set_signed_data(AudioServer *self,RID const &sample,RealArray const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_signed_data");
  const void* __args[2] = { &sample, &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_sample_set_data(AudioServer *self,RID const &sample,RawArray const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_data");
  const void* __args[2] = { &sample, &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RawArray AudioServer_sample_get_data(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_data");
  const void* __args[1] = { &sample };
  RawArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_sample_set_mix_rate(AudioServer *self,RID const &sample,int mix_rate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_mix_rate");
  const void* __args[2] = { &sample, &mix_rate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AudioServer_sample_get_mix_rate(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_mix_rate");
  const void* __args[1] = { &sample };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_sample_set_loop_format(AudioServer *self,RID const &sample,int loop_format){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_loop_format");
  const void* __args[2] = { &sample, &loop_format };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AudioServer_sample_get_loop_format(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_loop_format");
  const void* __args[1] = { &sample };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_sample_set_loop_begin(AudioServer *self,RID const &sample,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_loop_begin");
  const void* __args[2] = { &sample, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AudioServer_sample_get_loop_begin(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_loop_begin");
  const void* __args[1] = { &sample };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_sample_set_loop_end(AudioServer *self,RID const &sample,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_set_loop_end");
  const void* __args[2] = { &sample, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AudioServer_sample_get_loop_end(AudioServer *self,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "sample_get_loop_end");
  const void* __args[1] = { &sample };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RID AudioServer_voice_create(AudioServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_create");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AudioServer_voice_play(AudioServer *self,RID const &voice,RID const &sample){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_play");
  const void* __args[2] = { &voice, &sample };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_volume(AudioServer *self,RID const &voice,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_volume");
  const void* __args[2] = { &voice, &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_pan__SWIG_0(AudioServer *self,RID const &voice,float pan,float depth=0,float height=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_pan");
  const void* __args[4] = { &voice, &pan, &depth, &height };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_filter__SWIG_0(AudioServer *self,RID const &voice,int type,float cutoff,float resonance,float gain=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_filter");
  const void* __args[5] = { &voice, &type, &cutoff, &resonance, &gain };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_chorus(AudioServer *self,RID const &voice,float chorus){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_chorus");
  const void* __args[2] = { &voice, &chorus };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_reverb(AudioServer *self,RID const &voice,int room,float reverb){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_reverb");
  const void* __args[3] = { &voice, &room, &reverb };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_mix_rate(AudioServer *self,RID const &voice,int rate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_mix_rate");
  const void* __args[2] = { &voice, &rate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_voice_set_positional(AudioServer *self,RID const &voice,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_set_positional");
  const void* __args[2] = { &voice, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AudioServer_voice_get_volume(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_volume");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_pan(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_pan");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_pan_height(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_pan_height");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_pan_depth(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_pan_depth");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AudioServer_voice_get_filter_type(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_filter_type");
  const void* __args[1] = { &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_filter_cutoff(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_filter_cutoff");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_filter_resonance(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_filter_resonance");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_chorus(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_chorus");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AudioServer_voice_get_reverb_type(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_reverb_type");
  const void* __args[1] = { &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AudioServer_voice_get_reverb(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_reverb");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AudioServer_voice_get_mix_rate(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_get_mix_rate");
  const void* __args[1] = { &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool AudioServer_voice_is_positional(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_is_positional");
  const void* __args[1] = { &voice };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AudioServer_voice_stop(AudioServer *self,RID const &voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "voice_stop");
  const void* __args[1] = { &voice };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_free_rid(AudioServer *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "free_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioServer_set_stream_global_volume_scale(AudioServer *self,float scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "set_stream_global_volume_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AudioServer_get_stream_global_volume_scale(AudioServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "get_stream_global_volume_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AudioServer_set_fx_global_volume_scale(AudioServer *self,float scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "set_fx_global_volume_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AudioServer_get_fx_global_volume_scale(AudioServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "get_fx_global_volume_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AudioServer_set_event_voice_global_volume_scale(AudioServer *self,float scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "set_event_voice_global_volume_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AudioServer_get_event_voice_global_volume_scale(AudioServer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioServer", "get_event_voice_global_volume_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN AudioServer *AudioServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("AudioServer")->cast_to<AudioServer>(); }
SWIGINTERN void delete_AudioStream(AudioStream *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_AudioStreamMPC(AudioStreamMPC *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_AudioStreamOGGVorbis(AudioStreamOGGVorbis *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_AudioStreamOpus(AudioStreamOpus *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void AudioStreamPlayback_play__SWIG_0(AudioStreamPlayback *self,float from_pos_sec=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "play");
  const void* __args[1] = { &from_pos_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AudioStreamPlayback_stop(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool AudioStreamPlayback_is_playing(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AudioStreamPlayback_set_loop(AudioStreamPlayback *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "set_loop");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AudioStreamPlayback_has_loop(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int AudioStreamPlayback_get_loop_count(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "get_loop_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AudioStreamPlayback_seek_pos(AudioStreamPlayback *self,float pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "seek_pos");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AudioStreamPlayback_get_pos(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "get_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float AudioStreamPlayback_get_length(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int AudioStreamPlayback_get_channels(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "get_channels");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int AudioStreamPlayback_get_mix_rate(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "get_mix_rate");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int AudioStreamPlayback_get_minimum_buffer_size(AudioStreamPlayback *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AudioStreamPlayback", "get_minimum_buffer_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_AudioStreamPlayback(AudioStreamPlayback *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_AudioStreamSpeex(AudioStreamSpeex *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void BakedLight_set_mode(BakedLight *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BakedLight_get_mode(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_octree(BakedLight *self,RawArray const &octree){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_octree");
  const void* __args[1] = { &octree };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RawArray BakedLight_get_octree(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_octree");
  RawArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_light(BakedLight *self,RawArray const &light){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_light");
  const void* __args[1] = { &light };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RawArray BakedLight_get_light(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_light");
  RawArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_sampler_octree(BakedLight *self,IntArray const &sampler_octree){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_sampler_octree");
  const void* __args[1] = { &sampler_octree };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN IntArray BakedLight_get_sampler_octree(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_sampler_octree");
  IntArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_add_lightmap(BakedLight *self,Texture *texture,Vector2 const &gen_size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "add_lightmap");
  const void* __args[2] = { texture, &gen_size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BakedLight_erase_lightmap(BakedLight *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "erase_lightmap");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BakedLight_clear_lightmaps(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "clear_lightmaps");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void BakedLight_set_cell_subdivision(BakedLight *self,int cell_subdivision){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_cell_subdivision");
  const void* __args[1] = { &cell_subdivision };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BakedLight_get_cell_subdivision(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_cell_subdivision");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_initial_lattice_subdiv(BakedLight *self,int cell_subdivision){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_initial_lattice_subdiv");
  const void* __args[1] = { &cell_subdivision };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BakedLight_get_initial_lattice_subdiv(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_initial_lattice_subdiv");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_plot_size(BakedLight *self,float plot_size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_plot_size");
  const void* __args[1] = { &plot_size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_plot_size(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_plot_size");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_bounces(BakedLight *self,int bounces){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_bounces");
  const void* __args[1] = { &bounces };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BakedLight_get_bounces(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_bounces");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_cell_extra_margin(BakedLight *self,float cell_extra_margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_cell_extra_margin");
  const void* __args[1] = { &cell_extra_margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_cell_extra_margin(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_cell_extra_margin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_edge_damp(BakedLight *self,float edge_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_edge_damp");
  const void* __args[1] = { &edge_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_edge_damp(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_edge_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_normal_damp(BakedLight *self,float normal_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_normal_damp");
  const void* __args[1] = { &normal_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_normal_damp(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_normal_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_tint(BakedLight *self,float tint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_tint");
  const void* __args[1] = { &tint };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_tint(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_tint");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_saturation(BakedLight *self,float saturation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_saturation");
  const void* __args[1] = { &saturation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_saturation(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_saturation");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_ao_radius(BakedLight *self,float ao_radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_ao_radius");
  const void* __args[1] = { &ao_radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_ao_radius(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_ao_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_ao_strength(BakedLight *self,float ao_strength){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_ao_strength");
  const void* __args[1] = { &ao_strength };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_ao_strength(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_ao_strength");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_realtime_color_enabled(BakedLight *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_realtime_color_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BakedLight_get_realtime_color_enabled(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_realtime_color_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_realtime_color(BakedLight *self,Color const &tint){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_realtime_color");
  const void* __args[1] = { &tint };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color BakedLight_get_realtime_color(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_realtime_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_realtime_energy(BakedLight *self,float energy){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_realtime_energy");
  const void* __args[1] = { &energy };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_realtime_energy(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_realtime_energy");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_format(BakedLight *self,int format){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_format");
  const void* __args[1] = { &format };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BakedLight_get_format(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_format");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_transfer_lightmaps_only_to_uv2(BakedLight *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_transfer_lightmaps_only_to_uv2");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BakedLight_get_transfer_lightmaps_only_to_uv2(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_transfer_lightmaps_only_to_uv2");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_energy_multiplier(BakedLight *self,float energy_multiplier){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_energy_multiplier");
  const void* __args[1] = { &energy_multiplier };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_energy_multiplier(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_energy_multiplier");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_gamma_adjust(BakedLight *self,float gamma_adjust){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_gamma_adjust");
  const void* __args[1] = { &gamma_adjust };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLight_get_gamma_adjust(BakedLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_gamma_adjust");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLight_set_bake_flag(BakedLight *self,int flag,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "set_bake_flag");
  const void* __args[2] = { &flag, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BakedLight_get_bake_flag(BakedLight *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLight", "get_bake_flag");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_BakedLight(BakedLight *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void BitMap_create(BitMap *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "create");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BitMap_create_from_image_alpha(BitMap *self,Image const &image){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "create_from_image_alpha");
  const void* __args[1] = { &image };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BitMap_set_bit(BitMap *self,Vector2 const &pos,bool bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "set_bit");
  const void* __args[2] = { &pos, &bit };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BitMap_get_bit(BitMap *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "get_bit");
  const void* __args[1] = { &pos };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BitMap_set_bit_rect(BitMap *self,Rect2 const &p_rect,bool bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "set_bit_rect");
  const void* __args[2] = { &p_rect, &bit };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BitMap_get_true_bit_count(BitMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "get_true_bit_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 BitMap_get_size(BitMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitMap", "get_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_BitMap(BitMap *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void BoxShape_set_extents(BoxShape *self,Vector3 const &extents){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BoxShape", "set_extents");
  const void* __args[1] = { &extents };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 BoxShape_get_extents(BoxShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BoxShape", "get_extents");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_BoxShape(BoxShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_CSharpScript(CSharpScript *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void CanvasItemMaterial_set_shader(CanvasItemMaterial *self,Shader *shader){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItemMaterial", "set_shader");
  const void* __args[1] = { shader };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Shader > CanvasItemMaterial_get_shader(CanvasItemMaterial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItemMaterial", "get_shader");
  Ref<Shader> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItemMaterial_set_shader_param(CanvasItemMaterial *self,String const &param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItemMaterial", "set_shader_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItemMaterial_get_shader_param(CanvasItemMaterial *self,String const &param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItemMaterial", "get_shader_param");
  const void* __args[1] = { &param };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItemMaterial_set_shading_mode(CanvasItemMaterial *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItemMaterial", "set_shading_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CanvasItemMaterial_get_shading_mode(CanvasItemMaterial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItemMaterial", "get_shading_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_CanvasItemMaterial(CanvasItemMaterial *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_CanvasItemShader(CanvasItemShader *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_CanvasItemShaderGraph(CanvasItemShaderGraph *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void CapsuleShape_set_radius(CapsuleShape *self,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape", "set_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CapsuleShape_get_radius(CapsuleShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape", "get_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CapsuleShape_set_height(CapsuleShape *self,float height){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape", "set_height");
  const void* __args[1] = { &height };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CapsuleShape_get_height(CapsuleShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape", "get_height");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_CapsuleShape(CapsuleShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void CapsuleShape2D_set_radius(CapsuleShape2D *self,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape2D", "set_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CapsuleShape2D_get_radius(CapsuleShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape2D", "get_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CapsuleShape2D_set_height(CapsuleShape2D *self,float height){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape2D", "set_height");
  const void* __args[1] = { &height };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CapsuleShape2D_get_height(CapsuleShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CapsuleShape2D", "get_height");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_CapsuleShape2D(CapsuleShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void CircleShape2D_set_radius(CircleShape2D *self,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CircleShape2D", "set_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CircleShape2D_get_radius(CircleShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CircleShape2D", "get_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_CircleShape2D(CircleShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ColorRamp_add_point(ColorRamp *self,float offset,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "add_point");
  const void* __args[2] = { &offset, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ColorRamp_remove_point(ColorRamp *self,int offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "remove_point");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ColorRamp_set_offset(ColorRamp *self,int point,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "set_offset");
  const void* __args[2] = { &point, &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ColorRamp_get_offset(ColorRamp *self,int point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "get_offset");
  const void* __args[1] = { &point };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ColorRamp_set_color(ColorRamp *self,int point,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "set_color");
  const void* __args[2] = { &point, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ColorRamp_get_color(ColorRamp *self,int point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "get_color");
  const void* __args[1] = { &point };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color ColorRamp_interpolate(ColorRamp *self,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "interpolate");
  const void* __args[1] = { &offset };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ColorRamp_get_point_count(ColorRamp *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "get_point_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorRamp_set_offsets(ColorRamp *self,RealArray const &offsets){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "set_offsets");
  const void* __args[1] = { &offsets };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RealArray ColorRamp_get_offsets(ColorRamp *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "get_offsets");
  RealArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorRamp_set_colors(ColorRamp *self,ColorArray const &colors){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "set_colors");
  const void* __args[1] = { &colors };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN ColorArray ColorRamp_get_colors(ColorRamp *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorRamp", "get_colors");
  ColorArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ColorRamp(ColorRamp *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ConcavePolygonShape_set_faces(ConcavePolygonShape *self,Vector3Array const &faces){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConcavePolygonShape", "set_faces");
  const void* __args[1] = { &faces };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array ConcavePolygonShape_get_faces(ConcavePolygonShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConcavePolygonShape", "get_faces");
  Vector3Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ConcavePolygonShape(ConcavePolygonShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ConcavePolygonShape2D_set_segments(ConcavePolygonShape2D *self,Vector2Array const &segments){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConcavePolygonShape2D", "set_segments");
  const void* __args[1] = { &segments };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array ConcavePolygonShape2D_get_segments(ConcavePolygonShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConcavePolygonShape2D", "get_segments");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ConcavePolygonShape2D(ConcavePolygonShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ConfigFile_set_value(ConfigFile *self,String const &section,String const &key,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "set_value");
  const void* __args[3] = { &section, &key, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Variant ConfigFile_get_value__SWIG_0(ConfigFile *self,String const &section,String const &key,Variant const &default_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "get_value");
  const void* __args[3] = { &section, &key, &default_ };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool ConfigFile_has_section(ConfigFile *self,String const &section){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "has_section");
  const void* __args[1] = { &section };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool ConfigFile_has_section_key(ConfigFile *self,String const &section,String const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "has_section_key");
  const void* __args[2] = { &section, &key };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray ConfigFile_get_sections(ConfigFile *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "get_sections");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN StringArray ConfigFile_get_section_keys(ConfigFile *self,String const &section){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "get_section_keys");
  const void* __args[1] = { &section };
  StringArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ConfigFile_load(ConfigFile *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "load");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ConfigFile_save(ConfigFile *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfigFile", "save");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_ConfigFile(ConfigFile *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ConvexPolygonShape_set_points(ConvexPolygonShape *self,Vector3Array const &points){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConvexPolygonShape", "set_points");
  const void* __args[1] = { &points };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array ConvexPolygonShape_get_points(ConvexPolygonShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConvexPolygonShape", "get_points");
  Vector3Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ConvexPolygonShape(ConvexPolygonShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ConvexPolygonShape2D_set_point_cloud(ConvexPolygonShape2D *self,Vector2Array const &point_cloud){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConvexPolygonShape2D", "set_point_cloud");
  const void* __args[1] = { &point_cloud };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ConvexPolygonShape2D_set_points(ConvexPolygonShape2D *self,Vector2Array const &points){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConvexPolygonShape2D", "set_points");
  const void* __args[1] = { &points };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array ConvexPolygonShape2D_get_points(ConvexPolygonShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConvexPolygonShape2D", "get_points");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_ConvexPolygonShape2D(ConvexPolygonShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int CubeMap_get_width(CubeMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_width");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int CubeMap_get_height(CubeMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_height");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID CubeMap_get_rid(CubeMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CubeMap_set_flags(CubeMap *self,int flags){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "set_flags");
  const void* __args[1] = { &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CubeMap_get_flags(CubeMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_flags");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CubeMap_set_side(CubeMap *self,int side,Image const &image){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "set_side");
  const void* __args[2] = { &side, &image };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Image CubeMap_get_side(CubeMap *self,int side){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_side");
  const void* __args[1] = { &side };
  Image ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void CubeMap_set_storage(CubeMap *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "set_storage");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CubeMap_get_storage(CubeMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_storage");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CubeMap_set_lossy_storage_quality(CubeMap *self,float quality){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "set_lossy_storage_quality");
  const void* __args[1] = { &quality };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CubeMap_get_lossy_storage_quality(CubeMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CubeMap", "get_lossy_storage_quality");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_CubeMap(CubeMap *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int Curve2D_get_point_count(Curve2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_point_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Curve2D_add_point__SWIG_0(Curve2D *self,Vector2 const &pos,Vector2 const &in=Vector2(0,0),Vector2 const &out=Vector2(0,0),int atpos=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "add_point");
  const void* __args[4] = { &pos, &in, &out, &atpos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Curve2D_set_point_pos(Curve2D *self,int idx,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "set_point_pos");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Curve2D_get_point_pos(Curve2D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_point_pos");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve2D_set_point_in(Curve2D *self,int idx,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "set_point_in");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Curve2D_get_point_in(Curve2D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_point_in");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve2D_set_point_out(Curve2D *self,int idx,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "set_point_out");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Curve2D_get_point_out(Curve2D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_point_out");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve2D_remove_point(Curve2D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "remove_point");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Curve2D_interpolate(Curve2D *self,int idx,float t){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "interpolate");
  const void* __args[2] = { &idx, &t };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Curve2D_interpolatef(Curve2D *self,float fofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "interpolatef");
  const void* __args[1] = { &fofs };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve2D_set_bake_interval(Curve2D *self,float distance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "set_bake_interval");
  const void* __args[1] = { &distance };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Curve2D_get_bake_interval(Curve2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_bake_interval");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Curve2D_get_baked_length(Curve2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_baked_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Curve2D_interpolate_baked__SWIG_0(Curve2D *self,float offset,bool cubic=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "interpolate_baked");
  const void* __args[2] = { &offset, &cubic };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2Array Curve2D_get_baked_points(Curve2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "get_baked_points");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2Array Curve2D_tesselate__SWIG_0(Curve2D *self,int max_stages=5,float tolerance_degrees=4){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve2D", "tesselate");
  const void* __args[2] = { &max_stages, &tolerance_degrees };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Curve2D(Curve2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int Curve3D_get_point_count(Curve3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_point_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Curve3D_add_point__SWIG_0(Curve3D *self,Vector3 const &pos,Vector3 const &in=Vector3(0, 0, 0),Vector3 const &out=Vector3(0, 0, 0),int atpos=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "add_point");
  const void* __args[4] = { &pos, &in, &out, &atpos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Curve3D_set_point_pos(Curve3D *self,int idx,Vector3 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "set_point_pos");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Curve3D_get_point_pos(Curve3D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_point_pos");
  const void* __args[1] = { &idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve3D_set_point_tilt(Curve3D *self,int idx,float tilt){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "set_point_tilt");
  const void* __args[2] = { &idx, &tilt };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Curve3D_get_point_tilt(Curve3D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_point_tilt");
  const void* __args[1] = { &idx };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve3D_set_point_in(Curve3D *self,int idx,Vector3 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "set_point_in");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Curve3D_get_point_in(Curve3D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_point_in");
  const void* __args[1] = { &idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve3D_set_point_out(Curve3D *self,int idx,Vector3 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "set_point_out");
  const void* __args[2] = { &idx, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Curve3D_get_point_out(Curve3D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_point_out");
  const void* __args[1] = { &idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve3D_remove_point(Curve3D *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "remove_point");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Curve3D_interpolate(Curve3D *self,int idx,float t){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "interpolate");
  const void* __args[2] = { &idx, &t };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Curve3D_interpolatef(Curve3D *self,float fofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "interpolatef");
  const void* __args[1] = { &fofs };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Curve3D_set_bake_interval(Curve3D *self,float distance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "set_bake_interval");
  const void* __args[1] = { &distance };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Curve3D_get_bake_interval(Curve3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_bake_interval");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Curve3D_get_baked_length(Curve3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_baked_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 Curve3D_interpolate_baked__SWIG_0(Curve3D *self,float offset,bool cubic=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "interpolate_baked");
  const void* __args[2] = { &offset, &cubic };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3Array Curve3D_get_baked_points(Curve3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_baked_points");
  Vector3Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RealArray Curve3D_get_baked_tilts(Curve3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "get_baked_tilts");
  RealArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3Array Curve3D_tesselate__SWIG_0(Curve3D *self,int max_stages=5,float tolerance_degrees=4){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Curve3D", "tesselate");
  const void* __args[2] = { &max_stages, &tolerance_degrees };
  Vector3Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Curve3D(Curve3D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void DynamicFontData_set_font_path(DynamicFontData *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFontData", "set_font_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String DynamicFontData_get_font_path(DynamicFontData *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFontData", "get_font_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_DynamicFontData(DynamicFontData *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Variant EditorExportPlugin_custom_export(EditorExportPlugin *self,String const &name,EditorExportPlatform *platform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorExportPlugin", "custom_export");
  const void* __args[2] = { &name, platform };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_EditorExportPlugin(EditorExportPlugin *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN bool EditorImportPlugin_can_reimport_multiple_files(EditorImportPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "can_reimport_multiple_files");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RawArray EditorImportPlugin_custom_export(EditorImportPlugin *self,String const &path,EditorExportPlatform *platform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "custom_export");
  const void* __args[2] = { &path, platform };
  RawArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String EditorImportPlugin_get_name(EditorImportPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "get_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String EditorImportPlugin_get_visible_name(EditorImportPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "get_visible_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int EditorImportPlugin_import(EditorImportPlugin *self,String const &path,ResourceImportMetadata *from){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "import");
  const void* __args[2] = { &path, from };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void EditorImportPlugin_import_dialog(EditorImportPlugin *self,String const &from){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "import_dialog");
  const void* __args[1] = { &from };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorImportPlugin_import_from_drop(EditorImportPlugin *self,StringArray const &files,String const &dest_path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "import_from_drop");
  const void* __args[2] = { &files, &dest_path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorImportPlugin_reimport_multiple_files(EditorImportPlugin *self,StringArray const &files){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "reimport_multiple_files");
  const void* __args[1] = { &files };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String EditorImportPlugin_validate_source_path(EditorImportPlugin *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "validate_source_path");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String EditorImportPlugin_expand_source_path(EditorImportPlugin *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorImportPlugin", "expand_source_path");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_EditorImportPlugin(EditorImportPlugin *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void EditorScenePostImport_post_import(EditorScenePostImport *self,Object *scene){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorScenePostImport", "post_import");
  const void* __args[1] = { scene };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_EditorScenePostImport(EditorScenePostImport *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void EditorScript__run(EditorScript *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorScript", "_run");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void EditorScript_add_root_node(EditorScript *self,Object *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorScript", "add_root_node");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *EditorScript_get_scene(EditorScript *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorScript", "get_scene");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_EditorScript(EditorScript *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void EditorSelection_clear(EditorSelection *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSelection", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void EditorSelection_add_node(EditorSelection *self,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSelection", "add_node");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSelection_remove_node(EditorSelection *self,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSelection", "remove_node");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array EditorSelection_get_selected_nodes(EditorSelection *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSelection", "get_selected_nodes");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorSettings_erase(EditorSettings *self,String const &property){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "erase");
  const void* __args[1] = { &property };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String EditorSettings_get_settings_path(EditorSettings *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "get_settings_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String EditorSettings_get_project_settings_path(EditorSettings *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "get_project_settings_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorSettings_set_favorite_dirs(EditorSettings *self,StringArray const &dirs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "set_favorite_dirs");
  const void* __args[1] = { &dirs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray EditorSettings_get_favorite_dirs(EditorSettings *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "get_favorite_dirs");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorSettings_set_recent_dirs(EditorSettings *self,StringArray const &dirs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "set_recent_dirs");
  const void* __args[1] = { &dirs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN StringArray EditorSettings_get_recent_dirs(EditorSettings *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSettings", "get_recent_dirs");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_EditorSettings(EditorSettings *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void EditorSpatialGizmo_commit_handle(EditorSpatialGizmo *self,int index,Variant const &restore,bool cancel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "commit_handle");
  const void* __args[3] = { &index, &restore, &cancel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String EditorSpatialGizmo_get_handle_name(EditorSpatialGizmo *self,int index){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "get_handle_name");
  const void* __args[1] = { &index };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Variant EditorSpatialGizmo_get_handle_value(EditorSpatialGizmo *self,int index){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "get_handle_value");
  const void* __args[1] = { &index };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void EditorSpatialGizmo_redraw(EditorSpatialGizmo *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "redraw");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void EditorSpatialGizmo_set_handle(EditorSpatialGizmo *self,int index,Camera *camera,Vector2 const &point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "set_handle");
  const void* __args[3] = { &index, camera, &point };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_add_lines__SWIG_0(EditorSpatialGizmo *self,Vector3Array const &lines,Material *material,bool billboard=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "add_lines");
  const void* __args[3] = { &lines, material, &billboard };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_add_mesh__SWIG_0(EditorSpatialGizmo *self,Mesh *mesh,bool billboard=false,RID const &skeleton=RID()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "add_mesh");
  const void* __args[3] = { mesh, &billboard, &skeleton };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_add_collision_segments(EditorSpatialGizmo *self,Vector3Array const &segments){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "add_collision_segments");
  const void* __args[1] = { &segments };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_add_collision_triangles(EditorSpatialGizmo *self,TriangleMesh *triangles){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "add_collision_triangles");
  const void* __args[1] = { triangles };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(EditorSpatialGizmo *self,Material *material,float default_scale=1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "add_unscaled_billboard");
  const void* __args[2] = { material, &default_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_add_handles__SWIG_0(EditorSpatialGizmo *self,Vector3Array const &handles,bool billboard=false,bool secondary=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "add_handles");
  const void* __args[3] = { &handles, &billboard, &secondary };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorSpatialGizmo_set_spatial_node(EditorSpatialGizmo *self,Spatial *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorSpatialGizmo", "set_spatial_node");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_EditorSpatialGizmo(EditorSpatialGizmo *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Environment_set_background(Environment *self,int bgmode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "set_background");
  const void* __args[1] = { &bgmode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Environment_get_background(Environment *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "get_background");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Environment_set_background_param(Environment *self,int param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "set_background_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Environment_get_background_param(Environment *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "get_background_param");
  const void* __args[1] = { &param };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Environment_set_enable_fx(Environment *self,int effect,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "set_enable_fx");
  const void* __args[2] = { &effect, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Environment_is_fx_enabled(Environment *self,int effect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "is_fx_enabled");
  const void* __args[1] = { &effect };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Environment_fx_set_param(Environment *self,int param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "fx_set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Environment_fx_get_param(Environment *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Environment", "fx_get_param");
  const void* __args[1] = { &param };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_Environment(Environment *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_EventStream(EventStream *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_EventStreamChibi(EventStreamChibi *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Font_draw__SWIG_0(Font *self,RID const &canvas_item,Vector2 const &pos,String const &string,Color const &modulate=Color(1,1,1,1),int clip_w=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "draw");
  const void* __args[5] = { &canvas_item, &pos, &string, &modulate, &clip_w };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Font_get_ascent(Font *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "get_ascent");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Font_get_descent(Font *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "get_descent");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Font_get_height(Font *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "get_height");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Font_is_distance_field_hint(Font *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "is_distance_field_hint");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Font_get_string_size(Font *self,String const &string){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "get_string_size");
  const void* __args[1] = { &string };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float Font_draw_char__SWIG_0(Font *self,RID const &canvas_item,Vector2 const &pos,int char_,int next=-1,Color const &modulate=Color(1,1,1,1)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Font", "draw_char");
  const void* __args[5] = { &canvas_item, &pos, &char_, &next, &modulate };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Font(Font *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void FuncRef_call_func__SWIG_0(FuncRef *self,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant(),Variant const &arg5_=Variant(),Variant const &arg6_=Variant(),Variant const &arg7_=Variant(),Variant const &arg8_=Variant(),Variant const &arg9_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FuncRef", "call_func");
  const void* __args[10] = { &arg0_, &arg1_, &arg2_, &arg3_, &arg4_, &arg5_, &arg6_, &arg7_, &arg8_, &arg9_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FuncRef_set_instance(FuncRef *self,Object *instance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FuncRef", "set_instance");
  const void* __args[1] = { instance };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FuncRef_set_function(FuncRef *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FuncRef", "set_function");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_FuncRef(FuncRef *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Variant GDFunctionState_resume__SWIG_0(GDFunctionState *self,Variant const &arg_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GDFunctionState", "resume");
  const void* __args[1] = { &arg_ };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool GDFunctionState_is_valid(GDFunctionState *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GDFunctionState", "is_valid");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_GDFunctionState(GDFunctionState *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void GDScript_new(GDScript *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GDScript", "new");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN RawArray GDScript_get_as_byte_code(GDScript *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GDScript", "get_as_byte_code");
  RawArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_GDScript(GDScript *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN bool Globals_has(Globals *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "has");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Globals_set_order(Globals *self,String const &name,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "set_order");
  const void* __args[2] = { &name, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Globals_get_order(Globals *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "get_order");
  const void* __args[1] = { &name };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Globals_set_persisting(Globals *self,String const &name,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "set_persisting");
  const void* __args[2] = { &name, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Globals_is_persisting(Globals *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "is_persisting");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Globals_clear(Globals *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "clear");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Globals_localize_path(Globals *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "localize_path");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String Globals_globalize_path(Globals *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "globalize_path");
  const void* __args[1] = { &path };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Globals_save(Globals *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "save");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Globals_has_singleton(Globals *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "has_singleton");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *Globals_get_singleton(Globals *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "get_singleton");
  const void* __args[1] = { &name };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Globals_load_resource_pack(Globals *self,String const &pack){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "load_resource_pack");
  const void* __args[1] = { &pack };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Globals_save_custom(Globals *self,String const &file){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Globals", "save_custom");
  const void* __args[1] = { &file };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Globals *Globals_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Globals")->cast_to<Globals>(); }
SWIGINTERN int HTTPClient_connect__SWIG_0(HTTPClient *self,String const &host,int port,bool use_ssl=false,bool verify_host=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "connect");
  const void* __args[4] = { &host, &port, &use_ssl, &verify_host };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void HTTPClient_set_connection(HTTPClient *self,StreamPeer *connection){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "set_connection");
  const void* __args[1] = { connection };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< StreamPeer > HTTPClient_get_connection(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "get_connection");
  Ref<StreamPeer> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_request_raw(HTTPClient *self,int method,String const &url,StringArray const &headers,RawArray const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "request_raw");
  const void* __args[4] = { &method, &url, &headers, &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_request__SWIG_0(HTTPClient *self,int method,String const &url,StringArray const &headers,String const &body=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "request");
  const void* __args[4] = { &method, &url, &headers, &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_send_body_text(HTTPClient *self,String const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "send_body_text");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_send_body_data(HTTPClient *self,RawArray const &body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "send_body_data");
  const void* __args[1] = { &body };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void HTTPClient_close(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "close");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool HTTPClient_has_response(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "has_response");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool HTTPClient_is_response_chunked(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "is_response_chunked");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_get_response_code(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "get_response_code");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN StringArray HTTPClient_get_response_headers(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "get_response_headers");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Dictionary HTTPClient_get_response_headers_as_dictionary(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "get_response_headers_as_dictionary");
  Dictionary ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_get_response_body_length(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "get_response_body_length");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RawArray HTTPClient_read_response_body_chunk(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "read_response_body_chunk");
  RawArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void HTTPClient_set_read_chunk_size(HTTPClient *self,int bytes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "set_read_chunk_size");
  const void* __args[1] = { &bytes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void HTTPClient_set_blocking_mode(HTTPClient *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "set_blocking_mode");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool HTTPClient_is_blocking_mode_enabled(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "is_blocking_mode_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_get_status(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "get_status");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPClient_poll(HTTPClient *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "poll");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String HTTPClient_query_string_from_dict(HTTPClient *self,Dictionary const &fields){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPClient", "query_string_from_dict");
  const void* __args[1] = { &fields };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_HTTPClient(HTTPClient *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN String IP_resolve_hostname(IP *self,String const &host){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("IP", "resolve_hostname");
  const void* __args[1] = { &host };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int IP_resolve_hostname_queue_item(IP *self,String const &host){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("IP", "resolve_hostname_queue_item");
  const void* __args[1] = { &host };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int IP_get_resolve_item_status(IP *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("IP", "get_resolve_item_status");
  const void* __args[1] = { &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String IP_get_resolve_item_address(IP *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("IP", "get_resolve_item_address");
  const void* __args[1] = { &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void IP_erase_resolve_item(IP *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("IP", "erase_resolve_item");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array IP_get_local_addresses(IP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("IP", "get_local_addresses");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN IP *IP_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("IP")->cast_to<IP>(); }
SWIGINTERN void ImageTexture_create__SWIG_0(ImageTexture *self,int width,int height,int format,int flags=7){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "create");
  const void* __args[4] = { &width, &height, &format, &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImageTexture_create_from_image__SWIG_0(ImageTexture *self,Image const &image,int flags=7){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "create_from_image");
  const void* __args[2] = { &image, &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ImageTexture_get_format(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "get_format");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ImageTexture_load(ImageTexture *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "load");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImageTexture_set_data(ImageTexture *self,Image const &image){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "set_data");
  const void* __args[1] = { &image };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Image ImageTexture_get_data(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "get_data");
  Image ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ImageTexture_set_storage(ImageTexture *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "set_storage");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ImageTexture_get_storage(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "get_storage");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ImageTexture_set_lossy_storage_quality(ImageTexture *self,float quality){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "set_lossy_storage_quality");
  const void* __args[1] = { &quality };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ImageTexture_get_lossy_storage_quality(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "get_lossy_storage_quality");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ImageTexture_fix_alpha_edges(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "fix_alpha_edges");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ImageTexture_premultiply_alpha(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "premultiply_alpha");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ImageTexture_normal_to_xy(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "normal_to_xy");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ImageTexture_shrink_x2_and_keep_size(ImageTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "shrink_x2_and_keep_size");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ImageTexture_set_size_override(ImageTexture *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImageTexture", "set_size_override");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_ImageTexture(ImageTexture *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN bool Input_is_key_pressed(Input *self,int scancode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "is_key_pressed");
  const void* __args[1] = { &scancode };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Input_is_mouse_button_pressed(Input *self,int button){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "is_mouse_button_pressed");
  const void* __args[1] = { &button };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Input_is_joy_button_pressed(Input *self,int device,int button){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "is_joy_button_pressed");
  const void* __args[2] = { &device, &button };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Input_is_action_pressed(Input *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "is_action_pressed");
  const void* __args[1] = { &action };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Input_add_joy_mapping__SWIG_0(Input *self,String const &mapping,bool update_existing=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "add_joy_mapping");
  const void* __args[2] = { &mapping, &update_existing };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Input_remove_joy_mapping(Input *self,String const &guid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "remove_joy_mapping");
  const void* __args[1] = { &guid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Input_is_joy_known(Input *self,int device){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "is_joy_known");
  const void* __args[1] = { &device };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float Input_get_joy_axis(Input *self,int device,int axis){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_joy_axis");
  const void* __args[2] = { &device, &axis };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String Input_get_joy_name(Input *self,int device){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_joy_name");
  const void* __args[1] = { &device };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String Input_get_joy_guid(Input *self,int device){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_joy_guid");
  const void* __args[1] = { &device };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Input_get_joy_vibration_strength(Input *self,int device){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_joy_vibration_strength");
  const void* __args[1] = { &device };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float Input_get_joy_vibration_duration(Input *self,int device){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_joy_vibration_duration");
  const void* __args[1] = { &device };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Input_start_joy_vibration__SWIG_0(Input *self,int device,float weak_magnitude,float strong_magnitude,float duration=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "start_joy_vibration");
  const void* __args[4] = { &device, &weak_magnitude, &strong_magnitude, &duration };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Input_stop_joy_vibration(Input *self,int device){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "stop_joy_vibration");
  const void* __args[1] = { &device };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Input_get_accelerometer(Input *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_accelerometer");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 Input_get_magnetometer(Input *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_magnetometer");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Input_get_mouse_speed(Input *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_mouse_speed");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Input_get_mouse_button_mask(Input *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_mouse_button_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Input_set_mouse_mode(Input *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "set_mouse_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Input_get_mouse_mode(Input *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "get_mouse_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Input_warp_mouse_pos(Input *self,Vector2 const &to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "warp_mouse_pos");
  const void* __args[1] = { &to };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Input_action_press(Input *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "action_press");
  const void* __args[1] = { &action };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Input_action_release(Input *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "action_release");
  const void* __args[1] = { &action };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Input_set_custom_mouse_cursor__SWIG_0(Input *self,Texture *image,Vector2 const &hotspot=Vector2(0,0)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Input", "set_custom_mouse_cursor");
  const void* __args[2] = { image, &hotspot };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Input *Input_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Input")->cast_to<Input>(); }
SWIGINTERN bool InputMap_has_action(InputMap *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "has_action");
  const void* __args[1] = { &action };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int InputMap_get_action_id(InputMap *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "get_action_id");
  const void* __args[1] = { &action };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String InputMap_get_action_from_id(InputMap *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "get_action_from_id");
  const void* __args[1] = { &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array InputMap_get_actions(InputMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "get_actions");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InputMap_add_action(InputMap *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "add_action");
  const void* __args[1] = { &action };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void InputMap_erase_action(InputMap *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "erase_action");
  const void* __args[1] = { &action };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void InputMap_action_add_event(InputMap *self,String const &action,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "action_add_event");
  const void* __args[2] = { &action, &event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool InputMap_action_has_event(InputMap *self,String const &action,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "action_has_event");
  const void* __args[2] = { &action, &event };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void InputMap_action_erase_event(InputMap *self,String const &action,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "action_erase_event");
  const void* __args[2] = { &action, &event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array InputMap_get_action_list(InputMap *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "get_action_list");
  const void* __args[1] = { &action };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool InputMap_event_is_action(InputMap *self,InputEvent const &event,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "event_is_action");
  const void* __args[2] = { &event, &action };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void InputMap_load_from_globals(InputMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InputMap", "load_from_globals");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN InputMap *InputMap_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("InputMap")->cast_to<InputMap>(); }
SWIGINTERN int LargeTexture_add_piece(LargeTexture *self,Vector2 const &ofs,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "add_piece");
  const void* __args[2] = { &ofs, texture };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void LargeTexture_set_piece_offset(LargeTexture *self,int idx,Vector2 const &ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "set_piece_offset");
  const void* __args[2] = { &idx, &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void LargeTexture_set_piece_texture(LargeTexture *self,int idx,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "set_piece_texture");
  const void* __args[2] = { &idx, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void LargeTexture_set_size(LargeTexture *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "set_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void LargeTexture_clear(LargeTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int LargeTexture_get_piece_count(LargeTexture *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "get_piece_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 LargeTexture_get_piece_offset(LargeTexture *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "get_piece_offset");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > LargeTexture_get_piece_texture(LargeTexture *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LargeTexture", "get_piece_texture");
  const void* __args[1] = { &idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_LargeTexture(LargeTexture *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void LineShape2D_set_normal(LineShape2D *self,Vector2 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineShape2D", "set_normal");
  const void* __args[1] = { &normal };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 LineShape2D_get_normal(LineShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineShape2D", "get_normal");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineShape2D_set_d(LineShape2D *self,float d){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineShape2D", "set_d");
  const void* __args[1] = { &d };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float LineShape2D_get_d(LineShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineShape2D", "get_d");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_LineShape2D(LineShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void MainLoop__drop_files(MainLoop *self,StringArray const &files,int screen){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_drop_files");
  const void* __args[2] = { &files, &screen };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop__finalize(MainLoop *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_finalize");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void MainLoop__idle(MainLoop *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_idle");
  const void* __args[1] = { &delta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop__initialize(MainLoop *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_initialize");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void MainLoop__input_event(MainLoop *self,InputEvent const &ev){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_input_event");
  const void* __args[1] = { &ev };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop__input_text(MainLoop *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_input_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop__iteration(MainLoop *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "_iteration");
  const void* __args[1] = { &delta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop_input_event(MainLoop *self,InputEvent const &ev){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "input_event");
  const void* __args[1] = { &ev };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop_input_text(MainLoop *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "input_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MainLoop_init(MainLoop *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "init");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool MainLoop_iteration(MainLoop *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "iteration");
  const void* __args[1] = { &delta };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool MainLoop_idle(MainLoop *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "idle");
  const void* __args[1] = { &delta };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MainLoop_finish(MainLoop *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MainLoop", "finish");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Material_set_flag(Material *self,int flag,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "set_flag");
  const void* __args[2] = { &flag, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Material_get_flag(Material *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "get_flag");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Material_set_blend_mode(Material *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "set_blend_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Material_get_blend_mode(Material *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "get_blend_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Material_set_line_width(Material *self,float width){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "set_line_width");
  const void* __args[1] = { &width };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Material_get_line_width(Material *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "get_line_width");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Material_set_depth_draw_mode(Material *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "set_depth_draw_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Material_get_depth_draw_mode(Material *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Material", "get_depth_draw_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Material(Material *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_MaterialShader(MaterialShader *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_MaterialShaderGraph(MaterialShaderGraph *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Mesh_add_morph_target(Mesh *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "add_morph_target");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Mesh_get_morph_target_count(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "get_morph_target_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String Mesh_get_morph_target_name(Mesh *self,int index){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "get_morph_target_name");
  const void* __args[1] = { &index };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Mesh_clear_morph_targets(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "clear_morph_targets");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Mesh_set_morph_target_mode(Mesh *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "set_morph_target_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Mesh_get_morph_target_mode(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "get_morph_target_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Mesh_add_surface__SWIG_0(Mesh *self,int primitive,Array const &arrays,Array const &morph_arrays=Array(),bool alphasort=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "add_surface");
  const void* __args[4] = { &primitive, &arrays, &morph_arrays, &alphasort };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Mesh_get_surface_count(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "get_surface_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Mesh_surface_remove(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_remove");
  const void* __args[1] = { &surf_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Mesh_surface_get_array_len(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_get_array_len");
  const void* __args[1] = { &surf_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Mesh_surface_get_array_index_len(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_get_array_index_len");
  const void* __args[1] = { &surf_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Mesh_surface_get_format(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_get_format");
  const void* __args[1] = { &surf_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Mesh_surface_get_primitive_type(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_get_primitive_type");
  const void* __args[1] = { &surf_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Mesh_surface_set_material(Mesh *self,int surf_idx,Material *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_set_material");
  const void* __args[2] = { &surf_idx, material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Material > Mesh_surface_get_material(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_get_material");
  const void* __args[1] = { &surf_idx };
  Ref<Material> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Mesh_surface_set_name(Mesh *self,int surf_idx,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_set_name");
  const void* __args[2] = { &surf_idx, &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Mesh_surface_get_name(Mesh *self,int surf_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "surface_get_name");
  const void* __args[1] = { &surf_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Mesh_center_geometry(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "center_geometry");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Mesh_regen_normalmaps(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "regen_normalmaps");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Mesh_set_custom_aabb(Mesh *self,AABB const &aabb){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "set_custom_aabb");
  const void* __args[1] = { &aabb };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN AABB Mesh_get_custom_aabb(Mesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Mesh", "get_custom_aabb");
  AABB ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Mesh(Mesh *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void MeshDataTool_clear(MeshDataTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int MeshDataTool_create_from_surface(MeshDataTool *self,Object *mesh,int surface){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "create_from_surface");
  const void* __args[2] = { mesh, &surface };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_commit_to_surface(MeshDataTool *self,Object *mesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "commit_to_surface");
  const void* __args[1] = { mesh };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_get_format(MeshDataTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_format");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_get_vertex_count(MeshDataTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_get_edge_count(MeshDataTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_edge_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_get_face_count(MeshDataTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_face_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex(MeshDataTool *self,int idx,Vector3 const &vertex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex");
  const void* __args[2] = { &idx, &vertex };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 MeshDataTool_get_vertex(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex");
  const void* __args[1] = { &idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_normal(MeshDataTool *self,int idx,Vector3 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_normal");
  const void* __args[2] = { &idx, &normal };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 MeshDataTool_get_vertex_normal(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_normal");
  const void* __args[1] = { &idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_tangent(MeshDataTool *self,int idx,Plane const &tangent){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_tangent");
  const void* __args[2] = { &idx, &tangent };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Plane MeshDataTool_get_vertex_tangent(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_tangent");
  const void* __args[1] = { &idx };
  Plane ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_uv(MeshDataTool *self,int idx,Vector2 const &uv){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_uv");
  const void* __args[2] = { &idx, &uv };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 MeshDataTool_get_vertex_uv(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_uv");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_uv2(MeshDataTool *self,int idx,Vector2 const &uv2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_uv2");
  const void* __args[2] = { &idx, &uv2 };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 MeshDataTool_get_vertex_uv2(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_uv2");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_color(MeshDataTool *self,int idx,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_color");
  const void* __args[2] = { &idx, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color MeshDataTool_get_vertex_color(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_color");
  const void* __args[1] = { &idx };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_bones(MeshDataTool *self,int idx,IntArray const &bones){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_bones");
  const void* __args[2] = { &idx, &bones };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN IntArray MeshDataTool_get_vertex_bones(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_bones");
  const void* __args[1] = { &idx };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_weights(MeshDataTool *self,int idx,RealArray const &weights){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_weights");
  const void* __args[2] = { &idx, &weights };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RealArray MeshDataTool_get_vertex_weights(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_weights");
  const void* __args[1] = { &idx };
  RealArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_vertex_meta(MeshDataTool *self,int idx,Variant const &meta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_vertex_meta");
  const void* __args[2] = { &idx, &meta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshDataTool_get_vertex_meta(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_meta");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN IntArray MeshDataTool_get_vertex_edges(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_edges");
  const void* __args[1] = { &idx };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN IntArray MeshDataTool_get_vertex_faces(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_vertex_faces");
  const void* __args[1] = { &idx };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_get_edge_vertex(MeshDataTool *self,int idx,int vertex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_edge_vertex");
  const void* __args[2] = { &idx, &vertex };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN IntArray MeshDataTool_get_edge_faces(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_edge_faces");
  const void* __args[1] = { &idx };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_edge_meta(MeshDataTool *self,int idx,Variant const &meta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_edge_meta");
  const void* __args[2] = { &idx, &meta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshDataTool_get_edge_meta(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_edge_meta");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int MeshDataTool_get_face_vertex(MeshDataTool *self,int idx,int vertex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_face_vertex");
  const void* __args[2] = { &idx, &vertex };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int MeshDataTool_get_face_edge(MeshDataTool *self,int idx,int edge){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_face_edge");
  const void* __args[2] = { &idx, &edge };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_face_meta(MeshDataTool *self,int idx,Variant const &meta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_face_meta");
  const void* __args[2] = { &idx, &meta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshDataTool_get_face_meta(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_face_meta");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 MeshDataTool_get_face_normal(MeshDataTool *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_face_normal");
  const void* __args[1] = { &idx };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshDataTool_set_material(MeshDataTool *self,Material *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "set_material");
  const void* __args[1] = { material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *MeshDataTool_get_material(MeshDataTool *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshDataTool", "get_material");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_MeshDataTool(MeshDataTool *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void MeshLibrary_create_item(MeshLibrary *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "create_item");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshLibrary_set_item_name(MeshLibrary *self,int id,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "set_item_name");
  const void* __args[2] = { &id, &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshLibrary_set_item_mesh(MeshLibrary *self,int id,Mesh *mesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "set_item_mesh");
  const void* __args[2] = { &id, mesh };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshLibrary_set_item_navmesh(MeshLibrary *self,int id,NavigationMesh *navmesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "set_item_navmesh");
  const void* __args[2] = { &id, navmesh };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshLibrary_set_item_shape(MeshLibrary *self,int id,Shape *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "set_item_shape");
  const void* __args[2] = { &id, shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String MeshLibrary_get_item_name(MeshLibrary *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "get_item_name");
  const void* __args[1] = { &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Mesh > MeshLibrary_get_item_mesh(MeshLibrary *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "get_item_mesh");
  const void* __args[1] = { &id };
  Ref<Mesh> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< NavigationMesh > MeshLibrary_get_item_navmesh(MeshLibrary *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "get_item_navmesh");
  const void* __args[1] = { &id };
  Ref<NavigationMesh> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Shape > MeshLibrary_get_item_shape(MeshLibrary *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "get_item_shape");
  const void* __args[1] = { &id };
  Ref<Shape> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MeshLibrary_remove_item(MeshLibrary *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "remove_item");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void MeshLibrary_clear(MeshLibrary *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN IntArray MeshLibrary_get_item_list(MeshLibrary *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "get_item_list");
  IntArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int MeshLibrary_get_last_unused_item_id(MeshLibrary *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshLibrary", "get_last_unused_item_id");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_MeshLibrary(MeshLibrary *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void MultiMesh_set_mesh(MultiMesh *self,Mesh *mesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "set_mesh");
  const void* __args[1] = { mesh };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Mesh > MultiMesh_get_mesh(MultiMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "get_mesh");
  Ref<Mesh> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MultiMesh_set_instance_count(MultiMesh *self,int count){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "set_instance_count");
  const void* __args[1] = { &count };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int MultiMesh_get_instance_count(MultiMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "get_instance_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MultiMesh_set_instance_transform(MultiMesh *self,int instance,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "set_instance_transform");
  const void* __args[2] = { &instance, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform MultiMesh_get_instance_transform(MultiMesh *self,int instance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "get_instance_transform");
  const void* __args[1] = { &instance };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MultiMesh_set_instance_color(MultiMesh *self,int instance,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "set_instance_color");
  const void* __args[2] = { &instance, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color MultiMesh_get_instance_color(MultiMesh *self,int instance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "get_instance_color");
  const void* __args[1] = { &instance };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void MultiMesh_set_aabb(MultiMesh *self,AABB const &visibility_aabb){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "set_aabb");
  const void* __args[1] = { &visibility_aabb };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN AABB MultiMesh_get_aabb(MultiMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "get_aabb");
  AABB ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MultiMesh_generate_aabb(MultiMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMesh", "generate_aabb");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_MultiMesh(MultiMesh *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void NavigationMesh_set_vertices(NavigationMesh *self,Vector3Array const &vertices){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMesh", "set_vertices");
  const void* __args[1] = { &vertices };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array NavigationMesh_get_vertices(NavigationMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMesh", "get_vertices");
  Vector3Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void NavigationMesh_add_polygon(NavigationMesh *self,IntArray const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMesh", "add_polygon");
  const void* __args[1] = { &polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int NavigationMesh_get_polygon_count(NavigationMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMesh", "get_polygon_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN IntArray NavigationMesh_get_polygon(NavigationMesh *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMesh", "get_polygon");
  const void* __args[1] = { &idx };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void NavigationMesh_clear_polygons(NavigationMesh *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMesh", "clear_polygons");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_NavigationMesh(NavigationMesh *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void NavigationPolygon_set_vertices(NavigationPolygon *self,Vector2Array const &vertices){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "set_vertices");
  const void* __args[1] = { &vertices };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array NavigationPolygon_get_vertices(NavigationPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "get_vertices");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void NavigationPolygon_add_polygon(NavigationPolygon *self,IntArray const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "add_polygon");
  const void* __args[1] = { &polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int NavigationPolygon_get_polygon_count(NavigationPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "get_polygon_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN IntArray NavigationPolygon_get_polygon(NavigationPolygon *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "get_polygon");
  const void* __args[1] = { &idx };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void NavigationPolygon_clear_polygons(NavigationPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "clear_polygons");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void NavigationPolygon_add_outline(NavigationPolygon *self,Vector2Array const &outline){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "add_outline");
  const void* __args[1] = { &outline };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void NavigationPolygon_add_outline_at_index(NavigationPolygon *self,Vector2Array const &outline,int index){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "add_outline_at_index");
  const void* __args[2] = { &outline, &index };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int NavigationPolygon_get_outline_count(NavigationPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "get_outline_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void NavigationPolygon_set_outline(NavigationPolygon *self,int idx,Vector2Array const &outline){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "set_outline");
  const void* __args[2] = { &idx, &outline };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array NavigationPolygon_get_outline(NavigationPolygon *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "get_outline");
  const void* __args[1] = { &idx };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void NavigationPolygon_remove_outline(NavigationPolygon *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "remove_outline");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void NavigationPolygon_clear_outlines(NavigationPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "clear_outlines");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void NavigationPolygon_make_polygons_from_outlines(NavigationPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygon", "make_polygons_from_outlines");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void delete_NavigationPolygon(NavigationPolygon *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Node__enter_tree(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_enter_tree");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Node__exit_tree(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_exit_tree");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Node__fixed_process(Node *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_fixed_process");
  const void* __args[1] = { &delta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node__input(Node *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_input");
  const void* __args[1] = { &event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node__process(Node *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_process");
  const void* __args[1] = { &delta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node__ready(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_ready");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Node__unhandled_input(Node *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_unhandled_input");
  const void* __args[1] = { &event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node__unhandled_key_input(Node *self,InputEvent const &key_event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "_unhandled_key_input");
  const void* __args[1] = { &key_event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node_set_name(Node *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_name");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Node_get_name(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_add_child__SWIG_0(Node *self,Node *node,bool legible_unique_name=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "add_child");
  const void* __args[2] = { node, &legible_unique_name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node_remove_child(Node *self,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "remove_child");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Node_get_child_count(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_child_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Node_get_children(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_children");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Node *Node_get_child(Node *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_child");
  const void* __args[1] = { &idx };
  Node* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Node_has_node(Node *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "has_node");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Node *Node_get_node(Node *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_node");
  const void* __args[1] = { &path };
  Node* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Node *Node_get_parent(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_parent");
  Node* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Node *Node_find_node__SWIG_0(Node *self,String const &mask,bool recursive=true,bool owned=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "find_node");
  const void* __args[3] = { &mask, &recursive, &owned };
  Node* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Node_has_node_and_resource(Node *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "has_node_and_resource");
  const void* __args[1] = { &path };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array Node_get_node_and_resource(Node *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_node_and_resource");
  const void* __args[1] = { &path };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Node_is_inside_tree(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_inside_tree");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Node_is_a_parent_of(Node *self,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_a_parent_of");
  const void* __args[1] = { node };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Node_is_greater_than(Node *self,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_greater_than");
  const void* __args[1] = { node };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN NodePath Node_get_path(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_path");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN NodePath Node_get_path_to(Node *self,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_path_to");
  const void* __args[1] = { node };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Node_add_to_group__SWIG_0(Node *self,String const &group,bool persistent=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "add_to_group");
  const void* __args[2] = { &group, &persistent };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node_remove_from_group(Node *self,String const &group){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "remove_from_group");
  const void* __args[1] = { &group };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Node_is_in_group(Node *self,String const &group){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_in_group");
  const void* __args[1] = { &group };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Node_move_child(Node *self,Node *child_node,int to_pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "move_child");
  const void* __args[2] = { child_node, &to_pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array Node_get_groups(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_groups");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_raise(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "raise");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Node_set_owner(Node *self,Node *owner){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_owner");
  const void* __args[1] = { owner };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Node *Node_get_owner(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_owner");
  Node* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_remove_and_skip(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "remove_and_skip");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int Node_get_index(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_index");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_print_tree(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "print_tree");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Node_set_filename(Node *self,String const &filename){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_filename");
  const void* __args[1] = { &filename };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Node_get_filename(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_filename");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_propagate_notification(Node *self,int what){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "propagate_notification");
  const void* __args[1] = { &what };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node_set_fixed_process(Node *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_fixed_process");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Node_get_fixed_process_delta_time(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_fixed_process_delta_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Node_is_fixed_processing(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_fixed_processing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_set_process(Node *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_process");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Node_get_process_delta_time(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_process_delta_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Node_is_processing(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_processing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_set_process_input(Node *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_process_input");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Node_is_processing_input(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_processing_input");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_set_process_unhandled_input(Node *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_process_unhandled_input");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Node_is_processing_unhandled_input(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_processing_unhandled_input");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_set_process_unhandled_key_input(Node *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_process_unhandled_key_input");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Node_is_processing_unhandled_key_input(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "is_processing_unhandled_key_input");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_set_pause_mode(Node *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_pause_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Node_get_pause_mode(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_pause_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Node_can_process(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "can_process");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_print_stray_nodes(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "print_stray_nodes");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int Node_get_position_in_parent(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_position_in_parent");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN SceneTree *Node_get_tree(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_tree");
  SceneTree* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Node *Node_duplicate__SWIG_0(Node *self,bool use_instancing=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "duplicate");
  const void* __args[1] = { &use_instancing };
  Node* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Node_replace_by__SWIG_0(Node *self,Node *node,bool keep_data=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "replace_by");
  const void* __args[2] = { node, &keep_data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node_set_scene_instance_load_placeholder(Node *self,bool load_placeholder){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "set_scene_instance_load_placeholder");
  const void* __args[1] = { &load_placeholder };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Node_get_scene_instance_load_placeholder(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_scene_instance_load_placeholder");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *Node_get_viewport(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "get_viewport");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node_queue_free(Node *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node", "queue_free");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void OccluderPolygon2D_set_closed(OccluderPolygon2D *self,bool closed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OccluderPolygon2D", "set_closed");
  const void* __args[1] = { &closed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool OccluderPolygon2D_is_closed(OccluderPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OccluderPolygon2D", "is_closed");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void OccluderPolygon2D_set_cull_mode(OccluderPolygon2D *self,int cull_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OccluderPolygon2D", "set_cull_mode");
  const void* __args[1] = { &cull_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int OccluderPolygon2D_get_cull_mode(OccluderPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OccluderPolygon2D", "get_cull_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void OccluderPolygon2D_set_polygon(OccluderPolygon2D *self,Vector2Array const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OccluderPolygon2D", "set_polygon");
  const void* __args[1] = { &polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array OccluderPolygon2D_get_polygon(OccluderPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OccluderPolygon2D", "get_polygon");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_OccluderPolygon2D(OccluderPolygon2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int PCKPacker_pck_start(PCKPacker *self,String const &pck_name,int alignment){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PCKPacker", "pck_start");
  const void* __args[2] = { &pck_name, &alignment };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PCKPacker_add_file(PCKPacker *self,String const &pck_path,String const &source_path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PCKPacker", "add_file");
  const void* __args[2] = { &pck_path, &source_path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PCKPacker_flush(PCKPacker *self,bool verbose){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PCKPacker", "flush");
  const void* __args[1] = { &verbose };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_PCKPacker(PCKPacker *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void PHashTranslation_generate(PHashTranslation *self,Translation *from){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PHashTranslation", "generate");
  const void* __args[1] = { from };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_PHashTranslation(PHashTranslation *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int PackedDataContainer_pack(PackedDataContainer *self,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedDataContainer", "pack");
  const void* __args[1] = { &value };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PackedDataContainer_size(PackedDataContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedDataContainer", "size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PackedDataContainer(PackedDataContainer *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int PackedDataContainerRef_size(PackedDataContainerRef *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedDataContainerRef", "size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PackedDataContainerRef(PackedDataContainerRef *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int PackedScene_pack(PackedScene *self,Node *path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedScene", "pack");
  const void* __args[1] = { path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Node *PackedScene_instance__SWIG_0(PackedScene *self,bool gen_edit_state=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedScene", "instance");
  const void* __args[1] = { &gen_edit_state };
  Node* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool PackedScene_can_instance(PackedScene *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedScene", "can_instance");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< SceneState > PackedScene_get_state(PackedScene *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PackedScene", "get_state");
  Ref<SceneState> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PackedScene(PackedScene *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Variant PacketPeer_get_var(PacketPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeer", "get_var");
  Variant ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PacketPeer_put_var(PacketPeer *self,Variant const &var){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeer", "put_var");
  const void* __args[1] = { &var };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN RawArray PacketPeer_get_packet(PacketPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeer", "get_packet");
  RawArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PacketPeer_put_packet(PacketPeer *self,RawArray const &buffer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeer", "put_packet");
  const void* __args[1] = { &buffer };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PacketPeer_get_packet_error(PacketPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeer", "get_packet_error");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PacketPeer_get_available_packet_count(PacketPeer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeer", "get_available_packet_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PacketPeer(PacketPeer *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void PacketPeerStream_set_stream_peer(PacketPeerStream *self,StreamPeer *peer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerStream", "set_stream_peer");
  const void* __args[1] = { peer };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void delete_PacketPeerStream(PacketPeerStream *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int PacketPeerUDP_listen__SWIG_0(PacketPeerUDP *self,int port,int recv_buf_size=65536){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "listen");
  const void* __args[2] = { &port, &recv_buf_size };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PacketPeerUDP_close(PacketPeerUDP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "close");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int PacketPeerUDP_wait(PacketPeerUDP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "wait");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool PacketPeerUDP_is_listening(PacketPeerUDP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "is_listening");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String PacketPeerUDP_get_packet_ip(PacketPeerUDP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "get_packet_ip");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PacketPeerUDP_get_packet_address(PacketPeerUDP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "get_packet_address");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PacketPeerUDP_get_packet_port(PacketPeerUDP *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "get_packet_port");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int PacketPeerUDP_set_send_address(PacketPeerUDP *self,String const &host,int port){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PacketPeerUDP", "set_send_address");
  const void* __args[2] = { &host, &port };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN PacketPeerUDP *new_PacketPeerUDP(){ return PacketPeerUDP::create(); }
SWIGINTERN void delete_PacketPeerUDP(PacketPeerUDP *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void Physics2DShapeQueryParameters_set_shape(Physics2DShapeQueryParameters *self,Shape2D *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_shape");
  const void* __args[1] = { shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Physics2DShapeQueryParameters_set_shape_rid(Physics2DShapeQueryParameters *self,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_shape_rid");
  const void* __args[1] = { &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID Physics2DShapeQueryParameters_get_shape_rid(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_shape_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DShapeQueryParameters_set_transform(Physics2DShapeQueryParameters *self,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_transform");
  const void* __args[1] = { &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 Physics2DShapeQueryParameters_get_transform(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DShapeQueryParameters_set_motion(Physics2DShapeQueryParameters *self,Vector2 const &motion){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_motion");
  const void* __args[1] = { &motion };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Physics2DShapeQueryParameters_get_motion(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_motion");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DShapeQueryParameters_set_margin(Physics2DShapeQueryParameters *self,float margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_margin");
  const void* __args[1] = { &margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Physics2DShapeQueryParameters_get_margin(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_margin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DShapeQueryParameters_set_layer_mask(Physics2DShapeQueryParameters *self,int layer_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_layer_mask");
  const void* __args[1] = { &layer_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DShapeQueryParameters_get_layer_mask(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DShapeQueryParameters_set_object_type_mask(Physics2DShapeQueryParameters *self,int object_type_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_object_type_mask");
  const void* __args[1] = { &object_type_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Physics2DShapeQueryParameters_get_object_type_mask(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_object_type_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Physics2DShapeQueryParameters_set_exclude(Physics2DShapeQueryParameters *self,Array const &exclude){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "set_exclude");
  const void* __args[1] = { &exclude };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array Physics2DShapeQueryParameters_get_exclude(Physics2DShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryParameters", "get_exclude");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Physics2DShapeQueryParameters(Physics2DShapeQueryParameters *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int Physics2DShapeQueryResult_get_result_count(Physics2DShapeQueryResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryResult", "get_result_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID Physics2DShapeQueryResult_get_result_rid(Physics2DShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryResult", "get_result_rid");
  const void* __args[1] = { &idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Physics2DShapeQueryResult_get_result_object_id(Physics2DShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryResult", "get_result_object_id");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *Physics2DShapeQueryResult_get_result_object(Physics2DShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryResult", "get_result_object");
  const void* __args[1] = { &idx };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Physics2DShapeQueryResult_get_result_object_shape(Physics2DShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DShapeQueryResult", "get_result_object_shape");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_Physics2DShapeQueryResult(Physics2DShapeQueryResult *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Vector2 Physics2DTestMotionResult_get_motion(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_motion");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DTestMotionResult_get_motion_remainder(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_motion_remainder");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DTestMotionResult_get_collision_point(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collision_point");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DTestMotionResult_get_collision_normal(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collision_normal");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Physics2DTestMotionResult_get_collider_velocity(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collider_velocity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Physics2DTestMotionResult_get_collider_id(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collider_id");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID Physics2DTestMotionResult_get_collider_rid(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collider_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *Physics2DTestMotionResult_get_collider(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collider");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Physics2DTestMotionResult_get_collider_shape(Physics2DTestMotionResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Physics2DTestMotionResult", "get_collider_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_Physics2DTestMotionResult(Physics2DTestMotionResult *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void PhysicsShapeQueryParameters_set_shape(PhysicsShapeQueryParameters *self,Shape *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_shape");
  const void* __args[1] = { shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsShapeQueryParameters_set_shape_rid(PhysicsShapeQueryParameters *self,RID const &shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_shape_rid");
  const void* __args[1] = { &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN RID PhysicsShapeQueryParameters_get_shape_rid(PhysicsShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "get_shape_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsShapeQueryParameters_set_transform(PhysicsShapeQueryParameters *self,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_transform");
  const void* __args[1] = { &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform PhysicsShapeQueryParameters_get_transform(PhysicsShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "get_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsShapeQueryParameters_set_margin(PhysicsShapeQueryParameters *self,float margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_margin");
  const void* __args[1] = { &margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsShapeQueryParameters_get_margin(PhysicsShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "get_margin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsShapeQueryParameters_set_layer_mask(PhysicsShapeQueryParameters *self,int layer_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_layer_mask");
  const void* __args[1] = { &layer_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsShapeQueryParameters_get_layer_mask(PhysicsShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsShapeQueryParameters_set_object_type_mask(PhysicsShapeQueryParameters *self,int object_type_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_object_type_mask");
  const void* __args[1] = { &object_type_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsShapeQueryParameters_get_object_type_mask(PhysicsShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "get_object_type_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsShapeQueryParameters_set_exclude(PhysicsShapeQueryParameters *self,Array const &exclude){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "set_exclude");
  const void* __args[1] = { &exclude };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array PhysicsShapeQueryParameters_get_exclude(PhysicsShapeQueryParameters *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryParameters", "get_exclude");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PhysicsShapeQueryParameters(PhysicsShapeQueryParameters *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN int PhysicsShapeQueryResult_get_result_count(PhysicsShapeQueryResult *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryResult", "get_result_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID PhysicsShapeQueryResult_get_result_rid(PhysicsShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryResult", "get_result_rid");
  const void* __args[1] = { &idx };
  RID ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PhysicsShapeQueryResult_get_result_object_id(PhysicsShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryResult", "get_result_object_id");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *PhysicsShapeQueryResult_get_result_object(PhysicsShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryResult", "get_result_object");
  const void* __args[1] = { &idx };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PhysicsShapeQueryResult_get_result_object_shape(PhysicsShapeQueryResult *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsShapeQueryResult", "get_result_object_shape");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_PhysicsShapeQueryResult(PhysicsShapeQueryResult *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void PlaneShape_set_plane(PlaneShape *self,Plane const &plane){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PlaneShape", "set_plane");
  const void* __args[1] = { &plane };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Plane PlaneShape_get_plane(PlaneShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PlaneShape", "get_plane");
  Plane ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PlaneShape(PlaneShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void PolygonPathFinder_setup(PolygonPathFinder *self,Vector2Array const &points,IntArray const &connections){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "setup");
  const void* __args[2] = { &points, &connections };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array PolygonPathFinder_find_path(PolygonPathFinder *self,Vector2 const &from,Vector2 const &to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "find_path");
  const void* __args[2] = { &from, &to };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2Array PolygonPathFinder_get_intersections(PolygonPathFinder *self,Vector2 const &from,Vector2 const &to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "get_intersections");
  const void* __args[2] = { &from, &to };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 PolygonPathFinder_get_closest_point(PolygonPathFinder *self,Vector2 const &point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "get_closest_point");
  const void* __args[1] = { &point };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool PolygonPathFinder_is_point_inside(PolygonPathFinder *self,Vector2 const &point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "is_point_inside");
  const void* __args[1] = { &point };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PolygonPathFinder_set_point_penalty(PolygonPathFinder *self,int idx,float penalty){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "set_point_penalty");
  const void* __args[2] = { &idx, &penalty };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PolygonPathFinder_get_point_penalty(PolygonPathFinder *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "get_point_penalty");
  const void* __args[1] = { &idx };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Rect2 PolygonPathFinder_get_bounds(PolygonPathFinder *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PolygonPathFinder", "get_bounds");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_PolygonPathFinder(PolygonPathFinder *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void RayShape_set_length(RayShape *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayShape", "set_length");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RayShape_get_length(RayShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayShape", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_RayShape(RayShape *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void RayShape2D_set_length(RayShape2D *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayShape2D", "set_length");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RayShape2D_get_length(RayShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayShape2D", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_RayShape2D(RayShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void RectangleShape2D_set_extents(RectangleShape2D *self,Vector2 const &extents){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RectangleShape2D", "set_extents");
  const void* __args[1] = { &extents };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 RectangleShape2D_get_extents(RectangleShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RectangleShape2D", "get_extents");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_RectangleShape2D(RectangleShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void delete_RenderTargetTexture(RenderTargetTexture *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ResourcePreloader_add_resource(ResourcePreloader *self,String const &name,Object *resource){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourcePreloader", "add_resource");
  const void* __args[2] = { &name, resource };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ResourcePreloader_remove_resource(ResourcePreloader *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourcePreloader", "remove_resource");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ResourcePreloader_rename_resource(ResourcePreloader *self,String const &name,String const &newname){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourcePreloader", "rename_resource");
  const void* __args[2] = { &name, &newname };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ResourcePreloader_has_resource(ResourcePreloader *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourcePreloader", "has_resource");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *ResourcePreloader_get_resource(ResourcePreloader *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourcePreloader", "get_resource");
  const void* __args[1] = { &name };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray ResourcePreloader_get_resource_list(ResourcePreloader *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ResourcePreloader", "get_resource_list");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer_set_sample_library(SamplePlayer *self,SampleLibrary *library){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_sample_library");
  const void* __args[1] = { library };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< SampleLibrary > SamplePlayer_get_sample_library(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_sample_library");
  Ref<SampleLibrary> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer_set_polyphony(SamplePlayer *self,int max_voices){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_polyphony");
  const void* __args[1] = { &max_voices };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SamplePlayer_get_polyphony(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_polyphony");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SamplePlayer_play__SWIG_0(SamplePlayer *self,String const &name,bool unique=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "play");
  const void* __args[2] = { &name, &unique };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer_stop(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "stop");
  const void* __args[1] = { &voice };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_stop_all(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "stop_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void SamplePlayer_set_mix_rate(SamplePlayer *self,int voice,int hz){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_mix_rate");
  const void* __args[2] = { &voice, &hz };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_pitch_scale(SamplePlayer *self,int voice,float ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_pitch_scale");
  const void* __args[2] = { &voice, &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_volume(SamplePlayer *self,int voice,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_volume");
  const void* __args[2] = { &voice, &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_volume_db(SamplePlayer *self,int voice,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_volume_db");
  const void* __args[2] = { &voice, &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_pan__SWIG_0(SamplePlayer *self,int voice,float pan,float depth=0,float height=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_pan");
  const void* __args[4] = { &voice, &pan, &depth, &height };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_filter__SWIG_0(SamplePlayer *self,int voice,int type,float cutoff_hz,float resonance,float gain=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_filter");
  const void* __args[5] = { &voice, &type, &cutoff_hz, &resonance, &gain };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_chorus(SamplePlayer *self,int voice,float send){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_chorus");
  const void* __args[2] = { &voice, &send };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_reverb(SamplePlayer *self,int voice,int room_type,float send){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_reverb");
  const void* __args[3] = { &voice, &room_type, &send };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SamplePlayer_get_mix_rate(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_mix_rate");
  const void* __args[1] = { &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_pitch_scale(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_pitch_scale");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_volume(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_volume");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_volume_db(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_volume_db");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_pan(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_pan");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_pan_depth(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_pan_depth");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_pan_height(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_pan_height");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int SamplePlayer_get_filter_type(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_filter_type");
  const void* __args[1] = { &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_filter_cutoff(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_filter_cutoff");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_filter_resonance(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_filter_resonance");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_filter_gain(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_filter_gain");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_chorus(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_chorus");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int SamplePlayer_get_reverb_room(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_reverb_room");
  const void* __args[1] = { &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_reverb(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_reverb");
  const void* __args[1] = { &voice };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer_set_default_pitch_scale(SamplePlayer *self,float ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_pitch_scale");
  const void* __args[1] = { &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_default_volume(SamplePlayer *self,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_volume");
  const void* __args[1] = { &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_default_volume_db(SamplePlayer *self,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_volume_db");
  const void* __args[1] = { &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_default_pan__SWIG_0(SamplePlayer *self,float pan,float depth=0,float height=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_pan");
  const void* __args[3] = { &pan, &depth, &height };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_default_filter__SWIG_0(SamplePlayer *self,int type,float cutoff_hz,float resonance,float gain=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_filter");
  const void* __args[4] = { &type, &cutoff_hz, &resonance, &gain };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_default_chorus(SamplePlayer *self,float send){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_chorus");
  const void* __args[1] = { &send };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer_set_default_reverb(SamplePlayer *self,int room_type,float send){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "set_default_reverb");
  const void* __args[2] = { &room_type, &send };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SamplePlayer_get_default_pitch_scale(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_pitch_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_volume(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_volume");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_volume_db(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_volume_db");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_pan(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_pan");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_pan_depth(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_pan_depth");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_pan_height(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_pan_height");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SamplePlayer_get_default_filter_type(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_filter_type");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_filter_cutoff(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_filter_cutoff");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_filter_resonance(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_filter_resonance");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_filter_gain(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_filter_gain");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_chorus(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_chorus");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SamplePlayer_get_default_reverb_room(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_reverb_room");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SamplePlayer_get_default_reverb(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "get_default_reverb");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool SamplePlayer_is_active(SamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "is_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool SamplePlayer_is_voice_active(SamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer", "is_voice_active");
  const void* __args[1] = { &voice };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SceneTree_notify_group(SceneTree *self,int call_flags,String const &group,int notification){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "notify_group");
  const void* __args[3] = { &call_flags, &group, &notification };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SceneTree_set_group(SceneTree *self,int call_flags,String const &group,String const &property,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_group");
  const void* __args[4] = { &call_flags, &group, &property, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array SceneTree_get_nodes_in_group(SceneTree *self,String const &group){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "get_nodes_in_group");
  const void* __args[1] = { &group };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Viewport *SceneTree_get_root(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "get_root");
  Viewport* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool SceneTree_has_group(SceneTree *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "has_group");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SceneTree_set_auto_accept_quit(SceneTree *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_auto_accept_quit");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SceneTree_set_editor_hint(SceneTree *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_editor_hint");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SceneTree_is_editor_hint(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "is_editor_hint");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SceneTree_set_debug_collisions_hint(SceneTree *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_debug_collisions_hint");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SceneTree_is_debugging_collisions_hint(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "is_debugging_collisions_hint");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SceneTree_set_debug_navigation_hint(SceneTree *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_debug_navigation_hint");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SceneTree_is_debugging_navigation_hint(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "is_debugging_navigation_hint");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SceneTree_set_edited_scene_root(SceneTree *self,Object *scene){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_edited_scene_root");
  const void* __args[1] = { scene };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *SceneTree_get_edited_scene_root(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "get_edited_scene_root");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SceneTree_set_pause(SceneTree *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_pause");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SceneTree_is_paused(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "is_paused");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SceneTree_set_input_as_handled(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_input_as_handled");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int SceneTree_get_node_count(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "get_node_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SceneTree_get_frame(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "get_frame");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SceneTree_quit(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "quit");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void SceneTree_set_screen_stretch(SceneTree *self,int mode,int aspect,Vector2 const &minsize){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_screen_stretch");
  const void* __args[3] = { &mode, &aspect, &minsize };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SceneTree_queue_delete(SceneTree *self,Object *obj){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "queue_delete");
  const void* __args[1] = { obj };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SceneTree_call_group__SWIG_0(SceneTree *self,int flags,String const &group,String const &method,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "call_group");
  const void* __args[8] = { &flags, &group, &method, &arg0_, &arg1_, &arg2_, &arg3_, &arg4_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SceneTree_set_current_scene(SceneTree *self,Node *child_node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "set_current_scene");
  const void* __args[1] = { child_node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Node *SceneTree_get_current_scene(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "get_current_scene");
  Node* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SceneTree_change_scene(SceneTree *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "change_scene");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int SceneTree_change_scene_to(SceneTree *self,PackedScene *packed_scene){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "change_scene_to");
  const void* __args[1] = { packed_scene };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int SceneTree_reload_current_scene(SceneTree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SceneTree", "reload_current_scene");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SegmentShape2D_set_a(SegmentShape2D *self,Vector2 const &a){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SegmentShape2D", "set_a");
  const void* __args[1] = { &a };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 SegmentShape2D_get_a(SegmentShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SegmentShape2D", "get_a");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SegmentShape2D_set_b(SegmentShape2D *self,Vector2 const &b){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SegmentShape2D", "set_b");
  const void* __args[1] = { &b };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 SegmentShape2D_get_b(SegmentShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SegmentShape2D", "get_b");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_SegmentShape2D(SegmentShape2D *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void ShaderMaterial_set_shader(ShaderMaterial *self,Shader *shader){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderMaterial", "set_shader");
  const void* __args[1] = { shader };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Shader > ShaderMaterial_get_shader(ShaderMaterial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderMaterial", "get_shader");
  Ref<Shader> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ShaderMaterial_set_shader_param(ShaderMaterial *self,String const &param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderMaterial", "set_shader_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Variant ShaderMaterial_get_shader_param(ShaderMaterial *self,String const &param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ShaderMaterial", "get_shader_param");
  const void* __args[1] = { &param };
  Variant ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void delete_ShaderMaterial(ShaderMaterial *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void SoundRoomParams_set_param(SoundRoomParams *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundRoomParams", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SoundRoomParams_get_param(SoundRoomParams *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundRoomParams", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SoundRoomParams_set_reverb_mode(SoundRoomParams *self,int reverb_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundRoomParams", "set_reverb_mode");
  const void* __args[1] = { &reverb_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SoundRoomParams_get_reverb_mode(SoundRoomParams *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundRoomParams", "get_reverb_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SoundRoomParams_set_force_params_to_all_sources(SoundRoomParams *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundRoomParams", "set_force_params_to_all_sources");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SoundRoomParams_is_forcing_params_to_all_sources(SoundRoomParams *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundRoomParams", "is_forcing_params_to_all_sources");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_transform(Spatial *self,Transform const &local){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_transform");
  const void* __args[1] = { &local };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform Spatial_get_transform(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_translation(Spatial *self,Vector3 const &translation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_translation");
  const void* __args[1] = { &translation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Spatial_get_translation(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_translation");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_rotation(Spatial *self,Vector3 const &rotation_rad){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_rotation");
  const void* __args[1] = { &rotation_rad };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Spatial_get_rotation(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_rotation");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_rotation_deg(Spatial *self,Vector3 const &rotation_deg){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_rotation_deg");
  const void* __args[1] = { &rotation_deg };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Spatial_get_rotation_deg(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_rotation_deg");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_scale(Spatial *self,Vector3 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Spatial_get_scale(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_scale");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_global_transform(Spatial *self,Transform const &global){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_global_transform");
  const void* __args[1] = { &global };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform Spatial_get_global_transform(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_global_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *Spatial_get_parent_spatial(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_parent_spatial");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_ignore_transform_notification(Spatial *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_ignore_transform_notification");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_set_as_toplevel(Spatial *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_as_toplevel");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Spatial_is_set_as_toplevel(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "is_set_as_toplevel");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< World > Spatial_get_world(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_world");
  Ref<World> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_update_gizmo(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "update_gizmo");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Spatial_set_gizmo(Spatial *self,SpatialGizmo *gizmo){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_gizmo");
  const void* __args[1] = { gizmo };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< SpatialGizmo > Spatial_get_gizmo(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "get_gizmo");
  Ref<SpatialGizmo> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_show(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "show");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Spatial_hide(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "hide");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool Spatial_is_visible(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "is_visible");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Spatial_is_hidden(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "is_hidden");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_set_hidden(Spatial *self,bool hidden){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_hidden");
  const void* __args[1] = { &hidden };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_set_notify_local_transform(Spatial *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_notify_local_transform");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Spatial_is_local_transform_notification_enabled(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "is_local_transform_notification_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Spatial_rotate(Spatial *self,Vector3 const &normal,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "rotate");
  const void* __args[2] = { &normal, &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_global_rotate(Spatial *self,Vector3 const &normal,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "global_rotate");
  const void* __args[2] = { &normal, &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_rotate_x(Spatial *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "rotate_x");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_rotate_y(Spatial *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "rotate_y");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_rotate_z(Spatial *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "rotate_z");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_translate(Spatial *self,Vector3 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "translate");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_global_translate(Spatial *self,Vector3 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "global_translate");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_orthonormalize(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "orthonormalize");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Spatial_set_identity(Spatial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "set_identity");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Spatial_look_at(Spatial *self,Vector3 const &target,Vector3 const &up){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "look_at");
  const void* __args[2] = { &target, &up };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Spatial_look_at_from_pos(Spatial *self,Vector3 const &pos,Vector3 const &target,Vector3 const &up){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Spatial", "look_at_from_pos");
  const void* __args[3] = { &pos, &target, &up };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpatialPlayer_set_param(SpatialPlayer *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialPlayer", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpatialPlayer_get_param(SpatialPlayer *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialPlayer", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpatialSamplePlayer_set_sample_library(SpatialSamplePlayer *self,SampleLibrary *library){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "set_sample_library");
  const void* __args[1] = { library };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< SampleLibrary > SpatialSamplePlayer_get_sample_library(SpatialSamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "get_sample_library");
  Ref<SampleLibrary> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialSamplePlayer_set_polyphony(SpatialSamplePlayer *self,int voices){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "set_polyphony");
  const void* __args[1] = { &voices };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SpatialSamplePlayer_get_polyphony(SpatialSamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "get_polyphony");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SpatialSamplePlayer_play__SWIG_0(SpatialSamplePlayer *self,String const &sample,int voice=-2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "play");
  const void* __args[2] = { &sample, &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpatialSamplePlayer_voice_set_pitch_scale(SpatialSamplePlayer *self,int voice,float ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "voice_set_pitch_scale");
  const void* __args[2] = { &voice, &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpatialSamplePlayer_voice_set_volume_scale_db(SpatialSamplePlayer *self,int voice,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "voice_set_volume_scale_db");
  const void* __args[2] = { &voice, &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpatialSamplePlayer_is_voice_active(SpatialSamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "is_voice_active");
  const void* __args[1] = { &voice };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpatialSamplePlayer_stop_voice(SpatialSamplePlayer *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "stop_voice");
  const void* __args[1] = { &voice };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpatialSamplePlayer_stop_all(SpatialSamplePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialSamplePlayer", "stop_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void SpatialStreamPlayer_set_stream(SpatialStreamPlayer *self,AudioStream *stream){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_stream");
  const void* __args[1] = { stream };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< AudioStream > SpatialStreamPlayer_get_stream(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_stream");
  Ref<AudioStream> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_play__SWIG_0(SpatialStreamPlayer *self,float offset=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "play");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpatialStreamPlayer_stop(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool SpatialStreamPlayer_is_playing(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_set_paused(SpatialStreamPlayer *self,bool paused){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_paused");
  const void* __args[1] = { &paused };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpatialStreamPlayer_is_paused(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "is_paused");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_set_loop(SpatialStreamPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_loop");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpatialStreamPlayer_has_loop(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_set_volume(SpatialStreamPlayer *self,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_volume");
  const void* __args[1] = { &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpatialStreamPlayer_get_volume(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_volume");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_set_volume_db(SpatialStreamPlayer *self,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_volume_db");
  const void* __args[1] = { &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpatialStreamPlayer_get_volume_db(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_volume_db");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_set_buffering_msec(SpatialStreamPlayer *self,int msec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_buffering_msec");
  const void* __args[1] = { &msec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SpatialStreamPlayer_get_buffering_msec(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_buffering_msec");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_set_loop_restart_time(SpatialStreamPlayer *self,float secs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_loop_restart_time");
  const void* __args[1] = { &secs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpatialStreamPlayer_get_loop_restart_time(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_loop_restart_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String SpatialStreamPlayer_get_stream_name(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_stream_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SpatialStreamPlayer_get_loop_count(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_loop_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SpatialStreamPlayer_get_pos(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpatialStreamPlayer_seek_pos(SpatialStreamPlayer *self,float time){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "seek_pos");
  const void* __args[1] = { &time };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SpatialStreamPlayer_set_autoplay(SpatialStreamPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "set_autoplay");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpatialStreamPlayer_has_autoplay(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "has_autoplay");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float SpatialStreamPlayer_get_length(SpatialStreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpatialStreamPlayer", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_stream(StreamPlayer *self,AudioStream *stream){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_stream");
  const void* __args[1] = { stream };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< AudioStream > StreamPlayer_get_stream(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_stream");
  Ref<AudioStream> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_play__SWIG_0(StreamPlayer *self,float offset=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "play");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPlayer_stop(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool StreamPlayer_is_playing(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_paused(StreamPlayer *self,bool paused){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_paused");
  const void* __args[1] = { &paused };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StreamPlayer_is_paused(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "is_paused");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_loop(StreamPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_loop");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StreamPlayer_has_loop(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_volume(StreamPlayer *self,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_volume");
  const void* __args[1] = { &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StreamPlayer_get_volume(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_volume");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_volume_db(StreamPlayer *self,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_volume_db");
  const void* __args[1] = { &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StreamPlayer_get_volume_db(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_volume_db");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_buffering_msec(StreamPlayer *self,int msec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_buffering_msec");
  const void* __args[1] = { &msec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int StreamPlayer_get_buffering_msec(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_buffering_msec");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_set_loop_restart_time(StreamPlayer *self,float secs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_loop_restart_time");
  const void* __args[1] = { &secs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StreamPlayer_get_loop_restart_time(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_loop_restart_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String StreamPlayer_get_stream_name(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_stream_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int StreamPlayer_get_loop_count(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_loop_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float StreamPlayer_get_pos(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StreamPlayer_seek_pos(StreamPlayer *self,float time){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "seek_pos");
  const void* __args[1] = { &time };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StreamPlayer_set_autoplay(StreamPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "set_autoplay");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool StreamPlayer_has_autoplay(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "has_autoplay");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float StreamPlayer_get_length(StreamPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StreamPlayer", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Timer_set_wait_time(Timer *self,float time_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "set_wait_time");
  const void* __args[1] = { &time_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Timer_get_wait_time(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "get_wait_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Timer_set_one_shot(Timer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "set_one_shot");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Timer_is_one_shot(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "is_one_shot");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Timer_set_autostart(Timer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "set_autostart");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Timer_has_autostart(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "has_autostart");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Timer_start(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "start");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Timer_stop(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Timer_set_active(Timer *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "set_active");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Timer_is_active(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "is_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Timer_get_time_left(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "get_time_left");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Timer_set_timer_process_mode(Timer *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "set_timer_process_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Timer_get_timer_process_mode(Timer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Timer", "get_timer_process_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_is_active(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "is_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tween_set_active(Tween *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "set_active");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Tween_is_repeat(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "is_repeat");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tween_set_repeat(Tween *self,bool repeat){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "set_repeat");
  const void* __args[1] = { &repeat };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Tween_set_speed(Tween *self,float speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "set_speed");
  const void* __args[1] = { &speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Tween_get_speed(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "get_speed");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tween_set_tween_process_mode(Tween *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "set_tween_process_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Tween_get_tween_process_mode(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "get_tween_process_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_start(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "start");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_reset(Tween *self,Object *object,String const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "reset");
  const void* __args[2] = { object, &key };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_reset_all(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "reset_all");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_stop(Tween *self,Object *object,String const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "stop");
  const void* __args[2] = { object, &key };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_stop_all(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "stop_all");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_resume(Tween *self,Object *object,String const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "resume");
  const void* __args[2] = { object, &key };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_resume_all(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "resume_all");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_remove(Tween *self,Object *object,String const &key){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "remove");
  const void* __args[2] = { object, &key };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_remove_all(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "remove_all");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_seek(Tween *self,float time){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "seek");
  const void* __args[1] = { &time };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float Tween_tell(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "tell");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Tween_get_runtime(Tween *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "get_runtime");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Tween_interpolate_property__SWIG_0(Tween *self,Object *object,String const &property,Variant const &initial_val,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "interpolate_property");
  const void* __args[8] = { object, &property, &initial_val, &final_val, &times_in_sec, &trans_type, &ease_type, &delay };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_interpolate_method__SWIG_0(Tween *self,Object *object,String const &method,Variant const &initial_val,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "interpolate_method");
  const void* __args[8] = { object, &method, &initial_val, &final_val, &times_in_sec, &trans_type, &ease_type, &delay };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_interpolate_callback__SWIG_0(Tween *self,Object *object,float times_in_sec,String const &callback,Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant(),Variant const &arg5_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "interpolate_callback");
  const void* __args[8] = { object, &times_in_sec, &callback, &arg1_, &arg2_, &arg3_, &arg4_, &arg5_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_interpolate_deferred_callback__SWIG_0(Tween *self,Object *object,float times_in_sec,String const &callback,Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant(),Variant const &arg5_=Variant()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "interpolate_deferred_callback");
  const void* __args[8] = { object, &times_in_sec, &callback, &arg1_, &arg2_, &arg3_, &arg4_, &arg5_ };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_follow_property__SWIG_0(Tween *self,Object *object,String const &property,Variant const &initial_val,Object *target,String const &target_property,float times_in_sec,int trans_type,int ease_type,float delay=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "follow_property");
  const void* __args[9] = { object, &property, &initial_val, target, &target_property, &times_in_sec, &trans_type, &ease_type, &delay };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_follow_method__SWIG_0(Tween *self,Object *object,String const &method,Variant const &initial_val,Object *target,String const &target_method,float times_in_sec,int trans_type,int ease_type,float delay=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "follow_method");
  const void* __args[9] = { object, &method, &initial_val, target, &target_method, &times_in_sec, &trans_type, &ease_type, &delay };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_targeting_property__SWIG_0(Tween *self,Object *object,String const &property,Object *initial,String const &initial_val,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "targeting_property");
  const void* __args[9] = { object, &property, initial, &initial_val, &final_val, &times_in_sec, &trans_type, &ease_type, &delay };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Tween_targeting_method__SWIG_0(Tween *self,Object *object,String const &method,Object *initial,String const &initial_method,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tween", "targeting_method");
  const void* __args[9] = { object, &method, initial, &initial_method, &final_val, &times_in_sec, &trans_type, &ease_type, &delay };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_radius(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_radius");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_radius(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_suspension_rest_length(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_suspension_rest_length");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_suspension_rest_length(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_suspension_rest_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_suspension_travel(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_suspension_travel");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_suspension_travel(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_suspension_travel");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_suspension_stiffness(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_suspension_stiffness");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_suspension_stiffness(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_suspension_stiffness");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_suspension_max_force(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_suspension_max_force");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_suspension_max_force(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_suspension_max_force");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_damping_compression(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_damping_compression");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_damping_compression(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_damping_compression");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_damping_relaxation(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_damping_relaxation");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_damping_relaxation(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_damping_relaxation");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_use_as_traction(VehicleWheel *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_use_as_traction");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VehicleWheel_is_used_as_traction(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "is_used_as_traction");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_use_as_steering(VehicleWheel *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_use_as_steering");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VehicleWheel_is_used_as_steering(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "is_used_as_steering");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleWheel_set_friction_slip(VehicleWheel *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "set_friction_slip");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleWheel_get_friction_slip(VehicleWheel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleWheel", "get_friction_slip");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_rect(Viewport *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 Viewport_get_rect(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< World2D > Viewport_find_world_2d(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "find_world_2d");
  Ref<World2D> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_world(Viewport *self,World *world){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_world");
  const void* __args[1] = { world };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< World > Viewport_get_world(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_world");
  Ref<World> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< World > Viewport_find_world(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "find_world");
  Ref<World> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_canvas_transform(Viewport *self,Matrix32 const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_canvas_transform");
  const void* __args[1] = { &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 Viewport_get_canvas_transform(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_canvas_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_global_canvas_transform(Viewport *self,Matrix32 const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_global_canvas_transform");
  const void* __args[1] = { &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 Viewport_get_global_canvas_transform(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_global_canvas_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Matrix32 Viewport_get_final_transform(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_final_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 Viewport_get_visible_rect(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_visible_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_transparent_background(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_transparent_background");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_has_transparent_background(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "has_transparent_background");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_size_override__SWIG_0(Viewport *self,bool enable,Vector2 const &size=Vector2(-1,-1),Vector2 const &margin=Vector2(0,0)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_size_override");
  const void* __args[3] = { &enable, &size, &margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Viewport_get_size_override(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_size_override");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Viewport_is_size_override_enabled(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_size_override_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_size_override_stretch(Viewport *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_size_override_stretch");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_is_size_override_stretch_enabled(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_size_override_stretch_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_queue_screen_capture(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "queue_screen_capture");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Image Viewport_get_screen_capture(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_screen_capture");
  Image ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_as_render_target(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_as_render_target");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_is_set_as_render_target(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_set_as_render_target");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_render_target_vflip(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_render_target_vflip");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_get_render_target_vflip(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_render_target_vflip");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_render_target_clear_on_new_frame(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_render_target_clear_on_new_frame");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_get_render_target_clear_on_new_frame(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_render_target_clear_on_new_frame");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_render_target_clear(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "render_target_clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Viewport_set_render_target_filter(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_render_target_filter");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_get_render_target_filter(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_render_target_filter");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_render_target_gen_mipmaps(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_render_target_gen_mipmaps");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_get_render_target_gen_mipmaps(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_render_target_gen_mipmaps");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_render_target_update_mode(Viewport *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_render_target_update_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Viewport_get_render_target_update_mode(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_render_target_update_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< RenderTargetTexture > Viewport_get_render_target_texture(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_render_target_texture");
  Ref<RenderTargetTexture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_physics_object_picking(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_physics_object_picking");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_get_physics_object_picking(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_physics_object_picking");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID Viewport_get_viewport(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_viewport");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_input(Viewport *self,InputEvent const &local_event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "input");
  const void* __args[1] = { &local_event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Viewport_unhandled_input(Viewport *self,InputEvent const &local_event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "unhandled_input");
  const void* __args[1] = { &local_event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Viewport_update_worlds(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "update_worlds");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Viewport_set_use_own_world(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_use_own_world");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_is_using_own_world(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_using_own_world");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Camera *Viewport_get_camera(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_camera");
  Camera* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_as_audio_listener(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_as_audio_listener");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_is_audio_listener(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_audio_listener");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_as_audio_listener_2d(Viewport *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_as_audio_listener_2d");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_is_audio_listener_2d(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_audio_listener_2d");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_render_target_to_screen_rect(Viewport *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_render_target_to_screen_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Viewport_get_mouse_pos(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "get_mouse_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_warp_mouse(Viewport *self,Vector2 const &to_pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "warp_mouse");
  const void* __args[1] = { &to_pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_gui_has_modal_stack(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "gui_has_modal_stack");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Variant Viewport_gui_get_drag_data(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "gui_get_drag_data");
  Variant ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Viewport_set_disable_input(Viewport *self,bool disable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "set_disable_input");
  const void* __args[1] = { &disable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Viewport_is_input_disabled(Viewport *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Viewport", "is_input_disabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisibilityNotifier_set_aabb(VisibilityNotifier *self,AABB const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityNotifier", "set_aabb");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN AABB VisibilityNotifier_get_aabb(VisibilityNotifier *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityNotifier", "get_aabb");
  AABB ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool VisibilityNotifier_is_on_screen(VisibilityNotifier *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityNotifier", "is_on_screen");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisualInstance_set_base(VisualInstance *self,RID const &base){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualInstance", "set_base");
  const void* __args[1] = { &base };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void VisualInstance_set_layer_mask(VisualInstance *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualInstance", "set_layer_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VisualInstance_get_layer_mask(VisualInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisualInstance", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void WorldEnvironment_set_environment(WorldEnvironment *self,Environment *env){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("WorldEnvironment", "set_environment");
  const void* __args[1] = { env };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Environment > WorldEnvironment_get_environment(WorldEnvironment *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("WorldEnvironment", "get_environment");
  Ref<Environment> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int AnimationPlayer_add_animation(AnimationPlayer *self,String const &name,Animation *animation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "add_animation");
  const void* __args[2] = { &name, animation };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_remove_animation(AnimationPlayer *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "remove_animation");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationPlayer_rename_animation(AnimationPlayer *self,String const &name,String const &newname){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "rename_animation");
  const void* __args[2] = { &name, &newname };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationPlayer_has_animation(AnimationPlayer *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "has_animation");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Animation > AnimationPlayer_get_animation(AnimationPlayer *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_animation");
  const void* __args[1] = { &name };
  Ref<Animation> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray AnimationPlayer_get_animation_list(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_animation_list");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_animation_set_next(AnimationPlayer *self,String const &anim_from,String const &anim_to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "animation_set_next");
  const void* __args[2] = { &anim_from, &anim_to };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AnimationPlayer_animation_get_next(AnimationPlayer *self,String const &anim_from){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "animation_get_next");
  const void* __args[1] = { &anim_from };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_set_blend_time(AnimationPlayer *self,String const &anim_from,String const &anim_to,float sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_blend_time");
  const void* __args[3] = { &anim_from, &anim_to, &sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationPlayer_get_blend_time(AnimationPlayer *self,String const &anim_from,String const &anim_to){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_blend_time");
  const void* __args[2] = { &anim_from, &anim_to };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_set_default_blend_time(AnimationPlayer *self,float sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_default_blend_time");
  const void* __args[1] = { &sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationPlayer_get_default_blend_time(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_default_blend_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_play__SWIG_0(AnimationPlayer *self,String const &name="",float custom_blend=-1,float custom_speed=1,bool from_end=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "play");
  const void* __args[4] = { &name, &custom_blend, &custom_speed, &from_end };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationPlayer_play_backwards__SWIG_0(AnimationPlayer *self,String const &name="",float custom_blend=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "play_backwards");
  const void* __args[2] = { &name, &custom_blend };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationPlayer_stop__SWIG_0(AnimationPlayer *self,bool reset=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "stop");
  const void* __args[1] = { &reset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationPlayer_stop_all(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "stop_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool AnimationPlayer_is_playing(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_set_current_animation(AnimationPlayer *self,String const &anim){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_current_animation");
  const void* __args[1] = { &anim };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AnimationPlayer_get_current_animation(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_current_animation");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_queue(AnimationPlayer *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "queue");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationPlayer_clear_queue(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "clear_queue");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void AnimationPlayer_set_active(AnimationPlayer *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_active");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationPlayer_is_active(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "is_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_set_speed(AnimationPlayer *self,float speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_speed");
  const void* __args[1] = { &speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationPlayer_get_speed(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_speed");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_set_autoplay(AnimationPlayer *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_autoplay");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AnimationPlayer_get_autoplay(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_autoplay");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_set_root(AnimationPlayer *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_root");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath AnimationPlayer_get_root(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_root");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_seek__SWIG_0(AnimationPlayer *self,float pos_sec,bool update=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "seek");
  const void* __args[2] = { &pos_sec, &update };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationPlayer_get_pos(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String AnimationPlayer_find_animation(AnimationPlayer *self,Animation *animation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "find_animation");
  const void* __args[1] = { animation };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_clear_caches(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "clear_caches");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void AnimationPlayer_set_animation_process_mode(AnimationPlayer *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "set_animation_process_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimationPlayer_get_animation_process_mode(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_animation_process_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float AnimationPlayer_get_current_animation_pos(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_current_animation_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float AnimationPlayer_get_current_animation_length(AnimationPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "get_current_animation_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationPlayer_advance(AnimationPlayer *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationPlayer", "advance");
  const void* __args[1] = { &delta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_add_node(AnimationTreePlayer *self,int type,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "add_node");
  const void* __args[2] = { &type, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationTreePlayer_node_exists(AnimationTreePlayer *self,String const &node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_exists");
  const void* __args[1] = { &node };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AnimationTreePlayer_node_rename(AnimationTreePlayer *self,String const &node,String const &new_name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_rename");
  const void* __args[2] = { &node, &new_name };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AnimationTreePlayer_node_get_type(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_get_type");
  const void* __args[1] = { &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int AnimationTreePlayer_node_get_input_count(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_get_input_count");
  const void* __args[1] = { &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String AnimationTreePlayer_node_get_input_source(AnimationTreePlayer *self,String const &id,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_get_input_source");
  const void* __args[2] = { &id, &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_animation_node_set_animation(AnimationTreePlayer *self,String const &id,Animation *animation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "animation_node_set_animation");
  const void* __args[2] = { &id, animation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Animation > AnimationTreePlayer_animation_node_get_animation(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "animation_node_get_animation");
  const void* __args[1] = { &id };
  Ref<Animation> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_animation_node_set_master_animation(AnimationTreePlayer *self,String const &id,String const &source){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "animation_node_set_master_animation");
  const void* __args[2] = { &id, &source };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AnimationTreePlayer_animation_node_get_master_animation(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "animation_node_get_master_animation");
  const void* __args[1] = { &id };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_animation_node_set_filter_path(AnimationTreePlayer *self,String const &id,NodePath const &path,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "animation_node_set_filter_path");
  const void* __args[3] = { &id, &path, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_fadein_time(AnimationTreePlayer *self,String const &id,float time_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_set_fadein_time");
  const void* __args[2] = { &id, &time_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_fadein_time(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_get_fadein_time");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_fadeout_time(AnimationTreePlayer *self,String const &id,float time_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_set_fadeout_time");
  const void* __args[2] = { &id, &time_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_fadeout_time(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_get_fadeout_time");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_autorestart(AnimationTreePlayer *self,String const &id,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_set_autorestart");
  const void* __args[2] = { &id, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_autorestart_delay(AnimationTreePlayer *self,String const &id,float delay_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_set_autorestart_delay");
  const void* __args[2] = { &id, &delay_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(AnimationTreePlayer *self,String const &id,float rand_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_set_autorestart_random_delay");
  const void* __args[2] = { &id, &rand_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationTreePlayer_oneshot_node_has_autorestart(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_has_autorestart");
  const void* __args[1] = { &id };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_autorestart_delay(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_get_autorestart_delay");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_get_autorestart_random_delay");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_start(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_start");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_stop(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_stop");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationTreePlayer_oneshot_node_is_active(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_is_active");
  const void* __args[1] = { &id };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_filter_path(AnimationTreePlayer *self,String const &id,NodePath const &path,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "oneshot_node_set_filter_path");
  const void* __args[3] = { &id, &path, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_mix_node_set_amount(AnimationTreePlayer *self,String const &id,float ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "mix_node_set_amount");
  const void* __args[2] = { &id, &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_mix_node_get_amount(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "mix_node_get_amount");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_blend2_node_set_amount(AnimationTreePlayer *self,String const &id,float blend){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend2_node_set_amount");
  const void* __args[2] = { &id, &blend };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_blend2_node_get_amount(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend2_node_get_amount");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_blend2_node_set_filter_path(AnimationTreePlayer *self,String const &id,NodePath const &path,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend2_node_set_filter_path");
  const void* __args[3] = { &id, &path, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_blend3_node_set_amount(AnimationTreePlayer *self,String const &id,float blend){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend3_node_set_amount");
  const void* __args[2] = { &id, &blend };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_blend3_node_get_amount(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend3_node_get_amount");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_blend4_node_set_amount(AnimationTreePlayer *self,String const &id,Vector2 const &blend){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend4_node_set_amount");
  const void* __args[2] = { &id, &blend };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 AnimationTreePlayer_blend4_node_get_amount(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "blend4_node_get_amount");
  const void* __args[1] = { &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_timescale_node_set_scale(AnimationTreePlayer *self,String const &id,float scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "timescale_node_set_scale");
  const void* __args[2] = { &id, &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_timescale_node_get_scale(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "timescale_node_get_scale");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_timeseek_node_seek(AnimationTreePlayer *self,String const &id,float pos_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "timeseek_node_seek");
  const void* __args[2] = { &id, &pos_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_transition_node_set_input_count(AnimationTreePlayer *self,String const &id,int count){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_set_input_count");
  const void* __args[2] = { &id, &count };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimationTreePlayer_transition_node_get_input_count(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_get_input_count");
  const void* __args[1] = { &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_transition_node_delete_input(AnimationTreePlayer *self,String const &id,int input_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_delete_input");
  const void* __args[2] = { &id, &input_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_transition_node_set_input_auto_advance(AnimationTreePlayer *self,String const &id,int input_idx,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_set_input_auto_advance");
  const void* __args[3] = { &id, &input_idx, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationTreePlayer_transition_node_has_input_auto_advance(AnimationTreePlayer *self,String const &id,int input_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_has_input_auto_advance");
  const void* __args[2] = { &id, &input_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_transition_node_set_xfade_time(AnimationTreePlayer *self,String const &id,float time_sec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_set_xfade_time");
  const void* __args[2] = { &id, &time_sec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float AnimationTreePlayer_transition_node_get_xfade_time(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_get_xfade_time");
  const void* __args[1] = { &id };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_transition_node_set_current(AnimationTreePlayer *self,String const &id,int input_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_set_current");
  const void* __args[2] = { &id, &input_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimationTreePlayer_transition_node_get_current(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "transition_node_get_current");
  const void* __args[1] = { &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_node_set_pos(AnimationTreePlayer *self,String const &id,Vector2 const &screen_pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_set_pos");
  const void* __args[2] = { &id, &screen_pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 AnimationTreePlayer_node_get_pos(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "node_get_pos");
  const void* __args[1] = { &id };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_remove_node(AnimationTreePlayer *self,String const &id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "remove_node");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimationTreePlayer_connect(AnimationTreePlayer *self,String const &id,String const &dst_id,int dst_input_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "connect");
  const void* __args[3] = { &id, &dst_id, &dst_input_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool AnimationTreePlayer_is_connected(AnimationTreePlayer *self,String const &id,String const &dst_id,int dst_input_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "is_connected");
  const void* __args[3] = { &id, &dst_id, &dst_input_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_disconnect(AnimationTreePlayer *self,String const &id,int dst_input_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "disconnect");
  const void* __args[2] = { &id, &dst_input_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_set_active(AnimationTreePlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "set_active");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimationTreePlayer_is_active(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "is_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_set_base_path(AnimationTreePlayer *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "set_base_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath AnimationTreePlayer_get_base_path(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "get_base_path");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_set_master_player(AnimationTreePlayer *self,NodePath const &nodepath){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "set_master_player");
  const void* __args[1] = { &nodepath };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath AnimationTreePlayer_get_master_player(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "get_master_player");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN StringArray AnimationTreePlayer_get_node_list(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "get_node_list");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_set_animation_process_mode(AnimationTreePlayer *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "set_animation_process_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimationTreePlayer_get_animation_process_mode(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "get_animation_process_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimationTreePlayer_advance(AnimationTreePlayer *self,float delta){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "advance");
  const void* __args[1] = { &delta };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimationTreePlayer_reset(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "reset");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void AnimationTreePlayer_recompute_caches(AnimationTreePlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimationTreePlayer", "recompute_caches");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void BakedLightInstance_set_baked_light(BakedLightInstance *self,Object *baked_light){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightInstance", "set_baked_light");
  const void* __args[1] = { baked_light };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *BakedLightInstance_get_baked_light(BakedLightInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightInstance", "get_baked_light");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID BakedLightInstance_get_baked_light_instance(BakedLightInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightInstance", "get_baked_light_instance");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BakedLightSampler_set_param(BakedLightSampler *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightSampler", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float BakedLightSampler_get_param(BakedLightSampler *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightSampler", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BakedLightSampler_set_resolution(BakedLightSampler *self,int resolution){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightSampler", "set_resolution");
  const void* __args[1] = { &resolution };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BakedLightSampler_get_resolution(BakedLightSampler *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BakedLightSampler", "get_resolution");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int BitmapFont_create_from_fnt(BitmapFont *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "create_from_fnt");
  const void* __args[1] = { &path };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BitmapFont_set_height(BitmapFont *self,float px){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "set_height");
  const void* __args[1] = { &px };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BitmapFont_set_ascent(BitmapFont *self,float px){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "set_ascent");
  const void* __args[1] = { &px };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BitmapFont_add_kerning_pair(BitmapFont *self,int char_a,int char_b,int kerning){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "add_kerning_pair");
  const void* __args[3] = { &char_a, &char_b, &kerning };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BitmapFont_get_kerning_pair(BitmapFont *self,int char_a,int char_b){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "get_kerning_pair");
  const void* __args[2] = { &char_a, &char_b };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BitmapFont_add_texture(BitmapFont *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "add_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BitmapFont_add_char__SWIG_0(BitmapFont *self,int character,int texture,Rect2 const &rect,Vector2 const &align=Vector2(0,0),float advance=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "add_char");
  const void* __args[5] = { &character, &texture, &rect, &align, &advance };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BitmapFont_get_texture_count(BitmapFont *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "get_texture_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > BitmapFont_get_texture(BitmapFont *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "get_texture");
  const void* __args[1] = { &idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 BitmapFont_get_char_size__SWIG_0(BitmapFont *self,int char_,int next=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "get_char_size");
  const void* __args[2] = { &char_, &next };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BitmapFont_set_distance_field_hint(BitmapFont *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "set_distance_field_hint");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BitmapFont_clear(BitmapFont *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void BitmapFont_set_fallback(BitmapFont *self,Object *fallback){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "set_fallback");
  const void* __args[1] = { fallback };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *BitmapFont_get_fallback(BitmapFont *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BitmapFont", "get_fallback");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_BitmapFont(BitmapFont *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN Vector3 Camera_project_ray_normal(Camera *self,Vector2 const &screen_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "project_ray_normal");
  const void* __args[1] = { &screen_point };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Camera_project_local_ray_normal(Camera *self,Vector2 const &screen_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "project_local_ray_normal");
  const void* __args[1] = { &screen_point };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Camera_project_ray_origin(Camera *self,Vector2 const &screen_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "project_ray_origin");
  const void* __args[1] = { &screen_point };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Camera_unproject_position(Camera *self,Vector3 const &world_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "unproject_position");
  const void* __args[1] = { &world_point };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Camera_is_position_behind(Camera *self,Vector3 const &world_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "is_position_behind");
  const void* __args[1] = { &world_point };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Camera_project_position(Camera *self,Vector2 const &screen_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "project_position");
  const void* __args[1] = { &screen_point };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Camera_set_perspective(Camera *self,float fov,float z_near,float z_far){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "set_perspective");
  const void* __args[3] = { &fov, &z_near, &z_far };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Camera_set_orthogonal(Camera *self,float size,float z_near,float z_far){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "set_orthogonal");
  const void* __args[3] = { &size, &z_near, &z_far };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Camera_make_current(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "make_current");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Camera_clear_current(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "clear_current");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool Camera_is_current(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "is_current");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Transform Camera_get_camera_transform(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_camera_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Camera_get_fov(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_fov");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Camera_get_size(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_size");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Camera_get_zfar(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_zfar");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Camera_get_znear(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_znear");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Camera_get_projection(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_projection");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera_set_visible_layers(Camera *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "set_visible_layers");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Camera_get_visible_layers(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_visible_layers");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera_set_environment(Camera *self,Environment *env){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "set_environment");
  const void* __args[1] = { env };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Environment > Camera_get_environment(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_environment");
  Ref<Environment> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera_set_keep_aspect_mode(Camera *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "set_keep_aspect_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Camera_get_keep_aspect_mode(Camera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera", "get_keep_aspect_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem__draw(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "_draw");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void CanvasItem_edit_set_state(CanvasItem *self,Variant const &state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "edit_set_state");
  const void* __args[1] = { &state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Variant CanvasItem_edit_get_state(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "edit_get_state");
  Variant ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_edit_set_rect(CanvasItem *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "edit_set_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_edit_rotate(CanvasItem *self,float degrees){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "edit_rotate");
  const void* __args[1] = { &degrees };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 CanvasItem_get_item_rect(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_item_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 CanvasItem_get_item_and_children_rect(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_item_and_children_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID CanvasItem_get_canvas_item(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_canvas_item");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool CanvasItem_is_visible(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "is_visible");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool CanvasItem_is_hidden(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "is_hidden");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_show(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "show");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void CanvasItem_hide(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "hide");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void CanvasItem_set_hidden(CanvasItem *self,bool hidden){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_hidden");
  const void* __args[1] = { &hidden };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_update(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "update");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void CanvasItem_set_as_toplevel(CanvasItem *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_as_toplevel");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CanvasItem_is_set_as_toplevel(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "is_set_as_toplevel");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_blend_mode(CanvasItem *self,int blend_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_blend_mode");
  const void* __args[1] = { &blend_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CanvasItem_get_blend_mode(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_blend_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_light_mask(CanvasItem *self,int light_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_light_mask");
  const void* __args[1] = { &light_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CanvasItem_get_light_mask(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_light_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_opacity(CanvasItem *self,float opacity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_opacity");
  const void* __args[1] = { &opacity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CanvasItem_get_opacity(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_opacity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_self_opacity(CanvasItem *self,float self_opacity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_self_opacity");
  const void* __args[1] = { &self_opacity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CanvasItem_get_self_opacity(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_self_opacity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_draw_behind_parent(CanvasItem *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_draw_behind_parent");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CanvasItem_is_draw_behind_parent_enabled(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "is_draw_behind_parent_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_draw_line__SWIG_0(CanvasItem *self,Vector2 const &from,Vector2 const &to,Color const &color,float width=1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_line");
  const void* __args[4] = { &from, &to, &color, &width };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_rect(CanvasItem *self,Rect2 const &rect,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_rect");
  const void* __args[2] = { &rect, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_circle(CanvasItem *self,Vector2 const &pos,float radius,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_circle");
  const void* __args[3] = { &pos, &radius, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_texture__SWIG_0(CanvasItem *self,Texture *texture,Vector2 const &pos,Color const &modulate=Color(1,1,1,1)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_texture");
  const void* __args[3] = { texture, &pos, &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_texture_rect__SWIG_0(CanvasItem *self,Texture *texture,Rect2 const &rect,bool tile,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_texture_rect");
  const void* __args[5] = { texture, &rect, &tile, &modulate, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_texture_rect_region__SWIG_0(CanvasItem *self,Texture *texture,Rect2 const &rect,Rect2 const &src_rect,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_texture_rect_region");
  const void* __args[5] = { texture, &rect, &src_rect, &modulate, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_style_box(CanvasItem *self,StyleBox *style_box,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_style_box");
  const void* __args[2] = { style_box, &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_primitive__SWIG_0(CanvasItem *self,Vector2Array const &points,ColorArray const &colors,Vector2Array const &uvs,Texture *texture=NULL,float width=1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_primitive");
  const void* __args[5] = { &points, &colors, &uvs, texture, &width };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_polygon__SWIG_0(CanvasItem *self,Vector2Array const &points,ColorArray const &colors,Vector2Array const &uvs=Vector2Array(),Texture *texture=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_polygon");
  const void* __args[4] = { &points, &colors, &uvs, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_colored_polygon__SWIG_0(CanvasItem *self,Vector2Array const &points,Color const &color,Vector2Array const &uvs=Vector2Array(),Texture *texture=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_colored_polygon");
  const void* __args[4] = { &points, &color, &uvs, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_string__SWIG_0(CanvasItem *self,Font *font,Vector2 const &pos,String const &text,Color const &modulate=Color(1,1,1,1),int clip_w=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_string");
  const void* __args[5] = { font, &pos, &text, &modulate, &clip_w };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CanvasItem_draw_char__SWIG_0(CanvasItem *self,Font *font,Vector2 const &pos,String const &char_,String const &next,Color const &modulate=Color(1,1,1,1)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_char");
  const void* __args[5] = { font, &pos, &char_, &next, &modulate };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_draw_set_transform(CanvasItem *self,Vector2 const &pos,float rot,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_set_transform");
  const void* __args[3] = { &pos, &rot, &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CanvasItem_draw_set_transform_matrix(CanvasItem *self,Matrix32 const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "draw_set_transform_matrix");
  const void* __args[1] = { &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 CanvasItem_get_transform(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Matrix32 CanvasItem_get_global_transform(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_global_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Matrix32 CanvasItem_get_global_transform_with_canvas(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_global_transform_with_canvas");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Matrix32 CanvasItem_get_viewport_transform(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_viewport_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 CanvasItem_get_viewport_rect(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_viewport_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Matrix32 CanvasItem_get_canvas_transform(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_canvas_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 CanvasItem_get_local_mouse_pos(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_local_mouse_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 CanvasItem_get_global_mouse_pos(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_global_mouse_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID CanvasItem_get_canvas(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_canvas");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *CanvasItem_get_world_2d(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_world_2d");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_material(CanvasItem *self,CanvasItemMaterial *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_material");
  const void* __args[1] = { material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< CanvasItemMaterial > CanvasItem_get_material(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_material");
  Ref<CanvasItemMaterial> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasItem_set_use_parent_material(CanvasItem *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "set_use_parent_material");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CanvasItem_get_use_parent_material(CanvasItem *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "get_use_parent_material");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN InputEvent CanvasItem_make_input_local(CanvasItem *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasItem", "make_input_local");
  const void* __args[1] = { &event };
  InputEvent ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void CanvasLayer_set_layer(CanvasLayer *self,int layer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "set_layer");
  const void* __args[1] = { &layer };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CanvasLayer_get_layer(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_layer");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasLayer_set_transform(CanvasLayer *self,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "set_transform");
  const void* __args[1] = { &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 CanvasLayer_get_transform(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasLayer_set_offset(CanvasLayer *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 CanvasLayer_get_offset(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasLayer_set_rotation(CanvasLayer *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "set_rotation");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CanvasLayer_get_rotation(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_rotation");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasLayer_set_rotationd(CanvasLayer *self,float degrees){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "set_rotationd");
  const void* __args[1] = { &degrees };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CanvasLayer_get_rotationd(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_rotationd");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CanvasLayer_set_scale(CanvasLayer *self,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "set_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 CanvasLayer_get_scale(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< World2D > CanvasLayer_get_world_2d(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_world_2d");
  Ref<World2D> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID CanvasLayer_get_viewport(CanvasLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasLayer", "get_viewport");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionObject__input_event(CollisionObject *self,Object *camera,InputEvent const &event,Vector3 const &click_pos,Vector3 const &click_normal,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "_input_event");
  const void* __args[5] = { camera, &event, &click_pos, &click_normal, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject_add_shape__SWIG_0(CollisionObject *self,Shape *shape,Transform const &transform=Transform()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "add_shape");
  const void* __args[2] = { shape, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CollisionObject_get_shape_count(CollisionObject *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "get_shape_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionObject_set_shape(CollisionObject *self,int shape_idx,Shape *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "set_shape");
  const void* __args[2] = { &shape_idx, shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject_set_shape_transform(CollisionObject *self,int shape_idx,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "set_shape_transform");
  const void* __args[2] = { &shape_idx, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject_set_shape_as_trigger(CollisionObject *self,int shape_idx,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "set_shape_as_trigger");
  const void* __args[2] = { &shape_idx, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionObject_is_shape_set_as_trigger(CollisionObject *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "is_shape_set_as_trigger");
  const void* __args[1] = { &shape_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Shape > CollisionObject_get_shape(CollisionObject *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "get_shape");
  const void* __args[1] = { &shape_idx };
  Ref<Shape> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Transform CollisionObject_get_shape_transform(CollisionObject *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "get_shape_transform");
  const void* __args[1] = { &shape_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void CollisionObject_remove_shape(CollisionObject *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "remove_shape");
  const void* __args[1] = { &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject_clear_shapes(CollisionObject *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "clear_shapes");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void CollisionObject_set_ray_pickable(CollisionObject *self,bool ray_pickable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "set_ray_pickable");
  const void* __args[1] = { &ray_pickable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionObject_is_ray_pickable(CollisionObject *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "is_ray_pickable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionObject_set_capture_input_on_drag(CollisionObject *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "set_capture_input_on_drag");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionObject_get_capture_input_on_drag(CollisionObject *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "get_capture_input_on_drag");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN RID CollisionObject_get_rid(CollisionObject *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject", "get_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionPolygon_set_build_mode(CollisionPolygon *self,int build_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "set_build_mode");
  const void* __args[1] = { &build_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CollisionPolygon_get_build_mode(CollisionPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "get_build_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionPolygon_set_depth(CollisionPolygon *self,float depth){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "set_depth");
  const void* __args[1] = { &depth };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float CollisionPolygon_get_depth(CollisionPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "get_depth");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionPolygon_set_polygon(CollisionPolygon *self,Vector2Array const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "set_polygon");
  const void* __args[1] = { &polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array CollisionPolygon_get_polygon(CollisionPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "get_polygon");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int CollisionPolygon_get_collision_object_first_shape(CollisionPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "get_collision_object_first_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int CollisionPolygon_get_collision_object_last_shape(CollisionPolygon *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon", "get_collision_object_last_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionShape_resource_changed(CollisionShape *self,Object *resource){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "resource_changed");
  const void* __args[1] = { resource };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionShape_set_shape(CollisionShape *self,Object *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "set_shape");
  const void* __args[1] = { shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *CollisionShape_get_shape(CollisionShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "get_shape");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionShape_set_trigger(CollisionShape *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "set_trigger");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionShape_is_trigger(CollisionShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "is_trigger");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionShape_make_convex_from_brothers(CollisionShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "make_convex_from_brothers");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int CollisionShape_get_collision_object_shape_index(CollisionShape *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape", "get_collision_object_shape_index");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control__input_event(Control *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "_input_event");
  const void* __args[1] = { &event };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Control_can_drop_data(Control *self,Vector2 const &pos,Variant const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "can_drop_data");
  const void* __args[2] = { &pos, &data };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Control_drop_data(Control *self,Vector2 const &pos,Variant const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "drop_data");
  const void* __args[2] = { &pos, &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *Control_get_drag_data(Control *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_drag_data");
  const void* __args[1] = { &pos };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_minimum_size(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_minimum_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_accept_event(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "accept_event");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Vector2 Control_get_combined_minimum_size(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_combined_minimum_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_anchor__SWIG_0(Control *self,int margin,int anchor_mode,bool keep_margin=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_anchor");
  const void* __args[3] = { &margin, &anchor_mode, &keep_margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Control_get_anchor(Control *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_anchor");
  const void* __args[1] = { &margin };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Control_set_margin(Control *self,int margin,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_margin");
  const void* __args[2] = { &margin, &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_anchor_and_margin(Control *self,int margin,int anchor_mode,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_anchor_and_margin");
  const void* __args[3] = { &margin, &anchor_mode, &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_begin(Control *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_begin");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_end(Control *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_end");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_pos(Control *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_pos");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_size(Control *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_custom_minimum_size(Control *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_custom_minimum_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_global_pos(Control *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_global_pos");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_rotation(Control *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_rotation");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_rotation_deg(Control *self,float degrees){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_rotation_deg");
  const void* __args[1] = { &degrees };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_scale(Control *self,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Control_get_margin(Control *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_margin");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_begin(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_begin");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_end(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_end");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_pos(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_size(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Control_get_rotation(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_rotation");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Control_get_rotation_deg(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_rotation_deg");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_scale(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_custom_minimum_size(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_custom_minimum_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_parent_area_size(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_parent_area_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Control_get_global_pos(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_global_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 Control_get_rect(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 Control_get_global_rect(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_global_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_area_as_parent_rect__SWIG_0(Control *self,int margin=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_area_as_parent_rect");
  const void* __args[1] = { &margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_show_modal__SWIG_0(Control *self,bool exclusive=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "show_modal");
  const void* __args[1] = { &exclusive };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_focus_mode(Control *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_focus_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Control_get_focus_mode(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_focus_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Control_has_focus(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_focus");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_grab_focus(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "grab_focus");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Control_release_focus(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "release_focus");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Control *Control_get_focus_owner(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_focus_owner");
  Control* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_h_size_flags(Control *self,int flags){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_h_size_flags");
  const void* __args[1] = { &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Control_get_h_size_flags(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_h_size_flags");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_stretch_ratio(Control *self,float ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_stretch_ratio");
  const void* __args[1] = { &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Control_get_stretch_ratio(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_stretch_ratio");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_v_size_flags(Control *self,int flags){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_v_size_flags");
  const void* __args[1] = { &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Control_get_v_size_flags(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_v_size_flags");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_theme(Control *self,Theme *theme){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_theme");
  const void* __args[1] = { theme };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Theme > Control_get_theme(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_theme");
  Ref<Theme> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_add_icon_override(Control *self,String const &name,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "add_icon_override");
  const void* __args[2] = { &name, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_add_shader_override(Control *self,String const &name,Shader *shader){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "add_shader_override");
  const void* __args[2] = { &name, shader };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_add_style_override(Control *self,String const &name,StyleBox *stylebox){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "add_style_override");
  const void* __args[2] = { &name, stylebox };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_add_font_override(Control *self,String const &name,Font *font){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "add_font_override");
  const void* __args[2] = { &name, font };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_add_color_override(Control *self,String const &name,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "add_color_override");
  const void* __args[2] = { &name, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_add_constant_override(Control *self,String const &name,int constant){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "add_constant_override");
  const void* __args[2] = { &name, &constant };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Control_get_icon__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_icon");
  const void* __args[2] = { &name, &type };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< StyleBox > Control_get_stylebox__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_stylebox");
  const void* __args[2] = { &name, &type };
  Ref<StyleBox> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Font > Control_get_font__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_font");
  const void* __args[2] = { &name, &type };
  Ref<Font> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color Control_get_color__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_color");
  const void* __args[2] = { &name, &type };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Control_get_constant__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_constant");
  const void* __args[2] = { &name, &type };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_icon_override(Control *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_icon_override");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_stylebox_override(Control *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_stylebox_override");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_font_override(Control *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_font_override");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_color_override(Control *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_color_override");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_constant_override(Control *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_constant_override");
  const void* __args[1] = { &name };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_icon__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_icon");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_stylebox__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_stylebox");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_font__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_font");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_color__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_color");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Control_has_constant__SWIG_0(Control *self,String const &name,String const &type=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "has_constant");
  const void* __args[2] = { &name, &type };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Control *Control_get_parent_control(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_parent_control");
  Control* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_set_tooltip(Control *self,String const &tooltip){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_tooltip");
  const void* __args[1] = { &tooltip };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Control_get_tooltip__SWIG_0(Control *self,Vector2 const &atpos=Vector2(0,0)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_tooltip");
  const void* __args[1] = { &atpos };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Control_set_default_cursor_shape(Control *self,int shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_default_cursor_shape");
  const void* __args[1] = { &shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Control_get_default_cursor_shape(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_default_cursor_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Control_get_cursor_shape__SWIG_0(Control *self,Vector2 const &pos=Vector2(0,0)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_cursor_shape");
  const void* __args[1] = { &pos };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Control_set_focus_neighbour(Control *self,int margin,NodePath const &neighbour){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_focus_neighbour");
  const void* __args[2] = { &margin, &neighbour };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath Control_get_focus_neighbour(Control *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "get_focus_neighbour");
  const void* __args[1] = { &margin };
  NodePath ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Control_set_ignore_mouse(Control *self,bool ignore){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_ignore_mouse");
  const void* __args[1] = { &ignore };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Control_is_ignoring_mouse(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "is_ignoring_mouse");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_force_drag(Control *self,Variant const &data,Object *preview){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "force_drag");
  const void* __args[2] = { &data, preview };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_stop_mouse(Control *self,bool stop){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_stop_mouse");
  const void* __args[1] = { &stop };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Control_is_stopping_mouse(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "is_stopping_mouse");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Control_grab_click_focus(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "grab_click_focus");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Control_set_drag_forwarding(Control *self,Control *target){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_drag_forwarding");
  const void* __args[1] = { target };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_set_drag_preview(Control *self,Control *control){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "set_drag_preview");
  const void* __args[1] = { control };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_warp_mouse(Control *self,Vector2 const &to_pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "warp_mouse");
  const void* __args[1] = { &to_pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Control_minimum_size_changed(Control *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Control", "minimum_size_changed");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void DynamicFont_set_font_data(DynamicFont *self,DynamicFontData *data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "set_font_data");
  const void* __args[1] = { data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< DynamicFontData > DynamicFont_get_font_data(DynamicFont *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "get_font_data");
  Ref<DynamicFontData> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void DynamicFont_set_size(DynamicFont *self,int data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "set_size");
  const void* __args[1] = { &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int DynamicFont_get_size(DynamicFont *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "get_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void DynamicFont_add_fallback(DynamicFont *self,DynamicFontData *data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "add_fallback");
  const void* __args[1] = { data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void DynamicFont_set_fallback(DynamicFont *self,int idx,DynamicFontData *data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "set_fallback");
  const void* __args[2] = { &idx, data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< DynamicFontData > DynamicFont_get_fallback(DynamicFont *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "get_fallback");
  const void* __args[1] = { &idx };
  Ref<DynamicFontData> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void DynamicFont_remove_fallback(DynamicFont *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "remove_fallback");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int DynamicFont_get_fallback_count(DynamicFont *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DynamicFont", "get_fallback_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_DynamicFont(DynamicFont *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void EditorPlugin_apply_changes(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "apply_changes");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void EditorPlugin_clear(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Ref< EditorSpatialGizmo > EditorPlugin_create_spatial_gizmo(EditorPlugin *self,Spatial *for_spatial){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "create_spatial_gizmo");
  const void* __args[1] = { for_spatial };
  Ref<EditorSpatialGizmo> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void EditorPlugin_edit(EditorPlugin *self,Object *object){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "edit");
  const void* __args[1] = { object };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool EditorPlugin_forward_input_event(EditorPlugin *self,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "forward_input_event");
  const void* __args[1] = { &event };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool EditorPlugin_forward_spatial_input_event(EditorPlugin *self,Camera *camera,InputEvent const &event){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "forward_spatial_input_event");
  const void* __args[2] = { camera, &event };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN StringArray EditorPlugin_get_breakpoints(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_breakpoints");
  StringArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String EditorPlugin_get_name(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Dictionary EditorPlugin_get_state(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_state");
  Dictionary ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool EditorPlugin_handles(EditorPlugin *self,Object *object){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "handles");
  const void* __args[1] = { object };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool EditorPlugin_has_main_screen(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "has_main_screen");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorPlugin_make_visible(EditorPlugin *self,bool visible){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "make_visible");
  const void* __args[1] = { &visible };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_set_state(EditorPlugin *self,Dictionary const &state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "set_state");
  const void* __args[1] = { &state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_add_control_to_container(EditorPlugin *self,int container,Control *control){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "add_control_to_container");
  const void* __args[2] = { &container, control };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_add_control_to_bottom_panel(EditorPlugin *self,Control *control,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "add_control_to_bottom_panel");
  const void* __args[2] = { control, &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_add_control_to_dock(EditorPlugin *self,int slot,Control *control){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "add_control_to_dock");
  const void* __args[2] = { &slot, control };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_remove_control_from_docks(EditorPlugin *self,Control *control){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "remove_control_from_docks");
  const void* __args[1] = { control };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_remove_control_from_bottom_panel(EditorPlugin *self,Control *control){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "remove_control_from_bottom_panel");
  const void* __args[1] = { control };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_add_custom_type(EditorPlugin *self,String const &type,String const &base,Script *script,Texture *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "add_custom_type");
  const void* __args[4] = { &type, &base, script, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_remove_custom_type(EditorPlugin *self,String const &type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "remove_custom_type");
  const void* __args[1] = { &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_add_import_plugin(EditorPlugin *self,EditorImportPlugin *plugin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "add_import_plugin");
  const void* __args[1] = { plugin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_remove_import_plugin(EditorPlugin *self,EditorImportPlugin *plugin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "remove_import_plugin");
  const void* __args[1] = { plugin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_add_export_plugin(EditorPlugin *self,EditorExportPlugin *plugin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "add_export_plugin");
  const void* __args[1] = { plugin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorPlugin_remove_export_plugin(EditorPlugin *self,EditorExportPlugin *plugin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "remove_export_plugin");
  const void* __args[1] = { plugin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Control *EditorPlugin_get_base_control(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_base_control");
  Control* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN UndoRedo *EditorPlugin_get_undo_redo(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_undo_redo");
  UndoRedo* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN EditorSelection *EditorPlugin_get_selection(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_selection");
  EditorSelection* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< EditorSettings > EditorPlugin_get_editor_settings(EditorPlugin *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorPlugin", "get_editor_settings");
  Ref<EditorSettings> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_stream(EventPlayer *self,EventStream *stream){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_stream");
  const void* __args[1] = { stream };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< EventStream > EventPlayer_get_stream(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_stream");
  Ref<EventStream> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_play(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "play");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void EventPlayer_stop(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool EventPlayer_is_playing(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_paused(EventPlayer *self,bool paused){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_paused");
  const void* __args[1] = { &paused };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool EventPlayer_is_paused(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "is_paused");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_loop(EventPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_loop");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool EventPlayer_has_loop(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_volume(EventPlayer *self,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_volume");
  const void* __args[1] = { &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float EventPlayer_get_volume(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_volume");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_pitch_scale(EventPlayer *self,float pitch_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_pitch_scale");
  const void* __args[1] = { &pitch_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float EventPlayer_get_pitch_scale(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_pitch_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_tempo_scale(EventPlayer *self,float tempo_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_tempo_scale");
  const void* __args[1] = { &tempo_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float EventPlayer_get_tempo_scale(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_tempo_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_volume_db(EventPlayer *self,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_volume_db");
  const void* __args[1] = { &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float EventPlayer_get_volume_db(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_volume_db");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String EventPlayer_get_stream_name(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_stream_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int EventPlayer_get_loop_count(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_loop_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float EventPlayer_get_pos(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_seek_pos(EventPlayer *self,float time){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "seek_pos");
  const void* __args[1] = { &time };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float EventPlayer_get_length(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_autoplay(EventPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_autoplay");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool EventPlayer_has_autoplay(EventPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "has_autoplay");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EventPlayer_set_channel_volume(EventPlayer *self,int channel,float channel_volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "set_channel_volume");
  const void* __args[2] = { &channel, &channel_volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float EventPlayer_get_channel_volume(EventPlayer *self,int channel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_channel_volume");
  const void* __args[1] = { &channel };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN float EventPlayer_get_channel_last_note_time(EventPlayer *self,int channel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EventPlayer", "get_channel_last_note_time");
  const void* __args[1] = { &channel };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void FixedMaterial_set_parameter(FixedMaterial *self,int param,Variant const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_parameter");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FixedMaterial_get_parameter(FixedMaterial *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_parameter");
  const void* __args[1] = { &param };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FixedMaterial_set_texture(FixedMaterial *self,int param,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_texture");
  const void* __args[2] = { &param, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > FixedMaterial_get_texture(FixedMaterial *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_texture");
  const void* __args[1] = { &param };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void FixedMaterial_set_texcoord_mode(FixedMaterial *self,int param,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_texcoord_mode");
  const void* __args[2] = { &param, &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int FixedMaterial_get_texcoord_mode(FixedMaterial *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_texcoord_mode");
  const void* __args[1] = { &param };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void FixedMaterial_set_fixed_flag(FixedMaterial *self,int flag,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_fixed_flag");
  const void* __args[2] = { &flag, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool FixedMaterial_get_fixed_flag(FixedMaterial *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_fixed_flag");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void FixedMaterial_set_uv_transform(FixedMaterial *self,Transform const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_uv_transform");
  const void* __args[1] = { &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform FixedMaterial_get_uv_transform(FixedMaterial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_uv_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void FixedMaterial_set_light_shader(FixedMaterial *self,int shader){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_light_shader");
  const void* __args[1] = { &shader };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int FixedMaterial_get_light_shader(FixedMaterial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_light_shader");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void FixedMaterial_set_point_size(FixedMaterial *self,float size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "set_point_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float FixedMaterial_get_point_size(FixedMaterial *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FixedMaterial", "get_point_size");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void delete_FixedMaterial(FixedMaterial *self){
  if (self->get_script_instance()) {
    CSharpInstance *cs_instance = dynamic_cast<CSharpInstance*>(self->get_script_instance());
    if (cs_instance) {
      cs_instance->mono_object_disposed();
      return;
    }
  }
  if (self->unreference()) {
    memdelete(self);
  }
}
SWIGINTERN void GeometryInstance_set_material_override(GeometryInstance *self,Object *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_material_override");
  const void* __args[1] = { material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *GeometryInstance_get_material_override(GeometryInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_material_override");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GeometryInstance_set_flag(GeometryInstance *self,int flag,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_flag");
  const void* __args[2] = { &flag, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GeometryInstance_get_flag(GeometryInstance *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_flag");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GeometryInstance_set_cast_shadows_setting(GeometryInstance *self,int shadow_casting_setting){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_cast_shadows_setting");
  const void* __args[1] = { &shadow_casting_setting };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GeometryInstance_get_cast_shadows_setting(GeometryInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_cast_shadows_setting");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GeometryInstance_set_draw_range_begin(GeometryInstance *self,float mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_draw_range_begin");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GeometryInstance_get_draw_range_begin(GeometryInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_draw_range_begin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GeometryInstance_set_draw_range_end(GeometryInstance *self,float mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_draw_range_end");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GeometryInstance_get_draw_range_end(GeometryInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_draw_range_end");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GeometryInstance_set_baked_light_texture_id(GeometryInstance *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_baked_light_texture_id");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GeometryInstance_get_baked_light_texture_id(GeometryInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_baked_light_texture_id");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GeometryInstance_set_extra_cull_margin(GeometryInstance *self,float margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "set_extra_cull_margin");
  const void* __args[1] = { &margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GeometryInstance_get_extra_cull_margin(GeometryInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GeometryInstance", "get_extra_cull_margin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int GraphEdit_connect_node(GraphEdit *self,String const &from,int from_port,String const &to,int to_port){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "connect_node");
  const void* __args[4] = { &from, &from_port, &to, &to_port };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool GraphEdit_is_node_connected(GraphEdit *self,String const &from,int from_port,String const &to,int to_port){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "is_node_connected");
  const void* __args[4] = { &from, &from_port, &to, &to_port };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GraphEdit_disconnect_node(GraphEdit *self,String const &from,int from_port,String const &to,int to_port){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "disconnect_node");
  const void* __args[4] = { &from, &from_port, &to, &to_port };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array GraphEdit_get_connection_list(GraphEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "get_connection_list");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 GraphEdit_get_scroll_ofs(GraphEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "get_scroll_ofs");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GraphEdit_set_zoom(GraphEdit *self,float p_zoom){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "set_zoom");
  const void* __args[1] = { &p_zoom };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GraphEdit_get_zoom(GraphEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "get_zoom");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GraphEdit_set_right_disconnects(GraphEdit *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "set_right_disconnects");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GraphEdit_is_right_disconnects_enabled(GraphEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphEdit", "is_right_disconnects_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_theme(GridMap *self,MeshLibrary *theme){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_theme");
  const void* __args[1] = { theme };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< MeshLibrary > GridMap_get_theme(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_theme");
  Ref<MeshLibrary> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_bake(GridMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_bake");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GridMap_is_baking_enabled(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "is_baking_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_cell_size(GridMap *self,float size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_cell_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GridMap_get_cell_size(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_cell_size");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_octant_size(GridMap *self,int size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_octant_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GridMap_get_octant_size(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_octant_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_cell_item__SWIG_0(GridMap *self,int x,int y,int z,int item,int orientation=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_cell_item");
  const void* __args[5] = { &x, &y, &z, &item, &orientation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GridMap_get_cell_item(GridMap *self,int x,int y,int z){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_cell_item");
  const void* __args[3] = { &x, &y, &z };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int GridMap_get_cell_item_orientation(GridMap *self,int x,int y,int z){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_cell_item_orientation");
  const void* __args[3] = { &x, &y, &z };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GridMap_resource_changed(GridMap *self,Object *resource){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "resource_changed");
  const void* __args[1] = { resource };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void GridMap_set_center_x(GridMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_center_x");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GridMap_get_center_x(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_center_x");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_center_y(GridMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_center_y");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GridMap_get_center_y(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_center_y");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_center_z(GridMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_center_z");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GridMap_get_center_z(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_center_z");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_set_clip__SWIG_0(GridMap *self,bool enabled,bool clipabove=true,int floor=0,int axis=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_clip");
  const void* __args[4] = { &enabled, &clipabove, &floor, &axis };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GridMap_create_area(GridMap *self,int id,AABB const &area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "create_area");
  const void* __args[2] = { &id, &area };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN AABB GridMap_area_get_bounds(GridMap *self,int area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_get_bounds");
  const void* __args[1] = { &area };
  AABB ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GridMap_area_set_exterior_portal(GridMap *self,int area,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_set_exterior_portal");
  const void* __args[2] = { &area, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void GridMap_area_set_name(GridMap *self,int area,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_set_name");
  const void* __args[2] = { &area, &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String GridMap_area_get_name(GridMap *self,int area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_get_name");
  const void* __args[1] = { &area };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool GridMap_area_is_exterior_portal(GridMap *self,int area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_is_exterior_portal");
  const void* __args[1] = { &area };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GridMap_area_set_portal_disable_distance(GridMap *self,int area,float distance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_set_portal_disable_distance");
  const void* __args[2] = { &area, &distance };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GridMap_area_get_portal_disable_distance(GridMap *self,int area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_get_portal_disable_distance");
  const void* __args[1] = { &area };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GridMap_area_set_portal_disable_color(GridMap *self,int area,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_set_portal_disable_color");
  const void* __args[2] = { &area, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color GridMap_area_get_portal_disable_color(GridMap *self,int area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "area_get_portal_disable_color");
  const void* __args[1] = { &area };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GridMap_erase_area(GridMap *self,int area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "erase_area");
  const void* __args[1] = { &area };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GridMap_get_unused_area_id(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "get_unused_area_id");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_bake_geometry(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "bake_geometry");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void GridMap_set_use_baked_light(GridMap *self,bool use){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "set_use_baked_light");
  const void* __args[1] = { &use };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GridMap_is_using_baked_light(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "is_using_baked_light");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridMap_clear(GridMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridMap", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int HTTPRequest_request__SWIG_0(HTTPRequest *self,String const &url,StringArray const &custom_headers=StringArray(),bool ssl_validate_domain=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "request");
  const void* __args[3] = { &url, &custom_headers, &ssl_validate_domain };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void HTTPRequest_cancel_request(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "cancel_request");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN int HTTPRequest_get_http_client_status(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "get_http_client_status");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void HTTPRequest_set_use_threads(HTTPRequest *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "set_use_threads");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool HTTPRequest_is_using_threads(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "is_using_threads");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void HTTPRequest_set_body_size_limit(HTTPRequest *self,int bytes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "set_body_size_limit");
  const void* __args[1] = { &bytes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int HTTPRequest_get_body_size_limit(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "get_body_size_limit");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void HTTPRequest_set_max_redirects(HTTPRequest *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "set_max_redirects");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int HTTPRequest_get_max_redirects(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "get_max_redirects");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void HTTPRequest_set_download_file(HTTPRequest *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "set_download_file");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String HTTPRequest_get_download_file(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "get_download_file");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPRequest_get_downloaded_bytes(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "get_downloaded_bytes");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int HTTPRequest_get_body_size(HTTPRequest *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HTTPRequest", "get_body_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ImmediateGeometry_begin(ImmediateGeometry *self,int primitive,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "begin");
  const void* __args[2] = { &primitive, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_set_normal(ImmediateGeometry *self,Vector3 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "set_normal");
  const void* __args[1] = { &normal };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_set_tangent(ImmediateGeometry *self,Plane const &tangent){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "set_tangent");
  const void* __args[1] = { &tangent };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_set_color(ImmediateGeometry *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_set_uv(ImmediateGeometry *self,Vector2 const &uv){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "set_uv");
  const void* __args[1] = { &uv };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_set_uv2(ImmediateGeometry *self,Vector2 const &uv){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "set_uv2");
  const void* __args[1] = { &uv };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_add_vertex(ImmediateGeometry *self,Vector3 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "add_vertex");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_add_sphere(ImmediateGeometry *self,int lats,int lons,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "add_sphere");
  const void* __args[3] = { &lats, &lons, &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ImmediateGeometry_end(ImmediateGeometry *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "end");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ImmediateGeometry_clear(ImmediateGeometry *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ImmediateGeometry", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void InstancePlaceholder_replace_by_instance__SWIG_0(InstancePlaceholder *self,PackedScene *custom_scene=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InstancePlaceholder", "replace_by_instance");
  const void* __args[1] = { custom_scene };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String InstancePlaceholder_get_instance_path(InstancePlaceholder *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InstancePlaceholder", "get_instance_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InterpolatedCamera_set_target_path(InterpolatedCamera *self,NodePath const &target_path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "set_target_path");
  const void* __args[1] = { &target_path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath InterpolatedCamera_get_target_path(InterpolatedCamera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "get_target_path");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InterpolatedCamera_set_target(InterpolatedCamera *self,Camera *target){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "set_target");
  const void* __args[1] = { target };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void InterpolatedCamera_set_speed(InterpolatedCamera *self,float speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "set_speed");
  const void* __args[1] = { &speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float InterpolatedCamera_get_speed(InterpolatedCamera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "get_speed");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InterpolatedCamera_set_interpolation_enabled(InterpolatedCamera *self,bool target_path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "set_interpolation_enabled");
  const void* __args[1] = { &target_path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool InterpolatedCamera_is_interpolation_enabled(InterpolatedCamera *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InterpolatedCamera", "is_interpolation_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InverseKinematics_set_bone_name(InverseKinematics *self,String const &ik_bone){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "set_bone_name");
  const void* __args[1] = { &ik_bone };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String InverseKinematics_get_bone_name(InverseKinematics *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "get_bone_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InverseKinematics_set_iterations(InverseKinematics *self,int iterations){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "set_iterations");
  const void* __args[1] = { &iterations };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int InverseKinematics_get_iterations(InverseKinematics *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "get_iterations");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InverseKinematics_set_chain_size(InverseKinematics *self,int chain_size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "set_chain_size");
  const void* __args[1] = { &chain_size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int InverseKinematics_get_chain_size(InverseKinematics *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "get_chain_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InverseKinematics_set_precision(InverseKinematics *self,float precision){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "set_precision");
  const void* __args[1] = { &precision };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float InverseKinematics_get_precision(InverseKinematics *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "get_precision");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void InverseKinematics_set_speed(InverseKinematics *self,float speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "set_speed");
  const void* __args[1] = { &speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float InverseKinematics_get_speed(InverseKinematics *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("InverseKinematics", "get_speed");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_add_item__SWIG_0(ItemList *self,String const &text,Texture *icon=NULL,bool selectable=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "add_item");
  const void* __args[3] = { &text, icon, &selectable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ItemList_add_icon_item__SWIG_0(ItemList *self,Texture *icon,bool selectable=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "add_icon_item");
  const void* __args[2] = { icon, &selectable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ItemList_set_item_text(ItemList *self,int idx,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_text");
  const void* __args[2] = { &idx, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ItemList_get_item_text(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_text");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_item_icon(ItemList *self,int idx,Texture *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_icon");
  const void* __args[2] = { &idx, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > ItemList_get_item_icon(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_icon");
  const void* __args[1] = { &idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_item_icon_region(ItemList *self,int idx,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_icon_region");
  const void* __args[2] = { &idx, &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 ItemList_get_item_icon_region(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_icon_region");
  const void* __args[1] = { &idx };
  Rect2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_item_selectable(ItemList *self,int idx,bool selectable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_selectable");
  const void* __args[2] = { &idx, &selectable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ItemList_is_item_selectable(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "is_item_selectable");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_item_disabled(ItemList *self,int idx,bool disabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_disabled");
  const void* __args[2] = { &idx, &disabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ItemList_is_item_disabled(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "is_item_disabled");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_item_metadata(ItemList *self,int idx,Variant const &metadata){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_metadata");
  const void* __args[2] = { &idx, &metadata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ItemList_get_item_metadata(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_metadata");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ItemList_set_item_custom_bg_color(ItemList *self,int idx,Color const &custom_bg_color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_custom_bg_color");
  const void* __args[2] = { &idx, &custom_bg_color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ItemList_get_item_custom_bg_color(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_custom_bg_color");
  const void* __args[1] = { &idx };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_item_tooltip(ItemList *self,int idx,String const &tooltip){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_item_tooltip");
  const void* __args[2] = { &idx, &tooltip };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ItemList_get_item_tooltip(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_tooltip");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_select__SWIG_0(ItemList *self,int idx,bool single=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "select");
  const void* __args[2] = { &idx, &single };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ItemList_unselect(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "unselect");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ItemList_is_selected(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "is_selected");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ItemList_get_item_count(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_remove_item(ItemList *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "remove_item");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ItemList_clear(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ItemList_sort_items_by_text(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "sort_items_by_text");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void ItemList_set_fixed_column_width(ItemList *self,int width){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_fixed_column_width");
  const void* __args[1] = { &width };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ItemList_get_fixed_column_width(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_fixed_column_width");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_same_column_width(ItemList *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_same_column_width");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ItemList_is_same_column_width(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "is_same_column_width");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_max_text_lines(ItemList *self,int lines){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_max_text_lines");
  const void* __args[1] = { &lines };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ItemList_get_max_text_lines(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_max_text_lines");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_max_columns(ItemList *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_max_columns");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ItemList_get_max_columns(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_max_columns");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_select_mode(ItemList *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_select_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ItemList_get_select_mode(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_select_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_icon_mode(ItemList *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_icon_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ItemList_get_icon_mode(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_icon_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_fixed_icon_size(ItemList *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_fixed_icon_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ItemList_get_fixed_icon_size(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_fixed_icon_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_icon_scale(ItemList *self,float scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_icon_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ItemList_get_icon_scale(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_icon_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ItemList_set_allow_rmb_select(ItemList *self,bool allow){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "set_allow_rmb_select");
  const void* __args[1] = { &allow };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ItemList_get_allow_rmb_select(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_allow_rmb_select");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ItemList_get_item_at_pos__SWIG_0(ItemList *self,Vector2 const &pos,bool exact=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "get_item_at_pos");
  const void* __args[2] = { &pos, &exact };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ItemList_ensure_current_is_visible(ItemList *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ItemList", "ensure_current_is_visible");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Joint_set_node_a(Joint *self,NodePath const &node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "set_node_a");
  const void* __args[1] = { &node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath Joint_get_node_a(Joint *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "get_node_a");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Joint_set_node_b(Joint *self,NodePath const &node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "set_node_b");
  const void* __args[1] = { &node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath Joint_get_node_b(Joint *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "get_node_b");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Joint_set_solver_priority(Joint *self,int priority){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "set_solver_priority");
  const void* __args[1] = { &priority };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Joint_get_solver_priority(Joint *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "get_solver_priority");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Joint_set_exclude_nodes_from_collision(Joint *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "set_exclude_nodes_from_collision");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Joint_get_exclude_nodes_from_collision(Joint *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint", "get_exclude_nodes_from_collision");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_align(Label *self,int align){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_align");
  const void* __args[1] = { &align };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Label_get_align(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_align");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_valign(Label *self,int valign){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_valign");
  const void* __args[1] = { &valign };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Label_get_valign(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_valign");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_text(Label *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Label_get_text(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_autowrap(Label *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_autowrap");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Label_has_autowrap(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "has_autowrap");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_clip_text(Label *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_clip_text");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Label_is_clipping_text(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "is_clipping_text");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_uppercase(Label *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_uppercase");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Label_is_uppercase(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "is_uppercase");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Label_get_line_height(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_line_height");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Label_get_line_count(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_line_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Label_get_total_character_count(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_total_character_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_visible_characters(Label *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_visible_characters");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Label_get_visible_characters(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_visible_characters");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_percent_visible(Label *self,float percent_visible){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_percent_visible");
  const void* __args[1] = { &percent_visible };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Label_get_percent_visible(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_percent_visible");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_lines_skipped(Label *self,int lines_skipped){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_lines_skipped");
  const void* __args[1] = { &lines_skipped };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Label_get_lines_skipped(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_lines_skipped");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Label_set_max_lines_visible(Label *self,int lines_visible){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "set_max_lines_visible");
  const void* __args[1] = { &lines_visible };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Label_get_max_lines_visible(Label *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Label", "get_max_lines_visible");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light_set_parameter(Light *self,int variable,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_parameter");
  const void* __args[2] = { &variable, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Light_get_parameter(Light *self,int variable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "get_parameter");
  const void* __args[1] = { &variable };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Light_set_color(Light *self,int color,Color const &value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_color");
  const void* __args[2] = { &color, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Light_get_color(Light *self,int color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "get_color");
  const void* __args[1] = { &color };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Light_set_project_shadows(Light *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_project_shadows");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Light_has_project_shadows(Light *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "has_project_shadows");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light_set_projector(Light *self,Texture *projector){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_projector");
  const void* __args[1] = { projector };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Light_get_projector(Light *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "get_projector");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light_set_operator(Light *self,int operator_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_operator");
  const void* __args[1] = { &operator_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light_get_operator(Light *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "get_operator");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light_set_bake_mode(Light *self,int bake_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_bake_mode");
  const void* __args[1] = { &bake_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light_get_bake_mode(Light *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "get_bake_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light_set_enabled(Light *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Light_is_enabled(Light *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light_set_editor_only(Light *self,bool editor_only){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "set_editor_only");
  const void* __args[1] = { &editor_only };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Light_is_editor_only(Light *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light", "is_editor_only");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_set_align(LineEdit *self,int align){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "set_align");
  const void* __args[1] = { &align };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int LineEdit_get_align(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "get_align");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_clear(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void LineEdit_select_all(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "select_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void LineEdit_set_text(LineEdit *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "set_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String LineEdit_get_text(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "get_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_set_cursor_pos(LineEdit *self,int pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "set_cursor_pos");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int LineEdit_get_cursor_pos(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "get_cursor_pos");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_cursor_set_blink_enabled(LineEdit *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "cursor_set_blink_enabled");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool LineEdit_cursor_get_blink_enabled(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "cursor_get_blink_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_cursor_set_blink_speed(LineEdit *self,float blink_speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "cursor_set_blink_speed");
  const void* __args[1] = { &blink_speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float LineEdit_cursor_get_blink_speed(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "cursor_get_blink_speed");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_set_max_length(LineEdit *self,int chars){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "set_max_length");
  const void* __args[1] = { &chars };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int LineEdit_get_max_length(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "get_max_length");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_append_at_cursor(LineEdit *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "append_at_cursor");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void LineEdit_set_editable(LineEdit *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "set_editable");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool LineEdit_is_editable(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "is_editable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_set_secret(LineEdit *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "set_secret");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool LineEdit_is_secret(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "is_secret");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LineEdit_select__SWIG_0(LineEdit *self,int from=0,int to=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "select");
  const void* __args[2] = { &from, &to };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void LineEdit_menu_option(LineEdit *self,int option){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "menu_option");
  const void* __args[1] = { &option };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN PopupMenu *LineEdit_get_menu(LineEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LineEdit", "get_menu");
  PopupMenu* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Listener_make_current(Listener *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Listener", "make_current");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Listener_clear_current(Listener *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Listener", "clear_current");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool Listener_is_current(Listener *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Listener", "is_current");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Transform Listener_get_listener_transform(Listener *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Listener", "get_listener_transform");
  Transform ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MeshInstance_set_mesh(MeshInstance *self,Mesh *mesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "set_mesh");
  const void* __args[1] = { mesh };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Mesh > MeshInstance_get_mesh(MeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "get_mesh");
  Ref<Mesh> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MeshInstance_set_skeleton_path(MeshInstance *self,NodePath const &skeleton_path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "set_skeleton_path");
  const void* __args[1] = { &skeleton_path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath MeshInstance_get_skeleton_path(MeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "get_skeleton_path");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN AABB MeshInstance_get_aabb(MeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "get_aabb");
  AABB ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void MeshInstance_create_trimesh_collision(MeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "create_trimesh_collision");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void MeshInstance_create_convex_collision(MeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MeshInstance", "create_convex_collision");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void MultiMeshInstance_set_multimesh(MultiMeshInstance *self,Object *multimesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMeshInstance", "set_multimesh");
  const void* __args[1] = { multimesh };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *MultiMeshInstance_get_multimesh(MultiMeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MultiMeshInstance", "get_multimesh");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Navigation_navmesh_create__SWIG_0(Navigation *self,NavigationMesh *mesh,Transform const &xform,Object *owner=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "navmesh_create");
  const void* __args[3] = { mesh, &xform, owner };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Navigation_navmesh_set_transform(Navigation *self,int id,Transform const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "navmesh_set_transform");
  const void* __args[2] = { &id, &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Navigation_navmesh_remove(Navigation *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "navmesh_remove");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array Navigation_get_simple_path__SWIG_0(Navigation *self,Vector3 const &start,Vector3 const &end,bool optimize=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "get_simple_path");
  const void* __args[3] = { &start, &end, &optimize };
  Vector3Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Navigation_get_closest_point_to_segment__SWIG_0(Navigation *self,Vector3 const &start,Vector3 const &end,bool use_collision=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "get_closest_point_to_segment");
  const void* __args[3] = { &start, &end, &use_collision };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Navigation_get_closest_point(Navigation *self,Vector3 const &to_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "get_closest_point");
  const void* __args[1] = { &to_point };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 Navigation_get_closest_point_normal(Navigation *self,Vector3 const &to_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "get_closest_point_normal");
  const void* __args[1] = { &to_point };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *Navigation_get_closest_point_owner(Navigation *self,Vector3 const &to_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "get_closest_point_owner");
  const void* __args[1] = { &to_point };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Navigation_set_up_vector(Navigation *self,Vector3 const &up){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "set_up_vector");
  const void* __args[1] = { &up };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Navigation_get_up_vector(Navigation *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation", "get_up_vector");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void NavigationMeshInstance_set_navigation_mesh(NavigationMeshInstance *self,Object *navmesh){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMeshInstance", "set_navigation_mesh");
  const void* __args[1] = { navmesh };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *NavigationMeshInstance_get_navigation_mesh(NavigationMeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMeshInstance", "get_navigation_mesh");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void NavigationMeshInstance_set_enabled(NavigationMeshInstance *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMeshInstance", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool NavigationMeshInstance_is_enabled(NavigationMeshInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationMeshInstance", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node2D_set_pos(Node2D *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_pos");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_set_rot(Node2D *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_rot");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_set_rotd(Node2D *self,float degrees){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_rotd");
  const void* __args[1] = { &degrees };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_set_scale(Node2D *self,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Node2D_get_pos(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Node2D_get_rot(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_rot");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Node2D_get_rotd(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_rotd");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Node2D_get_scale(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node2D_rotate(Node2D *self,float radians){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "rotate");
  const void* __args[1] = { &radians };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_move_local_x__SWIG_0(Node2D *self,float delta,bool scaled=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "move_local_x");
  const void* __args[2] = { &delta, &scaled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_move_local_y__SWIG_0(Node2D *self,float delta,bool scaled=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "move_local_y");
  const void* __args[2] = { &delta, &scaled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_translate(Node2D *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "translate");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_global_translate(Node2D *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "global_translate");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_scale(Node2D *self,Vector2 const &ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "scale");
  const void* __args[1] = { &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_set_global_pos(Node2D *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_global_pos");
  const void* __args[1] = { &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Node2D_get_global_pos(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_global_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node2D_set_transform(Node2D *self,Matrix32 const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_transform");
  const void* __args[1] = { &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_set_global_transform(Node2D *self,Matrix32 const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_global_transform");
  const void* __args[1] = { &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Node2D_look_at(Node2D *self,Vector2 const &point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "look_at");
  const void* __args[1] = { &point };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Node2D_get_angle_to(Node2D *self,Vector2 const &point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_angle_to");
  const void* __args[1] = { &point };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Node2D_set_z(Node2D *self,int z){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_z");
  const void* __args[1] = { &z };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Node2D_get_z(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_z");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node2D_set_z_as_relative(Node2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "set_z_as_relative");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Node2D_is_z_relative(Node2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "is_z_relative");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Node2D_edit_set_pivot(Node2D *self,Vector2 const &pivot){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "edit_set_pivot");
  const void* __args[1] = { &pivot };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 Node2D_get_relative_transform_to_parent(Node2D *self,Object *parent){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Node2D", "get_relative_transform_to_parent");
  const void* __args[1] = { parent };
  Matrix32 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void ParallaxBackground_set_scroll_offset(ParallaxBackground *self,Vector2 const &ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "set_scroll_offset");
  const void* __args[1] = { &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxBackground_get_scroll_offset(ParallaxBackground *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "get_scroll_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxBackground_set_scroll_base_offset(ParallaxBackground *self,Vector2 const &ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "set_scroll_base_offset");
  const void* __args[1] = { &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxBackground_get_scroll_base_offset(ParallaxBackground *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "get_scroll_base_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxBackground_set_scroll_base_scale(ParallaxBackground *self,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "set_scroll_base_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxBackground_get_scroll_base_scale(ParallaxBackground *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "get_scroll_base_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxBackground_set_limit_begin(ParallaxBackground *self,Vector2 const &ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "set_limit_begin");
  const void* __args[1] = { &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxBackground_get_limit_begin(ParallaxBackground *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "get_limit_begin");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxBackground_set_limit_end(ParallaxBackground *self,Vector2 const &ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "set_limit_end");
  const void* __args[1] = { &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxBackground_get_limit_end(ParallaxBackground *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "get_limit_end");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxBackground_set_ignore_camera_zoom(ParallaxBackground *self,bool ignore){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "set_ignore_camera_zoom");
  const void* __args[1] = { &ignore };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ParallaxBackground_is_ignore_camera_zoom(ParallaxBackground *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxBackground", "is_ignore_camera_zoom");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxLayer_set_motion_scale(ParallaxLayer *self,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxLayer", "set_motion_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxLayer_get_motion_scale(ParallaxLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxLayer", "get_motion_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParallaxLayer_set_mirroring(ParallaxLayer *self,Vector2 const &mirror){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxLayer", "set_mirroring");
  const void* __args[1] = { &mirror };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ParallaxLayer_get_mirroring(ParallaxLayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParallaxLayer", "get_mirroring");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParticleAttractor2D_set_enabled(ParticleAttractor2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ParticleAttractor2D_is_enabled(ParticleAttractor2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParticleAttractor2D_set_radius(ParticleAttractor2D *self,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "set_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ParticleAttractor2D_get_radius(ParticleAttractor2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "get_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParticleAttractor2D_set_disable_radius(ParticleAttractor2D *self,float radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "set_disable_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ParticleAttractor2D_get_disable_radius(ParticleAttractor2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "get_disable_radius");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParticleAttractor2D_set_gravity(ParticleAttractor2D *self,float gravity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "set_gravity");
  const void* __args[1] = { &gravity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ParticleAttractor2D_get_gravity(ParticleAttractor2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "get_gravity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParticleAttractor2D_set_absorption(ParticleAttractor2D *self,float absorption){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "set_absorption");
  const void* __args[1] = { &absorption };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ParticleAttractor2D_get_absorption(ParticleAttractor2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "get_absorption");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ParticleAttractor2D_set_particles_path(ParticleAttractor2D *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "set_particles_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath ParticleAttractor2D_get_particles_path(ParticleAttractor2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ParticleAttractor2D", "get_particles_path");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_amount(Particles *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_amount");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Particles_get_amount(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_amount");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_emitting(Particles *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_emitting");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles_is_emitting(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "is_emitting");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_visibility_aabb(Particles *self,AABB const &aabb){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_visibility_aabb");
  const void* __args[1] = { &aabb };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN AABB Particles_get_visibility_aabb(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_visibility_aabb");
  AABB ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_emission_half_extents(Particles *self,Vector3 const &half_extents){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_emission_half_extents");
  const void* __args[1] = { &half_extents };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Particles_get_emission_half_extents(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_emission_half_extents");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_emission_base_velocity(Particles *self,Vector3 const &base_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_emission_base_velocity");
  const void* __args[1] = { &base_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Particles_get_emission_base_velocity(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_emission_base_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_emission_points(Particles *self,Vector3Array const &points){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_emission_points");
  const void* __args[1] = { &points };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3Array Particles_get_emission_points(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_emission_points");
  Vector3Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_gravity_normal(Particles *self,Vector3 const &normal){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_gravity_normal");
  const void* __args[1] = { &normal };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Particles_get_gravity_normal(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_gravity_normal");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_variable(Particles *self,int variable,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_variable");
  const void* __args[2] = { &variable, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles_get_variable(Particles *self,int variable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_variable");
  const void* __args[1] = { &variable };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles_set_randomness(Particles *self,int variable,float randomness){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_randomness");
  const void* __args[2] = { &variable, &randomness };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles_get_randomness(Particles *self,int variable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_randomness");
  const void* __args[1] = { &variable };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles_set_color_phase_pos(Particles *self,int phase,float pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_color_phase_pos");
  const void* __args[2] = { &phase, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles_get_color_phase_pos(Particles *self,int phase){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_color_phase_pos");
  const void* __args[1] = { &phase };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles_set_color_phase_color(Particles *self,int phase,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_color_phase_color");
  const void* __args[2] = { &phase, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Particles_get_color_phase_color(Particles *self,int phase){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_color_phase_color");
  const void* __args[1] = { &phase };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles_set_material(Particles *self,Material *material){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_material");
  const void* __args[1] = { material };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Material > Particles_get_material(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_material");
  Ref<Material> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_emit_timeout(Particles *self,float timeout){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_emit_timeout");
  const void* __args[1] = { &timeout };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles_get_emit_timeout(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_emit_timeout");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_height_from_velocity(Particles *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_height_from_velocity");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles_has_height_from_velocity(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "has_height_from_velocity");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_use_local_coordinates(Particles *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_use_local_coordinates");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles_is_using_local_coordinates(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "is_using_local_coordinates");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles_set_color_phases(Particles *self,int count){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "set_color_phases");
  const void* __args[1] = { &count };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Particles_get_color_phases(Particles *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles", "get_color_phases");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_emitting(Particles2D *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_emitting");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles2D_is_emitting(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "is_emitting");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_amount(Particles2D *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_amount");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Particles2D_get_amount(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_amount");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_lifetime(Particles2D *self,float lifetime){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_lifetime");
  const void* __args[1] = { &lifetime };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_lifetime(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_lifetime");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_time_scale(Particles2D *self,float time_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_time_scale");
  const void* __args[1] = { &time_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_time_scale(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_time_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_pre_process_time(Particles2D *self,float time){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_pre_process_time");
  const void* __args[1] = { &time };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_pre_process_time(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_pre_process_time");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_emit_timeout(Particles2D *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_emit_timeout");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_emit_timeout(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_emit_timeout");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_param(Particles2D *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_param(Particles2D *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_randomness(Particles2D *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_randomness");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_randomness(Particles2D *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_randomness");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > Particles2D_set_texture(Particles2D *self,Object *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_texture");
  const void* __args[1] = { texture };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > Particles2D_get_texture(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_color(Particles2D *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Particles2D_get_color(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< ColorRamp > Particles2D_set_color_ramp(Particles2D *self,Object *color_ramp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_color_ramp");
  const void* __args[1] = { color_ramp };
  Ref<ColorRamp> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< ColorRamp > Particles2D_get_color_ramp(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_color_ramp");
  Ref<ColorRamp> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_emissor_offset(Particles2D *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_emissor_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Particles2D_get_emissor_offset(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_emissor_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_flip_h(Particles2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_flip_h");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles2D_is_flipped_h(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "is_flipped_h");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_flip_v(Particles2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_flip_v");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles2D_is_flipped_v(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "is_flipped_v");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_h_frames(Particles2D *self,int enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_h_frames");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Particles2D_get_h_frames(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_h_frames");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_v_frames(Particles2D *self,int enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_v_frames");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Particles2D_get_v_frames(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_v_frames");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_emission_half_extents(Particles2D *self,Vector2 const &extents){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_emission_half_extents");
  const void* __args[1] = { &extents };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Particles2D_get_emission_half_extents(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_emission_half_extents");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_color_phases(Particles2D *self,int phases){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_color_phases");
  const void* __args[1] = { &phases };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Particles2D_get_color_phases(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_color_phases");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_color_phase_color(Particles2D *self,int phase,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_color_phase_color");
  const void* __args[2] = { &phase, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Particles2D_get_color_phase_color(Particles2D *self,int phase){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_color_phase_color");
  const void* __args[1] = { &phase };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_color_phase_pos(Particles2D *self,int phase,float pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_color_phase_pos");
  const void* __args[2] = { &phase, &pos };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_color_phase_pos(Particles2D *self,int phase){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_color_phase_pos");
  const void* __args[1] = { &phase };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Particles2D_pre_process(Particles2D *self,float time){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "pre_process");
  const void* __args[1] = { &time };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Particles2D_reset(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "reset");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Particles2D_set_use_local_space(Particles2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_use_local_space");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Particles2D_is_using_local_space(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "is_using_local_space");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_initial_velocity(Particles2D *self,Vector2 const &velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_initial_velocity");
  const void* __args[1] = { &velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Particles2D_get_initial_velocity(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_initial_velocity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_explosiveness(Particles2D *self,float amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_explosiveness");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Particles2D_get_explosiveness(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_explosiveness");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Particles2D_set_emission_points(Particles2D *self,Vector2Array const &points){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "set_emission_points");
  const void* __args[1] = { &points };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array Particles2D_get_emission_points(Particles2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Particles2D", "get_emission_points");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Patch9Frame_set_texture(Patch9Frame *self,Object *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *Patch9Frame_get_texture(Patch9Frame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "get_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Patch9Frame_set_modulate(Patch9Frame *self,Color const &modulate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "set_modulate");
  const void* __args[1] = { &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Patch9Frame_get_modulate(Patch9Frame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Patch9Frame_set_patch_margin(Patch9Frame *self,int margin,int value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "set_patch_margin");
  const void* __args[2] = { &margin, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Patch9Frame_get_patch_margin(Patch9Frame *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "get_patch_margin");
  const void* __args[1] = { &margin };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Patch9Frame_set_region_rect(Patch9Frame *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "set_region_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 Patch9Frame_get_region_rect(Patch9Frame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "get_region_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Patch9Frame_set_draw_center(Patch9Frame *self,bool draw_center){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "set_draw_center");
  const void* __args[1] = { &draw_center };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Patch9Frame_get_draw_center(Patch9Frame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Patch9Frame", "get_draw_center");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Path_set_curve(Path *self,Curve3D *curve){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Path", "set_curve");
  const void* __args[1] = { curve };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Curve3D > Path_get_curve(Path *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Path", "get_curve");
  Ref<Curve3D> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Path2D_set_curve(Path2D *self,Curve2D *curve){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Path2D", "set_curve");
  const void* __args[1] = { curve };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Curve2D > Path2D_get_curve(Path2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Path2D", "get_curve");
  Ref<Curve2D> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_offset(PathFollow *self,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow_get_offset(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "get_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_h_offset(PathFollow *self,float h_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_h_offset");
  const void* __args[1] = { &h_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow_get_h_offset(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "get_h_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_v_offset(PathFollow *self,float v_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_v_offset");
  const void* __args[1] = { &v_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow_get_v_offset(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "get_v_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_unit_offset(PathFollow *self,float unit_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_unit_offset");
  const void* __args[1] = { &unit_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow_get_unit_offset(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "get_unit_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_rotation_mode(PathFollow *self,int rotation_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_rotation_mode");
  const void* __args[1] = { &rotation_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PathFollow_get_rotation_mode(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "get_rotation_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_cubic_interpolation(PathFollow *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_cubic_interpolation");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PathFollow_get_cubic_interpolation(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "get_cubic_interpolation");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow_set_loop(PathFollow *self,bool loop){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "set_loop");
  const void* __args[1] = { &loop };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PathFollow_has_loop(PathFollow *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_offset(PathFollow2D *self,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow2D_get_offset(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "get_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_h_offset(PathFollow2D *self,float h_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_h_offset");
  const void* __args[1] = { &h_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow2D_get_h_offset(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "get_h_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_v_offset(PathFollow2D *self,float v_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_v_offset");
  const void* __args[1] = { &v_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow2D_get_v_offset(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "get_v_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_unit_offset(PathFollow2D *self,float unit_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_unit_offset");
  const void* __args[1] = { &unit_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PathFollow2D_get_unit_offset(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "get_unit_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_rotate(PathFollow2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_rotate");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PathFollow2D_is_rotating(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "is_rotating");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_cubic_interpolation(PathFollow2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_cubic_interpolation");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PathFollow2D_get_cubic_interpolation(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "get_cubic_interpolation");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PathFollow2D_set_loop(PathFollow2D *self,bool loop){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "set_loop");
  const void* __args[1] = { &loop };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PathFollow2D_has_loop(PathFollow2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PathFollow2D", "has_loop");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody_set_layer_mask(PhysicsBody *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "set_layer_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsBody_get_layer_mask(PhysicsBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody_set_collision_mask(PhysicsBody *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "set_collision_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsBody_get_collision_mask(PhysicsBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "get_collision_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody_set_collision_mask_bit(PhysicsBody *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "set_collision_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsBody_get_collision_mask_bit(PhysicsBody *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "get_collision_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody_set_layer_mask_bit(PhysicsBody *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "set_layer_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsBody_get_layer_mask_bit(PhysicsBody *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "get_layer_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody_add_collision_exception_with(PhysicsBody *self,PhysicsBody *body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "add_collision_exception_with");
  const void* __args[1] = { body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsBody_remove_collision_exception_with(PhysicsBody *self,PhysicsBody *body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody", "remove_collision_exception_with");
  const void* __args[1] = { body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PinJoint_set_param(PinJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PinJoint", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PinJoint_get_param(PinJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PinJoint", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_polygon(Polygon2D *self,Vector2Array const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_polygon");
  const void* __args[1] = { &polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array Polygon2D_get_polygon(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_polygon");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_uv(Polygon2D *self,Vector2Array const &uv){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_uv");
  const void* __args[1] = { &uv };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array Polygon2D_get_uv(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_uv");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_color(Polygon2D *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Polygon2D_get_color(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_vertex_colors(Polygon2D *self,ColorArray const &vertex_colors){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_vertex_colors");
  const void* __args[1] = { &vertex_colors };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN ColorArray Polygon2D_get_vertex_colors(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_vertex_colors");
  ColorArray ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_texture(Polygon2D *self,Object *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *Polygon2D_get_texture(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_texture_offset(Polygon2D *self,Vector2 const &texture_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_texture_offset");
  const void* __args[1] = { &texture_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Polygon2D_get_texture_offset(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_texture_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_texture_rotation(Polygon2D *self,float texture_rotation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_texture_rotation");
  const void* __args[1] = { &texture_rotation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Polygon2D_get_texture_rotation(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_texture_rotation");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_texture_scale(Polygon2D *self,Vector2 const &texture_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_texture_scale");
  const void* __args[1] = { &texture_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Polygon2D_get_texture_scale(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_texture_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_invert(Polygon2D *self,bool invert){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_invert");
  const void* __args[1] = { &invert };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Polygon2D_get_invert(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_invert");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_invert_border(Polygon2D *self,float invert_border){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_invert_border");
  const void* __args[1] = { &invert_border };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Polygon2D_get_invert_border(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_invert_border");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Polygon2D_set_offset(Polygon2D *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Polygon2D_get_offset(Polygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Polygon2D", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Popup_popup_centered__SWIG_0(Popup *self,Vector2 const &size=Vector2(0,0)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Popup", "popup_centered");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Popup_popup_centered_ratio__SWIG_0(Popup *self,float ratio=0.75){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Popup", "popup_centered_ratio");
  const void* __args[1] = { &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Popup_popup_centered_minsize__SWIG_0(Popup *self,Vector2 const &minsize=Vector2(0,0)){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Popup", "popup_centered_minsize");
  const void* __args[1] = { &minsize };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Popup_popup(Popup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Popup", "popup");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Popup_set_exclusive(Popup *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Popup", "set_exclusive");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Popup_is_exclusive(Popup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Popup", "is_exclusive");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PopupMenu_add_icon_item__SWIG_0(PopupMenu *self,Object *texture,String const &label,int id=-1,int accel=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_icon_item");
  const void* __args[4] = { texture, &label, &id, &accel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_item__SWIG_0(PopupMenu *self,String const &label,int id=-1,int accel=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_item");
  const void* __args[3] = { &label, &id, &accel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_icon_check_item__SWIG_0(PopupMenu *self,Object *texture,String const &label,int id=-1,int accel=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_icon_check_item");
  const void* __args[4] = { texture, &label, &id, &accel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_check_item__SWIG_0(PopupMenu *self,String const &label,int id=-1,int accel=0){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_check_item");
  const void* __args[3] = { &label, &id, &accel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_submenu_item__SWIG_0(PopupMenu *self,String const &label,String const &submenu,int id=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_submenu_item");
  const void* __args[3] = { &label, &submenu, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_icon_shortcut__SWIG_0(PopupMenu *self,Object *texture,ShortCut *shortcut,int id=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_icon_shortcut");
  const void* __args[3] = { texture, shortcut, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_shortcut__SWIG_0(PopupMenu *self,ShortCut *shortcut,int id=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_shortcut");
  const void* __args[2] = { shortcut, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_icon_check_shortcut__SWIG_0(PopupMenu *self,Object *texture,ShortCut *shortcut,int id=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_icon_check_shortcut");
  const void* __args[3] = { texture, shortcut, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_add_check_shortcut__SWIG_0(PopupMenu *self,ShortCut *shortcut,int id=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_check_shortcut");
  const void* __args[2] = { shortcut, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_text(PopupMenu *self,int idx,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_text");
  const void* __args[2] = { &idx, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_icon(PopupMenu *self,int idx,Object *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_icon");
  const void* __args[2] = { &idx, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_accelerator(PopupMenu *self,int idx,int accel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_accelerator");
  const void* __args[2] = { &idx, &accel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_metadata(PopupMenu *self,int idx,Variant const &metadata){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_metadata");
  const void* __args[2] = { &idx, &metadata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_checked(PopupMenu *self,int idx,bool checked){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_checked");
  const void* __args[2] = { &idx, &checked };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_disabled(PopupMenu *self,int idx,bool disabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_disabled");
  const void* __args[2] = { &idx, &disabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_shortcut(PopupMenu *self,int idx,ShortCut *shortcut){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_shortcut");
  const void* __args[2] = { &idx, shortcut };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_submenu(PopupMenu *self,int idx,String const &submenu){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_submenu");
  const void* __args[2] = { &idx, &submenu };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_as_separator(PopupMenu *self,int idx,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_as_separator");
  const void* __args[2] = { &idx, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_as_checkable(PopupMenu *self,int idx,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_as_checkable");
  const void* __args[2] = { &idx, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_set_item_ID(PopupMenu *self,int idx,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "set_item_ID");
  const void* __args[2] = { &idx, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String PopupMenu_get_item_text(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_text");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *PopupMenu_get_item_icon(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_icon");
  const void* __args[1] = { &idx };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PopupMenu_get_item_metadata(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_metadata");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PopupMenu_get_item_accelerator(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_accelerator");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< ShortCut > PopupMenu_get_item_shortcut(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_shortcut");
  const void* __args[1] = { &idx };
  Ref<ShortCut> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String PopupMenu_get_item_submenu(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_submenu");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool PopupMenu_is_item_separator(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "is_item_separator");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool PopupMenu_is_item_checkable(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "is_item_checkable");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool PopupMenu_is_item_checked(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "is_item_checked");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool PopupMenu_is_item_disabled(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "is_item_disabled");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PopupMenu_get_item_ID(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_ID");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PopupMenu_get_item_index(PopupMenu *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_index");
  const void* __args[1] = { &id };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int PopupMenu_get_item_count(PopupMenu *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "get_item_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PopupMenu_add_separator(PopupMenu *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "add_separator");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void PopupMenu_remove_item(PopupMenu *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "remove_item");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PopupMenu_clear(PopupMenu *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PopupMenu", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Portal_set_shape(Portal *self,Vector2Array const &points){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "set_shape");
  const void* __args[1] = { &points };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array Portal_get_shape(Portal *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "get_shape");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Portal_set_enabled(Portal *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "set_enabled");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Portal_is_enabled(Portal *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Portal_set_disable_distance(Portal *self,float distance){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "set_disable_distance");
  const void* __args[1] = { &distance };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Portal_get_disable_distance(Portal *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "get_disable_distance");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Portal_set_disabled_color(Portal *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "set_disabled_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Portal_get_disabled_color(Portal *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "get_disabled_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Portal_set_connect_range(Portal *self,float range){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "set_connect_range");
  const void* __args[1] = { &range };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Portal_get_connect_range(Portal *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Portal", "get_connect_range");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ProximityGroup_set_group_name(ProximityGroup *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProximityGroup", "set_group_name");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ProximityGroup_broadcast(ProximityGroup *self,String const &name,Variant const &parameters){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProximityGroup", "broadcast");
  const void* __args[2] = { &name, &parameters };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ProximityGroup_set_dispatch_mode(ProximityGroup *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProximityGroup", "set_dispatch_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ProximityGroup_set_grid_radius(ProximityGroup *self,Vector3 const &radius){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProximityGroup", "set_grid_radius");
  const void* __args[1] = { &radius };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 ProximityGroup_get_grid_radius(ProximityGroup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProximityGroup", "get_grid_radius");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Quad_set_axis(Quad *self,int axis){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "set_axis");
  const void* __args[1] = { &axis };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Quad_get_axis(Quad *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "get_axis");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Quad_set_size(Quad *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "set_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Quad_get_size(Quad *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "get_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Quad_set_centered(Quad *self,bool centered){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "set_centered");
  const void* __args[1] = { &centered };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Quad_is_centered(Quad *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "is_centered");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Quad_set_offset(Quad *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Quad_get_offset(Quad *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Quad", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_val(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_val");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_value(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_value");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_min(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_min");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_max(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_max");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_step(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_step");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_page(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_page");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float Range_get_unit_value(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "get_unit_value");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Range_set_val(Range *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_val");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_value(Range *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_value");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_min(Range *self,float minimum){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_min");
  const void* __args[1] = { &minimum };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_max(Range *self,float maximum){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_max");
  const void* __args[1] = { &maximum };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_step(Range *self,float step){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_step");
  const void* __args[1] = { &step };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_page(Range *self,float pagesize){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_page");
  const void* __args[1] = { &pagesize };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_unit_value(Range *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_unit_value");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_set_rounded_values(Range *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_rounded_values");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Range_is_rounded_values(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "is_rounded_values");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Range_set_exp_unit_value(Range *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "set_exp_unit_value");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Range_is_unit_value_exp(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "is_unit_value_exp");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Range_share(Range *self,Object *with){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "share");
  const void* __args[1] = { with };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Range_unshare(Range *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Range", "unshare");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RayCast_set_enabled(RayCast *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RayCast_is_enabled(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast_set_cast_to(RayCast *self,Vector3 const &local_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "set_cast_to");
  const void* __args[1] = { &local_point };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 RayCast_get_cast_to(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_cast_to");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool RayCast_is_colliding(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "is_colliding");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *RayCast_get_collider(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_collider");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int RayCast_get_collider_shape(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_collider_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 RayCast_get_collision_point(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_collision_point");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 RayCast_get_collision_normal(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_collision_normal");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast_add_exception_rid(RayCast *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "add_exception_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast_add_exception(RayCast *self,Object *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "add_exception");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast_remove_exception_rid(RayCast *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "remove_exception_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast_remove_exception(RayCast *self,Object *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "remove_exception");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast_clear_exceptions(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "clear_exceptions");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RayCast_set_layer_mask(RayCast *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "set_layer_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RayCast_get_layer_mask(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast_set_type_mask(RayCast *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "set_type_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RayCast_get_type_mask(RayCast *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast", "get_type_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast2D_set_enabled(RayCast2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RayCast2D_is_enabled(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast2D_set_cast_to(RayCast2D *self,Vector2 const &local_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "set_cast_to");
  const void* __args[1] = { &local_point };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 RayCast2D_get_cast_to(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_cast_to");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool RayCast2D_is_colliding(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "is_colliding");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *RayCast2D_get_collider(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_collider");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int RayCast2D_get_collider_shape(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_collider_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 RayCast2D_get_collision_point(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_collision_point");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 RayCast2D_get_collision_normal(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_collision_normal");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast2D_add_exception_rid(RayCast2D *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "add_exception_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast2D_add_exception(RayCast2D *self,Object *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "add_exception");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast2D_remove_exception_rid(RayCast2D *self,RID const &rid){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "remove_exception_rid");
  const void* __args[1] = { &rid };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast2D_remove_exception(RayCast2D *self,Object *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "remove_exception");
  const void* __args[1] = { node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RayCast2D_clear_exceptions(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "clear_exceptions");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RayCast2D_set_layer_mask(RayCast2D *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "set_layer_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RayCast2D_get_layer_mask(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RayCast2D_set_type_mask(RayCast2D *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "set_type_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RayCast2D_get_type_mask(RayCast2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RayCast2D", "get_type_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RemoteTransform2D_set_remote_node(RemoteTransform2D *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RemoteTransform2D", "set_remote_node");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath RemoteTransform2D_get_remote_node(RemoteTransform2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RemoteTransform2D", "get_remote_node");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_add_text(RichTextLabel *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "add_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_add_image(RichTextLabel *self,Texture *image){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "add_image");
  const void* __args[1] = { image };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_newline(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "newline");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RichTextLabel_push_font(RichTextLabel *self,Object *font){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_font");
  const void* __args[1] = { font };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_color(RichTextLabel *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_align(RichTextLabel *self,int align){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_align");
  const void* __args[1] = { &align };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_indent(RichTextLabel *self,int level){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_indent");
  const void* __args[1] = { &level };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_list(RichTextLabel *self,int type){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_list");
  const void* __args[1] = { &type };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_meta(RichTextLabel *self,Variant const &data){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_meta");
  const void* __args[1] = { &data };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_underline(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_underline");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RichTextLabel_push_table(RichTextLabel *self,int columns){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_table");
  const void* __args[1] = { &columns };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_set_table_column_expand(RichTextLabel *self,int column,bool expand,int ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_table_column_expand");
  const void* __args[3] = { &column, &expand, &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_push_cell(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "push_cell");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RichTextLabel_pop(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "pop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RichTextLabel_clear(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void RichTextLabel_set_meta_underline(RichTextLabel *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_meta_underline");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RichTextLabel_is_meta_underlined(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "is_meta_underlined");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_set_scroll_active(RichTextLabel *self,bool active){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_scroll_active");
  const void* __args[1] = { &active };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RichTextLabel_is_scroll_active(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "is_scroll_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_set_scroll_follow(RichTextLabel *self,bool follow){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_scroll_follow");
  const void* __args[1] = { &follow };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RichTextLabel_is_scroll_following(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "is_scroll_following");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *RichTextLabel_get_v_scroll(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "get_v_scroll");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_scroll_to_line(RichTextLabel *self,int line){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "scroll_to_line");
  const void* __args[1] = { &line };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RichTextLabel_set_tab_size(RichTextLabel *self,int spaces){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_tab_size");
  const void* __args[1] = { &spaces };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RichTextLabel_get_tab_size(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "get_tab_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_set_selection_enabled(RichTextLabel *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_selection_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RichTextLabel_is_selection_enabled(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "is_selection_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int RichTextLabel_parse_bbcode(RichTextLabel *self,String const &bbcode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "parse_bbcode");
  const void* __args[1] = { &bbcode };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int RichTextLabel_append_bbcode(RichTextLabel *self,String const &bbcode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "append_bbcode");
  const void* __args[1] = { &bbcode };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_set_bbcode(RichTextLabel *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_bbcode");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String RichTextLabel_get_bbcode(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "get_bbcode");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_set_visible_characters(RichTextLabel *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_visible_characters");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RichTextLabel_get_visible_characters(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "get_visible_characters");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int RichTextLabel_get_total_character_count(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "get_total_character_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RichTextLabel_set_use_bbcode(RichTextLabel *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "set_use_bbcode");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RichTextLabel_is_using_bbcode(RichTextLabel *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RichTextLabel", "is_using_bbcode");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody__integrate_forces(RigidBody *self,PhysicsDirectBodyState *state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "_integrate_forces");
  const void* __args[1] = { state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody_set_mode(RigidBody *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RigidBody_get_mode(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_mass(RigidBody *self,float mass){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_mass");
  const void* __args[1] = { &mass };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_mass(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_mass");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_weight(RigidBody *self,float weight){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_weight");
  const void* __args[1] = { &weight };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_weight(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_weight");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_friction(RigidBody *self,float friction){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_friction");
  const void* __args[1] = { &friction };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_friction(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_friction");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_bounce(RigidBody *self,float bounce){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_bounce");
  const void* __args[1] = { &bounce };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_bounce(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_bounce");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_linear_velocity(RigidBody *self,Vector3 const &linear_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_linear_velocity");
  const void* __args[1] = { &linear_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 RigidBody_get_linear_velocity(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_linear_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_angular_velocity(RigidBody *self,Vector3 const &angular_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_angular_velocity");
  const void* __args[1] = { &angular_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 RigidBody_get_angular_velocity(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_angular_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_gravity_scale(RigidBody *self,float gravity_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_gravity_scale");
  const void* __args[1] = { &gravity_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_gravity_scale(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_gravity_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_linear_damp(RigidBody *self,float linear_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_linear_damp");
  const void* __args[1] = { &linear_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_linear_damp(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_linear_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_angular_damp(RigidBody *self,float angular_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_angular_damp");
  const void* __args[1] = { &angular_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody_get_angular_damp(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_angular_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_max_contacts_reported(RigidBody *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_max_contacts_reported");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RigidBody_get_max_contacts_reported(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_max_contacts_reported");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_use_custom_integrator(RigidBody *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_use_custom_integrator");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody_is_using_custom_integrator(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "is_using_custom_integrator");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_contact_monitor(RigidBody *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_contact_monitor");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody_is_contact_monitor_enabled(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "is_contact_monitor_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_use_continuous_collision_detection(RigidBody *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_use_continuous_collision_detection");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody_is_using_continuous_collision_detection(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "is_using_continuous_collision_detection");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_axis_velocity(RigidBody *self,Vector3 const &axis_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_axis_velocity");
  const void* __args[1] = { &axis_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody_apply_impulse(RigidBody *self,Vector3 const &pos,Vector3 const &impulse){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "apply_impulse");
  const void* __args[2] = { &pos, &impulse };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody_set_sleeping(RigidBody *self,bool sleeping){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_sleeping");
  const void* __args[1] = { &sleeping };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody_is_sleeping(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "is_sleeping");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_can_sleep(RigidBody *self,bool able_to_sleep){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_can_sleep");
  const void* __args[1] = { &able_to_sleep };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody_is_able_to_sleep(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "is_able_to_sleep");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody_set_axis_lock(RigidBody *self,int axis_lock){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "set_axis_lock");
  const void* __args[1] = { &axis_lock };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RigidBody_get_axis_lock(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_axis_lock");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array RigidBody_get_colliding_bodies(RigidBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody", "get_colliding_bodies");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Room_set_room(Room *self,Room *room){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Room", "set_room");
  const void* __args[1] = { room };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Room *Room_get_room(Room *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Room", "get_room");
  Room* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Room_compute_room_from_subtree(Room *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Room", "compute_room_from_subtree");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Room_set_simulate_acoustics(Room *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Room", "set_simulate_acoustics");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Room_is_simulating_acoustics(Room *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Room", "is_simulating_acoustics");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ScrollBar_set_custom_step(ScrollBar *self,float step){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollBar", "set_custom_step");
  const void* __args[1] = { &step };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ScrollBar_get_custom_step(ScrollBar *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollBar", "get_custom_step");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Skeleton_add_bone(Skeleton *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "add_bone");
  const void* __args[1] = { &name };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Skeleton_find_bone(Skeleton *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "find_bone");
  const void* __args[1] = { &name };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN String Skeleton_get_bone_name(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_name");
  const void* __args[1] = { &bone_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Skeleton_get_bone_parent(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_parent");
  const void* __args[1] = { &bone_idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Skeleton_set_bone_parent(Skeleton *self,int bone_idx,int parent_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "set_bone_parent");
  const void* __args[2] = { &bone_idx, &parent_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Skeleton_get_bone_count(Skeleton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Skeleton_unparent_bone_and_rest(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "unparent_bone_and_rest");
  const void* __args[1] = { &bone_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform Skeleton_get_bone_rest(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_rest");
  const void* __args[1] = { &bone_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Skeleton_set_bone_rest(Skeleton *self,int bone_idx,Transform const &rest){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "set_bone_rest");
  const void* __args[2] = { &bone_idx, &rest };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Skeleton_set_bone_disable_rest(Skeleton *self,int bone_idx,bool disable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "set_bone_disable_rest");
  const void* __args[2] = { &bone_idx, &disable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Skeleton_is_bone_rest_disabled(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "is_bone_rest_disabled");
  const void* __args[1] = { &bone_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Skeleton_bind_child_node_to_bone(Skeleton *self,int bone_idx,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "bind_child_node_to_bone");
  const void* __args[2] = { &bone_idx, node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Skeleton_unbind_child_node_from_bone(Skeleton *self,int bone_idx,Node *node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "unbind_child_node_from_bone");
  const void* __args[2] = { &bone_idx, node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Array Skeleton_get_bound_child_nodes_to_bone(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bound_child_nodes_to_bone");
  const void* __args[1] = { &bone_idx };
  Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Skeleton_clear_bones(Skeleton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "clear_bones");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Transform Skeleton_get_bone_pose(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_pose");
  const void* __args[1] = { &bone_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Skeleton_set_bone_pose(Skeleton *self,int bone_idx,Transform const &pose){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "set_bone_pose");
  const void* __args[2] = { &bone_idx, &pose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Skeleton_set_bone_global_pose(Skeleton *self,int bone_idx,Transform const &pose){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "set_bone_global_pose");
  const void* __args[2] = { &bone_idx, &pose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform Skeleton_get_bone_global_pose(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_global_pose");
  const void* __args[1] = { &bone_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Transform Skeleton_get_bone_custom_pose(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_custom_pose");
  const void* __args[1] = { &bone_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Skeleton_set_bone_custom_pose(Skeleton *self,int bone_idx,Transform const &custom_pose){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "set_bone_custom_pose");
  const void* __args[2] = { &bone_idx, &custom_pose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Transform Skeleton_get_bone_transform(Skeleton *self,int bone_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Skeleton", "get_bone_transform");
  const void* __args[1] = { &bone_idx };
  Transform ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Slider_set_ticks(Slider *self,int count){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Slider", "set_ticks");
  const void* __args[1] = { &count };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Slider_get_ticks(Slider *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Slider", "get_ticks");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Slider_get_ticks_on_borders(Slider *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Slider", "get_ticks_on_borders");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Slider_set_ticks_on_borders(Slider *self,bool ticks_on_border){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Slider", "set_ticks_on_borders");
  const void* __args[1] = { &ticks_on_border };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SliderJoint_set_param(SliderJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SliderJoint", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SliderJoint_get_param(SliderJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SliderJoint", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SoundPlayer2D_set_param(SoundPlayer2D *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundPlayer2D", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SoundPlayer2D_get_param(SoundPlayer2D *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SoundPlayer2D", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpinBox_set_suffix(SpinBox *self,String const &suffix){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "set_suffix");
  const void* __args[1] = { &suffix };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String SpinBox_get_suffix(SpinBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "get_suffix");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpinBox_set_prefix(SpinBox *self,String const &prefix){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "set_prefix");
  const void* __args[1] = { &prefix };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String SpinBox_get_prefix(SpinBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "get_prefix");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpinBox_set_editable(SpinBox *self,bool editable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "set_editable");
  const void* __args[1] = { &editable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpinBox_is_editable(SpinBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "is_editable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *SpinBox_get_line_edit(SpinBox *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpinBox", "get_line_edit");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_texture(Sprite *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Sprite_get_texture(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_centered(Sprite *self,bool centered){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_centered");
  const void* __args[1] = { &centered };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Sprite_is_centered(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "is_centered");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_offset(Sprite *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Sprite_get_offset(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_flip_h(Sprite *self,bool flip_h){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_flip_h");
  const void* __args[1] = { &flip_h };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Sprite_is_flipped_h(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "is_flipped_h");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_flip_v(Sprite *self,bool flip_v){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_flip_v");
  const void* __args[1] = { &flip_v };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Sprite_is_flipped_v(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "is_flipped_v");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_region(Sprite *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_region");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Sprite_is_region(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "is_region");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_region_rect(Sprite *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_region_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 Sprite_get_region_rect(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_region_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_frame(Sprite *self,int frame){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_frame");
  const void* __args[1] = { &frame };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sprite_get_frame(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_frame");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_vframes(Sprite *self,int vframes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_vframes");
  const void* __args[1] = { &vframes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sprite_get_vframes(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_vframes");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_hframes(Sprite *self,int hframes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_hframes");
  const void* __args[1] = { &hframes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sprite_get_hframes(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_hframes");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite_set_modulate(Sprite *self,Color const &modulate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "set_modulate");
  const void* __args[1] = { &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Sprite_get_modulate(Sprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_centered(SpriteBase3D *self,bool centered){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_centered");
  const void* __args[1] = { &centered };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpriteBase3D_is_centered(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "is_centered");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_offset(SpriteBase3D *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 SpriteBase3D_get_offset(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_flip_h(SpriteBase3D *self,bool flip_h){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_flip_h");
  const void* __args[1] = { &flip_h };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpriteBase3D_is_flipped_h(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "is_flipped_h");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_flip_v(SpriteBase3D *self,bool flip_v){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_flip_v");
  const void* __args[1] = { &flip_v };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpriteBase3D_is_flipped_v(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "is_flipped_v");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_modulate(SpriteBase3D *self,Color const &modulate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_modulate");
  const void* __args[1] = { &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color SpriteBase3D_get_modulate(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_opacity(SpriteBase3D *self,float opacity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_opacity");
  const void* __args[1] = { &opacity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpriteBase3D_get_opacity(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_opacity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_pixel_size(SpriteBase3D *self,float pixel_size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_pixel_size");
  const void* __args[1] = { &pixel_size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SpriteBase3D_get_pixel_size(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_pixel_size");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_axis(SpriteBase3D *self,int axis){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_axis");
  const void* __args[1] = { &axis };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SpriteBase3D_get_axis(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_axis");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_draw_flag(SpriteBase3D *self,int flag,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_draw_flag");
  const void* __args[2] = { &flag, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SpriteBase3D_get_draw_flag(SpriteBase3D *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_draw_flag");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SpriteBase3D_set_alpha_cut_mode(SpriteBase3D *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "set_alpha_cut_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SpriteBase3D_get_alpha_cut_mode(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_alpha_cut_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 SpriteBase3D_get_item_rect(SpriteBase3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SpriteBase3D", "get_item_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StaticBody_set_constant_linear_velocity(StaticBody *self,Vector3 const &vel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "set_constant_linear_velocity");
  const void* __args[1] = { &vel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StaticBody_set_constant_angular_velocity(StaticBody *self,Vector3 const &vel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "set_constant_angular_velocity");
  const void* __args[1] = { &vel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 StaticBody_get_constant_linear_velocity(StaticBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "get_constant_linear_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 StaticBody_get_constant_angular_velocity(StaticBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "get_constant_angular_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StaticBody_set_friction(StaticBody *self,float friction){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "set_friction");
  const void* __args[1] = { &friction };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StaticBody_get_friction(StaticBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "get_friction");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StaticBody_set_bounce(StaticBody *self,float bounce){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "set_bounce");
  const void* __args[1] = { &bounce };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StaticBody_get_bounce(StaticBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody", "get_bounce");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TabContainer_get_tab_count(TabContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_tab_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TabContainer_set_current_tab(TabContainer *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "set_current_tab");
  const void* __args[1] = { &tab_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TabContainer_get_current_tab(TabContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_current_tab");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Control *TabContainer_get_current_tab_control(TabContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_current_tab_control");
  Control* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Control *TabContainer_get_tab_control(TabContainer *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_tab_control");
  const void* __args[1] = { &idx };
  Control* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TabContainer_set_tab_align(TabContainer *self,int align){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "set_tab_align");
  const void* __args[1] = { &align };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TabContainer_get_tab_align(TabContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_tab_align");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TabContainer_set_tabs_visible(TabContainer *self,bool visible){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "set_tabs_visible");
  const void* __args[1] = { &visible };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TabContainer_are_tabs_visible(TabContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "are_tabs_visible");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TabContainer_set_tab_title(TabContainer *self,int tab_idx,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "set_tab_title");
  const void* __args[2] = { &tab_idx, &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String TabContainer_get_tab_title(TabContainer *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_tab_title");
  const void* __args[1] = { &tab_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TabContainer_set_tab_icon(TabContainer *self,int tab_idx,Texture *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "set_tab_icon");
  const void* __args[2] = { &tab_idx, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > TabContainer_get_tab_icon(TabContainer *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_tab_icon");
  const void* __args[1] = { &tab_idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TabContainer_set_popup(TabContainer *self,Popup *popup){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "set_popup");
  const void* __args[1] = { popup };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Popup *TabContainer_get_popup(TabContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TabContainer", "get_popup");
  Popup* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Tabs_get_tab_count(Tabs *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "get_tab_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tabs_set_current_tab(Tabs *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "set_current_tab");
  const void* __args[1] = { &tab_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Tabs_get_current_tab(Tabs *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "get_current_tab");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tabs_set_tab_title(Tabs *self,int tab_idx,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "set_tab_title");
  const void* __args[2] = { &tab_idx, &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Tabs_get_tab_title(Tabs *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "get_tab_title");
  const void* __args[1] = { &tab_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Tabs_set_tab_icon(Tabs *self,int tab_idx,Texture *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "set_tab_icon");
  const void* __args[2] = { &tab_idx, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Tabs_get_tab_icon(Tabs *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "get_tab_icon");
  const void* __args[1] = { &tab_idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Tabs_remove_tab(Tabs *self,int tab_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "remove_tab");
  const void* __args[1] = { &tab_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Tabs_add_tab(Tabs *self,String const &title,Texture *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "add_tab");
  const void* __args[2] = { &title, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Tabs_set_tab_align(Tabs *self,int align){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "set_tab_align");
  const void* __args[1] = { &align };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Tabs_get_tab_align(Tabs *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "get_tab_align");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tabs_ensure_tab_visible(Tabs *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tabs", "ensure_tab_visible");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_set_text(TextEdit *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_insert_text_at_cursor(TextEdit *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "insert_text_at_cursor");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TextEdit_get_line_count(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_line_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String TextEdit_get_text(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String TextEdit_get_line(TextEdit *self,int line){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_line");
  const void* __args[1] = { &line };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TextEdit_cursor_set_column__SWIG_0(TextEdit *self,int column,bool adjust_viewport=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_set_column");
  const void* __args[2] = { &column, &adjust_viewport };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_cursor_set_line__SWIG_0(TextEdit *self,int line,bool adjust_viewport=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_set_line");
  const void* __args[2] = { &line, &adjust_viewport };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TextEdit_cursor_get_column(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_get_column");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TextEdit_cursor_get_line(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_get_line");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextEdit_cursor_set_blink_enabled(TextEdit *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_set_blink_enabled");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TextEdit_cursor_get_blink_enabled(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_get_blink_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextEdit_cursor_set_blink_speed(TextEdit *self,float blink_speed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_set_blink_speed");
  const void* __args[1] = { &blink_speed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float TextEdit_cursor_get_blink_speed(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cursor_get_blink_speed");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextEdit_set_readonly(TextEdit *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_readonly");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_set_wrap(TextEdit *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_wrap");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_set_max_chars(TextEdit *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_max_chars");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_cut(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "cut");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_copy(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "copy");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_paste(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "paste");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_select_all(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "select_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_select(TextEdit *self,int from_line,int from_column,int to_line,int to_column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "select");
  const void* __args[4] = { &from_line, &from_column, &to_line, &to_column };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TextEdit_is_selection_active(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "is_selection_active");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TextEdit_get_selection_from_line(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_selection_from_line");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TextEdit_get_selection_from_column(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_selection_from_column");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TextEdit_get_selection_to_line(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_selection_to_line");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int TextEdit_get_selection_to_column(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_selection_to_column");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String TextEdit_get_selection_text(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_selection_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String TextEdit_get_word_under_cursor(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_word_under_cursor");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN IntArray TextEdit_search(TextEdit *self,String const &flags,int from_line,int from_column,int to_line){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "search");
  const void* __args[4] = { &flags, &from_line, &from_column, &to_line };
  IntArray ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TextEdit_undo(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "undo");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_redo(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "redo");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_clear_undo_history(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "clear_undo_history");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_set_syntax_coloring(TextEdit *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_syntax_coloring");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TextEdit_is_syntax_coloring_enabled(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "is_syntax_coloring_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextEdit_add_keyword_color(TextEdit *self,String const &keyword,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "add_keyword_color");
  const void* __args[2] = { &keyword, &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_add_color_region__SWIG_0(TextEdit *self,String const &begin_key,String const &end_key,Color const &color,bool line_only=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "add_color_region");
  const void* __args[4] = { &begin_key, &end_key, &color, &line_only };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_set_symbol_color(TextEdit *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_symbol_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_set_custom_bg_color(TextEdit *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "set_custom_bg_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextEdit_clear_colors(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "clear_colors");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void TextEdit_menu_option(TextEdit *self,int arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "menu_option");
  const void* __args[1] = { &arg0_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN PopupMenu *TextEdit_get_menu(TextEdit *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextEdit", "get_menu");
  PopupMenu* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureFrame_set_texture(TextureFrame *self,Object *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TextureFrame_get_texture(TextureFrame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "get_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureFrame_set_modulate(TextureFrame *self,Color const &modulate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "set_modulate");
  const void* __args[1] = { &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color TextureFrame_get_modulate(TextureFrame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureFrame_set_expand(TextureFrame *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "set_expand");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TextureFrame_has_expand(TextureFrame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "has_expand");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureFrame_set_stretch_mode(TextureFrame *self,int stretch_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "set_stretch_mode");
  const void* __args[1] = { &stretch_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TextureFrame_get_stretch_mode(TextureFrame *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureFrame", "get_stretch_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_under_texture(TextureProgress *self,Object *tex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_under_texture");
  const void* __args[1] = { tex };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TextureProgress_get_under_texture(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_under_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_progress_texture(TextureProgress *self,Object *tex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_progress_texture");
  const void* __args[1] = { tex };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TextureProgress_get_progress_texture(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_progress_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_over_texture(TextureProgress *self,Object *tex){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_over_texture");
  const void* __args[1] = { tex };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TextureProgress_get_over_texture(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_over_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_fill_mode(TextureProgress *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_fill_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TextureProgress_get_fill_mode(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_fill_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_radial_initial_angle(TextureProgress *self,float mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_radial_initial_angle");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float TextureProgress_get_radial_initial_angle(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_radial_initial_angle");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_radial_center_offset(TextureProgress *self,Vector2 const &mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_radial_center_offset");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 TextureProgress_get_radial_center_offset(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_radial_center_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureProgress_set_fill_degrees(TextureProgress *self,float mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "set_fill_degrees");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float TextureProgress_get_fill_degrees(TextureProgress *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureProgress", "get_fill_degrees");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_tileset(TileMap *self,TileSet *tileset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_tileset");
  const void* __args[1] = { tileset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< TileSet > TileMap_get_tileset(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_tileset");
  Ref<TileSet> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_mode(TileMap *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_mode(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_half_offset(TileMap *self,int half_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_half_offset");
  const void* __args[1] = { &half_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_half_offset(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_half_offset");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_custom_transform(TileMap *self,Matrix32 const &custom_transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_custom_transform");
  const void* __args[1] = { &custom_transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Matrix32 TileMap_get_custom_transform(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_custom_transform");
  Matrix32 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_cell_size(TileMap *self,Vector2 const &size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_cell_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 TileMap_get_cell_size(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_cell_size");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_quadrant_size(TileMap *self,int size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_quadrant_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_quadrant_size(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_quadrant_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_tile_origin(TileMap *self,int origin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_tile_origin");
  const void* __args[1] = { &origin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_tile_origin(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_tile_origin");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_center_x(TileMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_center_x");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TileMap_get_center_x(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_center_x");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_center_y(TileMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_center_y");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TileMap_get_center_y(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_center_y");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_y_sort_mode(TileMap *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_y_sort_mode");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TileMap_is_y_sort_mode_enabled(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "is_y_sort_mode_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_collision_use_kinematic(TileMap *self,bool use_kinematic){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_collision_use_kinematic");
  const void* __args[1] = { &use_kinematic };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TileMap_get_collision_use_kinematic(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_collision_use_kinematic");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_collision_layer(TileMap *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_collision_layer");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_collision_layer(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_collision_layer");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_collision_mask(TileMap *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_collision_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_collision_mask(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_collision_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_collision_friction(TileMap *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_collision_friction");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float TileMap_get_collision_friction(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_collision_friction");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_collision_bounce(TileMap *self,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_collision_bounce");
  const void* __args[1] = { &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float TileMap_get_collision_bounce(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_collision_bounce");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_occluder_light_mask(TileMap *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_occluder_light_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_occluder_light_mask(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_occluder_light_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TileMap_set_cell__SWIG_0(TileMap *self,int x,int y,int tile,bool flip_x=false,bool flip_y=false,bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_cell");
  const void* __args[6] = { &x, &y, &tile, &flip_x, &flip_y, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TileMap_set_cellv__SWIG_0(TileMap *self,Vector2 const &pos,int tile,bool flip_x=false,bool flip_y=false,bool transpose=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "set_cellv");
  const void* __args[5] = { &pos, &tile, &flip_x, &flip_y, &transpose };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TileMap_get_cell(TileMap *self,int x,int y){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_cell");
  const void* __args[2] = { &x, &y };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int TileMap_get_cellv(TileMap *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_cellv");
  const void* __args[1] = { &pos };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool TileMap_is_cell_x_flipped(TileMap *self,int x,int y){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "is_cell_x_flipped");
  const void* __args[2] = { &x, &y };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool TileMap_is_cell_y_flipped(TileMap *self,int x,int y){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "is_cell_y_flipped");
  const void* __args[2] = { &x, &y };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool TileMap_is_cell_transposed(TileMap *self,int x,int y){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "is_cell_transposed");
  const void* __args[2] = { &x, &y };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TileMap_clear(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN Array TileMap_get_used_cells(TileMap *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "get_used_cells");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 TileMap_map_to_world__SWIG_0(TileMap *self,Vector2 const &mappos,bool ignore_half_ofs=false){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "map_to_world");
  const void* __args[2] = { &mappos, &ignore_half_ofs };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 TileMap_world_to_map(TileMap *self,Vector2 const &worldpos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TileMap", "world_to_map");
  const void* __args[1] = { &worldpos };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void TouchScreenButton_set_texture(TouchScreenButton *self,Object *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TouchScreenButton_get_texture(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "get_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TouchScreenButton_set_texture_pressed(TouchScreenButton *self,Object *texture_pressed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "set_texture_pressed");
  const void* __args[1] = { texture_pressed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TouchScreenButton_get_texture_pressed(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "get_texture_pressed");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TouchScreenButton_set_bitmask(TouchScreenButton *self,Object *bitmask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "set_bitmask");
  const void* __args[1] = { bitmask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *TouchScreenButton_get_bitmask(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "get_bitmask");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TouchScreenButton_set_action(TouchScreenButton *self,String const &action){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "set_action");
  const void* __args[1] = { &action };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String TouchScreenButton_get_action(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "get_action");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TouchScreenButton_set_visibility_mode(TouchScreenButton *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "set_visibility_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int TouchScreenButton_get_visibility_mode(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "get_visibility_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TouchScreenButton_set_passby_press(TouchScreenButton *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "set_passby_press");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool TouchScreenButton_is_passby_press_enabled(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "is_passby_press_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool TouchScreenButton_is_pressed(TouchScreenButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TouchScreenButton", "is_pressed");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_clear(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN TreeItem *Tree_create_item__SWIG_0(Tree *self,TreeItem *parent=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "create_item");
  const void* __args[1] = { parent };
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN TreeItem *Tree_get_root(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_root");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_column_min_width(Tree *self,int column,int min_width){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_column_min_width");
  const void* __args[2] = { &column, &min_width };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Tree_set_column_expand(Tree *self,int column,bool expand){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_column_expand");
  const void* __args[2] = { &column, &expand };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Tree_get_column_width(Tree *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_column_width");
  const void* __args[1] = { &column };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Tree_set_hide_root(Tree *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_hide_root");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN TreeItem *Tree_get_next_selected(Tree *self,TreeItem *from){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_next_selected");
  const void* __args[1] = { from };
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN TreeItem *Tree_get_selected(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_selected");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Tree_get_selected_column(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_selected_column");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Tree_get_pressed_button(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_pressed_button");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_select_mode(Tree *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_select_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Tree_set_columns(Tree *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_columns");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Tree_get_columns(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_columns");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TreeItem *Tree_get_edited(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_edited");
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Tree_get_edited_column(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_edited_column");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 Tree_get_custom_popup_rect(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_custom_popup_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Rect2 Tree_get_item_area_rect__SWIG_0(Tree *self,TreeItem *item,int column=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_item_area_rect");
  const void* __args[2] = { item, &column };
  Rect2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN TreeItem *Tree_get_item_at_pos(Tree *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_item_at_pos");
  const void* __args[1] = { &pos };
  TreeItem* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int Tree_get_column_at_pos(Tree *self,Vector2 const &pos){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_column_at_pos");
  const void* __args[1] = { &pos };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Tree_ensure_cursor_is_visible(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "ensure_cursor_is_visible");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Tree_set_column_titles_visible(Tree *self,bool visible){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_column_titles_visible");
  const void* __args[1] = { &visible };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Tree_are_column_titles_visible(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "are_column_titles_visible");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_column_title(Tree *self,int column,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_column_title");
  const void* __args[2] = { &column, &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Tree_get_column_title(Tree *self,int column){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_column_title");
  const void* __args[1] = { &column };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Tree_get_scroll(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_scroll");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_hide_folding(Tree *self,bool hide){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_hide_folding");
  const void* __args[1] = { &hide };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Tree_is_folding_hidden(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "is_folding_hidden");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_drop_mode_flags(Tree *self,int flags){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_drop_mode_flags");
  const void* __args[1] = { &flags };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Tree_get_drop_mode_flags(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_drop_mode_flags");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_allow_rmb_select(Tree *self,bool allow){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_allow_rmb_select");
  const void* __args[1] = { &allow };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Tree_get_allow_rmb_select(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_allow_rmb_select");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Tree_set_single_select_cell_editing_only_when_already_selected(Tree *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "set_single_select_cell_editing_only_when_already_selected");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Tree_get_single_select_cell_editing_only_when_already_selected(Tree *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Tree", "get_single_select_cell_editing_only_when_already_selected");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleBody_set_mass(VehicleBody *self,float mass){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "set_mass");
  const void* __args[1] = { &mass };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleBody_get_mass(VehicleBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "get_mass");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleBody_set_friction(VehicleBody *self,float friction){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "set_friction");
  const void* __args[1] = { &friction };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleBody_get_friction(VehicleBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "get_friction");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleBody_set_engine_force(VehicleBody *self,float engine_force){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "set_engine_force");
  const void* __args[1] = { &engine_force };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleBody_get_engine_force(VehicleBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "get_engine_force");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleBody_set_brake(VehicleBody *self,float brake){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "set_brake");
  const void* __args[1] = { &brake };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleBody_get_brake(VehicleBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "get_brake");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VehicleBody_set_steering(VehicleBody *self,float steering){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "set_steering");
  const void* __args[1] = { &steering };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VehicleBody_get_steering(VehicleBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "get_steering");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 VehicleBody_get_linear_velocity(VehicleBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VehicleBody", "get_linear_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_stream(VideoPlayer *self,VideoStream *stream){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_stream");
  const void* __args[1] = { stream };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< VideoStream > VideoPlayer_get_stream(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_stream");
  Ref<VideoStream> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_play(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "play");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void VideoPlayer_stop(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool VideoPlayer_is_playing(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_paused(VideoPlayer *self,bool paused){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_paused");
  const void* __args[1] = { &paused };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VideoPlayer_is_paused(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "is_paused");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_volume(VideoPlayer *self,float volume){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_volume");
  const void* __args[1] = { &volume };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VideoPlayer_get_volume(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_volume");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_volume_db(VideoPlayer *self,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_volume_db");
  const void* __args[1] = { &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float VideoPlayer_get_volume_db(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_volume_db");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_audio_track(VideoPlayer *self,int track){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_audio_track");
  const void* __args[1] = { &track };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VideoPlayer_get_audio_track(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_audio_track");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String VideoPlayer_get_stream_name(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_stream_name");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float VideoPlayer_get_stream_pos(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_stream_pos");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_autoplay(VideoPlayer *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_autoplay");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VideoPlayer_has_autoplay(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "has_autoplay");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_expand(VideoPlayer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_expand");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VideoPlayer_has_expand(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "has_expand");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VideoPlayer_set_buffering_msec(VideoPlayer *self,int msec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "set_buffering_msec");
  const void* __args[1] = { &msec };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int VideoPlayer_get_buffering_msec(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_buffering_msec");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > VideoPlayer_get_video_texture(VideoPlayer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VideoPlayer", "get_video_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ViewportSprite_set_viewport_path(ViewportSprite *self,NodePath const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "set_viewport_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath ViewportSprite_get_viewport_path(ViewportSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "get_viewport_path");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ViewportSprite_set_centered(ViewportSprite *self,bool centered){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "set_centered");
  const void* __args[1] = { &centered };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ViewportSprite_is_centered(ViewportSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "is_centered");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ViewportSprite_set_offset(ViewportSprite *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 ViewportSprite_get_offset(ViewportSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ViewportSprite_set_modulate(ViewportSprite *self,Color const &modulate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "set_modulate");
  const void* __args[1] = { &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ViewportSprite_get_modulate(ViewportSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ViewportSprite", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisibilityEnabler_set_enabler(VisibilityEnabler *self,int enabler,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityEnabler", "set_enabler");
  const void* __args[2] = { &enabler, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisibilityEnabler_is_enabler_enabled(VisibilityEnabler *self,int enabler){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityEnabler", "is_enabler_enabled");
  const void* __args[1] = { &enabler };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void VisibilityNotifier2D_set_rect(VisibilityNotifier2D *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityNotifier2D", "set_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 VisibilityNotifier2D_get_rect(VisibilityNotifier2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityNotifier2D", "get_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool VisibilityNotifier2D_is_on_screen(VisibilityNotifier2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityNotifier2D", "is_on_screen");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void WindowDialog_set_title(WindowDialog *self,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("WindowDialog", "set_title");
  const void* __args[1] = { &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String WindowDialog_get_title(WindowDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("WindowDialog", "get_title");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN TextureButton *WindowDialog_get_close_button(WindowDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("WindowDialog", "get_close_button");
  TextureButton* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void YSort_set_sort_enabled(YSort *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("YSort", "set_sort_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool YSort_is_sort_enabled(YSort *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("YSort", "is_sort_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *AcceptDialog_get_ok(AcceptDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "get_ok");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *AcceptDialog_get_label(AcceptDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "get_label");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AcceptDialog_set_hide_on_ok(AcceptDialog *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "set_hide_on_ok");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AcceptDialog_get_hide_on_ok(AcceptDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "get_hide_on_ok");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Button *AcceptDialog_add_button__SWIG_0(AcceptDialog *self,String const &text,bool right=false,String const &action=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "add_button");
  const void* __args[3] = { &text, &right, &action };
  Button* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Button *AcceptDialog_add_cancel(AcceptDialog *self,String const &name){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "add_cancel");
  const void* __args[1] = { &name };
  Button* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN LineEdit *AcceptDialog_register_text_enter(AcceptDialog *self,Object *line_edit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "register_text_enter");
  const void* __args[1] = { line_edit };
  LineEdit* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void AcceptDialog_set_text(AcceptDialog *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "set_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AcceptDialog_get_text(AcceptDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AcceptDialog", "get_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_sprite_frames(AnimatedSprite *self,SpriteFrames *sprite_frames){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_sprite_frames");
  const void* __args[1] = { sprite_frames };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< SpriteFrames > AnimatedSprite_get_sprite_frames(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "get_sprite_frames");
  Ref<SpriteFrames> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_animation(AnimatedSprite *self,String const &animation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_animation");
  const void* __args[1] = { &animation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AnimatedSprite_get_animation(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "get_animation");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_play__SWIG_0(AnimatedSprite *self,String const &anim=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "play");
  const void* __args[1] = { &anim };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimatedSprite_stop(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool AnimatedSprite_is_playing(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_centered(AnimatedSprite *self,bool centered){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_centered");
  const void* __args[1] = { &centered };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimatedSprite_is_centered(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "is_centered");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_offset(AnimatedSprite *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 AnimatedSprite_get_offset(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_flip_h(AnimatedSprite *self,bool flip_h){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_flip_h");
  const void* __args[1] = { &flip_h };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimatedSprite_is_flipped_h(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "is_flipped_h");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_flip_v(AnimatedSprite *self,bool flip_v){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_flip_v");
  const void* __args[1] = { &flip_v };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool AnimatedSprite_is_flipped_v(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "is_flipped_v");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_frame(AnimatedSprite *self,int frame){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_frame");
  const void* __args[1] = { &frame };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimatedSprite_get_frame(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "get_frame");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite_set_modulate(AnimatedSprite *self,Color const &modulate){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "set_modulate");
  const void* __args[1] = { &modulate };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color AnimatedSprite_get_modulate(AnimatedSprite *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite3D_set_sprite_frames(AnimatedSprite3D *self,SpriteFrames *sprite_frames){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "set_sprite_frames");
  const void* __args[1] = { sprite_frames };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< SpriteFrames > AnimatedSprite3D_get_sprite_frames(AnimatedSprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "get_sprite_frames");
  Ref<SpriteFrames> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite3D_set_animation(AnimatedSprite3D *self,String const &animation){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "set_animation");
  const void* __args[1] = { &animation };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String AnimatedSprite3D_get_animation(AnimatedSprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "get_animation");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite3D_play__SWIG_0(AnimatedSprite3D *self,String const &anim=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "play");
  const void* __args[1] = { &anim };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void AnimatedSprite3D_stop(AnimatedSprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "stop");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool AnimatedSprite3D_is_playing(AnimatedSprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "is_playing");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void AnimatedSprite3D_set_frame(AnimatedSprite3D *self,int frame){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "set_frame");
  const void* __args[1] = { &frame };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int AnimatedSprite3D_get_frame(AnimatedSprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("AnimatedSprite3D", "get_frame");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_space_override_mode(Area *self,int enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_space_override_mode");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Area_get_space_override_mode(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_space_override_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_gravity_is_point(Area *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_gravity_is_point");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area_is_gravity_a_point(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "is_gravity_a_point");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_gravity_distance_scale(Area *self,float distance_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_gravity_distance_scale");
  const void* __args[1] = { &distance_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area_get_gravity_distance_scale(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_gravity_distance_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_gravity_vector(Area *self,Vector3 const &vector){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_gravity_vector");
  const void* __args[1] = { &vector };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector3 Area_get_gravity_vector(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_gravity_vector");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_gravity(Area *self,float gravity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_gravity");
  const void* __args[1] = { &gravity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area_get_gravity(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_gravity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_angular_damp(Area *self,float angular_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_angular_damp");
  const void* __args[1] = { &angular_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area_get_angular_damp(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_angular_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_linear_damp(Area *self,float linear_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_linear_damp");
  const void* __args[1] = { &linear_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area_get_linear_damp(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_linear_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_priority(Area *self,float priority){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_priority");
  const void* __args[1] = { &priority };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area_get_priority(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_priority");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_collision_mask(Area *self,int collision_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_collision_mask");
  const void* __args[1] = { &collision_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Area_get_collision_mask(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_collision_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_layer_mask(Area *self,int layer_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_layer_mask");
  const void* __args[1] = { &layer_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Area_get_layer_mask(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_collision_mask_bit(Area *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_collision_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area_get_collision_mask_bit(Area *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_collision_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Area_set_layer_mask_bit(Area *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_layer_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area_get_layer_mask_bit(Area *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_layer_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Area_set_monitorable(Area *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_monitorable");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area_is_monitorable(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "is_monitorable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area_set_enable_monitoring(Area *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "set_enable_monitoring");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area_is_monitoring_enabled(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "is_monitoring_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Area_get_overlapping_bodies(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_overlapping_bodies");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Area_get_overlapping_areas(Area *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "get_overlapping_areas");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Area_overlaps_body(Area *self,Object *body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "overlaps_body");
  const void* __args[1] = { body };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Area_overlaps_area(Area *self,Object *area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area", "overlaps_area");
  const void* __args[1] = { area };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BackBufferCopy_set_rect(BackBufferCopy *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BackBufferCopy", "set_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 BackBufferCopy_get_rect(BackBufferCopy *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BackBufferCopy", "get_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BackBufferCopy_set_copy_mode(BackBufferCopy *self,int copy_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BackBufferCopy", "set_copy_mode");
  const void* __args[1] = { &copy_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BackBufferCopy_get_copy_mode(BackBufferCopy *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BackBufferCopy", "get_copy_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BaseButton__pressed(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "_pressed");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void BaseButton__toggled(BaseButton *self,bool pressed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "_toggled");
  const void* __args[1] = { &pressed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void BaseButton_set_pressed(BaseButton *self,bool pressed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "set_pressed");
  const void* __args[1] = { &pressed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BaseButton_is_pressed(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "is_pressed");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool BaseButton_is_hovered(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "is_hovered");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BaseButton_set_toggle_mode(BaseButton *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "set_toggle_mode");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BaseButton_is_toggle_mode(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "is_toggle_mode");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BaseButton_set_disabled(BaseButton *self,bool disabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "set_disabled");
  const void* __args[1] = { &disabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BaseButton_is_disabled(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "is_disabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BaseButton_set_click_on_press(BaseButton *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "set_click_on_press");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool BaseButton_get_click_on_press(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "get_click_on_press");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int BaseButton_get_draw_mode(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "get_draw_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BaseButton_set_enabled_focus_mode(BaseButton *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "set_enabled_focus_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BaseButton_get_enabled_focus_mode(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "get_enabled_focus_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BaseButton_set_shortcut(BaseButton *self,Object *shortcut){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "set_shortcut");
  const void* __args[1] = { shortcut };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *BaseButton_get_shortcut(BaseButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BaseButton", "get_shortcut");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Button_set_text(Button *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "set_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String Button_get_text(Button *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "get_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Button_set_button_icon(Button *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "set_button_icon");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Button_get_button_icon(Button *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "get_button_icon");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Button_set_flat(Button *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "set_flat");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Button_set_clip_text(Button *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "set_clip_text");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Button_get_clip_text(Button *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "get_clip_text");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Button_set_text_align(Button *self,int align){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "set_text_align");
  const void* __args[1] = { &align };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Button_get_text_align(Button *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "get_text_align");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Button_is_flat(Button *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Button", "is_flat");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ButtonArray_add_button(ButtonArray *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "add_button");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ButtonArray_add_icon_button__SWIG_0(ButtonArray *self,Texture *icon,String const &text=""){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "add_icon_button");
  const void* __args[2] = { icon, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ButtonArray_set_button_text(ButtonArray *self,int button_idx,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "set_button_text");
  const void* __args[2] = { &button_idx, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ButtonArray_set_button_icon(ButtonArray *self,int button_idx,Texture *icon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "set_button_icon");
  const void* __args[2] = { &button_idx, icon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String ButtonArray_get_button_text(ButtonArray *self,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "get_button_text");
  const void* __args[1] = { &button_idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > ButtonArray_get_button_icon(ButtonArray *self,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "get_button_icon");
  const void* __args[1] = { &button_idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int ButtonArray_get_button_count(ButtonArray *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "get_button_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ButtonArray_get_selected(ButtonArray *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "get_selected");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ButtonArray_get_hovered(ButtonArray *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "get_hovered");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ButtonArray_set_selected(ButtonArray *self,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "set_selected");
  const void* __args[1] = { &button_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ButtonArray_erase_button(ButtonArray *self,int button_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "erase_button");
  const void* __args[1] = { &button_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void ButtonArray_clear(ButtonArray *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonArray", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Camera2D_set_offset(Camera2D *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Camera2D_get_offset(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_anchor_mode(Camera2D *self,int anchor_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_anchor_mode");
  const void* __args[1] = { &anchor_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Camera2D_get_anchor_mode(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_anchor_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_rotating(Camera2D *self,bool rotating){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_rotating");
  const void* __args[1] = { &rotating };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Camera2D_is_rotating(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "is_rotating");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_make_current(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "make_current");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Camera2D_clear_current(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "clear_current");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool Camera2D_is_current(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "is_current");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_limit(Camera2D *self,int margin,int limit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_limit");
  const void* __args[2] = { &margin, &limit };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Camera2D_get_limit(Camera2D *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_limit");
  const void* __args[1] = { &margin };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_v_drag_enabled(Camera2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_v_drag_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Camera2D_is_v_drag_enabled(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "is_v_drag_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_h_drag_enabled(Camera2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_h_drag_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Camera2D_is_h_drag_enabled(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "is_h_drag_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_v_offset(Camera2D *self,float ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_v_offset");
  const void* __args[1] = { &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Camera2D_get_v_offset(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_v_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_h_offset(Camera2D *self,float ofs){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_h_offset");
  const void* __args[1] = { &ofs };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Camera2D_get_h_offset(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_h_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_drag_margin(Camera2D *self,int margin,float drag_margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_drag_margin");
  const void* __args[2] = { &margin, &drag_margin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Camera2D_get_drag_margin(Camera2D *self,int margin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_drag_margin");
  const void* __args[1] = { &margin };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Camera2D_get_camera_pos(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_camera_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 Camera2D_get_camera_screen_center(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_camera_screen_center");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_zoom(Camera2D *self,Vector2 const &zoom){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_zoom");
  const void* __args[1] = { &zoom };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Camera2D_get_zoom(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_zoom");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_follow_smoothing(Camera2D *self,float follow_smoothing){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_follow_smoothing");
  const void* __args[1] = { &follow_smoothing };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Camera2D_get_follow_smoothing(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "get_follow_smoothing");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_set_enable_follow_smoothing(Camera2D *self,bool follow_smoothing){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "set_enable_follow_smoothing");
  const void* __args[1] = { &follow_smoothing };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Camera2D_is_follow_smoothing_enabled(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "is_follow_smoothing_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Camera2D_force_update_scroll(Camera2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Camera2D", "force_update_scroll");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void CanvasModulate_set_color(CanvasModulate *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasModulate", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color CanvasModulate_get_color(CanvasModulate *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CanvasModulate", "get_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionObject2D__input_event(CollisionObject2D *self,Object *viewport,InputEvent const &event,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "_input_event");
  const void* __args[3] = { viewport, &event, &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject2D_add_shape__SWIG_0(CollisionObject2D *self,Shape2D *shape,Matrix32 const &transform=Matrix32()){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "add_shape");
  const void* __args[2] = { shape, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CollisionObject2D_get_shape_count(CollisionObject2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "get_shape_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionObject2D_set_shape(CollisionObject2D *self,int shape_idx,Shape *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "set_shape");
  const void* __args[2] = { &shape_idx, shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject2D_set_shape_transform(CollisionObject2D *self,int shape_idx,Matrix32 const &transform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "set_shape_transform");
  const void* __args[2] = { &shape_idx, &transform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject2D_set_shape_as_trigger(CollisionObject2D *self,int shape_idx,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "set_shape_as_trigger");
  const void* __args[2] = { &shape_idx, &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Shape2D > CollisionObject2D_get_shape(CollisionObject2D *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "get_shape");
  const void* __args[1] = { &shape_idx };
  Ref<Shape2D> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Matrix32 CollisionObject2D_get_shape_transform(CollisionObject2D *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "get_shape_transform");
  const void* __args[1] = { &shape_idx };
  Matrix32 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool CollisionObject2D_is_shape_set_as_trigger(CollisionObject2D *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "is_shape_set_as_trigger");
  const void* __args[1] = { &shape_idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void CollisionObject2D_remove_shape(CollisionObject2D *self,int shape_idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "remove_shape");
  const void* __args[1] = { &shape_idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CollisionObject2D_clear_shapes(CollisionObject2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "clear_shapes");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN RID CollisionObject2D_get_rid(CollisionObject2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "get_rid");
  RID ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionObject2D_set_pickable(CollisionObject2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "set_pickable");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionObject2D_is_pickable(CollisionObject2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionObject2D", "is_pickable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionPolygon2D_set_polygon(CollisionPolygon2D *self,Vector2Array const &polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "set_polygon");
  const void* __args[1] = { &polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array CollisionPolygon2D_get_polygon(CollisionPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "get_polygon");
  Vector2Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionPolygon2D_set_build_mode(CollisionPolygon2D *self,int build_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "set_build_mode");
  const void* __args[1] = { &build_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int CollisionPolygon2D_get_build_mode(CollisionPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "get_build_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionPolygon2D_set_trigger(CollisionPolygon2D *self,bool trigger){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "set_trigger");
  const void* __args[1] = { &trigger };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionPolygon2D_is_trigger(CollisionPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "is_trigger");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int CollisionPolygon2D_get_collision_object_first_shape(CollisionPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "get_collision_object_first_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int CollisionPolygon2D_get_collision_object_last_shape(CollisionPolygon2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionPolygon2D", "get_collision_object_last_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionShape2D_set_shape(CollisionShape2D *self,Object *shape){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape2D", "set_shape");
  const void* __args[1] = { shape };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *CollisionShape2D_get_shape(CollisionShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape2D", "get_shape");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void CollisionShape2D_set_trigger(CollisionShape2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape2D", "set_trigger");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CollisionShape2D_is_trigger(CollisionShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape2D", "is_trigger");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int CollisionShape2D_get_collision_object_shape_index(CollisionShape2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CollisionShape2D", "get_collision_object_shape_index");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorPickerButton_set_color(ColorPickerButton *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPickerButton", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ColorPickerButton_get_color(ColorPickerButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPickerButton", "get_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN ColorPicker *ColorPickerButton_get_picker(ColorPickerButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPickerButton", "get_picker");
  ColorPicker* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorPickerButton_set_edit_alpha(ColorPickerButton *self,bool show){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPickerButton", "set_edit_alpha");
  const void* __args[1] = { &show };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ColorPickerButton_is_editing_alpha(ColorPickerButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPickerButton", "is_editing_alpha");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ConeTwistJoint_set_param(ConeTwistJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConeTwistJoint", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float ConeTwistJoint_get_param(ConeTwistJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConeTwistJoint", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Button *ConfirmationDialog_get_cancel(ConfirmationDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ConfirmationDialog", "get_cancel");
  Button* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Container_queue_sort(Container *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Container", "queue_sort");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Container_fit_child_in_rect(Container *self,Control *child,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Container", "fit_child_in_rect");
  const void* __args[2] = { child, &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void DirectionalLight_set_shadow_mode(DirectionalLight *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DirectionalLight", "set_shadow_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int DirectionalLight_get_shadow_mode(DirectionalLight *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DirectionalLight", "get_shadow_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void DirectionalLight_set_shadow_param(DirectionalLight *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DirectionalLight", "set_shadow_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float DirectionalLight_get_shadow_param(DirectionalLight *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DirectionalLight", "get_shadow_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_clear_filters(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "clear_filters");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void EditorFileDialog_add_filter(EditorFileDialog *self,String const &filter){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "add_filter");
  const void* __args[1] = { &filter };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String EditorFileDialog_get_current_dir(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_current_dir");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String EditorFileDialog_get_current_file(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_current_file");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String EditorFileDialog_get_current_path(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_current_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_set_current_dir(EditorFileDialog *self,String const &dir){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_current_dir");
  const void* __args[1] = { &dir };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorFileDialog_set_current_file(EditorFileDialog *self,String const &file){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_current_file");
  const void* __args[1] = { &file };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorFileDialog_set_current_path(EditorFileDialog *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_current_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void EditorFileDialog_set_mode(EditorFileDialog *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int EditorFileDialog_get_mode(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN VBoxContainer *EditorFileDialog_get_vbox(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_vbox");
  VBoxContainer* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_set_access(EditorFileDialog *self,int access){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_access");
  const void* __args[1] = { &access };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int EditorFileDialog_get_access(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_access");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_set_show_hidden_files(EditorFileDialog *self,bool show){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_show_hidden_files");
  const void* __args[1] = { &show };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool EditorFileDialog_is_showing_hidden_files(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "is_showing_hidden_files");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_set_display_mode(EditorFileDialog *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_display_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int EditorFileDialog_get_display_mode(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "get_display_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_set_disable_overwrite_warning(EditorFileDialog *self,bool disable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "set_disable_overwrite_warning");
  const void* __args[1] = { &disable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool EditorFileDialog_is_overwrite_warning_disabled(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "is_overwrite_warning_disabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void EditorFileDialog_invalidate(EditorFileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("EditorFileDialog", "invalidate");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void FileDialog_clear_filters(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "clear_filters");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void FileDialog_add_filter(FileDialog *self,String const &filter){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "add_filter");
  const void* __args[1] = { &filter };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String FileDialog_get_current_dir(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "get_current_dir");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String FileDialog_get_current_file(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "get_current_file");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN String FileDialog_get_current_path(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "get_current_path");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void FileDialog_set_current_dir(FileDialog *self,String const &dir){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "set_current_dir");
  const void* __args[1] = { &dir };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FileDialog_set_current_file(FileDialog *self,String const &file){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "set_current_file");
  const void* __args[1] = { &file };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FileDialog_set_current_path(FileDialog *self,String const &path){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "set_current_path");
  const void* __args[1] = { &path };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void FileDialog_set_mode(FileDialog *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int FileDialog_get_mode(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN VBoxContainer *FileDialog_get_vbox(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "get_vbox");
  VBoxContainer* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void FileDialog_set_access(FileDialog *self,int access){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "set_access");
  const void* __args[1] = { &access };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int FileDialog_get_access(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "get_access");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void FileDialog_set_show_hidden_files(FileDialog *self,bool show){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "set_show_hidden_files");
  const void* __args[1] = { &show };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool FileDialog_is_showing_hidden_files(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "is_showing_hidden_files");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void FileDialog_invalidate(FileDialog *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("FileDialog", "invalidate");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void Generic6DOFJoint_set_param_x(Generic6DOFJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "set_param_x");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Generic6DOFJoint_get_param_x(Generic6DOFJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "get_param_x");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Generic6DOFJoint_set_param_y(Generic6DOFJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "set_param_y");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Generic6DOFJoint_get_param_y(Generic6DOFJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "get_param_y");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Generic6DOFJoint_set_param_z(Generic6DOFJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "set_param_z");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Generic6DOFJoint_get_param_z(Generic6DOFJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "get_param_z");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Generic6DOFJoint_set_flag_x(Generic6DOFJoint *self,int flag,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "set_flag_x");
  const void* __args[2] = { &flag, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Generic6DOFJoint_get_flag_x(Generic6DOFJoint *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "get_flag_x");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Generic6DOFJoint_set_flag_y(Generic6DOFJoint *self,int flag,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "set_flag_y");
  const void* __args[2] = { &flag, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Generic6DOFJoint_get_flag_y(Generic6DOFJoint *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "get_flag_y");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Generic6DOFJoint_set_flag_z(Generic6DOFJoint *self,int flag,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "set_flag_z");
  const void* __args[2] = { &flag, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Generic6DOFJoint_get_flag_z(Generic6DOFJoint *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Generic6DOFJoint", "get_flag_z");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GraphNode_set_title(GraphNode *self,String const &title){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "set_title");
  const void* __args[1] = { &title };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String GraphNode_get_title(GraphNode *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_title");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GraphNode_set_slot(GraphNode *self,int idx,bool enable_left,int type_left,Color const &color_left,bool enable_right,int type_right,Color const &color_right){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "set_slot");
  const void* __args[7] = { &idx, &enable_left, &type_left, &color_left, &enable_right, &type_right, &color_right };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void GraphNode_clear_slot(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "clear_slot");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void GraphNode_clear_all_slots(GraphNode *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "clear_all_slots");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool GraphNode_is_slot_enabled_left(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "is_slot_enabled_left");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int GraphNode_get_slot_type_left(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_slot_type_left");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color GraphNode_get_slot_color_left(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_slot_color_left");
  const void* __args[1] = { &idx };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool GraphNode_is_slot_enabled_right(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "is_slot_enabled_right");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int GraphNode_get_slot_type_right(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_slot_type_right");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color GraphNode_get_slot_color_right(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_slot_color_right");
  const void* __args[1] = { &idx };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GraphNode_set_offset(GraphNode *self,Vector2 const &offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "set_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 GraphNode_get_offset(GraphNode *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int GraphNode_get_connection_output_count(GraphNode *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_output_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int GraphNode_get_connection_input_count(GraphNode *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_input_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 GraphNode_get_connection_output_pos(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_output_pos");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int GraphNode_get_connection_output_type(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_output_type");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color GraphNode_get_connection_output_color(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_output_color");
  const void* __args[1] = { &idx };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 GraphNode_get_connection_input_pos(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_input_pos");
  const void* __args[1] = { &idx };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int GraphNode_get_connection_input_type(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_input_type");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Color GraphNode_get_connection_input_color(GraphNode *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "get_connection_input_color");
  const void* __args[1] = { &idx };
  Color ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void GraphNode_set_show_close_button(GraphNode *self,bool show){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "set_show_close_button");
  const void* __args[1] = { &show };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool GraphNode_is_close_button_visible(GraphNode *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GraphNode", "is_close_button_visible");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GridContainer_set_columns(GridContainer *self,int columns){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridContainer", "set_columns");
  const void* __args[1] = { &columns };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int GridContainer_get_columns(GridContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GridContainer", "get_columns");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void HingeJoint_set_param(HingeJoint *self,int param,float value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HingeJoint", "set_param");
  const void* __args[2] = { &param, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float HingeJoint_get_param(HingeJoint *self,int param){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HingeJoint", "get_param");
  const void* __args[1] = { &param };
  float ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void HingeJoint_set_flag(HingeJoint *self,int flag,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HingeJoint", "set_flag");
  const void* __args[2] = { &flag, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool HingeJoint_get_flag(HingeJoint *self,int flag){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("HingeJoint", "get_flag");
  const void* __args[1] = { &flag };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Joint2D_set_node_a(Joint2D *self,NodePath const &node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "set_node_a");
  const void* __args[1] = { &node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath Joint2D_get_node_a(Joint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "get_node_a");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Joint2D_set_node_b(Joint2D *self,NodePath const &node){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "set_node_b");
  const void* __args[1] = { &node };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN NodePath Joint2D_get_node_b(Joint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "get_node_b");
  NodePath ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Joint2D_set_bias(Joint2D *self,float bias){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "set_bias");
  const void* __args[1] = { &bias };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Joint2D_get_bias(Joint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "get_bias");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Joint2D_set_exclude_nodes_from_collision(Joint2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "set_exclude_nodes_from_collision");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Joint2D_get_exclude_nodes_from_collision(Joint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Joint2D", "get_exclude_nodes_from_collision");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 KinematicBody_move(KinematicBody *self,Vector3 const &rel_vec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "move");
  const void* __args[1] = { &rel_vec };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector3 KinematicBody_move_to(KinematicBody *self,Vector3 const &position){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "move_to");
  const void* __args[1] = { &position };
  Vector3 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool KinematicBody_can_teleport_to(KinematicBody *self,Vector3 const &position){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "can_teleport_to");
  const void* __args[1] = { &position };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool KinematicBody_is_colliding(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "is_colliding");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 KinematicBody_get_collision_pos(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "get_collision_pos");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 KinematicBody_get_collision_normal(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "get_collision_normal");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector3 KinematicBody_get_collider_velocity(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "get_collider_velocity");
  Vector3 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *KinematicBody_get_collider(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "get_collider");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int KinematicBody_get_collider_shape(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "get_collider_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody_set_collide_with_static_bodies(KinematicBody *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "set_collide_with_static_bodies");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool KinematicBody_can_collide_with_static_bodies(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "can_collide_with_static_bodies");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody_set_collide_with_kinematic_bodies(KinematicBody *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "set_collide_with_kinematic_bodies");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool KinematicBody_can_collide_with_kinematic_bodies(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "can_collide_with_kinematic_bodies");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody_set_collide_with_rigid_bodies(KinematicBody *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "set_collide_with_rigid_bodies");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool KinematicBody_can_collide_with_rigid_bodies(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "can_collide_with_rigid_bodies");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody_set_collide_with_character_bodies(KinematicBody *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "set_collide_with_character_bodies");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool KinematicBody_can_collide_with_character_bodies(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "can_collide_with_character_bodies");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody_set_collision_margin(KinematicBody *self,float pixels){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "set_collision_margin");
  const void* __args[1] = { &pixels };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float KinematicBody_get_collision_margin(KinematicBody *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody", "get_collision_margin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_enabled(Light2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Light2D_is_enabled(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_texture(Light2D *self,Object *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Object *Light2D_get_texture(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_texture");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_texture_offset(Light2D *self,Vector2 const &texture_offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_texture_offset");
  const void* __args[1] = { &texture_offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Light2D_get_texture_offset(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_texture_offset");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_color(Light2D *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Light2D_get_color(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_height(Light2D *self,float height){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_height");
  const void* __args[1] = { &height };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Light2D_get_height(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_height");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_energy(Light2D *self,float energy){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_energy");
  const void* __args[1] = { &energy };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Light2D_get_energy(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_energy");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_texture_scale(Light2D *self,float texture_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_texture_scale");
  const void* __args[1] = { &texture_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Light2D_get_texture_scale(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_texture_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_z_range_min(Light2D *self,int z){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_z_range_min");
  const void* __args[1] = { &z };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_z_range_min(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_z_range_min");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_z_range_max(Light2D *self,int z){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_z_range_max");
  const void* __args[1] = { &z };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_z_range_max(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_z_range_max");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_layer_range_min(Light2D *self,int layer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_layer_range_min");
  const void* __args[1] = { &layer };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_layer_range_min(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_layer_range_min");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_layer_range_max(Light2D *self,int layer){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_layer_range_max");
  const void* __args[1] = { &layer };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_layer_range_max(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_layer_range_max");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_item_mask(Light2D *self,int item_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_item_mask");
  const void* __args[1] = { &item_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_item_mask(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_item_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_item_shadow_mask(Light2D *self,int item_shadow_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_item_shadow_mask");
  const void* __args[1] = { &item_shadow_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_item_shadow_mask(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_item_shadow_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_mode(Light2D *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_mode(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_shadow_enabled(Light2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_shadow_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Light2D_is_shadow_enabled(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "is_shadow_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_shadow_buffer_size(Light2D *self,int size){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_shadow_buffer_size");
  const void* __args[1] = { &size };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Light2D_get_shadow_buffer_size(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_shadow_buffer_size");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_shadow_esm_multiplier(Light2D *self,float multiplier){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_shadow_esm_multiplier");
  const void* __args[1] = { &multiplier };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Light2D_get_shadow_esm_multiplier(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_shadow_esm_multiplier");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Light2D_set_shadow_color(Light2D *self,Color const &shadow_color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "set_shadow_color");
  const void* __args[1] = { &shadow_color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color Light2D_get_shadow_color(Light2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Light2D", "get_shadow_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LightOccluder2D_set_occluder_polygon(LightOccluder2D *self,OccluderPolygon2D *polygon){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LightOccluder2D", "set_occluder_polygon");
  const void* __args[1] = { polygon };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< OccluderPolygon2D > LightOccluder2D_get_occluder_polygon(LightOccluder2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LightOccluder2D", "get_occluder_polygon");
  Ref<OccluderPolygon2D> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LightOccluder2D_set_occluder_light_mask(LightOccluder2D *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LightOccluder2D", "set_occluder_light_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int LightOccluder2D_get_occluder_light_mask(LightOccluder2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LightOccluder2D", "get_occluder_light_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LinkButton_set_text(LinkButton *self,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LinkButton", "set_text");
  const void* __args[1] = { &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String LinkButton_get_text(LinkButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LinkButton", "get_text");
  String ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void LinkButton_set_underline_mode(LinkButton *self,int underline_mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LinkButton", "set_underline_mode");
  const void* __args[1] = { &underline_mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int LinkButton_get_underline_mode(LinkButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("LinkButton", "get_underline_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN PopupMenu *MenuButton_get_popup(MenuButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("MenuButton", "get_popup");
  PopupMenu* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int Navigation2D_navpoly_create__SWIG_0(Navigation2D *self,NavigationPolygon *mesh,Matrix32 const &xform,Object *owner=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation2D", "navpoly_create");
  const void* __args[3] = { mesh, &xform, owner };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Navigation2D_navpoly_set_transform(Navigation2D *self,int id,Matrix32 const &xform){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation2D", "navpoly_set_transform");
  const void* __args[2] = { &id, &xform };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void Navigation2D_navpoly_remove(Navigation2D *self,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation2D", "navpoly_remove");
  const void* __args[1] = { &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2Array Navigation2D_get_simple_path__SWIG_0(Navigation2D *self,Vector2 const &start,Vector2 const &end,bool optimize=true){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation2D", "get_simple_path");
  const void* __args[3] = { &start, &end, &optimize };
  Vector2Array ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 Navigation2D_get_closest_point(Navigation2D *self,Vector2 const &to_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation2D", "get_closest_point");
  const void* __args[1] = { &to_point };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Object *Navigation2D_get_closest_point_owner(Navigation2D *self,Vector2 const &to_point){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Navigation2D", "get_closest_point_owner");
  const void* __args[1] = { &to_point };
  Object* ret = NULL;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void NavigationPolygonInstance_set_navigation_polygon(NavigationPolygonInstance *self,NavigationPolygon *navpoly){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygonInstance", "set_navigation_polygon");
  const void* __args[1] = { navpoly };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< NavigationPolygon > NavigationPolygonInstance_get_navigation_polygon(NavigationPolygonInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygonInstance", "get_navigation_polygon");
  Ref<NavigationPolygon> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void NavigationPolygonInstance_set_enabled(NavigationPolygonInstance *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygonInstance", "set_enabled");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool NavigationPolygonInstance_is_enabled(NavigationPolygonInstance *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("NavigationPolygonInstance", "is_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void OptionButton_add_item__SWIG_0(OptionButton *self,String const &label,int id=-1){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "add_item");
  const void* __args[2] = { &label, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void OptionButton_add_icon_item(OptionButton *self,Texture *texture,String const &label,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "add_icon_item");
  const void* __args[3] = { texture, &label, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void OptionButton_set_item_text(OptionButton *self,int idx,String const &text){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "set_item_text");
  const void* __args[2] = { &idx, &text };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void OptionButton_set_item_icon(OptionButton *self,int idx,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "set_item_icon");
  const void* __args[2] = { &idx, texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void OptionButton_set_item_disabled(OptionButton *self,int idx,bool disabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "set_item_disabled");
  const void* __args[2] = { &idx, &disabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void OptionButton_set_item_ID(OptionButton *self,int idx,int id){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "set_item_ID");
  const void* __args[2] = { &idx, &id };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void OptionButton_set_item_metadata(OptionButton *self,int idx,Variant const &metadata){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "set_item_metadata");
  const void* __args[2] = { &idx, &metadata };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN String OptionButton_get_item_text(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_item_text");
  const void* __args[1] = { &idx };
  String ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > OptionButton_get_item_icon(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_item_icon");
  const void* __args[1] = { &idx };
  Ref<Texture> ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int OptionButton_get_item_ID(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_item_ID");
  const void* __args[1] = { &idx };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void OptionButton_get_item_metadata(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_item_metadata");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool OptionButton_is_item_disabled(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "is_item_disabled");
  const void* __args[1] = { &idx };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN int OptionButton_get_item_count(OptionButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_item_count");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void OptionButton_add_separator(OptionButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "add_separator");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void OptionButton_clear(OptionButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "clear");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void OptionButton_select(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "select");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int OptionButton_get_selected(OptionButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_selected");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int OptionButton_get_selected_ID(OptionButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_selected_ID");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void OptionButton_get_selected_metadata(OptionButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "get_selected_metadata");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void OptionButton_remove_item(OptionButton *self,int idx){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("OptionButton", "remove_item");
  const void* __args[1] = { &idx };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsBody2D_set_layer_mask(PhysicsBody2D *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "set_layer_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsBody2D_get_layer_mask(PhysicsBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody2D_set_collision_mask(PhysicsBody2D *self,int mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "set_collision_mask");
  const void* __args[1] = { &mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int PhysicsBody2D_get_collision_mask(PhysicsBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "get_collision_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody2D_set_collision_mask_bit(PhysicsBody2D *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "set_collision_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsBody2D_get_collision_mask_bit(PhysicsBody2D *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "get_collision_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody2D_set_layer_mask_bit(PhysicsBody2D *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "set_layer_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool PhysicsBody2D_get_layer_mask_bit(PhysicsBody2D *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "get_layer_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody2D_set_one_way_collision_direction(PhysicsBody2D *self,Vector2 const &dir){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "set_one_way_collision_direction");
  const void* __args[1] = { &dir };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 PhysicsBody2D_get_one_way_collision_direction(PhysicsBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "get_one_way_collision_direction");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody2D_set_one_way_collision_max_depth(PhysicsBody2D *self,float depth){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "set_one_way_collision_max_depth");
  const void* __args[1] = { &depth };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PhysicsBody2D_get_one_way_collision_max_depth(PhysicsBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "get_one_way_collision_max_depth");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void PhysicsBody2D_add_collision_exception_with(PhysicsBody2D *self,PhysicsBody2D *body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "add_collision_exception_with");
  const void* __args[1] = { body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PhysicsBody2D_remove_collision_exception_with(PhysicsBody2D *self,PhysicsBody2D *body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PhysicsBody2D", "remove_collision_exception_with");
  const void* __args[1] = { body };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void PinJoint2D_set_softness(PinJoint2D *self,float softness){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PinJoint2D", "set_softness");
  const void* __args[1] = { &softness };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float PinJoint2D_get_softness(PinJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("PinJoint2D", "get_softness");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ProgressBar_set_percent_visible(ProgressBar *self,bool visible){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProgressBar", "set_percent_visible");
  const void* __args[1] = { &visible };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ProgressBar_is_percent_visible(ProgressBar *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ProgressBar", "is_percent_visible");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D__integrate_forces(RigidBody2D *self,Physics2DDirectBodyState *state){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "_integrate_forces");
  const void* __args[1] = { state };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody2D_set_mode(RigidBody2D *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RigidBody2D_get_mode(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_mass(RigidBody2D *self,float mass){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_mass");
  const void* __args[1] = { &mass };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_mass(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_mass");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float RigidBody2D_get_inertia(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_inertia");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_inertia(RigidBody2D *self,float inertia){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_inertia");
  const void* __args[1] = { &inertia };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody2D_set_weight(RigidBody2D *self,float weight){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_weight");
  const void* __args[1] = { &weight };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_weight(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_weight");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_friction(RigidBody2D *self,float friction){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_friction");
  const void* __args[1] = { &friction };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_friction(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_friction");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_bounce(RigidBody2D *self,float bounce){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_bounce");
  const void* __args[1] = { &bounce };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_bounce(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_bounce");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_gravity_scale(RigidBody2D *self,float gravity_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_gravity_scale");
  const void* __args[1] = { &gravity_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_gravity_scale(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_gravity_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_linear_damp(RigidBody2D *self,float linear_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_linear_damp");
  const void* __args[1] = { &linear_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_linear_damp(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_linear_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_angular_damp(RigidBody2D *self,float angular_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_angular_damp");
  const void* __args[1] = { &angular_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_angular_damp(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_angular_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_linear_velocity(RigidBody2D *self,Vector2 const &linear_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_linear_velocity");
  const void* __args[1] = { &linear_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 RigidBody2D_get_linear_velocity(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_linear_velocity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_angular_velocity(RigidBody2D *self,float angular_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_angular_velocity");
  const void* __args[1] = { &angular_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_angular_velocity(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_angular_velocity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_max_contacts_reported(RigidBody2D *self,int amount){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_max_contacts_reported");
  const void* __args[1] = { &amount };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RigidBody2D_get_max_contacts_reported(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_max_contacts_reported");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_use_custom_integrator(RigidBody2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_use_custom_integrator");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody2D_is_using_custom_integrator(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "is_using_custom_integrator");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_contact_monitor(RigidBody2D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_contact_monitor");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody2D_is_contact_monitor_enabled(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "is_contact_monitor_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_continuous_collision_detection_mode(RigidBody2D *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_continuous_collision_detection_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int RigidBody2D_get_continuous_collision_detection_mode(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_continuous_collision_detection_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_axis_velocity(RigidBody2D *self,Vector2 const &axis_velocity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_axis_velocity");
  const void* __args[1] = { &axis_velocity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody2D_apply_impulse(RigidBody2D *self,Vector2 const &offset,Vector2 const &impulse){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "apply_impulse");
  const void* __args[2] = { &offset, &impulse };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody2D_set_applied_force(RigidBody2D *self,Vector2 const &force){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_applied_force");
  const void* __args[1] = { &force };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 RigidBody2D_get_applied_force(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_applied_force");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_applied_torque(RigidBody2D *self,float torque){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_applied_torque");
  const void* __args[1] = { &torque };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float RigidBody2D_get_applied_torque(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_applied_torque");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_add_force(RigidBody2D *self,Vector2 const &offset,Vector2 const &force){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "add_force");
  const void* __args[2] = { &offset, &force };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void RigidBody2D_set_sleeping(RigidBody2D *self,bool sleeping){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_sleeping");
  const void* __args[1] = { &sleeping };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody2D_is_sleeping(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "is_sleeping");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void RigidBody2D_set_can_sleep(RigidBody2D *self,bool able_to_sleep){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "set_can_sleep");
  const void* __args[1] = { &able_to_sleep };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool RigidBody2D_is_able_to_sleep(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "is_able_to_sleep");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool RigidBody2D_test_motion__SWIG_0(RigidBody2D *self,Vector2 const &motion,float margin=0.08,Physics2DTestMotionResult *result=NULL){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "test_motion");
  const void* __args[3] = { &motion, &margin, result };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Array RigidBody2D_get_colliding_bodies(RigidBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("RigidBody2D", "get_colliding_bodies");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer2D_set_sample_library(SamplePlayer2D *self,SampleLibrary *library){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "set_sample_library");
  const void* __args[1] = { library };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< SampleLibrary > SamplePlayer2D_get_sample_library(SamplePlayer2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "get_sample_library");
  Ref<SampleLibrary> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer2D_set_polyphony(SamplePlayer2D *self,int max_voices){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "set_polyphony");
  const void* __args[1] = { &max_voices };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SamplePlayer2D_get_polyphony(SamplePlayer2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "get_polyphony");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int SamplePlayer2D_play__SWIG_0(SamplePlayer2D *self,String const &sample,int voice=-2){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "play");
  const void* __args[2] = { &sample, &voice };
  int ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer2D_voice_set_pitch_scale(SamplePlayer2D *self,int voice,float ratio){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "voice_set_pitch_scale");
  const void* __args[2] = { &voice, &ratio };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer2D_voice_set_volume_scale_db(SamplePlayer2D *self,int voice,float db){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "voice_set_volume_scale_db");
  const void* __args[2] = { &voice, &db };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SamplePlayer2D_is_voice_active(SamplePlayer2D *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "is_voice_active");
  const void* __args[1] = { &voice };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void SamplePlayer2D_stop_voice(SamplePlayer2D *self,int voice){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "stop_voice");
  const void* __args[1] = { &voice };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void SamplePlayer2D_stop_all(SamplePlayer2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "stop_all");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN void SamplePlayer2D_set_random_pitch_scale(SamplePlayer2D *self,float val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "set_random_pitch_scale");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float SamplePlayer2D_get_random_pitch_scale(SamplePlayer2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SamplePlayer2D", "get_random_pitch_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ScrollContainer_set_enable_h_scroll(ScrollContainer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "set_enable_h_scroll");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ScrollContainer_is_h_scroll_enabled(ScrollContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "is_h_scroll_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ScrollContainer_set_enable_v_scroll(ScrollContainer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "set_enable_v_scroll");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ScrollContainer_is_v_scroll_enabled(ScrollContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "is_v_scroll_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ScrollContainer_set_h_scroll(ScrollContainer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "set_h_scroll");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ScrollContainer_get_h_scroll(ScrollContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "get_h_scroll");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ScrollContainer_set_v_scroll(ScrollContainer *self,int val){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "set_v_scroll");
  const void* __args[1] = { &val };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int ScrollContainer_get_v_scroll(ScrollContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ScrollContainer", "get_v_scroll");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SplitContainer_set_split_offset(SplitContainer *self,int offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SplitContainer", "set_split_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SplitContainer_get_split_offset(SplitContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SplitContainer", "get_split_offset");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SplitContainer_set_collapsed(SplitContainer *self,bool collapsed){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SplitContainer", "set_collapsed");
  const void* __args[1] = { &collapsed };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool SplitContainer_is_collapsed(SplitContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SplitContainer", "is_collapsed");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void SplitContainer_set_dragger_visibility(SplitContainer *self,int mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SplitContainer", "set_dragger_visibility");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int SplitContainer_get_dragger_visibility(SplitContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("SplitContainer", "get_dragger_visibility");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite3D_set_texture(Sprite3D *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "set_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > Sprite3D_get_texture(Sprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "get_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite3D_set_region(Sprite3D *self,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "set_region");
  const void* __args[1] = { &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Sprite3D_is_region(Sprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "is_region");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite3D_set_region_rect(Sprite3D *self,Rect2 const &rect){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "set_region_rect");
  const void* __args[1] = { &rect };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Rect2 Sprite3D_get_region_rect(Sprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "get_region_rect");
  Rect2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite3D_set_frame(Sprite3D *self,int frame){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "set_frame");
  const void* __args[1] = { &frame };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sprite3D_get_frame(Sprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "get_frame");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite3D_set_vframes(Sprite3D *self,int vframes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "set_vframes");
  const void* __args[1] = { &vframes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sprite3D_get_vframes(Sprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "get_vframes");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Sprite3D_set_hframes(Sprite3D *self,int hframes){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "set_hframes");
  const void* __args[1] = { &hframes };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Sprite3D_get_hframes(Sprite3D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Sprite3D", "get_hframes");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StaticBody2D_set_constant_linear_velocity(StaticBody2D *self,Vector2 const &vel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "set_constant_linear_velocity");
  const void* __args[1] = { &vel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void StaticBody2D_set_constant_angular_velocity(StaticBody2D *self,float vel){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "set_constant_angular_velocity");
  const void* __args[1] = { &vel };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 StaticBody2D_get_constant_linear_velocity(StaticBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "get_constant_linear_velocity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN float StaticBody2D_get_constant_angular_velocity(StaticBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "get_constant_angular_velocity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StaticBody2D_set_friction(StaticBody2D *self,float friction){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "set_friction");
  const void* __args[1] = { &friction };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StaticBody2D_get_friction(StaticBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "get_friction");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void StaticBody2D_set_bounce(StaticBody2D *self,float bounce){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "set_bounce");
  const void* __args[1] = { &bounce };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float StaticBody2D_get_bounce(StaticBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("StaticBody2D", "get_bounce");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void TextureButton_set_normal_texture(TextureButton *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_normal_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_pressed_texture(TextureButton *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_pressed_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_hover_texture(TextureButton *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_hover_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_disabled_texture(TextureButton *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_disabled_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_focused_texture(TextureButton *self,Texture *texture){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_focused_texture");
  const void* __args[1] = { texture };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_click_mask(TextureButton *self,BitMap *mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_click_mask");
  const void* __args[1] = { mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_texture_scale(TextureButton *self,Vector2 const &scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_texture_scale");
  const void* __args[1] = { &scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void TextureButton_set_modulate(TextureButton *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "set_modulate");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Ref< Texture > TextureButton_get_normal_texture(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_normal_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > TextureButton_get_pressed_texture(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_pressed_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > TextureButton_get_hover_texture(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_hover_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > TextureButton_get_disabled_texture(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_disabled_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< Texture > TextureButton_get_focused_texture(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_focused_texture");
  Ref<Texture> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Ref< BitMap > TextureButton_get_click_mask(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_click_mask");
  Ref<BitMap> ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 TextureButton_get_texture_scale(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_texture_scale");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Color TextureButton_get_modulate(TextureButton *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("TextureButton", "get_modulate");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void VisibilityEnabler2D_set_enabler(VisibilityEnabler2D *self,int enabler,bool enabled){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityEnabler2D", "set_enabler");
  const void* __args[2] = { &enabler, &enabled };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool VisibilityEnabler2D_is_enabler_enabled(VisibilityEnabler2D *self,int enabler){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("VisibilityEnabler2D", "is_enabler_enabled");
  const void* __args[1] = { &enabler };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_space_override_mode(Area2D *self,int enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_space_override_mode");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Area2D_get_space_override_mode(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_space_override_mode");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_gravity_is_point(Area2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_gravity_is_point");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area2D_is_gravity_a_point(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "is_gravity_a_point");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_gravity_distance_scale(Area2D *self,float distance_scale){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_gravity_distance_scale");
  const void* __args[1] = { &distance_scale };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area2D_get_gravity_distance_scale(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_gravity_distance_scale");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_gravity_vector(Area2D *self,Vector2 const &vector){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_gravity_vector");
  const void* __args[1] = { &vector };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Vector2 Area2D_get_gravity_vector(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_gravity_vector");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_gravity(Area2D *self,float gravity){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_gravity");
  const void* __args[1] = { &gravity };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area2D_get_gravity(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_gravity");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_linear_damp(Area2D *self,float linear_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_linear_damp");
  const void* __args[1] = { &linear_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area2D_get_linear_damp(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_linear_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_angular_damp(Area2D *self,float angular_damp){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_angular_damp");
  const void* __args[1] = { &angular_damp };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area2D_get_angular_damp(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_angular_damp");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_priority(Area2D *self,float priority){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_priority");
  const void* __args[1] = { &priority };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float Area2D_get_priority(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_priority");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_collision_mask(Area2D *self,int collision_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_collision_mask");
  const void* __args[1] = { &collision_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Area2D_get_collision_mask(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_collision_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_layer_mask(Area2D *self,int layer_mask){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_layer_mask");
  const void* __args[1] = { &layer_mask };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int Area2D_get_layer_mask(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_layer_mask");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_collision_mask_bit(Area2D *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_collision_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area2D_get_collision_mask_bit(Area2D *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_collision_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_layer_mask_bit(Area2D *self,int bit,bool value){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_layer_mask_bit");
  const void* __args[2] = { &bit, &value };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area2D_get_layer_mask_bit(Area2D *self,int bit){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_layer_mask_bit");
  const void* __args[1] = { &bit };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_enable_monitoring(Area2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_enable_monitoring");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area2D_is_monitoring_enabled(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "is_monitoring_enabled");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void Area2D_set_monitorable(Area2D *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "set_monitorable");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool Area2D_is_monitorable(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "is_monitorable");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Area2D_get_overlapping_bodies(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_overlapping_bodies");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array Area2D_get_overlapping_areas(Area2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "get_overlapping_areas");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN bool Area2D_overlaps_body(Area2D *self,Object *body){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "overlaps_body");
  const void* __args[1] = { body };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool Area2D_overlaps_area(Area2D *self,Object *area){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("Area2D", "overlaps_area");
  const void* __args[1] = { area };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN void BoxContainer_add_spacer(BoxContainer *self,bool begin){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BoxContainer", "add_spacer");
  const void* __args[1] = { &begin };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN int BoxContainer_get_alignment(BoxContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BoxContainer", "get_alignment");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void BoxContainer_set_alignment(BoxContainer *self,int alignment){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("BoxContainer", "set_alignment");
  const void* __args[1] = { &alignment };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN BaseButton *ButtonGroup_get_pressed_button(ButtonGroup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonGroup", "get_pressed_button");
  BaseButton* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int ButtonGroup_get_pressed_button_index(ButtonGroup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonGroup", "get_pressed_button_index");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN BaseButton *ButtonGroup_get_focused_button(ButtonGroup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonGroup", "get_focused_button");
  BaseButton* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Array ButtonGroup_get_button_list(ButtonGroup *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonGroup", "get_button_list");
  Array ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ButtonGroup_set_pressed_button(ButtonGroup *self,BaseButton *button){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ButtonGroup", "set_pressed_button");
  const void* __args[1] = { button };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void CenterContainer_set_use_top_left(CenterContainer *self,bool enable){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CenterContainer", "set_use_top_left");
  const void* __args[1] = { &enable };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool CenterContainer_is_using_top_left(CenterContainer *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("CenterContainer", "is_using_top_left");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorPicker_set_color(ColorPicker *self,Color const &color){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "set_color");
  const void* __args[1] = { &color };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN Color ColorPicker_get_color(ColorPicker *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "get_color");
  Color ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorPicker_set_raw_mode(ColorPicker *self,bool mode){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "set_raw_mode");
  const void* __args[1] = { &mode };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ColorPicker_is_raw_mode(ColorPicker *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "is_raw_mode");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorPicker_set_edit_alpha(ColorPicker *self,bool show){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "set_edit_alpha");
  const void* __args[1] = { &show };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN bool ColorPicker_is_editing_alpha(ColorPicker *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "is_editing_alpha");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void ColorPicker_add_preset(ColorPicker *self,Color const &arg0_){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("ColorPicker", "add_preset");
  const void* __args[1] = { &arg0_ };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN void DampedSpringJoint2D_set_length(DampedSpringJoint2D *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "set_length");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float DampedSpringJoint2D_get_length(DampedSpringJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void DampedSpringJoint2D_set_rest_length(DampedSpringJoint2D *self,float rest_length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "set_rest_length");
  const void* __args[1] = { &rest_length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float DampedSpringJoint2D_get_rest_length(DampedSpringJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "get_rest_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void DampedSpringJoint2D_set_stiffness(DampedSpringJoint2D *self,float stiffness){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "set_stiffness");
  const void* __args[1] = { &stiffness };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float DampedSpringJoint2D_get_stiffness(DampedSpringJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "get_stiffness");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void DampedSpringJoint2D_set_damping(DampedSpringJoint2D *self,float damping){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "set_damping");
  const void* __args[1] = { &damping };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float DampedSpringJoint2D_get_damping(DampedSpringJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("DampedSpringJoint2D", "get_damping");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GrooveJoint2D_set_length(GrooveJoint2D *self,float length){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GrooveJoint2D", "set_length");
  const void* __args[1] = { &length };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GrooveJoint2D_get_length(GrooveJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GrooveJoint2D", "get_length");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void GrooveJoint2D_set_initial_offset(GrooveJoint2D *self,float offset){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GrooveJoint2D", "set_initial_offset");
  const void* __args[1] = { &offset };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float GrooveJoint2D_get_initial_offset(GrooveJoint2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("GrooveJoint2D", "get_initial_offset");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 KinematicBody2D_move(KinematicBody2D *self,Vector2 const &rel_vec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "move");
  const void* __args[1] = { &rel_vec };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 KinematicBody2D_move_to(KinematicBody2D *self,Vector2 const &position){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "move_to");
  const void* __args[1] = { &position };
  Vector2 ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN bool KinematicBody2D_test_move(KinematicBody2D *self,Vector2 const &rel_vec){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "test_move");
  const void* __args[1] = { &rel_vec };
  bool ret;
  __method_bind->ptrcall(self, __args, &ret);
  return ret;
}
SWIGINTERN Vector2 KinematicBody2D_get_travel(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_travel");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody2D_revert_motion(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "revert_motion");
  __method_bind->ptrcall(self, NULL, NULL);
}
SWIGINTERN bool KinematicBody2D_is_colliding(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "is_colliding");
  bool ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 KinematicBody2D_get_collision_pos(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collision_pos");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 KinematicBody2D_get_collision_normal(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collision_normal");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Vector2 KinematicBody2D_get_collider_velocity(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collider_velocity");
  Vector2 ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Object *KinematicBody2D_get_collider(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collider");
  Object* ret = NULL;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN int KinematicBody2D_get_collider_shape(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collider_shape");
  int ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN Variant KinematicBody2D_get_collider_metadata(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collider_metadata");
  Variant ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}
SWIGINTERN void KinematicBody2D_set_collision_margin(KinematicBody2D *self,float pixels){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "set_collision_margin");
  const void* __args[1] = { &pixels };
  __method_bind->ptrcall(self, __args, NULL);
}
SWIGINTERN float KinematicBody2D_get_collision_margin(KinematicBody2D *self){
  static MethodBind* __method_bind = NULL;
  if (!__method_bind)
    __method_bind = ObjectTypeDB::get_method("KinematicBody2D", "get_collision_margin");
  float ret;
  __method_bind->ptrcall(self, NULL, &ret);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePath__SWIG_0() {
  void * jresult ;
  NodePath *result = 0 ;
  
  result = (NodePath *)memnew(NodePath());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePath__SWIG_1(wchar_t * jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  NodePath *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg1_str = jarg1;
  arg1 = &arg1_str; 
  result = (NodePath *)memnew(NodePath((String const &)*arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodePath(void * jarg1) {
  NodePath *arg1 = (NodePath *) 0 ;
  
  arg1 = (NodePath *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)memnew(Vector2());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix32() {
  void * jresult ;
  Matrix32 *result = 0 ;
  
  result = (Matrix32 *)memnew(Matrix32());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix32(void * jarg1) {
  Matrix32 *arg1 = (Matrix32 *) 0 ;
  
  arg1 = (Matrix32 *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Variant_operator_to_bool(void * jarg1) {
  unsigned int jresult ;
  Variant *arg1 = (Variant *) 0 ;
  bool result;
  
  arg1 = (Variant *)jarg1; 
  result = (bool)((Variant const *)arg1)->operator bool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Variant_operator_to_int(void * jarg1) {
  int jresult ;
  Variant *arg1 = (Variant *) 0 ;
  int result;
  
  arg1 = (Variant *)jarg1; 
  result = (int)((Variant const *)arg1)->operator int();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Variant_operator_to_float(void * jarg1) {
  float jresult ;
  Variant *arg1 = (Variant *) 0 ;
  float result;
  
  arg1 = (Variant *)jarg1; 
  result = (float)((Variant const *)arg1)->operator float();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_String(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  String result;
  
  arg1 = (Variant *)jarg1; 
  result = ((Variant const *)arg1)->operator String();
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Variant_operator_to_Vector2(void * jarg1) {
  Vector2 jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Vector2 result;
  
  arg1 = (Variant *)jarg1; 
  result = ((Variant const *)arg1)->operator Vector2();
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Matrix32(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Matrix32 result;
  
  arg1 = (Variant *)jarg1; 
  result = ((Variant const *)arg1)->operator Matrix32();
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Object(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Variant *)jarg1; 
  result = (Object *)((Variant const *)arg1)->operator Object*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Node(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Variant *)jarg1; 
  result = (Node *)((Variant const *)arg1)->operator Node*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Control(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Control *result = 0 ;
  
  arg1 = (Variant *)jarg1; 
  result = (Control *)((Variant const *)arg1)->operator Control*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_0() {
  void * jresult ;
  Variant *result = 0 ;
  
  result = (Variant *)memnew(Variant());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  Variant *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (Variant *)memnew(Variant(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  Variant *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Variant *)memnew(Variant(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  Variant *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Variant *)memnew(Variant(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_4(wchar_t * jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  Variant *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg1_str = jarg1;
  arg1 = &arg1_str; 
  result = (Variant *)memnew(Variant((String const &)*arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_5(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Variant *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  result = (Variant *)memnew(Variant((Object const *)arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_6(void * jarg1) {
  void * jresult ;
  Matrix32 *arg1 = 0 ;
  Variant *result = 0 ;
  
  arg1 = (Matrix32 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = (Variant *)memnew(Variant((Matrix32 const &)*arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_7(Vector2* jarg1) {
  void * jresult ;
  Vector2 *arg1 = 0 ;
  Variant *result = 0 ;
  
  arg1 = (Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Variant *)memnew(Variant((Vector2 const &)*arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Variant(void * jarg1) {
  Variant *arg1 = (Variant *) 0 ;
  
  arg1 = (Variant *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_3(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_4(void * jarg1, wchar_t * jarg2, void * jarg3) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_5(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (arg1)->call((String const &)*arg2);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_3(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_4(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_5(void * jarg1, wchar_t * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  (arg1)->call_deferred((String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_callv(void * jarg1, wchar_t * jarg2, void * jarg3) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Array *arg3 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = (arg1)->callv((String const &)*arg2,(Array const &)*arg3);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object() {
  void * jresult ;
  Object *result = 0 ;
  
  result = (Object *)memnew(Object());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__get(void * jarg1, wchar_t * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object__get(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object__get_property_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object__get_property_list(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__init(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  Object__init(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__notification(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  Object__notification(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__set(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object__set(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_free(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  Object_free(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_type(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_type(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_type(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_is_type(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_set(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_get(void * jarg1, wchar_t * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_get(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_property_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_property_list(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_method_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_method_list(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_notification__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Object_notification__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_notification__SWIG_1(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  Object_notification__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_get_instance_ID(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)Object_get_instance_ID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_script(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  Script *arg2 = (Script *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (Script *)jarg2; 
  Object_set_script(arg1,arg2);
}


SWIGEXPORT Script* SWIGSTDCALL CSharp_Object_get_script(void * jarg1) {
  Script* jresult ;
  Object *arg1 = (Object *) 0 ;
  Ref< Script > result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_script(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_meta(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_set_meta(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_get_meta(void * jarg1, wchar_t * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_get_meta(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_has_meta(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_has_meta(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_meta_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  StringArray result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_meta_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_add_user_signal__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Array *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Object_add_user_signal__SWIG_0(arg1,(String const &)*arg2,(Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_add_user_signal__SWIG_1(void * jarg1, wchar_t * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_add_user_signal__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_has_user_signal(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_has_user_signal(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_3(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_4(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_5(void * jarg1, wchar_t * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_has_method(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_has_method(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_signal_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_signal_list(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_signal_connection_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Object_get_signal_connection_list(arg1,(String const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_connect__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, void * jarg5, int jarg6) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Array *arg5 = 0 ;
  int arg6 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (int)Object_connect__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4,(Array const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_connect__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, void * jarg5) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Array *arg5 = 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = (int)Object_connect__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4,(Array const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_connect__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (int)Object_connect__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_disconnect(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Object_disconnect(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_connected(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (bool)Object_is_connected(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_block_signals(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Object_set_block_signals(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_blocking_signals(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)Object_is_blocking_signals(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_message_translation(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Object_set_message_translation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_can_translate_messages(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)Object_can_translate_messages(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_property_list_changed_notify(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  Object_property_list_changed_notify(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_XL_MESSAGE(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Object_XL_MESSAGE(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_tr(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Object_tr(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_queued_for_deletion(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)Object_is_queued_for_deletion(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_add_remap__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  PathRemap_add_remap__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_add_remap__SWIG_1(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PathRemap_add_remap__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathRemap_has_remap(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)PathRemap_has_remap(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathRemap_get_remap(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = PathRemap_get_remap(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_erase_remap(void * jarg1, wchar_t * jarg2) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  PathRemap_erase_remap(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_clear_remaps(void * jarg1) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  PathRemap_clear_remaps(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathRemap_SingletonGetInstance() {
  void * jresult ;
  PathRemap *result = 0 ;
  
  result = (PathRemap *)PathRemap_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Performance_get_monitor(void * jarg1, int jarg2) {
  float jresult ;
  Performance *arg1 = (Performance *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Performance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Performance_get_monitor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Performance_SingletonGetInstance() {
  void * jresult ;
  Performance *result = 0 ;
  
  result = (Performance *)Performance_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_total_gravity(void * jarg1) {
  Vector2 jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = Physics2DDirectBodyState_get_total_gravity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_total_linear_damp(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_total_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_total_angular_damp(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_total_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_inverse_mass(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_inverse_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_inverse_inertia(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_inverse_inertia(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_linear_velocity(void * jarg1, Vector2* jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DDirectBodyState_set_linear_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_linear_velocity(void * jarg1) {
  Vector2 jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = Physics2DDirectBodyState_get_linear_velocity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_angular_velocity(void * jarg1, float jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float arg2 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (float)jarg2; 
  Physics2DDirectBodyState_set_angular_velocity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_angular_velocity(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_angular_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_transform(void * jarg1, void * jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DDirectBodyState_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_transform(void * jarg1) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Matrix32 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = Physics2DDirectBodyState_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_sleep_state(void * jarg1, unsigned int jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  bool arg2 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Physics2DDirectBodyState_set_sleep_state(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DDirectBodyState_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  bool result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (bool)Physics2DDirectBodyState_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_count(void * jarg1) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (int)Physics2DDirectBodyState_get_contact_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_local_pos(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_local_pos(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_local_normal(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_local_normal(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_local_shape(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DDirectBodyState_get_contact_local_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_pos(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider_pos(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_id(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DDirectBodyState_get_contact_collider_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_object(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)Physics2DDirectBodyState_get_contact_collider_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_shape(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DDirectBodyState_get_contact_collider_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_shape_metadata(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Variant result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider_shape_metadata(arg1,arg2);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_velocity_at_pos(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider_velocity_at_pos(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_step(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_integrate_forces(void * jarg1) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  Physics2DDirectBodyState_integrate_forces(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_space_state(void * jarg1) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Physics2DDirectSpaceState *result = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (Physics2DDirectSpaceState *)Physics2DDirectBodyState_get_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_0(void * jarg1, Vector2* jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,(Array const &)*arg4,arg5,arg6);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_1(void * jarg1, Vector2* jarg2, int jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  int arg5 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,(Array const &)*arg4,arg5);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_2(void * jarg1, Vector2* jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,(Array const &)*arg4);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_3(void * jarg1, Vector2* jarg2, int jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_4(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_0(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Array const &)*arg4,arg5,arg6);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_1(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Array const &)*arg4,arg5);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_2(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Array *arg4 = 0 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Array const &)*arg4);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_3(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Physics2DShapeQueryParameters *arg2 = (Physics2DShapeQueryParameters *) 0 ;
  int arg3 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Physics2DShapeQueryParameters *)jarg2; 
  arg3 = (int)jarg3; 
  result = Physics2DDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Physics2DShapeQueryParameters *arg2 = (Physics2DShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Physics2DShapeQueryParameters *)jarg2; 
  result = Physics2DDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_cast_motion(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Physics2DShapeQueryParameters *arg2 = (Physics2DShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Physics2DShapeQueryParameters *)jarg2; 
  result = Physics2DDirectSpaceState_cast_motion(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_collide_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Physics2DShapeQueryParameters *arg2 = (Physics2DShapeQueryParameters *) 0 ;
  int arg3 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Physics2DShapeQueryParameters *)jarg2; 
  arg3 = (int)jarg3; 
  result = Physics2DDirectSpaceState_collide_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_collide_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Physics2DShapeQueryParameters *arg2 = (Physics2DShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Physics2DShapeQueryParameters *)jarg2; 
  result = Physics2DDirectSpaceState_collide_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_get_rest_info(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Physics2DShapeQueryParameters *arg2 = (Physics2DShapeQueryParameters *) 0 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Physics2DShapeQueryParameters *)jarg2; 
  result = Physics2DDirectSpaceState_get_rest_info(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_shape_create(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DServer_shape_create(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_shape_set_data(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_shape_set_data(arg1,(RID const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_shape_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_shape_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_shape_get_data(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_shape_get_data(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_space_create(void * jarg1) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  result = Physics2DServer_space_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_space_set_active(void * jarg1, void * jarg2, unsigned int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  Physics2DServer_space_set_active(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_space_is_active(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)Physics2DServer_space_is_active(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_space_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_space_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_space_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_space_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_space_get_direct_state(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Physics2DDirectSpaceState *result = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (Physics2DDirectSpaceState *)Physics2DServer_space_get_direct_state(arg1,(RID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_create(void * jarg1) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  result = Physics2DServer_area_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_space(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_area_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_space_override_mode(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_set_space_override_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_area_get_space_override_mode(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_area_get_space_override_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_area_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_area_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_area_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_area_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_clear_shapes(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_param(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_param(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_transform(arg1,(RID const &)*arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_get_param(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_get_param(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_area_get_transform(arg1,(RID const &)*arg2);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_area_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_area_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_monitor_callback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Physics2DServer_area_set_monitor_callback(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_create__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  bool arg3 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = Physics2DServer_body_create__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_create__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DServer_body_create__SWIG_0(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_create__SWIG_2(void * jarg1) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  result = Physics2DServer_body_create__SWIG_0(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_space(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_body_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_mode(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_mode(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape_metadata(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_shape_metadata(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_body_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_body_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_get_shape_metadata(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_get_shape_metadata(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_clear_shapes(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape_as_trigger(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  Physics2DServer_body_set_shape_as_trigger(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_is_shape_set_as_trigger(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)Physics2DServer_body_is_shape_set_as_trigger(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_continuous_collision_detection_mode(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_continuous_collision_detection_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_continuous_collision_detection_mode(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_continuous_collision_detection_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_layer_mask(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_layer_mask(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_collision_mask(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_collision_mask(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_body_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_body_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_body_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_state(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_state(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_get_state(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_get_state(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_apply_impulse(void * jarg1, void * jarg2, Vector2* jarg3, Vector2* jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_apply_impulse(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_force(void * jarg1, void * jarg2, Vector2* jarg3, Vector2* jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_force(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_axis_velocity(void * jarg1, void * jarg2, Vector2* jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_axis_velocity(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_remove_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_remove_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_max_contacts_reported(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_max_contacts_reported(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_max_contacts_reported(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_max_contacts_reported(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_one_way_collision_direction(void * jarg1, void * jarg2, Vector2* jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_one_way_collision_direction(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DServer_body_get_one_way_collision_direction(void * jarg1, void * jarg2) {
  Vector2 jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return Vector2();
  } 
  result = Physics2DServer_body_get_one_way_collision_direction(arg1,(RID const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_one_way_collision_max_depth(void * jarg1, void * jarg2, float jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  Physics2DServer_body_set_one_way_collision_max_depth(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_body_get_one_way_collision_max_depth(void * jarg1, void * jarg2) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)Physics2DServer_body_get_one_way_collision_max_depth(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_omit_force_integration(void * jarg1, void * jarg2, unsigned int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  Physics2DServer_body_set_omit_force_integration(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_is_omitting_force_integration(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)Physics2DServer_body_is_omitting_force_integration(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_force_integration_callback__SWIG_0(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4, void * jarg5) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_force_integration_callback__SWIG_1(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Physics2DServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_test_motion__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  float arg4 ;
  Physics2DTestMotionResult *arg5 = (Physics2DTestMotionResult *) 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (Physics2DTestMotionResult *)jarg5; 
  result = (bool)Physics2DServer_body_test_motion__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_test_motion__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, float jarg4) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)Physics2DServer_body_test_motion__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_test_motion__SWIG_2(void * jarg1, void * jarg2, Vector2* jarg3) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)Physics2DServer_body_test_motion__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_pin_joint_create__SWIG_0(void * jarg1, Vector2* jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  RID *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_pin_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(RID const &)*arg3,(RID const &)*arg4);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_pin_joint_create__SWIG_1(void * jarg1, Vector2* jarg2, void * jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  RID *arg3 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_pin_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(RID const &)*arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_groove_joint_create__SWIG_0(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  RID *arg5 = 0 ;
  RID *arg6 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg6 = (RID *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_groove_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(RID const &)*arg5,(RID const &)*arg6);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_groove_joint_create__SWIG_1(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, void * jarg5) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  RID *arg5 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_groove_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(RID const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_groove_joint_create__SWIG_2(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_groove_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_damped_spring_joint_create__SWIG_0(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID *arg5 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_damped_spring_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(RID const &)*arg4,(RID const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_damped_spring_joint_create__SWIG_1(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_damped_spring_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(RID const &)*arg4);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_damped_string_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_damped_string_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_damped_string_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_damped_string_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_joint_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_joint_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_free_rid(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_set_active(void * jarg1, unsigned int jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  bool arg2 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Physics2DServer_set_active(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_get_process_info(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DServer_get_process_info(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_SingletonGetInstance() {
  void * jresult ;
  Physics2DServer *result = 0 ;
  
  result = (Physics2DServer *)Physics2DServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_total_gravity(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_total_gravity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_total_linear_damp(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_total_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_total_angular_damp(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_total_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_inverse_mass(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_inverse_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_inverse_inertia(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_inverse_inertia(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_linear_velocity(void * jarg1, void * jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_set_linear_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_linear_velocity(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_angular_velocity(void * jarg1, void * jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_set_angular_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_angular_velocity(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_angular_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_transform(void * jarg1, void * jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_set_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_transform(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Transform result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_add_force(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_add_force(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_apply_impulse(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_apply_impulse(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_sleep_state(void * jarg1, unsigned int jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  bool arg2 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PhysicsDirectBodyState_set_sleep_state(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsDirectBodyState_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  bool result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (bool)PhysicsDirectBodyState_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_count(void * jarg1) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (int)PhysicsDirectBodyState_get_contact_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_local_pos(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_local_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_local_normal(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_local_normal(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_local_shape(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsDirectBodyState_get_contact_local_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_collider(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_pos(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_collider_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_id(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsDirectBodyState_get_contact_collider_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_object(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)PhysicsDirectBodyState_get_contact_collider_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_shape(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsDirectBodyState_get_contact_collider_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_step(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_integrate_forces(void * jarg1) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  PhysicsDirectBodyState_integrate_forces(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_space_state(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  PhysicsDirectSpaceState *result = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (PhysicsDirectSpaceState *)PhysicsDirectBodyState_get_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4,arg5,arg6);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4,arg5);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  PhysicsShapeQueryParameters *arg2 = (PhysicsShapeQueryParameters *) 0 ;
  int arg3 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (PhysicsShapeQueryParameters *)jarg2; 
  arg3 = (int)jarg3; 
  result = PhysicsDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  PhysicsShapeQueryParameters *arg2 = (PhysicsShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (PhysicsShapeQueryParameters *)jarg2; 
  result = PhysicsDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_cast_motion(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  PhysicsShapeQueryParameters *arg2 = (PhysicsShapeQueryParameters *) 0 ;
  Vector3 *arg3 = 0 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (PhysicsShapeQueryParameters *)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = PhysicsDirectSpaceState_cast_motion(arg1,arg2,(Vector3 const &)*arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_collide_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  PhysicsShapeQueryParameters *arg2 = (PhysicsShapeQueryParameters *) 0 ;
  int arg3 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (PhysicsShapeQueryParameters *)jarg2; 
  arg3 = (int)jarg3; 
  result = PhysicsDirectSpaceState_collide_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_collide_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  PhysicsShapeQueryParameters *arg2 = (PhysicsShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (PhysicsShapeQueryParameters *)jarg2; 
  result = PhysicsDirectSpaceState_collide_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_get_rest_info(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  PhysicsShapeQueryParameters *arg2 = (PhysicsShapeQueryParameters *) 0 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (PhysicsShapeQueryParameters *)jarg2; 
  result = PhysicsDirectSpaceState_get_rest_info(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_shape_create(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsServer_shape_create(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_shape_set_data(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_shape_set_data(arg1,(RID const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_shape_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_shape_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_shape_get_data(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_shape_get_data(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_space_create(void * jarg1) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  result = PhysicsServer_space_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_space_set_active(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_space_set_active(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_space_is_active(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_space_is_active(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_space_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_space_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_space_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_space_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_space_get_direct_state(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  PhysicsDirectSpaceState *result = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (PhysicsDirectSpaceState *)PhysicsServer_space_get_direct_state(arg1,(RID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_create(void * jarg1) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  result = PhysicsServer_area_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_space(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_area_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_space_override_mode(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_set_space_override_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_area_get_space_override_mode(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_area_get_space_override_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_area_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_area_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_area_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_area_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_clear_shapes(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_param(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_param(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_transform(arg1,(RID const &)*arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_get_param(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_get_param(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_area_get_transform(arg1,(RID const &)*arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_area_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_area_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_monitor_callback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  PhysicsServer_area_set_monitor_callback(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_ray_pickable(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_area_set_ray_pickable(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_area_is_ray_pickable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_area_is_ray_pickable(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_create__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  bool arg3 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = PhysicsServer_body_create__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_create__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsServer_body_create__SWIG_0(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_create__SWIG_2(void * jarg1) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  result = PhysicsServer_body_create__SWIG_0(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_space(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_body_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_mode(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_mode(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)PhysicsServer_body_get_layer_mask(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)PhysicsServer_body_get_collision_mask(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_body_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_body_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_clear_shapes(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_enable_continuous_collision_detection(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_body_set_enable_continuous_collision_detection(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_body_is_continuous_collision_detection_enabled(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_body_is_continuous_collision_detection_enabled(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_body_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_body_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_body_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_state(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_state(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_get_state(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_get_state(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_apply_impulse(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_apply_impulse(arg1,(RID const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_axis_velocity(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_axis_velocity(arg1,(RID const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_axis_lock(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_axis_lock(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_axis_lock(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_axis_lock(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_add_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_add_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_remove_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_remove_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_max_contacts_reported(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_max_contacts_reported(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_max_contacts_reported(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_max_contacts_reported(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_omit_force_integration(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_body_set_omit_force_integration(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_body_is_omitting_force_integration(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_body_is_omitting_force_integration(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_force_integration_callback__SWIG_0(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4, void * jarg5) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_force_integration_callback__SWIG_1(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  PhysicsServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_ray_pickable(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_body_set_ray_pickable(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_body_is_ray_pickable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_body_is_ray_pickable(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_pin(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_pin(arg1,(RID const &)*arg2,(Vector3 const &)*arg3,(RID const &)*arg4,(Vector3 const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_pin_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_pin_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_pin_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_pin_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_pin_joint_set_local_A(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_pin_joint_set_local_A(arg1,(RID const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_pin_joint_get_local_A(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_pin_joint_get_local_A(arg1,(RID const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_pin_joint_set_local_B(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_pin_joint_set_local_B(arg1,(RID const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_pin_joint_get_local_B(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_pin_joint_get_local_B(arg1,(RID const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_hinge(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_hinge(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_hinge_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_hinge_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_set_flag(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  PhysicsServer_hinge_joint_set_flag(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_get_flag(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)PhysicsServer_hinge_joint_get_flag(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_slider(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_slider(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_slider_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_slider_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_slider_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_slider_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_cone_twist(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_cone_twist(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_cone_twist_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_cone_twist_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_cone_twist_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_cone_twist_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_joint_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_joint_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_joint_set_solver_priority(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_joint_set_solver_priority(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_joint_get_solver_priority(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_joint_get_solver_priority(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_generic_6dof(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_generic_6dof(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_set_param(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  PhysicsServer_generic_6dof_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_get_param(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (float)PhysicsServer_generic_6dof_joint_get_param(arg1,(RID const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_set_flag(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  PhysicsServer_generic_6dof_joint_set_flag(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_get_flag(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)PhysicsServer_generic_6dof_joint_get_flag(arg1,(RID const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_free_rid(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_set_active(void * jarg1, unsigned int jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  bool arg2 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PhysicsServer_set_active(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_get_process_info(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsServer_get_process_info(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_SingletonGetInstance() {
  void * jresult ;
  PhysicsServer *result = 0 ;
  
  result = (PhysicsServer *)PhysicsServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Reference() {
  void * jresult ;
  Reference *result = 0 ;
  
  result = (Reference *)memnew(Reference());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Reference_init_ref(void * jarg1) {
  unsigned int jresult ;
  Reference *arg1 = (Reference *) 0 ;
  bool result;
  
  arg1 = (Reference *)jarg1; 
  result = (bool)Reference_init_ref(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Reference_reference(void * jarg1) {
  Reference *arg1 = (Reference *) 0 ;
  
  arg1 = (Reference *)jarg1; 
  Reference_reference(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Reference_unreference(void * jarg1) {
  unsigned int jresult ;
  Reference *arg1 = (Reference *) 0 ;
  bool result;
  
  arg1 = (Reference *)jarg1; 
  result = (bool)Reference_unreference(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Reference(void * jarg1) {
  Reference *arg1 = (Reference *) 0 ;
  
  arg1 = (Reference *)jarg1; 
  delete_Reference(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegEx() {
  void * jresult ;
  RegEx *result = 0 ;
  
  result = (RegEx *)memnew(RegEx());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_compile__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)RegEx_compile__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_compile__SWIG_1(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RegEx_compile__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_find__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3, int jarg4) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)RegEx_find__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_find__SWIG_1(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)RegEx_find__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_find__SWIG_2(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RegEx_find__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegEx_clear(void * jarg1) {
  RegEx *arg1 = (RegEx *) 0 ;
  
  arg1 = (RegEx *)jarg1; 
  RegEx_clear(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegEx_is_valid(void * jarg1) {
  unsigned int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  bool result;
  
  arg1 = (RegEx *)jarg1; 
  result = (bool)RegEx_is_valid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_get_capture_count(void * jarg1) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  result = (int)RegEx_get_capture_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegEx_get_capture(void * jarg1, int jarg2) {
  void * jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (RegEx *)jarg1; 
  arg2 = (int)jarg2; 
  result = RegEx_get_capture(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_get_capture_start(void * jarg1, int jarg2) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)RegEx_get_capture_start(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegEx_get_captures(void * jarg1) {
  void * jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  StringArray result;
  
  arg1 = (RegEx *)jarg1; 
  result = RegEx_get_captures(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegEx(void * jarg1) {
  RegEx *arg1 = (RegEx *) 0 ;
  
  arg1 = (RegEx *)jarg1; 
  delete_RegEx(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Resource() {
  void * jresult ;
  Resource *result = 0 ;
  
  result = (Resource *)memnew(Resource());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_set_path(void * jarg1, wchar_t * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Resource_set_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_take_over_path(void * jarg1, wchar_t * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Resource_take_over_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_path(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  String result;
  
  arg1 = (Resource *)jarg1; 
  result = Resource_get_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_set_name(void * jarg1, wchar_t * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Resource_set_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_name(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  String result;
  
  arg1 = (Resource *)jarg1; 
  result = Resource_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_rid(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  RID result;
  
  arg1 = (Resource *)jarg1; 
  result = Resource_get_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_set_import_metadata(void * jarg1, void * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (Object *)jarg2; 
  Resource_set_import_metadata(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_import_metadata(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (Object *)Resource_get_import_metadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_duplicate__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  bool arg2 ;
  Object *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Object *)Resource_duplicate__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_duplicate__SWIG_1(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (Object *)Resource_duplicate__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Resource(void * jarg1) {
  Resource *arg1 = (Resource *) 0 ;
  
  arg1 = (Resource *)jarg1; 
  delete_Resource(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResourceImportMetadata() {
  void * jresult ;
  ResourceImportMetadata *result = 0 ;
  
  result = (ResourceImportMetadata *)memnew(ResourceImportMetadata());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_set_editor(void * jarg1, wchar_t * jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourceImportMetadata_set_editor(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_editor(void * jarg1) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  result = ResourceImportMetadata_get_editor(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_add_source__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ResourceImportMetadata_add_source__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_add_source__SWIG_1(void * jarg1, wchar_t * jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourceImportMetadata_add_source__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_source_path(void * jarg1, int jarg2) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  result = ResourceImportMetadata_get_source_path(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_source_md5(void * jarg1, int jarg2) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  result = ResourceImportMetadata_get_source_md5(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_set_source_md5(void * jarg1, int jarg2, wchar_t * jarg3) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ResourceImportMetadata_set_source_md5(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_remove_source(void * jarg1, int jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  ResourceImportMetadata_remove_source(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceImportMetadata_get_source_count(void * jarg1) {
  int jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  result = (int)ResourceImportMetadata_get_source_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_set_option(void * jarg1, wchar_t * jarg2, void * jarg3) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ResourceImportMetadata_set_option(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_get_option(void * jarg1, wchar_t * jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourceImportMetadata_get_option(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_options(void * jarg1) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  StringArray result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  result = ResourceImportMetadata_get_options(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResourceImportMetadata(void * jarg1) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  delete_ResourceImportMetadata(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceInteractiveLoader_get_resource(void * jarg1) {
  void * jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  Object *result = 0 ;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (Object *)ResourceInteractiveLoader_get_resource(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_poll(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_poll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_wait(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_wait(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_get_stage(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_get_stage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_get_stage_count(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_get_stage_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResourceInteractiveLoader(void * jarg1) {
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  delete_ResourceInteractiveLoader(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RoomBounds() {
  void * jresult ;
  RoomBounds *result = 0 ;
  
  result = (RoomBounds *)memnew(RoomBounds());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_set_bounds(void * jarg1, void * jarg2) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Dictionary *arg2 = 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return ;
  } 
  RoomBounds_set_bounds(arg1,(Dictionary const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomBounds_get_bounds(void * jarg1) {
  void * jresult ;
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Dictionary result;
  
  arg1 = (RoomBounds *)jarg1; 
  result = RoomBounds_get_bounds(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_set_geometry_hint(void * jarg1, void * jarg2) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  RoomBounds_set_geometry_hint(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomBounds_get_geometry_hint(void * jarg1) {
  void * jresult ;
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Vector3Array result;
  
  arg1 = (RoomBounds *)jarg1; 
  result = RoomBounds_get_geometry_hint(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_regenerate_bsp(void * jarg1) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  RoomBounds_regenerate_bsp(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_regenerate_bsp_cubic(void * jarg1) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  RoomBounds_regenerate_bsp_cubic(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RoomBounds(void * jarg1) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  delete_RoomBounds(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sample() {
  void * jresult ;
  Sample *result = 0 ;
  
  result = (Sample *)memnew(Sample());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_create(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  Sample_create(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_format(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sample_is_stereo(void * jarg1) {
  unsigned int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  bool result;
  
  arg1 = (Sample *)jarg1; 
  result = (bool)Sample_is_stereo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_length(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_data(void * jarg1, void * jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  Sample_set_data(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sample_get_data(void * jarg1) {
  void * jresult ;
  Sample *arg1 = (Sample *) 0 ;
  RawArray result;
  
  arg1 = (Sample *)jarg1; 
  result = Sample_get_data(arg1);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_mix_rate(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_mix_rate(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_mix_rate(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_mix_rate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_loop_format(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_loop_format(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_loop_format(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_loop_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_loop_begin(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_loop_begin(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_loop_begin(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_loop_begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_loop_end(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_loop_end(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_loop_end(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_loop_end(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Sample(void * jarg1) {
  Sample *arg1 = (Sample *) 0 ;
  
  arg1 = (Sample *)jarg1; 
  delete_Sample(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SampleLibrary() {
  void * jresult ;
  SampleLibrary *result = 0 ;
  
  result = (SampleLibrary *)memnew(SampleLibrary());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_add_sample(void * jarg1, wchar_t * jarg2, void * jarg3) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  Sample *arg3 = (Sample *) 0 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Sample *)jarg3; 
  SampleLibrary_add_sample(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT Sample* SWIGSTDCALL CSharp_SampleLibrary_get_sample(void * jarg1, wchar_t * jarg2) {
  Sample* jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  Ref< Sample > result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = SampleLibrary_get_sample(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SampleLibrary_has_sample(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SampleLibrary_has_sample(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_remove_sample(void * jarg1, wchar_t * jarg2) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SampleLibrary_remove_sample(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_sample_set_volume_db(void * jarg1, wchar_t * jarg2, float jarg3) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  SampleLibrary_sample_set_volume_db(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SampleLibrary_sample_get_volume_db(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)SampleLibrary_sample_get_volume_db(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_sample_set_pitch_scale(void * jarg1, wchar_t * jarg2, float jarg3) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  SampleLibrary_sample_set_pitch_scale(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SampleLibrary_sample_get_pitch_scale(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)SampleLibrary_sample_get_pitch_scale(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SampleLibrary(void * jarg1) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  delete_SampleLibrary(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_node_count(void * jarg1) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  result = (int)SceneState_get_node_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_type(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_type(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_name(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_path__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  bool arg3 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = SceneState_get_node_path__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_path__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_path__SWIG_0(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_owner_path(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_owner_path(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneState_is_node_instance_placeholder(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SceneState_is_node_instance_placeholder(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_instance_placeholder(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_instance_placeholder(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT PackedScene* SWIGSTDCALL CSharp_SceneState_get_node_instance(void * jarg1, int jarg2) {
  PackedScene* jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  Ref< PackedScene > result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_instance(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_groups(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  StringArray result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_groups(arg1,arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_node_property_count(void * jarg1, int jarg2) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SceneState_get_node_property_count(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_property_name(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = SceneState_get_node_property_name(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneState_get_node_property_value(void * jarg1, int jarg2, int jarg3) {
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  SceneState_get_node_property_value(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_connection_count(void * jarg1) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  result = (int)SceneState_get_connection_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_source(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_source(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_signal(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_signal(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_target(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_target(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_method(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_method(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_connection_flags(void * jarg1, int jarg2) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SceneState_get_connection_flags(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_binds(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_binds(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SceneState(void * jarg1) {
  SceneState *arg1 = (SceneState *) 0 ;
  
  arg1 = (SceneState *)jarg1; 
  delete_SceneState(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Script_can_instance(void * jarg1) {
  unsigned int jresult ;
  Script *arg1 = (Script *) 0 ;
  bool result;
  
  arg1 = (Script *)jarg1; 
  result = (bool)Script_can_instance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Script_instance_has(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Script *arg1 = (Script *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Script *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Script_instance_has(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Script_has_source_code(void * jarg1) {
  unsigned int jresult ;
  Script *arg1 = (Script *) 0 ;
  bool result;
  
  arg1 = (Script *)jarg1; 
  result = (bool)Script_has_source_code(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Script_get_source_code(void * jarg1) {
  void * jresult ;
  Script *arg1 = (Script *) 0 ;
  String result;
  
  arg1 = (Script *)jarg1; 
  result = Script_get_source_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Script_set_source_code(void * jarg1, wchar_t * jarg2) {
  Script *arg1 = (Script *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Script *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Script_set_source_code(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Script_reload__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Script *arg1 = (Script *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (Script *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)Script_reload__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Script_reload__SWIG_1(void * jarg1) {
  int jresult ;
  Script *arg1 = (Script *) 0 ;
  int result;
  
  arg1 = (Script *)jarg1; 
  result = (int)Script_reload__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Script(void * jarg1) {
  Script *arg1 = (Script *) 0 ;
  
  arg1 = (Script *)jarg1; 
  delete_Script(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_get_mode(void * jarg1) {
  int jresult ;
  Shader *arg1 = (Shader *) 0 ;
  int result;
  
  arg1 = (Shader *)jarg1; 
  result = (int)Shader_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_code__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4, int jarg5, int jarg6) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  Shader_set_code__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_code__SWIG_1(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4, int jarg5) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  Shader_set_code__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_code__SWIG_2(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Shader_set_code__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_vertex_code(void * jarg1) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String result;
  
  arg1 = (Shader *)jarg1; 
  result = Shader_get_vertex_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_fragment_code(void * jarg1) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String result;
  
  arg1 = (Shader *)jarg1; 
  result = Shader_get_fragment_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_light_code(void * jarg1) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String result;
  
  arg1 = (Shader *)jarg1; 
  result = Shader_get_light_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_default_texture_param(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Texture *)jarg3; 
  Shader_set_default_texture_param(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Shader_get_default_texture_param(void * jarg1, wchar_t * jarg2) {
  Texture* jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  Ref< Texture > result;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Shader_get_default_texture_param(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shader_has_param(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Shader_has_param(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shader(void * jarg1) {
  Shader *arg1 = (Shader *) 0 ;
  
  arg1 = (Shader *)jarg1; 
  delete_Shader(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_add(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_node_add(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_remove(void * jarg1, int jarg2, int jarg3) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ShaderGraph_node_remove(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_set_pos(void * jarg1, int jarg2, int jarg3, Vector2* jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ShaderGraph_node_set_pos(arg1,arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ShaderGraph_node_get_pos(void * jarg1, int jarg2, int jarg3) {
  Vector2 jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_node_get_pos(arg1,arg2,arg3);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_node_get_type(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_node_get_type(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_get_node_list(void * jarg1, int jarg2) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  result = ShaderGraph_get_node_list(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_default_set_value(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Variant *arg5 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ShaderGraph_default_set_value(arg1,arg2,arg3,arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_default_get_value(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_default_get_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_const_node_set_value(void * jarg1, int jarg2, int jarg3, float jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  ShaderGraph_scalar_const_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ShaderGraph_scalar_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)ShaderGraph_scalar_const_node_get_value(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_const_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ShaderGraph_vec_const_node_set_value(arg1,arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_vec_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_vec_const_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_rgb_const_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ShaderGraph_rgb_const_node_set_value(arg1,arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_rgb_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_rgb_const_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_xform_const_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  ShaderGraph_xform_const_node_set_value(arg1,arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_xform_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_xform_const_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_texture_node_set_filter_size(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_texture_node_set_filter_size(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_texture_node_get_filter_size(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_texture_node_get_filter_size(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_texture_node_set_filter_strength(void * jarg1, int jarg2, float jarg3, float jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  ShaderGraph_texture_node_set_filter_strength(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ShaderGraph_texture_node_get_filter_strength(void * jarg1, int jarg2, float jarg3) {
  float jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)ShaderGraph_texture_node_get_filter_strength(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_scalar_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_scalar_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_scalar_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_vec_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_vec_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_vec_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_scalar_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_vec_scalar_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_vec_scalar_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_vec_scalar_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_rgb_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_rgb_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_rgb_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_rgb_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_xform_vec_mult_node_set_no_translation(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  ShaderGraph_xform_vec_mult_node_set_no_translation(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShaderGraph_xform_vec_mult_node_get_no_translation(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)ShaderGraph_xform_vec_mult_node_get_no_translation(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_func_node_set_function(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_scalar_func_node_set_function(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_scalar_func_node_get_function(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_scalar_func_node_get_function(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_func_node_set_function(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_vec_func_node_set_function(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_vec_func_node_get_function(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_vec_func_node_get_function(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_input_node_set_name(void * jarg1, int jarg2, int jarg3, wchar_t * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  ShaderGraph_input_node_set_name(arg1,arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_input_node_get_name(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_input_node_get_name(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_input_node_set_value(void * jarg1, int jarg2, int jarg3, float jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  ShaderGraph_scalar_input_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ShaderGraph_scalar_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)ShaderGraph_scalar_input_node_get_value(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ShaderGraph_vec_input_node_set_value(arg1,arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_vec_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_vec_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_rgb_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ShaderGraph_rgb_input_node_set_value(arg1,arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_rgb_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_rgb_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_xform_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  ShaderGraph_xform_input_node_set_value(arg1,arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_xform_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_xform_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_texture_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Texture *arg4 = (Texture *) 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Texture *)jarg4; 
  ShaderGraph_texture_input_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_ShaderGraph_texture_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  Texture* jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Ref< Texture > result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_texture_input_node_get_value(arg1,arg2,arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_cubemap_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  CubeMap *arg4 = (CubeMap *) 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (CubeMap *)jarg4; 
  ShaderGraph_cubemap_input_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT CubeMap* SWIGSTDCALL CSharp_ShaderGraph_cubemap_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  CubeMap* jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Ref< CubeMap > result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_cubemap_input_node_get_value(arg1,arg2,arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_comment_node_set_text(void * jarg1, int jarg2, int jarg3, wchar_t * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  ShaderGraph_comment_node_set_text(arg1,arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_comment_node_get_text(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_comment_node_get_text(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_color_ramp_node_set_ramp(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  ColorArray *arg4 = 0 ;
  RealArray *arg5 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (RealArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  ShaderGraph_color_ramp_node_set_ramp(arg1,arg2,arg3,(ColorArray const &)*arg4,(RealArray const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_color_ramp_node_get_colors(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  ColorArray result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_color_ramp_node_get_colors(arg1,arg2,arg3);
  jresult = memnew(ColorArray((const ColorArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_color_ramp_node_get_offsets(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  RealArray result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_color_ramp_node_get_offsets(arg1,arg2,arg3);
  jresult = memnew(RealArray((const RealArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_curve_map_node_set_points(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ShaderGraph_curve_map_node_set_points(arg1,arg2,arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_curve_map_node_get_points(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2Array result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_curve_map_node_get_points(arg1,arg2,arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_connect_node(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)ShaderGraph_connect_node(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShaderGraph_is_node_connected(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ShaderGraph_is_node_connected(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_disconnect_node(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ShaderGraph_disconnect_node(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_get_node_connections(void * jarg1, int jarg2) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  result = ShaderGraph_get_node_connections(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_clear(void * jarg1, int jarg2) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  ShaderGraph_clear(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_set_state(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ShaderGraph_node_set_state(arg1,arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_node_get_state(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Variant result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_node_get_state(arg1,arg2,arg3);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShaderGraph(void * jarg1) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  delete_ShaderGraph(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shape(void * jarg1) {
  Shape *arg1 = (Shape *) 0 ;
  
  arg1 = (Shape *)jarg1; 
  delete_Shape(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape2D_set_custom_solver_bias(void * jarg1, float jarg2) {
  Shape2D *arg1 = (Shape2D *) 0 ;
  float arg2 ;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (float)jarg2; 
  Shape2D_set_custom_solver_bias(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Shape2D_get_custom_solver_bias(void * jarg1) {
  float jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  float result;
  
  arg1 = (Shape2D *)jarg1; 
  result = (float)Shape2D_get_custom_solver_bias(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shape2D_collide(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  Shape2D *arg3 = (Shape2D *) 0 ;
  Matrix32 *arg4 = 0 ;
  bool result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg3 = (Shape2D *)jarg3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = (bool)Shape2D_collide(arg1,(Matrix32 const &)*arg2,arg3,(Matrix32 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shape2D_collide_with_motion(void * jarg1, void * jarg2, Vector2* jarg3, void * jarg4, void * jarg5, Vector2* jarg6) {
  unsigned int jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Shape2D *arg4 = (Shape2D *) 0 ;
  Matrix32 *arg5 = 0 ;
  Vector2 *arg6 = 0 ;
  bool result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Shape2D *)jarg4; 
  arg5 = (Matrix32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg6 = (Vector2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)Shape2D_collide_with_motion(arg1,(Matrix32 const &)*arg2,(Vector2 const &)*arg3,arg4,(Matrix32 const &)*arg5,(Vector2 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shape2D_collide_and_get_contacts(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  Shape2D *arg3 = (Shape2D *) 0 ;
  Matrix32 *arg4 = 0 ;
  Variant result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg3 = (Shape2D *)jarg3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = Shape2D_collide_and_get_contacts(arg1,(Matrix32 const &)*arg2,arg3,(Matrix32 const &)*arg4);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shape2D_collide_with_motion_and_get_contacts(void * jarg1, void * jarg2, Vector2* jarg3, void * jarg4, void * jarg5, Vector2* jarg6) {
  void * jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Shape2D *arg4 = (Shape2D *) 0 ;
  Matrix32 *arg5 = 0 ;
  Vector2 *arg6 = 0 ;
  Variant result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Shape2D *)jarg4; 
  arg5 = (Matrix32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg6 = (Vector2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Shape2D_collide_with_motion_and_get_contacts(arg1,(Matrix32 const &)*arg2,(Vector2 const &)*arg3,arg4,(Matrix32 const &)*arg5,(Vector2 const &)*arg6);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shape2D(void * jarg1) {
  Shape2D *arg1 = (Shape2D *) 0 ;
  
  arg1 = (Shape2D *)jarg1; 
  delete_Shape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShortCut() {
  void * jresult ;
  ShortCut *result = 0 ;
  
  result = (ShortCut *)memnew(ShortCut());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShortCut_set_shortcut(void * jarg1, void * jarg2) {
  ShortCut *arg1 = (ShortCut *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (ShortCut *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  ShortCut_set_shortcut(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShortCut_get_shortcut(void * jarg1) {
  void * jresult ;
  ShortCut *arg1 = (ShortCut *) 0 ;
  InputEvent result;
  
  arg1 = (ShortCut *)jarg1; 
  result = ShortCut_get_shortcut(arg1);
  jresult = memnew(InputEvent((const InputEvent &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShortCut_is_valid(void * jarg1) {
  unsigned int jresult ;
  ShortCut *arg1 = (ShortCut *) 0 ;
  bool result;
  
  arg1 = (ShortCut *)jarg1; 
  result = (bool)ShortCut_is_valid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShortCut_is_shortcut(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ShortCut *arg1 = (ShortCut *) 0 ;
  InputEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (ShortCut *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)ShortCut_is_shortcut(arg1,(InputEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShortCut_get_as_text(void * jarg1) {
  void * jresult ;
  ShortCut *arg1 = (ShortCut *) 0 ;
  String result;
  
  arg1 = (ShortCut *)jarg1; 
  result = ShortCut_get_as_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShortCut(void * jarg1) {
  ShortCut *arg1 = (ShortCut *) 0 ;
  
  arg1 = (ShortCut *)jarg1; 
  delete_ShortCut(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpatialGizmo(void * jarg1) {
  SpatialGizmo *arg1 = (SpatialGizmo *) 0 ;
  
  arg1 = (SpatialGizmo *)jarg1; 
  delete_SpatialGizmo(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialSound2DServer_SingletonGetInstance() {
  void * jresult ;
  SpatialSound2DServer *result = 0 ;
  
  result = (SpatialSound2DServer *)SpatialSound2DServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialSoundServer_SingletonGetInstance() {
  void * jresult ;
  SpatialSoundServer *result = 0 ;
  
  result = (SpatialSoundServer *)SpatialSoundServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SphereShape() {
  void * jresult ;
  SphereShape *result = 0 ;
  
  result = (SphereShape *)memnew(SphereShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SphereShape_set_radius(void * jarg1, float jarg2) {
  SphereShape *arg1 = (SphereShape *) 0 ;
  float arg2 ;
  
  arg1 = (SphereShape *)jarg1; 
  arg2 = (float)jarg2; 
  SphereShape_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SphereShape_get_radius(void * jarg1) {
  float jresult ;
  SphereShape *arg1 = (SphereShape *) 0 ;
  float result;
  
  arg1 = (SphereShape *)jarg1; 
  result = (float)SphereShape_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SphereShape(void * jarg1) {
  SphereShape *arg1 = (SphereShape *) 0 ;
  
  arg1 = (SphereShape *)jarg1; 
  delete_SphereShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpriteFrames() {
  void * jresult ;
  SpriteFrames *result = 0 ;
  
  result = (SpriteFrames *)memnew(SpriteFrames());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_add_animation(void * jarg1, wchar_t * jarg2) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpriteFrames_add_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteFrames_has_animation(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SpriteFrames_has_animation(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_remove_animation(void * jarg1, wchar_t * jarg2) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpriteFrames_remove_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_rename_animation(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  SpriteFrames_rename_animation(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_set_animation_speed(void * jarg1, wchar_t * jarg2, float jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  SpriteFrames_set_animation_speed(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpriteFrames_get_animation_speed(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)SpriteFrames_get_animation_speed(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_set_animation_loop(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  SpriteFrames_set_animation_loop(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteFrames_get_animation_loop(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SpriteFrames_get_animation_loop(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_add_frame__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, int jarg4) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  int arg4 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  arg4 = (int)jarg4; 
  SpriteFrames_add_frame__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_add_frame__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  SpriteFrames_add_frame__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpriteFrames_get_frame_count(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SpriteFrames_get_frame_count(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteFrames_get_frame(void * jarg1, wchar_t * jarg2, int jarg3) {
  void * jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  Object *result = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (Object *)SpriteFrames_get_frame(arg1,(String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_set_frame(void * jarg1, wchar_t * jarg2, int jarg3, void * jarg4) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  Object *arg4 = (Object *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (Object *)jarg4; 
  SpriteFrames_set_frame(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_remove_frame(void * jarg1, wchar_t * jarg2, int jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  SpriteFrames_remove_frame(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_clear(void * jarg1, wchar_t * jarg2) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpriteFrames_clear(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_clear_all(void * jarg1) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  SpriteFrames_clear_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpriteFrames(void * jarg1) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  delete_SpriteFrames(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_put_data(void * jarg1, void * jarg2) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)StreamPeer_put_data(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_put_partial_data(void * jarg1, void * jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  RawArray *arg2 = 0 ;
  Array result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = StreamPeer_put_partial_data(arg1,(RawArray const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_data(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_data(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_partial_data(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_partial_data(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_available_bytes(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_available_bytes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_set_big_endian(void * jarg1, unsigned int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPeer_set_big_endian(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPeer_is_big_endian_enabled(void * jarg1) {
  unsigned int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  bool result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (bool)StreamPeer_is_big_endian_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_8(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_8(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u8(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u8(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_16(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_16(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u16(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u16(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_32(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_32(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u32(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u32(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_64(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_64(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u64(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u64(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_float(void * jarg1, float jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPeer_put_float(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_double(void * jarg1, float jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPeer_put_double(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_utf8_string(void * jarg1, wchar_t * jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (StreamPeer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  StreamPeer_put_utf8_string(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_var(void * jarg1, void * jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  StreamPeer_put_var(arg1,(Variant const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_8(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_8(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u8(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u8(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_16(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u16(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_32(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u32(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_64(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u64(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPeer_get_float(void * jarg1) {
  float jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (float)StreamPeer_get_float(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPeer_get_double(void * jarg1) {
  float jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (float)StreamPeer_get_double(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_string(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_string(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_utf8_string(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_utf8_string(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_var(void * jarg1) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  Variant result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = StreamPeer_get_var(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StreamPeer(void * jarg1) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  
  arg1 = (StreamPeer *)jarg1; 
  delete_StreamPeer(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_accept(void * jarg1, void * jarg2) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  StreamPeer *arg2 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  arg2 = (StreamPeer *)jarg2; 
  result = (int)StreamPeerSSL_accept(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_connect__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, wchar_t * jarg4) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  StreamPeer *arg2 = (StreamPeer *) 0 ;
  bool arg3 ;
  String *arg4 = 0 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  arg2 = (StreamPeer *)jarg2; 
  arg3 = jarg3 ? true : false; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (int)StreamPeerSSL_connect__SWIG_0(arg1,arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_connect__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  StreamPeer *arg2 = (StreamPeer *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  arg2 = (StreamPeer *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)StreamPeerSSL_connect__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_connect__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  StreamPeer *arg2 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  arg2 = (StreamPeer *)jarg2; 
  result = (int)StreamPeerSSL_connect__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_get_status(void * jarg1) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  result = (int)StreamPeerSSL_get_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeerSSL_disconnect(void * jarg1) {
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  StreamPeerSSL_disconnect(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamPeerSSL() {
  void * jresult ;
  StreamPeerSSL *result = 0 ;
  
  result = (StreamPeerSSL *)new_StreamPeerSSL();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StreamPeerSSL(void * jarg1) {
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  delete_StreamPeerSSL(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerTCP_connect(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)StreamPeerTCP_connect(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPeerTCP_is_connected(void * jarg1) {
  unsigned int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  bool result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = (bool)StreamPeerTCP_is_connected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerTCP_get_status(void * jarg1) {
  int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  int result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = (int)StreamPeerTCP_get_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeerTCP_get_connected_host(void * jarg1) {
  void * jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  String result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = StreamPeerTCP_get_connected_host(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerTCP_get_connected_port(void * jarg1) {
  int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  int result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = (int)StreamPeerTCP_get_connected_port(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeerTCP_disconnect(void * jarg1) {
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  StreamPeerTCP_disconnect(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamPeerTCP() {
  void * jresult ;
  StreamPeerTCP *result = 0 ;
  
  result = (StreamPeerTCP *)new_StreamPeerTCP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StreamPeerTCP(void * jarg1) {
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  delete_StreamPeerTCP(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBox_test_mask(void * jarg1, Vector2* jarg2, void * jarg3) {
  unsigned int jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool result;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return 0;
  } 
  result = (bool)StyleBox_test_mask(arg1,(Vector2 const &)*arg2,(Rect2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBox_set_default_margin(void * jarg1, int jarg2, float jarg3) {
  StyleBox *arg1 = (StyleBox *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBox_set_default_margin(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBox_get_default_margin(void * jarg1, int jarg2) {
  float jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBox_get_default_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBox_get_margin(void * jarg1, int jarg2) {
  float jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBox_get_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_StyleBox_get_minimum_size(void * jarg1) {
  Vector2 jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 result;
  
  arg1 = (StyleBox *)jarg1; 
  result = StyleBox_get_minimum_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_StyleBox_get_center_size(void * jarg1) {
  Vector2 jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 result;
  
  arg1 = (StyleBox *)jarg1; 
  result = StyleBox_get_center_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_StyleBox_get_offset(void * jarg1) {
  Vector2 jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 result;
  
  arg1 = (StyleBox *)jarg1; 
  result = StyleBox_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBox_draw(void * jarg1, void * jarg2, void * jarg3) {
  StyleBox *arg1 = (StyleBox *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  StyleBox_draw(arg1,(RID const &)*arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StyleBox(void * jarg1) {
  StyleBox *arg1 = (StyleBox *) 0 ;
  
  arg1 = (StyleBox *)jarg1; 
  delete_StyleBox(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxEmpty() {
  void * jresult ;
  StyleBoxEmpty *result = 0 ;
  
  result = (StyleBoxEmpty *)memnew(StyleBoxEmpty());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StyleBoxEmpty(void * jarg1) {
  StyleBoxEmpty *arg1 = (StyleBoxEmpty *) 0 ;
  
  arg1 = (StyleBoxEmpty *)jarg1; 
  delete_StyleBoxEmpty(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxFlat() {
  void * jresult ;
  StyleBoxFlat *result = 0 ;
  
  result = (StyleBoxFlat *)memnew(StyleBoxFlat());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_bg_color(void * jarg1, void * jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  StyleBoxFlat_set_bg_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxFlat_get_bg_color(void * jarg1) {
  void * jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = StyleBoxFlat_get_bg_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_light_color(void * jarg1, void * jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  StyleBoxFlat_set_light_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxFlat_get_light_color(void * jarg1) {
  void * jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = StyleBoxFlat_get_light_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_dark_color(void * jarg1, void * jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  StyleBoxFlat_set_dark_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxFlat_get_dark_color(void * jarg1) {
  void * jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = StyleBoxFlat_get_dark_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_border_size(void * jarg1, int jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  int arg2 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (int)jarg2; 
  StyleBoxFlat_set_border_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StyleBoxFlat_get_border_size(void * jarg1) {
  int jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  int result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = (int)StyleBoxFlat_get_border_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_border_blend(void * jarg1, unsigned int jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxFlat_set_border_blend(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxFlat_get_border_blend(void * jarg1) {
  unsigned int jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = (bool)StyleBoxFlat_get_border_blend(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_draw_center(void * jarg1, unsigned int jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxFlat_set_draw_center(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxFlat_get_draw_center(void * jarg1) {
  unsigned int jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = (bool)StyleBoxFlat_get_draw_center(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StyleBoxFlat(void * jarg1) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  delete_StyleBoxFlat(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxImageMask() {
  void * jresult ;
  StyleBoxImageMask *result = 0 ;
  
  result = (StyleBoxImageMask *)memnew(StyleBoxImageMask());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxImageMask_set_image(void * jarg1, void * jarg2) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  StyleBoxImageMask_set_image(arg1,(Image const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxImageMask_get_image(void * jarg1) {
  void * jresult ;
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  Image result;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  result = StyleBoxImageMask_get_image(arg1);
  jresult = memnew(Image((const Image &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxImageMask_set_expand(void * jarg1, unsigned int jarg2) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxImageMask_set_expand(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxImageMask_get_expand(void * jarg1) {
  unsigned int jresult ;
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  bool result;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  result = (bool)StyleBoxImageMask_get_expand(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxImageMask_set_expand_margin_size(void * jarg1, int jarg2, float jarg3) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBoxImageMask_set_expand_margin_size(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBoxImageMask_get_expand_margin_size(void * jarg1, int jarg2) {
  float jresult ;
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBoxImageMask_get_expand_margin_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StyleBoxImageMask(void * jarg1) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  delete_StyleBoxImageMask(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxTexture() {
  void * jresult ;
  StyleBoxTexture *result = 0 ;
  
  result = (StyleBoxTexture *)memnew(StyleBoxTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_texture(void * jarg1, void * jarg2) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (Texture *)jarg2; 
  StyleBoxTexture_set_texture(arg1,arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_StyleBoxTexture_get_texture(void * jarg1) {
  Texture* jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  Ref< Texture > result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  result = StyleBoxTexture_get_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_margin_size(void * jarg1, int jarg2, float jarg3) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBoxTexture_set_margin_size(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBoxTexture_get_margin_size(void * jarg1, int jarg2) {
  float jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBoxTexture_get_margin_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_expand_margin_size(void * jarg1, int jarg2, float jarg3) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBoxTexture_set_expand_margin_size(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBoxTexture_get_expand_margin_size(void * jarg1, int jarg2) {
  float jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBoxTexture_get_expand_margin_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_region_rect(void * jarg1, void * jarg2) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  StyleBoxTexture_set_region_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxTexture_get_region_rect(void * jarg1) {
  void * jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  Rect2 result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  result = StyleBoxTexture_get_region_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_draw_center(void * jarg1, unsigned int jarg2) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxTexture_set_draw_center(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxTexture_get_draw_center(void * jarg1) {
  unsigned int jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  bool result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  result = (bool)StyleBoxTexture_get_draw_center(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StyleBoxTexture(void * jarg1) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  delete_StyleBoxTexture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SurfaceTool() {
  void * jresult ;
  SurfaceTool *result = 0 ;
  
  result = (SurfaceTool *)memnew(SurfaceTool());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_begin(void * jarg1, int jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  int arg2 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (int)jarg2; 
  SurfaceTool_begin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_vertex(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_vertex(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_color(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_normal(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_normal(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_tangent(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Plane *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_tangent(arg1,(Plane const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_uv(void * jarg1, Vector2* jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_uv(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_uv2(void * jarg1, Vector2* jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_uv2(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_bones(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_bones(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_weights(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  RealArray *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (RealArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_weights(arg1,(RealArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_smooth_group(void * jarg1, unsigned int jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  bool arg2 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SurfaceTool_add_smooth_group(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  Vector2Array *arg5 = 0 ;
  Vector3Array *arg6 = 0 ;
  Array *arg7 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3Array *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg7 = (Array *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4,(Vector2Array const &)*arg5,(Vector3Array const &)*arg6,(Array const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  Vector2Array *arg5 = 0 ;
  Vector3Array *arg6 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3Array *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4,(Vector2Array const &)*arg5,(Vector3Array const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  Vector2Array *arg5 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4,(Vector2Array const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_5(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_set_material(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Material *arg2 = (Material *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Material *)jarg2; 
  SurfaceTool_set_material(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_index(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_index(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_deindex(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_deindex(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_generate_normals(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_generate_normals(arg1);
}


SWIGEXPORT Mesh* SWIGSTDCALL CSharp_SurfaceTool_commit__SWIG_0(void * jarg1, void * jarg2) {
  Mesh* jresult ;
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Mesh *arg2 = (Mesh *) 0 ;
  Ref< Mesh > result;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Mesh *)jarg2; 
  result = SurfaceTool_commit__SWIG_0(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Mesh* SWIGSTDCALL CSharp_SurfaceTool_commit__SWIG_1(void * jarg1) {
  Mesh* jresult ;
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Ref< Mesh > result;
  
  arg1 = (SurfaceTool *)jarg1; 
  result = SurfaceTool_commit__SWIG_0(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_clear(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SurfaceTool(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  delete_SurfaceTool(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TCP_Server_listen__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  int arg2 ;
  StringArray *arg3 = 0 ;
  int result;
  
  arg1 = (TCP_Server *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  result = (int)TCP_Server_listen__SWIG_0(arg1,arg2,(StringArray const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TCP_Server_listen__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TCP_Server *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TCP_Server_listen__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TCP_Server_is_connection_available(void * jarg1) {
  unsigned int jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  bool result;
  
  arg1 = (TCP_Server *)jarg1; 
  result = (bool)TCP_Server_is_connection_available(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TCP_Server_take_connection(void * jarg1) {
  void * jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TCP_Server *)jarg1; 
  result = (Object *)TCP_Server_take_connection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TCP_Server_stop(void * jarg1) {
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  
  arg1 = (TCP_Server *)jarg1; 
  TCP_Server_stop(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TCP_Server() {
  void * jresult ;
  TCP_Server *result = 0 ;
  
  result = (TCP_Server *)new_TCP_Server();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TCP_Server(void * jarg1) {
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  
  arg1 = (TCP_Server *)jarg1; 
  delete_TCP_Server(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_get_width(void * jarg1) {
  int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  int result;
  
  arg1 = (Texture *)jarg1; 
  result = (int)Texture_get_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_get_height(void * jarg1) {
  int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  int result;
  
  arg1 = (Texture *)jarg1; 
  result = (int)Texture_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Texture_get_size(void * jarg1) {
  Vector2 jresult ;
  Texture *arg1 = (Texture *) 0 ;
  Vector2 result;
  
  arg1 = (Texture *)jarg1; 
  result = Texture_get_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_get_rid(void * jarg1) {
  void * jresult ;
  Texture *arg1 = (Texture *) 0 ;
  RID result;
  
  arg1 = (Texture *)jarg1; 
  result = Texture_get_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_has_alpha(void * jarg1) {
  unsigned int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  bool result;
  
  arg1 = (Texture *)jarg1; 
  result = (bool)Texture_has_alpha(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_set_flags(void * jarg1, int jarg2) {
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Texture_set_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_get_flags(void * jarg1) {
  int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  int result;
  
  arg1 = (Texture *)jarg1; 
  result = (int)Texture_get_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, void * jarg4, unsigned int jarg5) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  Texture_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, void * jarg4) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Texture_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw__SWIG_2(void * jarg1, void * jarg2, Vector2* jarg3) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Texture_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  Texture_draw_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Texture_draw_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  Texture_draw_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect_region__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  Texture_draw_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect_region__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Texture_draw_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect_region__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Texture_draw_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Texture(void * jarg1) {
  Texture *arg1 = (Texture *) 0 ;
  
  arg1 = (Texture *)jarg1; 
  delete_Texture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Theme() {
  void * jresult ;
  Theme *result = 0 ;
  
  result = (Theme *)memnew(Theme());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_icon(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Texture *arg4 = (Texture *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Texture *)jarg4; 
  Theme_set_icon(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Theme_get_icon(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Texture* jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< Texture > result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_icon(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_icon(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_icon(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_icon(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_icon(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_icon_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_icon_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_stylebox(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  StyleBox *arg4 = (StyleBox *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StyleBox *)jarg4; 
  Theme_set_stylebox(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT StyleBox* SWIGSTDCALL CSharp_Theme_get_stylebox(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  StyleBox* jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< StyleBox > result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_stylebox(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_stylebox(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_stylebox(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_stylebox(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_stylebox(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_stylebox_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_stylebox_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_stylebox_types(void * jarg1) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  result = Theme_get_stylebox_types(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_font(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Font *arg4 = (Font *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Font *)jarg4; 
  Theme_set_font(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT Font* SWIGSTDCALL CSharp_Theme_get_font(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Font* jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< Font > result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_font(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_font(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_font(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_font(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_font(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_font_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_font_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_color(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Theme_set_color(arg1,(String const &)*arg2,(String const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_color(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_color(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_color(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_color(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_color(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_color(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_color_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_color_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_constant(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, int jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  Theme_set_constant(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Theme_get_constant(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)Theme_get_constant(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_constant(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_constant(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_constant(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_constant(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_constant_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_constant_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_default_font(void * jarg1, void * jarg2) {
  Theme *arg1 = (Theme *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  arg2 = (Object *)jarg2; 
  Theme_set_default_font(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_default_font(void * jarg1) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Theme *)jarg1; 
  result = (Object *)Theme_get_default_font(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_type_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_type_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_copy_default_theme(void * jarg1) {
  Theme *arg1 = (Theme *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  Theme_copy_default_theme(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Theme(void * jarg1) {
  Theme *arg1 = (Theme *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  delete_Theme(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TileSet() {
  void * jresult ;
  TileSet *result = 0 ;
  
  result = (TileSet *)memnew(TileSet());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_create_tile(void * jarg1, int jarg2) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  TileSet_create_tile(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_name(void * jarg1, int jarg2, wchar_t * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TileSet_tile_set_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_name(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_texture(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  TileSet_tile_set_texture(arg1,arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TileSet_tile_get_texture(void * jarg1, int jarg2) {
  Texture* jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_texture(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_material(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  CanvasItemMaterial *arg3 = (CanvasItemMaterial *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (CanvasItemMaterial *)jarg3; 
  TileSet_tile_set_material(arg1,arg2,arg3);
}


SWIGEXPORT CanvasItemMaterial* SWIGSTDCALL CSharp_TileSet_tile_get_material(void * jarg1, int jarg2) {
  CanvasItemMaterial* jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Ref< CanvasItemMaterial > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_material(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_texture_offset(void * jarg1, int jarg2, Vector2* jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_texture_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileSet_tile_get_texture_offset(void * jarg1, int jarg2) {
  Vector2 jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_texture_offset(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_shape_offset(void * jarg1, int jarg2, Vector2* jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_shape_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileSet_tile_get_shape_offset(void * jarg1, int jarg2) {
  Vector2 jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_shape_offset(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_region(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_region(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_region(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Rect2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_region(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_shape(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Shape2D *arg3 = (Shape2D *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Shape2D *)jarg3; 
  TileSet_tile_set_shape(arg1,arg2,arg3);
}


SWIGEXPORT Shape2D* SWIGSTDCALL CSharp_TileSet_tile_get_shape(void * jarg1, int jarg2) {
  Shape2D* jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Ref< Shape2D > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_shape(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_shapes(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_shapes(arg1,arg2,(Array const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_shapes(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_shapes(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_navigation_polygon(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  NavigationPolygon *arg3 = (NavigationPolygon *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NavigationPolygon *)jarg3; 
  TileSet_tile_set_navigation_polygon(arg1,arg2,arg3);
}


SWIGEXPORT NavigationPolygon* SWIGSTDCALL CSharp_TileSet_tile_get_navigation_polygon(void * jarg1, int jarg2) {
  NavigationPolygon* jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Ref< NavigationPolygon > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_navigation_polygon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_navigation_polygon_offset(void * jarg1, int jarg2, Vector2* jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_navigation_polygon_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileSet_tile_get_navigation_polygon_offset(void * jarg1, int jarg2) {
  Vector2 jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_navigation_polygon_offset(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_light_occluder(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  OccluderPolygon2D *arg3 = (OccluderPolygon2D *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (OccluderPolygon2D *)jarg3; 
  TileSet_tile_set_light_occluder(arg1,arg2,arg3);
}


SWIGEXPORT OccluderPolygon2D* SWIGSTDCALL CSharp_TileSet_tile_get_light_occluder(void * jarg1, int jarg2) {
  OccluderPolygon2D* jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Ref< OccluderPolygon2D > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_light_occluder(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_occluder_offset(void * jarg1, int jarg2, Vector2* jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_occluder_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileSet_tile_get_occluder_offset(void * jarg1, int jarg2) {
  Vector2 jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_occluder_offset(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_remove_tile(void * jarg1, int jarg2) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  TileSet_remove_tile(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_clear(void * jarg1) {
  TileSet *arg1 = (TileSet *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  TileSet_clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileSet_get_last_unused_tile_id(void * jarg1) {
  int jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int result;
  
  arg1 = (TileSet *)jarg1; 
  result = (int)TileSet_get_last_unused_tile_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileSet_find_tile_by_name(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (TileSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)TileSet_find_tile_by_name(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_get_tiles_ids(void * jarg1) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  Array result;
  
  arg1 = (TileSet *)jarg1; 
  result = TileSet_get_tiles_ids(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TileSet(void * jarg1) {
  TileSet *arg1 = (TileSet *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  delete_TileSet(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Translation() {
  void * jresult ;
  Translation *result = 0 ;
  
  result = (Translation *)memnew(Translation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Translation_set_locale(void * jarg1, wchar_t * jarg2) {
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Translation_set_locale(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Translation_get_locale(void * jarg1) {
  void * jresult ;
  Translation *arg1 = (Translation *) 0 ;
  String result;
  
  arg1 = (Translation *)jarg1; 
  result = Translation_get_locale(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Translation_add_message(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Translation_add_message(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Translation_get_message(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Translation_get_message(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Translation_erase_message(void * jarg1, wchar_t * jarg2) {
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Translation_erase_message(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Translation_get_message_list(void * jarg1) {
  void * jresult ;
  Translation *arg1 = (Translation *) 0 ;
  StringArray result;
  
  arg1 = (Translation *)jarg1; 
  result = Translation_get_message_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Translation_get_message_count(void * jarg1) {
  int jresult ;
  Translation *arg1 = (Translation *) 0 ;
  int result;
  
  arg1 = (Translation *)jarg1; 
  result = (int)Translation_get_message_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Translation(void * jarg1) {
  Translation *arg1 = (Translation *) 0 ;
  
  arg1 = (Translation *)jarg1; 
  delete_Translation(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_set_locale(void * jarg1, wchar_t * jarg2) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TranslationServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TranslationServer_set_locale(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationServer_get_locale(void * jarg1) {
  void * jresult ;
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  String result;
  
  arg1 = (TranslationServer *)jarg1; 
  result = TranslationServer_get_locale(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationServer_translate(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (TranslationServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = TranslationServer_translate(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_add_translation(void * jarg1, void * jarg2) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  Translation *arg2 = (Translation *) 0 ;
  
  arg1 = (TranslationServer *)jarg1; 
  arg2 = (Translation *)jarg2; 
  TranslationServer_add_translation(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_remove_translation(void * jarg1, void * jarg2) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  Translation *arg2 = (Translation *) 0 ;
  
  arg1 = (TranslationServer *)jarg1; 
  arg2 = (Translation *)jarg2; 
  TranslationServer_remove_translation(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_clear(void * jarg1) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  
  arg1 = (TranslationServer *)jarg1; 
  TranslationServer_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationServer_SingletonGetInstance() {
  void * jresult ;
  TranslationServer *result = 0 ;
  
  result = (TranslationServer *)TranslationServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_cell_mode(void * jarg1, int jarg2, int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TreeItem_set_cell_mode(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TreeItem_get_cell_mode(void * jarg1, int jarg2) {
  int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TreeItem_get_cell_mode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_checked(void * jarg1, int jarg2, unsigned int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TreeItem_set_checked(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_checked(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_checked(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_text(void * jarg1, int jarg2, wchar_t * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TreeItem_set_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_text(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_icon(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  TreeItem_set_icon(arg1,arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TreeItem_get_icon(void * jarg1, int jarg2) {
  Texture* jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_icon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_icon_region(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  TreeItem_set_icon_region(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_icon_region(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Rect2 result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_icon_region(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_icon_max_width(void * jarg1, int jarg2, int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TreeItem_set_icon_max_width(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TreeItem_get_icon_max_width(void * jarg1, int jarg2) {
  int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TreeItem_get_icon_max_width(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_range(void * jarg1, int jarg2, float jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  TreeItem_set_range(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TreeItem_get_range(void * jarg1, int jarg2) {
  float jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)TreeItem_get_range(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_range_config__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  TreeItem_set_range_config__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_range_config__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  TreeItem_set_range_config__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_range_config(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Dictionary result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_range_config(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_metadata(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  TreeItem_set_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_get_metadata(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_get_metadata(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_draw(void * jarg1, int jarg2, void * jarg3, wchar_t * jarg4) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  TreeItem_set_custom_draw(arg1,arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_collapsed(void * jarg1, unsigned int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  bool arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TreeItem_set_collapsed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_collapsed(void * jarg1) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  result = (bool)TreeItem_is_collapsed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_next(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_next(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_prev(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_prev(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_parent(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_parent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_children(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_children(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_next_visible(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_next_visible(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_prev_visible(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_prev_visible(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_remove_child(void * jarg1, void * jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  Object *arg2 = (Object *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (TreeItem *)TreeItem_remove_child(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_selectable(void * jarg1, int jarg2, unsigned int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TreeItem_set_selectable(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_selectable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_selectable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_selected(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_selected(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_select(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_select(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_deselect(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_deselect(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_editable(void * jarg1, int jarg2, unsigned int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TreeItem_set_editable(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_editable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_editable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_color(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TreeItem_set_custom_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_clear_custom_color(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_clear_custom_color(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_bg_color__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  TreeItem_set_custom_bg_color__SWIG_0(arg1,arg2,(Color const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_bg_color__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TreeItem_set_custom_bg_color__SWIG_0(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_clear_custom_bg_color(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_clear_custom_bg_color(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_custom_bg_color(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_custom_bg_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_add_button__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  TreeItem_add_button__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_add_button__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  int arg4 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  arg4 = (int)jarg4; 
  TreeItem_add_button__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_add_button__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  TreeItem_add_button__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TreeItem_get_button_count(void * jarg1, int jarg2) {
  int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TreeItem_get_button_count(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TreeItem_get_button(void * jarg1, int jarg2, int jarg3) {
  Texture* jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  Ref< Texture > result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = TreeItem_get_button(arg1,arg2,arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_erase_button(void * jarg1, int jarg2, int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TreeItem_erase_button(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_button_disabled(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TreeItem_is_button_disabled(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_tooltip(void * jarg1, int jarg2, wchar_t * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TreeItem_set_tooltip(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_tooltip(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_tooltip(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_move_to_top(void * jarg1) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  TreeItem_move_to_top(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_move_to_bottom(void * jarg1) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  TreeItem_move_to_bottom(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UndoRedo() {
  void * jresult ;
  UndoRedo *result = 0 ;
  
  result = (UndoRedo *)memnew(UndoRedo());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_create_action__SWIG_0(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (UndoRedo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  UndoRedo_create_action__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_create_action__SWIG_1(void * jarg1, wchar_t * jarg2) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  UndoRedo_create_action__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_commit_action(void * jarg1) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  UndoRedo_commit_action(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_3(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_4(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_5(void * jarg1, void * jarg2, wchar_t * jarg3) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_3(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_4(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_5(void * jarg1, void * jarg2, wchar_t * jarg3) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_property(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_property(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_property(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_property(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_reference(void * jarg1, void * jarg2) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  UndoRedo_add_do_reference(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_reference(void * jarg1, void * jarg2) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  UndoRedo_add_undo_reference(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_clear_history(void * jarg1) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  UndoRedo_clear_history(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UndoRedo_get_current_action_name(void * jarg1) {
  void * jresult ;
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  String result;
  
  arg1 = (UndoRedo *)jarg1; 
  result = UndoRedo_get_current_action_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UndoRedo_get_version(void * jarg1) {
  int jresult ;
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  int result;
  
  arg1 = (UndoRedo *)jarg1; 
  result = (int)UndoRedo_get_version(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoStream(void * jarg1) {
  VideoStream *arg1 = (VideoStream *) 0 ;
  
  arg1 = (VideoStream *)jarg1; 
  delete_VideoStream(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoStreamTheora() {
  void * jresult ;
  VideoStreamTheora *result = 0 ;
  
  result = (VideoStreamTheora *)memnew(VideoStreamTheora());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VideoStreamTheora(void * jarg1) {
  VideoStreamTheora *arg1 = (VideoStreamTheora *) 0 ;
  
  arg1 = (VideoStreamTheora *)jarg1; 
  delete_VideoStreamTheora(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_texture_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_texture_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_texture_create_from_image__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Image *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_texture_create_from_image__SWIG_0(arg1,(Image const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_texture_create_from_image__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Image *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return 0;
  } 
  result = VisualServer_texture_create_from_image__SWIG_0(arg1,(Image const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_texture_set_flags(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_texture_set_flags(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_texture_get_flags(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_texture_get_flags(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_texture_get_width(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_texture_get_width(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_texture_get_height(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_texture_get_height(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_texture_set_shrink_all_x2_on_set_data(void * jarg1, unsigned int jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  bool arg2 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VisualServer_texture_set_shrink_all_x2_on_set_data(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_shader_create__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = VisualServer_shader_create__SWIG_0(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_shader_create__SWIG_1(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_shader_create__SWIG_0(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_shader_set_mode(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_shader_set_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_material_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_material_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_shader(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_material_set_shader(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_material_get_shader(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_material_get_shader(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_param(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  VisualServer_material_set_param(arg1,(RID const &)*arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_get_param(void * jarg1, void * jarg2, wchar_t * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  VisualServer_material_get_param(arg1,(RID const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_flag(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  VisualServer_material_set_flag(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_material_get_flag(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)VisualServer_material_get_flag(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_blend_mode(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_material_set_blend_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_material_get_blend_mode(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_material_get_blend_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_line_width(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_material_set_line_width(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_material_get_line_width(void * jarg1, void * jarg2) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)VisualServer_material_get_line_width(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_mesh_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_mesh_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_add_surface__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  Array *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  VisualServer_mesh_add_surface__SWIG_0(arg1,(RID const &)*arg2,arg3,(Array const &)*arg4,(Array const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_add_surface__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  Array *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  VisualServer_mesh_add_surface__SWIG_0(arg1,(RID const &)*arg2,arg3,(Array const &)*arg4,(Array const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_surface_set_material__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  VisualServer_mesh_surface_set_material__SWIG_0(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_surface_set_material__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_mesh_surface_set_material__SWIG_0(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_material(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_mesh_surface_get_material(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_array_len(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_array_len(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_array_index_len(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_array_index_len(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_format(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_format(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_primitive_type(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_primitive_type(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_remove_surface(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_mesh_remove_surface(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_get_surface_count(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_mesh_get_surface_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_multimesh_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_set_mesh(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_set_mesh(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_set_aabb(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_set_aabb(arg1,(RID const &)*arg2,(AABB const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_instance_set_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_instance_set_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_instance_set_color(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_instance_set_color(arg1,(RID const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_get_mesh(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_multimesh_get_mesh(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_get_aabb(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB *arg3 = 0 ;
  AABB result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return 0;
  } 
  result = VisualServer_multimesh_get_aabb(arg1,(RID const &)*arg2,(AABB const &)*arg3);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_instance_get_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_multimesh_instance_get_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_instance_get_color(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_multimesh_instance_get_color(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_particles_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_amount(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_particles_set_amount(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_particles_get_amount(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_particles_get_amount(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_emitting(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_particles_set_emitting(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_particles_is_emitting(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_particles_is_emitting(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_visibility_aabb(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_visibility_aabb(arg1,(RID const &)*arg2,(AABB const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_get_visibility_aabb(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_particles_get_visibility_aabb(arg1,(RID const &)*arg2);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_variable(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_variable(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_variable(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_variable(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_randomness(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_randomness(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_randomness(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_randomness(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_color_phases(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_particles_set_color_phases(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_particles_get_color_phases(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_particles_get_color_phases(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_color_phase_pos(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_color_phase_pos(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_color_phase_pos(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_color_phase_pos(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_color_phase_color(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_color_phase_color(arg1,(RID const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_get_color_phase_color(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_particles_get_color_phase_color(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_attractors(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_particles_set_attractors(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_particles_get_attractors(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_particles_get_attractors(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_attractor_pos(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_attractor_pos(arg1,(RID const &)*arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_get_attractor_pos(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Vector3 result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_particles_get_attractor_pos(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_attractor_strength(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_attractor_strength(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_attractor_strength(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_attractor_strength(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_material__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  VisualServer_particles_set_material__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_material__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_material__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_height_from_velocity(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_particles_set_height_from_velocity(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_particles_has_height_from_velocity(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_particles_has_height_from_velocity(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_light_create(void * jarg1, int jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = VisualServer_light_create(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_light_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_light_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_color(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_light_set_color(arg1,(RID const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_light_get_color(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_light_get_color(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_shadow(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_light_set_shadow(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_light_has_shadow(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_light_has_shadow(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_volumetric(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_light_set_volumetric(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_light_is_volumetric(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_light_is_volumetric(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_projector(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_light_set_projector(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_light_get_projector(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_light_get_projector(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_var(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_light_set_var(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_light_get_var(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_light_get_var(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_skeleton_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_skeleton_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_skeleton_resize(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_skeleton_resize(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_skeleton_get_bone_count(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_skeleton_get_bone_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_skeleton_bone_set_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_skeleton_bone_set_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_skeleton_bone_get_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_skeleton_bone_get_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_room_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_room_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_room_set_bounds(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Dictionary *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Dictionary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return ;
  } 
  VisualServer_room_set_bounds(arg1,(RID const &)*arg2,(Dictionary const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_room_get_bounds(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Dictionary result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_room_get_bounds(arg1,(RID const &)*arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_portal_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_portal_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_shape(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  VisualServer_portal_set_shape(arg1,(RID const &)*arg2,(Vector2Array const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_portal_get_shape(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_portal_get_shape(arg1,(RID const &)*arg2);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_enabled(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_portal_set_enabled(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_portal_is_enabled(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_portal_is_enabled(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_disable_distance(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_portal_set_disable_distance(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_portal_get_disable_distance(void * jarg1, void * jarg2) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)VisualServer_portal_get_disable_distance(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_disabled_color(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_portal_set_disabled_color(arg1,(RID const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_portal_get_disabled_color(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_portal_get_disabled_color(arg1,(RID const &)*arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_camera_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_camera_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_camera_set_perspective(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  VisualServer_camera_set_perspective(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_camera_set_orthogonal(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  VisualServer_camera_set_orthogonal(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_camera_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_camera_set_transform(arg1,(RID const &)*arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_viewport_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_set_rect(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_set_rect(arg1,(RID const &)*arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_get_rect(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_viewport_get_rect(arg1,(RID const &)*arg2);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_attach_camera__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_attach_camera__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_attach_camera__SWIG_1(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_attach_camera__SWIG_0(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_get_attached_camera(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_viewport_get_attached_camera(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_get_scenario(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_viewport_get_scenario(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_attach_canvas(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_attach_canvas(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_remove_canvas(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_remove_canvas(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_set_global_canvas_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_set_global_canvas_transform(arg1,(RID const &)*arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_scenario_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_scenario_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_scenario_set_debug(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_scenario_set_debug(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_instance_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_base(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_base(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_base_aabb(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_base_aabb(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_instance_set_transform(arg1,(RID const &)*arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Transform result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_transform(arg1,(RID const &)*arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_instance_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_instance_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_instance_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_attach_skeleton(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_instance_attach_skeleton(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_skeleton(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_skeleton(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_set_room(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_instance_set_room(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_room(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_room(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_set_exterior(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_instance_set_exterior(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_instance_is_exterior(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_instance_is_exterior(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instances_cull_aabb(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  AABB *arg2 = 0 ;
  RID *arg3 = 0 ;
  Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instances_cull_aabb(arg1,(AABB const &)*arg2,(RID const &)*arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instances_cull_ray(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instances_cull_ray(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(RID const &)*arg4);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instances_cull_convex(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Array *arg2 = 0 ;
  RID *arg3 = 0 ;
  Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instances_cull_convex(arg1,(Array const &)*arg2,(RID const &)*arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_geometry_override_material_param(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_geometry_override_material_param(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_geometry_get_material_param(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_geometry_get_material_param(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_get_test_cube(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_get_test_cube(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_canvas_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_canvas_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_canvas_item_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_canvas_item_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_parent(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_set_parent(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_canvas_item_get_parent(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_canvas_item_get_parent(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_set_transform(arg1,(RID const &)*arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_custom_rect(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_set_custom_rect(arg1,(RID const &)*arg2,arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_clip(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_canvas_item_set_clip(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_opacity(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_canvas_item_set_opacity(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_canvas_item_get_opacity(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (float)VisualServer_canvas_item_get_opacity(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_self_opacity(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_canvas_item_set_self_opacity(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_canvas_item_get_self_opacity(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (float)VisualServer_canvas_item_get_self_opacity(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_z(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_canvas_item_set_z(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_line__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, Vector2* jarg4, void * jarg5, float jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  VisualServer_canvas_item_add_line__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_line__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, Vector2* jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_line__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_rect(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_rect(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  Color *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  VisualServer_canvas_item_add_texture_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,arg5,(Color const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  Color *arg6 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_texture_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,arg5,(Color const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  VisualServer_canvas_item_add_texture_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect_region__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Rect2 *arg5 = 0 ;
  Color *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (Rect2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  VisualServer_canvas_item_add_texture_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(Rect2 const &)*arg5,(Color const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect_region__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Rect2 *arg5 = 0 ;
  Color *arg6 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (Rect2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_texture_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(Rect2 const &)*arg5,(Color const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect_region__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Rect2 *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (Rect2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_texture_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(Rect2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_style_box__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  RID *arg5 = 0 ;
  RealArray *arg6 = 0 ;
  Color *arg7 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg6 = (RealArray *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  arg7 = (Color *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_style_box__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(RID const &)*arg5,(RealArray const &)*arg6,(Color const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_style_box__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  RID *arg5 = 0 ;
  RealArray *arg6 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg6 = (RealArray *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_style_box__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(RID const &)*arg5,(RealArray const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_circle(void * jarg1, void * jarg2, Vector2* jarg3, float jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  float arg4 ;
  Color *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_circle(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_set_canvas_transform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_set_canvas_transform(arg1,(RID const &)*arg2,(RID const &)*arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_clear(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_clear(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_raise(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_raise(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_rotation(void * jarg1, float jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  VisualServer_cursor_set_rotation(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_texture(void * jarg1, void * jarg2, Vector2* jarg3, int jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  VisualServer_cursor_set_texture(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_visible(void * jarg1, unsigned int jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  VisualServer_cursor_set_visible(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_pos(void * jarg1, Vector2* jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_cursor_set_pos(arg1,(Vector2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_black_bars_set_margins(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  VisualServer_black_bars_set_margins(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_black_bars_set_images(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_black_bars_set_images(arg1,(RID const &)*arg2,(RID const &)*arg3,(RID const &)*arg4,(RID const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_make_sphere_mesh(void * jarg1, int jarg2, int jarg3, float jarg4) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  result = VisualServer_make_sphere_mesh(arg1,arg2,arg3,arg4);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_add_surface_from_planes(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Array *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  VisualServer_mesh_add_surface_from_planes(arg1,(RID const &)*arg2,(Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_draw(void * jarg1) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  VisualServer_draw(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_sync(void * jarg1) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  VisualServer_sync(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_free_rid(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_set_default_clear_color(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_set_default_clear_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_get_render_info(void * jarg1, int jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)VisualServer_get_render_info(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_SingletonGetInstance() {
  void * jresult ;
  VisualServer *result = 0 ;
  
  result = (VisualServer *)VisualServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeakRef() {
  void * jresult ;
  WeakRef *result = 0 ;
  
  result = (WeakRef *)memnew(WeakRef());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeakRef_get_ref(void * jarg1) {
  void * jresult ;
  WeakRef *arg1 = (WeakRef *) 0 ;
  Object *result = 0 ;
  
  arg1 = (WeakRef *)jarg1; 
  result = (Object *)WeakRef_get_ref(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeakRef(void * jarg1) {
  WeakRef *arg1 = (WeakRef *) 0 ;
  
  arg1 = (WeakRef *)jarg1; 
  delete_WeakRef(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World() {
  void * jresult ;
  World *result = 0 ;
  
  result = (World *)memnew(World());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_space(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  RID result;
  
  arg1 = (World *)jarg1; 
  result = World_get_space(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_scenario(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  RID result;
  
  arg1 = (World *)jarg1; 
  result = World_get_scenario(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_sound_space(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  RID result;
  
  arg1 = (World *)jarg1; 
  result = World_get_sound_space(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_set_environment(void * jarg1, void * jarg2) {
  World *arg1 = (World *) 0 ;
  Environment *arg2 = (Environment *) 0 ;
  
  arg1 = (World *)jarg1; 
  arg2 = (Environment *)jarg2; 
  World_set_environment(arg1,arg2);
}


SWIGEXPORT Environment* SWIGSTDCALL CSharp_World_get_environment(void * jarg1) {
  Environment* jresult ;
  World *arg1 = (World *) 0 ;
  Ref< Environment > result;
  
  arg1 = (World *)jarg1; 
  result = World_get_environment(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_direct_space_state(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  PhysicsDirectSpaceState *result = 0 ;
  
  arg1 = (World *)jarg1; 
  result = (PhysicsDirectSpaceState *)World_get_direct_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_World(void * jarg1) {
  World *arg1 = (World *) 0 ;
  
  arg1 = (World *)jarg1; 
  delete_World(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World2D() {
  void * jresult ;
  World2D *result = 0 ;
  
  result = (World2D *)memnew(World2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_canvas(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  RID result;
  
  arg1 = (World2D *)jarg1; 
  result = World2D_get_canvas(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_space(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  RID result;
  
  arg1 = (World2D *)jarg1; 
  result = World2D_get_space(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_sound_space(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  RID result;
  
  arg1 = (World2D *)jarg1; 
  result = World2D_get_sound_space(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_direct_space_state(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  Physics2DDirectSpaceState *result = 0 ;
  
  arg1 = (World2D *)jarg1; 
  result = (Physics2DDirectSpaceState *)World2D_get_direct_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_World2D(void * jarg1) {
  World2D *arg1 = (World2D *) 0 ;
  
  arg1 = (World2D *)jarg1; 
  delete_World2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLParser() {
  void * jresult ;
  XMLParser *result = 0 ;
  
  result = (XMLParser *)memnew(XMLParser());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_read(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_read(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_node_type(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_node_type(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_node_name(void * jarg1) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  result = XMLParser_get_node_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_node_data(void * jarg1) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  result = XMLParser_get_node_data(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_node_offset(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_node_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_attribute_count(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_attribute_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_attribute_name(void * jarg1, int jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (int)jarg2; 
  result = XMLParser_get_attribute_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_attribute_value(void * jarg1, int jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (int)jarg2; 
  result = XMLParser_get_attribute_value(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLParser_has_attribute(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)XMLParser_has_attribute(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_named_attribute_value(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = XMLParser_get_named_attribute_value(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_named_attribute_value_safe(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = XMLParser_get_named_attribute_value_safe(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLParser_is_empty(void * jarg1) {
  unsigned int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  bool result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (bool)XMLParser_is_empty(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_current_line(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_current_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLParser_skip_section(void * jarg1) {
  XMLParser *arg1 = (XMLParser *) 0 ;
  
  arg1 = (XMLParser *)jarg1; 
  XMLParser_skip_section(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_seek(void * jarg1, int jarg2) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)XMLParser_seek(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_open(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)XMLParser_open(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_open_buffer(void * jarg1, void * jarg2) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)XMLParser_open_buffer(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLParser(void * jarg1) {
  XMLParser *arg1 = (XMLParser *) 0 ;
  
  arg1 = (XMLParser *)jarg1; 
  delete_XMLParser(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Directory() {
  void * jresult ;
  _Directory *result = 0 ;
  
  result = (_Directory *)memnew(_Directory());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_open(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_open(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_list_dir_begin(void * jarg1) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  result = (bool)_Directory_list_dir_begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Directory_get_next(void * jarg1) {
  void * jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String result;
  
  arg1 = (_Directory *)jarg1; 
  result = _Directory_get_next(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_current_is_dir(void * jarg1) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  result = (bool)_Directory_current_is_dir(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Directory_list_dir_end(void * jarg1) {
  _Directory *arg1 = (_Directory *) 0 ;
  
  arg1 = (_Directory *)jarg1; 
  _Directory_list_dir_end(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_get_drive_count(void * jarg1) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  result = (int)_Directory_get_drive_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Directory_get_drive(void * jarg1, int jarg2) {
  void * jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (_Directory *)jarg1; 
  arg2 = (int)jarg2; 
  result = _Directory_get_drive(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_change_dir(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_change_dir(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Directory_get_current_dir(void * jarg1) {
  void * jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String result;
  
  arg1 = (_Directory *)jarg1; 
  result = _Directory_get_current_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_make_dir(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_make_dir(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_make_dir_recursive(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_make_dir_recursive(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_file_exists(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_Directory_file_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_dir_exists(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_Directory_dir_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_get_space_left(void * jarg1) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  result = (int)_Directory_get_space_left(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_copy(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)_Directory_copy(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_rename(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)_Directory_rename(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_remove(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_remove(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Directory(void * jarg1) {
  _Directory *arg1 = (_Directory *) 0 ;
  
  arg1 = (_Directory *)jarg1; 
  delete__Directory(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_File() {
  void * jresult ;
  _File *result = 0 ;
  
  result = (_File *)memnew(_File());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_open_encrypted(void * jarg1, wchar_t * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  RawArray *arg4 = 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (RawArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)_File_open_encrypted(arg1,(String const &)*arg2,arg3,(RawArray const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_open_encrypted_with_pass(void * jarg1, wchar_t * jarg2, int jarg3, wchar_t * jarg4) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (int)_File_open_encrypted_with_pass(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_open(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)_File_open(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_close(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  _File_close(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_is_open(void * jarg1) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  result = (bool)_File_is_open(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_seek(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_seek(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_seek_end__SWIG_0(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_seek_end__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_seek_end__SWIG_1(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  _File_seek_end__SWIG_0(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_pos(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_len(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_len(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_eof_reached(void * jarg1) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  result = (bool)_File_eof_reached(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_8(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_8(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_16(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_32(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_64(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_File_get_float(void * jarg1) {
  float jresult ;
  _File *arg1 = (_File *) 0 ;
  float result;
  
  arg1 = (_File *)jarg1; 
  result = (float)_File_get_float(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_File_get_double(void * jarg1) {
  float jresult ;
  _File *arg1 = (_File *) 0 ;
  float result;
  
  arg1 = (_File *)jarg1; 
  result = (float)_File_get_double(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_File_get_real(void * jarg1) {
  float jresult ;
  _File *arg1 = (_File *) 0 ;
  float result;
  
  arg1 = (_File *)jarg1; 
  result = (float)_File_get_real(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_buffer(void * jarg1, int jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  RawArray result;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  result = _File_get_buffer(arg1,arg2);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_line(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_line(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_as_text(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_as_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_md5(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _File_get_md5(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_sha256(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _File_get_sha256(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_get_endian_swap(void * jarg1) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  result = (bool)_File_get_endian_swap(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_set_endian_swap(void * jarg1, unsigned int jarg2) {
  _File *arg1 = (_File *) 0 ;
  bool arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _File_set_endian_swap(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_error(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_error(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_get_var(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  _File_get_var(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_csv_line__SWIG_0(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _File_get_csv_line__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_csv_line__SWIG_1(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  StringArray result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_csv_line__SWIG_0(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_8(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_8(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_16(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_16(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_32(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_32(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_64(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_64(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_float(void * jarg1, float jarg2) {
  _File *arg1 = (_File *) 0 ;
  float arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (float)jarg2; 
  _File_store_float(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_double(void * jarg1, float jarg2) {
  _File *arg1 = (_File *) 0 ;
  float arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (float)jarg2; 
  _File_store_double(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_real(void * jarg1, float jarg2) {
  _File *arg1 = (_File *) 0 ;
  float arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (float)jarg2; 
  _File_store_real(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_buffer(void * jarg1, void * jarg2) {
  _File *arg1 = (_File *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  _File_store_buffer(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_line(void * jarg1, wchar_t * jarg2) {
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _File_store_line(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_string(void * jarg1, wchar_t * jarg2) {
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _File_store_string(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_var(void * jarg1, void * jarg2) {
  _File *arg1 = (_File *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  _File_store_var(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_pascal_string(void * jarg1, wchar_t * jarg2) {
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _File_store_pascal_string(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_pascal_string(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_pascal_string(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_file_exists(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_File_file_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_File(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  delete__File(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_box_planes(void * jarg1, void * jarg2) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_build_box_planes(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_cylinder_planes__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = _Geometry_build_cylinder_planes__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_cylinder_planes__SWIG_1(void * jarg1, float jarg2, float jarg3, int jarg4) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = _Geometry_build_cylinder_planes__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_capsule_planes__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = _Geometry_build_capsule_planes__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_capsule_planes__SWIG_1(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = _Geometry_build_capsule_planes__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Geometry_segment_intersects_circle(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, float jarg5) {
  float jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  float arg5 ;
  float result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (float)_Geometry_segment_intersects_circle(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_segment_intersects_segment_2d(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, Vector2* jarg5) {
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  _Geometry_segment_intersects_segment_2d(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Vector2 const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_get_closest_points_between_segments_2d(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, Vector2* jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  Vector2Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_get_closest_points_between_segments_2d(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Vector2 const &)*arg5);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_get_closest_points_between_segments(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_get_closest_points_between_segments(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_get_closest_point_to_segment(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_get_closest_point_to_segment(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Geometry_get_uv84_normal_bit(void * jarg1, void * jarg2) {
  int jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  int result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (int)_Geometry_get_uv84_normal_bit(arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_ray_intersects_triangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  Vector3 *arg6 = 0 ;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  _Geometry_ray_intersects_triangle(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5,(Vector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_segment_intersects_triangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  Vector3 *arg6 = 0 ;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  _Geometry_segment_intersects_triangle(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5,(Vector3 const &)*arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_segment_intersects_sphere(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  float arg5 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = _Geometry_segment_intersects_sphere(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,arg5);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_segment_intersects_cylinder(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = _Geometry_segment_intersects_cylinder(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4,arg5);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_segment_intersects_convex(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = _Geometry_segment_intersects_convex(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Geometry_point_is_inside_triangle(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, Vector2* jarg5) {
  unsigned int jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  bool result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)_Geometry_point_is_inside_triangle(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Vector2 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_triangulate_polygon(void * jarg1, void * jarg2) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2Array *arg2 = 0 ;
  IntArray result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return 0;
  } 
  result = _Geometry_triangulate_polygon(arg1,(Vector2Array const &)*arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_make_atlas(void * jarg1, void * jarg2) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2Array *arg2 = 0 ;
  Dictionary result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return 0;
  } 
  result = _Geometry_make_atlas(arg1,(Vector2Array const &)*arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_SingletonGetInstance() {
  void * jresult ;
  _Geometry *result = 0 ;
  
  result = (_Geometry *)_Geometry_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_variant_to_base64(void * jarg1, void * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  Variant *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = _Marshalls_variant_to_base64(arg1,(Variant const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_base64_to_variant(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  Variant result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_base64_to_variant(arg1,(String const &)*arg2);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_raw_to_base64(void * jarg1, void * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  RawArray *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = _Marshalls_raw_to_base64(arg1,(RawArray const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_base64_to_raw(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  RawArray result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_base64_to_raw(arg1,(String const &)*arg2);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_utf8_to_base64(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_utf8_to_base64(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_base64_to_utf8(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_base64_to_utf8(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_SingletonGetInstance() {
  void * jresult ;
  _Marshalls *result = 0 ;
  
  result = (_Marshalls *)_Marshalls_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Marshalls(void * jarg1) {
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  
  arg1 = (_Marshalls *)jarg1; 
  delete__Marshalls(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mutex() {
  void * jresult ;
  _Mutex *result = 0 ;
  
  result = (_Mutex *)memnew(_Mutex());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mutex__lock(void * jarg1) {
  _Mutex *arg1 = (_Mutex *) 0 ;
  
  arg1 = (_Mutex *)jarg1; 
  _Mutex_lock(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mutex_try_lock(void * jarg1) {
  int jresult ;
  _Mutex *arg1 = (_Mutex *) 0 ;
  int result;
  
  arg1 = (_Mutex *)jarg1; 
  result = (int)_Mutex_try_lock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mutex_unlock(void * jarg1) {
  _Mutex *arg1 = (_Mutex *) 0 ;
  
  arg1 = (_Mutex *)jarg1; 
  _Mutex_unlock(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mutex(void * jarg1) {
  _Mutex *arg1 = (_Mutex *) 0 ;
  
  arg1 = (_Mutex *)jarg1; 
  delete__Mutex(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_clipboard(void * jarg1, wchar_t * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_set_clipboard(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_clipboard(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_clipboard(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_video_mode__SWIG_0(void * jarg1, Vector2* jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  _OS_set_video_mode__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_video_mode__SWIG_1(void * jarg1, Vector2* jarg2, unsigned int jarg3, unsigned int jarg4) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  _OS_set_video_mode__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_video_mode_size__SWIG_0(void * jarg1, int jarg2) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_video_mode_size__SWIG_0(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_video_mode_size__SWIG_1(void * jarg1) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_video_mode_size__SWIG_0(arg1);
  return result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_fullscreen__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)_OS_is_video_mode_fullscreen__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_fullscreen__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_video_mode_fullscreen__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_resizable__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)_OS_is_video_mode_resizable__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_resizable__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_video_mode_resizable__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_fullscreen_mode_list__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_fullscreen_mode_list__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_fullscreen_mode_list__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Array result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_fullscreen_mode_list__SWIG_0(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_count(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_screen_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_current_screen(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_current_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_current_screen(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_current_screen(arg1,arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_screen_position__SWIG_0(void * jarg1, int jarg2) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_screen_position__SWIG_0(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_screen_position__SWIG_1(void * jarg1) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_screen_position__SWIG_0(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_screen_size__SWIG_0(void * jarg1, int jarg2) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_screen_size__SWIG_0(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_screen_size__SWIG_1(void * jarg1) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_screen_size__SWIG_0(arg1);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_dpi__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)_OS_get_screen_dpi__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_dpi__SWIG_1(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_screen_dpi__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_window_position(void * jarg1) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_window_position(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_position(void * jarg1, Vector2* jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  _OS_set_window_position(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_OS_get_window_size(void * jarg1) {
  Vector2 jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_window_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_size(void * jarg1, Vector2* jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  _OS_set_window_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_fullscreen(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_fullscreen(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_fullscreen(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_fullscreen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_resizable(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_resizable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_resizable(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_resizable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_minimized(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_minimized(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_minimized(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_minimized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_maximized(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_maximized(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_maximized(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_maximized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_borderless_window(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_borderless_window(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_get_borderless_window(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_get_borderless_window(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_screen_orientation(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_screen_orientation(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_orientation(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_screen_orientation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_keep_screen_on(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_keep_screen_on(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_keep_screen_on(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_keep_screen_on(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_iterations_per_second(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_iterations_per_second(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_iterations_per_second(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_iterations_per_second(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_target_fps(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_target_fps(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OS_get_target_fps(void * jarg1) {
  float jresult ;
  _OS *arg1 = (_OS *) 0 ;
  float result;
  
  arg1 = (_OS *)jarg1; 
  result = (float)_OS_get_target_fps(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_time_scale(void * jarg1, float jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  float arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (float)jarg2; 
  _OS_set_time_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OS_get_time_scale(void * jarg1) {
  float jresult ;
  _OS *arg1 = (_OS *) 0 ;
  float result;
  
  arg1 = (_OS *)jarg1; 
  result = (float)_OS_get_time_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_has_touchscreen_ui_hint(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_has_touchscreen_ui_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_title(void * jarg1, wchar_t * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_set_window_title(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_low_processor_usage_mode(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_low_processor_usage_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_in_low_processor_usage_mode(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_in_low_processor_usage_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_processor_count(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_processor_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_executable_path(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_executable_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_execute__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  bool arg4 ;
  Array *arg5 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = (int)_OS_execute__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3,arg4,(Array const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_execute__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (int)_OS_execute__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_kill(void * jarg1, int jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)_OS_kill(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_shell_open(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_OS_shell_open(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_process_ID(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_process_ID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_environment(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _OS_get_environment(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_has_environment(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_OS_has_environment(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_name(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_cmdline_args(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  StringArray result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_cmdline_args(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_main_loop(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Object *result = 0 ;
  
  arg1 = (_OS *)jarg1; 
  result = (Object *)_OS_get_main_loop(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_datetime__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = _OS_get_datetime__SWIG_0(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_datetime__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_datetime__SWIG_0(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_date__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = _OS_get_date__SWIG_0(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_date__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_date__SWIG_0(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_time__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = _OS_get_time__SWIG_0(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_time__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_time__SWIG_0(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_time_zone_info(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_time_zone_info(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_unix_time(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_unix_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_datetime_from_unix_time(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_datetime_from_unix_time(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_unix_time_from_datetime(void * jarg1, void * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return 0;
  } 
  result = (int)_OS_get_unix_time_from_datetime(arg1,(Dictionary const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_system_time_secs(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_system_time_secs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_icon(void * jarg1, void * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  _OS_set_icon(arg1,(Image const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_delay_usec(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_delay_usec(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_delay_msec(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_delay_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_ticks_msec(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_ticks_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_splash_tick_msec(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_splash_tick_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_locale(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_locale(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_model_name(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_model_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_custom_level(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_custom_level(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_can_draw(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_can_draw(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_frames_drawn(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_frames_drawn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_stdout_verbose(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_stdout_verbose(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_can_use_threads(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_can_use_threads(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_debug_build(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_debug_build(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_dump_memory_to_file(void * jarg1, wchar_t * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_dump_memory_to_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_dump_resources_to_file(void * jarg1, wchar_t * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_dump_resources_to_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_resources_in_use__SWIG_0(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_print_resources_in_use__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_resources_in_use__SWIG_1(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_print_resources_in_use__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_all_resources__SWIG_0(void * jarg1, wchar_t * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_print_all_resources__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_all_resources__SWIG_1(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_print_all_resources__SWIG_0(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_static_memory_usage(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_static_memory_usage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_static_memory_peak_usage(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_static_memory_peak_usage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_dynamic_memory_usage(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_dynamic_memory_usage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_data_dir(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_data_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_system_dir(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_system_dir(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_unique_ID(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_unique_ID(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_ok_left_and_cancel_right(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_ok_left_and_cancel_right(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OS_get_frames_per_second(void * jarg1) {
  float jresult ;
  _OS *arg1 = (_OS *) 0 ;
  float result;
  
  arg1 = (_OS *)jarg1; 
  result = (float)_OS_get_frames_per_second(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_all_textures_by_size(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_print_all_textures_by_size(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_resources_by_type(void * jarg1, void * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  _OS_print_resources_by_type(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_native_video_play(void * jarg1, wchar_t * jarg2, float jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  String *arg5 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  result = (int)_OS_native_video_play(arg1,(String const &)*arg2,arg3,(String const &)*arg4,(String const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_native_video_is_playing(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_native_video_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_native_video_stop(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_native_video_stop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_native_video_pause(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_native_video_pause(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_native_video_unpause(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_native_video_unpause(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_scancode_string(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_scancode_string(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_scancode_unicode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)_OS_is_scancode_unicode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_find_scancode_from_string(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_OS_find_scancode_from_string(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_use_file_access_save_and_swap(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_use_file_access_save_and_swap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_alert__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  _OS_alert__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_alert__SWIG_1(void * jarg1, wchar_t * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_alert__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_set_thread_name(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_OS_set_thread_name(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_use_vsync(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_use_vsync(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_vsnc_enabled(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_vsnc_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_SingletonGetInstance() {
  void * jresult ;
  _OS *result = 0 ;
  
  result = (_OS *)_OS_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT ResourceInteractiveLoader* SWIGSTDCALL CSharp_ResourceLoader_load_interactive__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  ResourceInteractiveLoader* jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< ResourceInteractiveLoader > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = _ResourceLoader_load_interactive__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT ResourceInteractiveLoader* SWIGSTDCALL CSharp_ResourceLoader_load_interactive__SWIG_1(void * jarg1, wchar_t * jarg2) {
  ResourceInteractiveLoader* jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  Ref< ResourceInteractiveLoader > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_load_interactive__SWIG_0(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Resource* SWIGSTDCALL CSharp_ResourceLoader_load__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, unsigned int jarg4) {
  Resource* jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool arg4 ;
  Ref< Resource > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  result = _ResourceLoader_load__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Resource* SWIGSTDCALL CSharp_ResourceLoader_load__SWIG_1(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Resource* jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< Resource > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = _ResourceLoader_load__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Resource* SWIGSTDCALL CSharp_ResourceLoader_load__SWIG_2(void * jarg1, wchar_t * jarg2) {
  Resource* jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  Ref< Resource > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_load__SWIG_0(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT ResourceImportMetadata* SWIGSTDCALL CSharp_ResourceLoader_load_import_metadata(void * jarg1, wchar_t * jarg2) {
  ResourceImportMetadata* jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  Ref< ResourceImportMetadata > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_load_import_metadata(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_get_recognized_extensions_for_type(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_get_recognized_extensions_for_type(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceLoader_set_abort_on_missing_resources(void * jarg1, unsigned int jarg2) {
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  bool arg2 ;
  
  arg1 = (_ResourceLoader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _ResourceLoader_set_abort_on_missing_resources(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_get_dependencies(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_get_dependencies(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceLoader_has(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_ResourceLoader_has(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_SingletonGetInstance() {
  void * jresult ;
  _ResourceLoader *result = 0 ;
  
  result = (_ResourceLoader *)_ResourceLoader_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceSaver_save__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  _ResourceSaver *arg1 = (_ResourceSaver *) 0 ;
  String *arg2 = 0 ;
  Resource *arg3 = (Resource *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (_ResourceSaver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Resource *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)_ResourceSaver_save__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceSaver_save__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  _ResourceSaver *arg1 = (_ResourceSaver *) 0 ;
  String *arg2 = 0 ;
  Resource *arg3 = (Resource *) 0 ;
  int result;
  
  arg1 = (_ResourceSaver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Resource *)jarg3; 
  result = (int)_ResourceSaver_save__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceSaver_get_recognized_extensions(void * jarg1, void * jarg2) {
  void * jresult ;
  _ResourceSaver *arg1 = (_ResourceSaver *) 0 ;
  Object *arg2 = (Object *) 0 ;
  StringArray result;
  
  arg1 = (_ResourceSaver *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = _ResourceSaver_get_recognized_extensions(arg1,arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceSaver_SingletonGetInstance() {
  void * jresult ;
  _ResourceSaver *result = 0 ;
  
  result = (_ResourceSaver *)_ResourceSaver_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Semaphore() {
  void * jresult ;
  _Semaphore *result = 0 ;
  
  result = (_Semaphore *)memnew(_Semaphore());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Semaphore_wait(void * jarg1) {
  int jresult ;
  _Semaphore *arg1 = (_Semaphore *) 0 ;
  int result;
  
  arg1 = (_Semaphore *)jarg1; 
  result = (int)_Semaphore_wait(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Semaphore_post(void * jarg1) {
  int jresult ;
  _Semaphore *arg1 = (_Semaphore *) 0 ;
  int result;
  
  arg1 = (_Semaphore *)jarg1; 
  result = (int)_Semaphore_post(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Semaphore(void * jarg1) {
  _Semaphore *arg1 = (_Semaphore *) 0 ;
  
  arg1 = (_Semaphore *)jarg1; 
  delete__Semaphore(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Thread() {
  void * jresult ;
  _Thread *result = 0 ;
  
  result = (_Thread *)memnew(_Thread());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_start__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  int arg5 ;
  int result;
  
  arg1 = (_Thread *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (int)_Thread_start__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_start__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  int result;
  
  arg1 = (_Thread *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (int)_Thread_start__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_start__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3) {
  int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (_Thread *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)_Thread_start__SWIG_0(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Thread_get_id(void * jarg1) {
  void * jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  String result;
  
  arg1 = (_Thread *)jarg1; 
  result = _Thread_get_id(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_is_active(void * jarg1) {
  unsigned int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  bool result;
  
  arg1 = (_Thread *)jarg1; 
  result = (bool)_Thread_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Thread_wait_to_finish(void * jarg1) {
  void * jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Variant result;
  
  arg1 = (_Thread *)jarg1; 
  result = _Thread_wait_to_finish(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Thread(void * jarg1) {
  _Thread *arg1 = (_Thread *) 0 ;
  
  arg1 = (_Thread *)jarg1; 
  delete__Thread(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Animation() {
  void * jresult ;
  Animation *result = 0 ;
  
  result = (Animation *)memnew(Animation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_add_track__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)Animation_add_track__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_add_track__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_add_track__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_remove_track(void * jarg1, int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  Animation_remove_track(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_get_track_count(void * jarg1) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  result = (int)Animation_get_track_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_get_type(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_track_get_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_track_get_path(void * jarg1, int jarg2) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = Animation_track_get_path(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_path(void * jarg1, int jarg2, void * jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  NodePath *arg3 = 0 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Animation_track_set_path(arg1,arg2,(NodePath const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_find_track(void * jarg1, void * jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  NodePath *arg2 = 0 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (int)Animation_find_track(arg1,(NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_move_up(void * jarg1, int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  Animation_track_move_up(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_move_down(void * jarg1, int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  Animation_track_move_down(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_imported(void * jarg1, int jarg2, unsigned int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Animation_track_set_imported(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Animation_track_is_imported(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Animation_track_is_imported(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_transform_track_insert_key(void * jarg1, int jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector3 *arg4 = 0 ;
  Quat *arg5 = 0 ;
  Vector3 *arg6 = 0 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Quat *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quat const & type is null", 0);
    return 0;
  } 
  arg6 = (Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (int)Animation_transform_track_insert_key(arg1,arg2,arg3,(Vector3 const &)*arg4,(Quat const &)*arg5,(Vector3 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_insert_key__SWIG_0(void * jarg1, int jarg2, float jarg3, void * jarg4, float jarg5) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Variant *arg4 = 0 ;
  float arg5 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (float)jarg5; 
  Animation_track_insert_key__SWIG_0(arg1,arg2,arg3,(Variant const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_insert_key__SWIG_1(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Animation_track_insert_key__SWIG_0(arg1,arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_remove_key(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_track_remove_key(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_remove_key_at_pos(void * jarg1, int jarg2, float jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Animation_track_remove_key_at_pos(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_key_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Animation_track_set_key_value(arg1,arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_key_transition(void * jarg1, int jarg2, int jarg3, float jarg4) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Animation_track_set_key_transition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_track_get_key_transition(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)Animation_track_get_key_transition(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_get_key_count(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_track_get_key_count(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_get_key_value(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_track_get_key_value(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_track_get_key_time(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)Animation_track_get_key_time(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_find_key__SWIG_0(void * jarg1, int jarg2, float jarg3, unsigned int jarg4) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)Animation_track_find_key__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_find_key__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)Animation_track_find_key__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_interpolation_type(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_track_set_interpolation_type(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_get_interpolation_type(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_track_get_interpolation_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_transform_track_interpolate(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Array result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Animation_transform_track_interpolate(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_value_track_set_update_mode(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_value_track_set_update_mode(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_value_track_get_update_mode(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_value_track_get_update_mode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_value_track_get_key_indices(void * jarg1, int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  IntArray result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = Animation_value_track_get_key_indices(arg1,arg2,arg3,arg4);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_method_track_get_key_indices(void * jarg1, int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  IntArray result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = Animation_method_track_get_key_indices(arg1,arg2,arg3,arg4);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_method_track_get_name(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = Animation_method_track_get_name(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_method_track_get_params(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  Array result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = Animation_method_track_get_params(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_length(void * jarg1, float jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  float arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (float)jarg2; 
  Animation_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_get_length(void * jarg1) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  result = (float)Animation_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_loop(void * jarg1, unsigned int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  bool arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Animation_set_loop(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_loop_interpolation(void * jarg1, unsigned int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  bool arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Animation_set_loop_interpolation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Animation_has_loop(void * jarg1) {
  unsigned int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  bool result;
  
  arg1 = (Animation *)jarg1; 
  result = (bool)Animation_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Animation_has_loop_interpolation(void * jarg1) {
  unsigned int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  bool result;
  
  arg1 = (Animation *)jarg1; 
  result = (bool)Animation_has_loop_interpolation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_step(void * jarg1, float jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  float arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (float)jarg2; 
  Animation_set_step(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_get_step(void * jarg1) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  result = (float)Animation_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_clear(void * jarg1) {
  Animation *arg1 = (Animation *) 0 ;
  
  arg1 = (Animation *)jarg1; 
  Animation_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Animation(void * jarg1) {
  Animation *arg1 = (Animation *) 0 ;
  
  arg1 = (Animation *)jarg1; 
  delete_Animation(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AtlasTexture() {
  void * jresult ;
  AtlasTexture *result = 0 ;
  
  result = (AtlasTexture *)memnew(AtlasTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtlasTexture_set_atlas(void * jarg1, void * jarg2) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  arg2 = (Texture *)jarg2; 
  AtlasTexture_set_atlas(arg1,arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_AtlasTexture_get_atlas(void * jarg1) {
  Texture* jresult ;
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Ref< Texture > result;
  
  arg1 = (AtlasTexture *)jarg1; 
  result = AtlasTexture_get_atlas(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtlasTexture_set_region(void * jarg1, void * jarg2) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  AtlasTexture_set_region(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtlasTexture_get_region(void * jarg1) {
  void * jresult ;
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 result;
  
  arg1 = (AtlasTexture *)jarg1; 
  result = AtlasTexture_get_region(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtlasTexture_set_margin(void * jarg1, void * jarg2) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  AtlasTexture_set_margin(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtlasTexture_get_margin(void * jarg1) {
  void * jresult ;
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 result;
  
  arg1 = (AtlasTexture *)jarg1; 
  result = AtlasTexture_get_margin(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AtlasTexture(void * jarg1) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  delete_AtlasTexture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_sample_create(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  RID result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = AudioServer_sample_create(arg1,arg2,arg3,arg4);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_description(void * jarg1, void * jarg2, wchar_t * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AudioServer_sample_set_description(arg1,(RID const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_sample_get_description(void * jarg1, void * jarg2) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  String result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = AudioServer_sample_get_description(arg1,(RID const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_format(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_format(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioServer_sample_is_stereo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)AudioServer_sample_is_stereo(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_length(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_length(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_signed_data(void * jarg1, void * jarg2, void * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RealArray *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RealArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  AudioServer_sample_set_signed_data(arg1,(RID const &)*arg2,(RealArray const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_data(void * jarg1, void * jarg2, void * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RawArray *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RawArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  AudioServer_sample_set_data(arg1,(RID const &)*arg2,(RawArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_sample_get_data(void * jarg1, void * jarg2) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RawArray result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = AudioServer_sample_get_data(arg1,(RID const &)*arg2);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_mix_rate(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_mix_rate(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_mix_rate(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_mix_rate(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_loop_format(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_loop_format(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_loop_format(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_loop_format(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_loop_begin(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_loop_begin(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_loop_begin(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_loop_begin(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_loop_end(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_loop_end(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_loop_end(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_loop_end(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_voice_create(void * jarg1) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID result;
  
  arg1 = (AudioServer *)jarg1; 
  result = AudioServer_voice_create(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_play(void * jarg1, void * jarg2, void * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  AudioServer_voice_play(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_volume(void * jarg1, void * jarg2, float jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  AudioServer_voice_set_volume(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_pan__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  AudioServer_voice_set_pan__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_pan__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  AudioServer_voice_set_pan__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_pan__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  AudioServer_voice_set_pan__SWIG_0(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_filter__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  AudioServer_voice_set_filter__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_filter__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  AudioServer_voice_set_filter__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_chorus(void * jarg1, void * jarg2, float jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  AudioServer_voice_set_chorus(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_reverb(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  AudioServer_voice_set_reverb(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_mix_rate(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_voice_set_mix_rate(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_positional(void * jarg1, void * jarg2, unsigned int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  AudioServer_voice_set_positional(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_volume(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_volume(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_pan(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_pan(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_pan_height(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_pan_height(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_pan_depth(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_pan_depth(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_voice_get_filter_type(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_voice_get_filter_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_filter_cutoff(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_filter_cutoff(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_filter_resonance(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_filter_resonance(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_chorus(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_chorus(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_voice_get_reverb_type(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_voice_get_reverb_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_reverb(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_reverb(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_voice_get_mix_rate(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_voice_get_mix_rate(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioServer_voice_is_positional(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)AudioServer_voice_is_positional(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_stop(void * jarg1, void * jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  AudioServer_voice_stop(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_free_rid(void * jarg1, void * jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  AudioServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_set_stream_global_volume_scale(void * jarg1, float jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  float arg2 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (float)jarg2; 
  AudioServer_set_stream_global_volume_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_get_stream_global_volume_scale(void * jarg1) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  result = (float)AudioServer_get_stream_global_volume_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_set_fx_global_volume_scale(void * jarg1, float jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  float arg2 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (float)jarg2; 
  AudioServer_set_fx_global_volume_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_get_fx_global_volume_scale(void * jarg1) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  result = (float)AudioServer_get_fx_global_volume_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_set_event_voice_global_volume_scale(void * jarg1, float jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  float arg2 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (float)jarg2; 
  AudioServer_set_event_voice_global_volume_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_get_event_voice_global_volume_scale(void * jarg1) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  result = (float)AudioServer_get_event_voice_global_volume_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_SingletonGetInstance() {
  void * jresult ;
  AudioServer *result = 0 ;
  
  result = (AudioServer *)AudioServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStream(void * jarg1) {
  AudioStream *arg1 = (AudioStream *) 0 ;
  
  arg1 = (AudioStream *)jarg1; 
  delete_AudioStream(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamMPC() {
  void * jresult ;
  AudioStreamMPC *result = 0 ;
  
  result = (AudioStreamMPC *)memnew(AudioStreamMPC());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStreamMPC(void * jarg1) {
  AudioStreamMPC *arg1 = (AudioStreamMPC *) 0 ;
  
  arg1 = (AudioStreamMPC *)jarg1; 
  delete_AudioStreamMPC(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamOGGVorbis() {
  void * jresult ;
  AudioStreamOGGVorbis *result = 0 ;
  
  result = (AudioStreamOGGVorbis *)memnew(AudioStreamOGGVorbis());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStreamOGGVorbis(void * jarg1) {
  AudioStreamOGGVorbis *arg1 = (AudioStreamOGGVorbis *) 0 ;
  
  arg1 = (AudioStreamOGGVorbis *)jarg1; 
  delete_AudioStreamOGGVorbis(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamOpus() {
  void * jresult ;
  AudioStreamOpus *result = 0 ;
  
  result = (AudioStreamOpus *)memnew(AudioStreamOpus());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStreamOpus(void * jarg1) {
  AudioStreamOpus *arg1 = (AudioStreamOpus *) 0 ;
  
  arg1 = (AudioStreamOpus *)jarg1; 
  delete_AudioStreamOpus(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_play__SWIG_0(void * jarg1, float jarg2) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float arg2 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  arg2 = (float)jarg2; 
  AudioStreamPlayback_play__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_play__SWIG_1(void * jarg1) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  AudioStreamPlayback_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_stop(void * jarg1) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  AudioStreamPlayback_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioStreamPlayback_is_playing(void * jarg1) {
  unsigned int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  bool result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (bool)AudioStreamPlayback_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_set_loop(void * jarg1, unsigned int jarg2) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  bool arg2 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AudioStreamPlayback_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioStreamPlayback_has_loop(void * jarg1) {
  unsigned int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  bool result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (bool)AudioStreamPlayback_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_loop_count(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_seek_pos(void * jarg1, float jarg2) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float arg2 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  arg2 = (float)jarg2; 
  AudioStreamPlayback_seek_pos(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioStreamPlayback_get_pos(void * jarg1) {
  float jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (float)AudioStreamPlayback_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioStreamPlayback_get_length(void * jarg1) {
  float jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (float)AudioStreamPlayback_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_channels(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_channels(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_mix_rate(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_mix_rate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_minimum_buffer_size(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_minimum_buffer_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStreamPlayback(void * jarg1) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  delete_AudioStreamPlayback(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamSpeex() {
  void * jresult ;
  AudioStreamSpeex *result = 0 ;
  
  result = (AudioStreamSpeex *)memnew(AudioStreamSpeex());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioStreamSpeex(void * jarg1) {
  AudioStreamSpeex *arg1 = (AudioStreamSpeex *) 0 ;
  
  arg1 = (AudioStreamSpeex *)jarg1; 
  delete_AudioStreamSpeex(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BakedLight() {
  void * jresult ;
  BakedLight *result = 0 ;
  
  result = (BakedLight *)memnew(BakedLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_mode(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_mode(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_octree(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  BakedLight_set_octree(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_octree(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_octree(arg1);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_light(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  BakedLight_set_light(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_light(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_light(arg1);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_sampler_octree(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  BakedLight_set_sampler_octree(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_sampler_octree(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  IntArray result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_sampler_octree(arg1);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_add_lightmap(void * jarg1, void * jarg2, Vector2* jarg3) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  BakedLight_add_lightmap(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_erase_lightmap(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_erase_lightmap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_clear_lightmaps(void * jarg1) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  BakedLight_clear_lightmaps(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_cell_subdivision(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_cell_subdivision(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_cell_subdivision(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_cell_subdivision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_initial_lattice_subdiv(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_initial_lattice_subdiv(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_initial_lattice_subdiv(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_initial_lattice_subdiv(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_plot_size(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_plot_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_plot_size(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_plot_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_bounces(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_bounces(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_bounces(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_bounces(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_cell_extra_margin(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_cell_extra_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_cell_extra_margin(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_cell_extra_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_edge_damp(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_edge_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_edge_damp(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_edge_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_normal_damp(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_normal_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_normal_damp(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_normal_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_tint(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_tint(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_tint(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_tint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_saturation(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_saturation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_saturation(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_saturation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_ao_radius(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_ao_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_ao_radius(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_ao_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_ao_strength(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_ao_strength(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_ao_strength(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_ao_strength(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_realtime_color_enabled(void * jarg1, unsigned int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BakedLight_set_realtime_color_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BakedLight_get_realtime_color_enabled(void * jarg1) {
  unsigned int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (bool)BakedLight_get_realtime_color_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_realtime_color(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  BakedLight_set_realtime_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_realtime_color(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  Color result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_realtime_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_realtime_energy(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_realtime_energy(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_realtime_energy(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_realtime_energy(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_format(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_format(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_format(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_transfer_lightmaps_only_to_uv2(void * jarg1, unsigned int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BakedLight_set_transfer_lightmaps_only_to_uv2(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BakedLight_get_transfer_lightmaps_only_to_uv2(void * jarg1) {
  unsigned int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (bool)BakedLight_get_transfer_lightmaps_only_to_uv2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_energy_multiplier(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_energy_multiplier(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_energy_multiplier(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_energy_multiplier(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_gamma_adjust(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_gamma_adjust(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_gamma_adjust(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_gamma_adjust(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_bake_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  BakedLight_set_bake_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BakedLight_get_bake_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)BakedLight_get_bake_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BakedLight(void * jarg1) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  delete_BakedLight(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BitMap() {
  void * jresult ;
  BitMap *result = 0 ;
  
  result = (BitMap *)memnew(BitMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_create(void * jarg1, Vector2* jarg2) {
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  BitMap_create(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_create_from_image_alpha(void * jarg1, void * jarg2) {
  BitMap *arg1 = (BitMap *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  BitMap_create_from_image_alpha(arg1,(Image const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_set_bit(void * jarg1, Vector2* jarg2, unsigned int jarg3) {
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  BitMap_set_bit(arg1,(Vector2 const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BitMap_get_bit(void * jarg1, Vector2* jarg2) {
  unsigned int jresult ;
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)BitMap_get_bit(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_set_bit_rect(void * jarg1, void * jarg2, unsigned int jarg3) {
  BitMap *arg1 = (BitMap *) 0 ;
  Rect2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  BitMap_set_bit_rect(arg1,(Rect2 const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitMap_get_true_bit_count(void * jarg1) {
  int jresult ;
  BitMap *arg1 = (BitMap *) 0 ;
  int result;
  
  arg1 = (BitMap *)jarg1; 
  result = (int)BitMap_get_true_bit_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_BitMap_get_size(void * jarg1) {
  Vector2 jresult ;
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 result;
  
  arg1 = (BitMap *)jarg1; 
  result = BitMap_get_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BitMap(void * jarg1) {
  BitMap *arg1 = (BitMap *) 0 ;
  
  arg1 = (BitMap *)jarg1; 
  delete_BitMap(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoxShape() {
  void * jresult ;
  BoxShape *result = 0 ;
  
  result = (BoxShape *)memnew(BoxShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxShape_set_extents(void * jarg1, void * jarg2) {
  BoxShape *arg1 = (BoxShape *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (BoxShape *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  BoxShape_set_extents(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoxShape_get_extents(void * jarg1) {
  void * jresult ;
  BoxShape *arg1 = (BoxShape *) 0 ;
  Vector3 result;
  
  arg1 = (BoxShape *)jarg1; 
  result = BoxShape_get_extents(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoxShape(void * jarg1) {
  BoxShape *arg1 = (BoxShape *) 0 ;
  
  arg1 = (BoxShape *)jarg1; 
  delete_BoxShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CSharpScript() {
  void * jresult ;
  CSharpScript *result = 0 ;
  
  result = (CSharpScript *)memnew(CSharpScript());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CSharpScript(void * jarg1) {
  CSharpScript *arg1 = (CSharpScript *) 0 ;
  
  arg1 = (CSharpScript *)jarg1; 
  delete_CSharpScript(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasItemMaterial() {
  void * jresult ;
  CanvasItemMaterial *result = 0 ;
  
  result = (CanvasItemMaterial *)memnew(CanvasItemMaterial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_set_shader(void * jarg1, void * jarg2) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  Shader *arg2 = (Shader *) 0 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  arg2 = (Shader *)jarg2; 
  CanvasItemMaterial_set_shader(arg1,arg2);
}


SWIGEXPORT Shader* SWIGSTDCALL CSharp_CanvasItemMaterial_get_shader(void * jarg1) {
  Shader* jresult ;
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  Ref< Shader > result;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  result = CanvasItemMaterial_get_shader(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_set_shader_param(void * jarg1, wchar_t * jarg2, void * jarg3) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  CanvasItemMaterial_set_shader_param(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_get_shader_param(void * jarg1, wchar_t * jarg2) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  CanvasItemMaterial_get_shader_param(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_set_shading_mode(void * jarg1, int jarg2) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasItemMaterial_set_shading_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasItemMaterial_get_shading_mode(void * jarg1) {
  int jresult ;
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  int result;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  result = (int)CanvasItemMaterial_get_shading_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CanvasItemMaterial(void * jarg1) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  delete_CanvasItemMaterial(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasItemShader() {
  void * jresult ;
  CanvasItemShader *result = 0 ;
  
  result = (CanvasItemShader *)memnew(CanvasItemShader());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CanvasItemShader(void * jarg1) {
  CanvasItemShader *arg1 = (CanvasItemShader *) 0 ;
  
  arg1 = (CanvasItemShader *)jarg1; 
  delete_CanvasItemShader(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasItemShaderGraph() {
  void * jresult ;
  CanvasItemShaderGraph *result = 0 ;
  
  result = (CanvasItemShaderGraph *)memnew(CanvasItemShaderGraph());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CanvasItemShaderGraph(void * jarg1) {
  CanvasItemShaderGraph *arg1 = (CanvasItemShaderGraph *) 0 ;
  
  arg1 = (CanvasItemShaderGraph *)jarg1; 
  delete_CanvasItemShaderGraph(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CapsuleShape() {
  void * jresult ;
  CapsuleShape *result = 0 ;
  
  result = (CapsuleShape *)memnew(CapsuleShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape_set_radius(void * jarg1, float jarg2) {
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape_get_radius(void * jarg1) {
  float jresult ;
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float result;
  
  arg1 = (CapsuleShape *)jarg1; 
  result = (float)CapsuleShape_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape_set_height(void * jarg1, float jarg2) {
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape_set_height(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape_get_height(void * jarg1) {
  float jresult ;
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float result;
  
  arg1 = (CapsuleShape *)jarg1; 
  result = (float)CapsuleShape_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CapsuleShape(void * jarg1) {
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  
  arg1 = (CapsuleShape *)jarg1; 
  delete_CapsuleShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CapsuleShape2D() {
  void * jresult ;
  CapsuleShape2D *result = 0 ;
  
  result = (CapsuleShape2D *)memnew(CapsuleShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape2D_set_radius(void * jarg1, float jarg2) {
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape2D_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape2D_get_radius(void * jarg1) {
  float jresult ;
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float result;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  result = (float)CapsuleShape2D_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape2D_set_height(void * jarg1, float jarg2) {
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape2D_set_height(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape2D_get_height(void * jarg1) {
  float jresult ;
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float result;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  result = (float)CapsuleShape2D_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CapsuleShape2D(void * jarg1) {
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  delete_CapsuleShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CircleShape2D() {
  void * jresult ;
  CircleShape2D *result = 0 ;
  
  result = (CircleShape2D *)memnew(CircleShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CircleShape2D_set_radius(void * jarg1, float jarg2) {
  CircleShape2D *arg1 = (CircleShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (CircleShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  CircleShape2D_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CircleShape2D_get_radius(void * jarg1) {
  float jresult ;
  CircleShape2D *arg1 = (CircleShape2D *) 0 ;
  float result;
  
  arg1 = (CircleShape2D *)jarg1; 
  result = (float)CircleShape2D_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CircleShape2D(void * jarg1) {
  CircleShape2D *arg1 = (CircleShape2D *) 0 ;
  
  arg1 = (CircleShape2D *)jarg1; 
  delete_CircleShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorRamp() {
  void * jresult ;
  ColorRamp *result = 0 ;
  
  result = (ColorRamp *)memnew(ColorRamp());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_add_point(void * jarg1, float jarg2, void * jarg3) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  float arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorRamp_add_point(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_remove_point(void * jarg1, int jarg2) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  ColorRamp_remove_point(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_offset(void * jarg1, int jarg2, float jarg3) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  ColorRamp_set_offset(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColorRamp_get_offset(void * jarg1, int jarg2) {
  float jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)ColorRamp_get_offset(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_color(void * jarg1, int jarg2, void * jarg3) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorRamp_set_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_get_color(void * jarg1, int jarg2) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  result = ColorRamp_get_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_interpolate(void * jarg1, float jarg2) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  float arg2 ;
  Color result;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (float)jarg2; 
  result = ColorRamp_interpolate(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorRamp_get_point_count(void * jarg1) {
  int jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int result;
  
  arg1 = (ColorRamp *)jarg1; 
  result = (int)ColorRamp_get_point_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_offsets(void * jarg1, void * jarg2) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  RealArray *arg2 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (RealArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  ColorRamp_set_offsets(arg1,(RealArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_get_offsets(void * jarg1) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  RealArray result;
  
  arg1 = (ColorRamp *)jarg1; 
  result = ColorRamp_get_offsets(arg1);
  jresult = memnew(RealArray((const RealArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_colors(void * jarg1, void * jarg2) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  ColorArray *arg2 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (ColorArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  ColorRamp_set_colors(arg1,(ColorArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_get_colors(void * jarg1) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  ColorArray result;
  
  arg1 = (ColorRamp *)jarg1; 
  result = ColorRamp_get_colors(arg1);
  jresult = memnew(ColorArray((const ColorArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorRamp(void * jarg1) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  delete_ColorRamp(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConcavePolygonShape() {
  void * jresult ;
  ConcavePolygonShape *result = 0 ;
  
  result = (ConcavePolygonShape *)memnew(ConcavePolygonShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConcavePolygonShape_set_faces(void * jarg1, void * jarg2) {
  ConcavePolygonShape *arg1 = (ConcavePolygonShape *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (ConcavePolygonShape *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  ConcavePolygonShape_set_faces(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConcavePolygonShape_get_faces(void * jarg1) {
  void * jresult ;
  ConcavePolygonShape *arg1 = (ConcavePolygonShape *) 0 ;
  Vector3Array result;
  
  arg1 = (ConcavePolygonShape *)jarg1; 
  result = ConcavePolygonShape_get_faces(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConcavePolygonShape(void * jarg1) {
  ConcavePolygonShape *arg1 = (ConcavePolygonShape *) 0 ;
  
  arg1 = (ConcavePolygonShape *)jarg1; 
  delete_ConcavePolygonShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConcavePolygonShape2D() {
  void * jresult ;
  ConcavePolygonShape2D *result = 0 ;
  
  result = (ConcavePolygonShape2D *)memnew(ConcavePolygonShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConcavePolygonShape2D_set_segments(void * jarg1, void * jarg2) {
  ConcavePolygonShape2D *arg1 = (ConcavePolygonShape2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (ConcavePolygonShape2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ConcavePolygonShape2D_set_segments(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConcavePolygonShape2D_get_segments(void * jarg1) {
  void * jresult ;
  ConcavePolygonShape2D *arg1 = (ConcavePolygonShape2D *) 0 ;
  Vector2Array result;
  
  arg1 = (ConcavePolygonShape2D *)jarg1; 
  result = ConcavePolygonShape2D_get_segments(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConcavePolygonShape2D(void * jarg1) {
  ConcavePolygonShape2D *arg1 = (ConcavePolygonShape2D *) 0 ;
  
  arg1 = (ConcavePolygonShape2D *)jarg1; 
  delete_ConcavePolygonShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfigFile() {
  void * jresult ;
  ConfigFile *result = 0 ;
  
  result = (ConfigFile *)memnew(ConfigFile());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfigFile_set_value(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ConfigFile_set_value(arg1,(String const &)*arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_value__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = ConfigFile_get_value__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(Variant const &)*arg4);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_value__SWIG_1(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = ConfigFile_get_value__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfigFile_has_section(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)ConfigFile_has_section(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfigFile_has_section_key(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)ConfigFile_has_section_key(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_sections(void * jarg1) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  StringArray result;
  
  arg1 = (ConfigFile *)jarg1; 
  result = ConfigFile_get_sections(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_section_keys(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = ConfigFile_get_section_keys(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConfigFile_load(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)ConfigFile_load(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConfigFile_save(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)ConfigFile_save(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConfigFile(void * jarg1) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  
  arg1 = (ConfigFile *)jarg1; 
  delete_ConfigFile(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexPolygonShape() {
  void * jresult ;
  ConvexPolygonShape *result = 0 ;
  
  result = (ConvexPolygonShape *)memnew(ConvexPolygonShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexPolygonShape_set_points(void * jarg1, void * jarg2) {
  ConvexPolygonShape *arg1 = (ConvexPolygonShape *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (ConvexPolygonShape *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  ConvexPolygonShape_set_points(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexPolygonShape_get_points(void * jarg1) {
  void * jresult ;
  ConvexPolygonShape *arg1 = (ConvexPolygonShape *) 0 ;
  Vector3Array result;
  
  arg1 = (ConvexPolygonShape *)jarg1; 
  result = ConvexPolygonShape_get_points(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConvexPolygonShape(void * jarg1) {
  ConvexPolygonShape *arg1 = (ConvexPolygonShape *) 0 ;
  
  arg1 = (ConvexPolygonShape *)jarg1; 
  delete_ConvexPolygonShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexPolygonShape2D() {
  void * jresult ;
  ConvexPolygonShape2D *result = 0 ;
  
  result = (ConvexPolygonShape2D *)memnew(ConvexPolygonShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexPolygonShape2D_set_point_cloud(void * jarg1, void * jarg2) {
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ConvexPolygonShape2D_set_point_cloud(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexPolygonShape2D_set_points(void * jarg1, void * jarg2) {
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ConvexPolygonShape2D_set_points(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexPolygonShape2D_get_points(void * jarg1) {
  void * jresult ;
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  Vector2Array result;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  result = ConvexPolygonShape2D_get_points(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConvexPolygonShape2D(void * jarg1) {
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  delete_ConvexPolygonShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CubeMap() {
  void * jresult ;
  CubeMap *result = 0 ;
  
  result = (CubeMap *)memnew(CubeMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_width(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_height(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CubeMap_get_rid(void * jarg1) {
  void * jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  RID result;
  
  arg1 = (CubeMap *)jarg1; 
  result = CubeMap_get_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_flags(void * jarg1, int jarg2) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  CubeMap_set_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_flags(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_side(void * jarg1, int jarg2, void * jarg3) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  Image *arg3 = 0 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Image *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  CubeMap_set_side(arg1,arg2,(Image const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CubeMap_get_side(void * jarg1, int jarg2) {
  void * jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  Image result;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = CubeMap_get_side(arg1,arg2);
  jresult = memnew(Image((const Image &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_storage(void * jarg1, int jarg2) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  CubeMap_set_storage(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_storage(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_storage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_lossy_storage_quality(void * jarg1, float jarg2) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  float arg2 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (float)jarg2; 
  CubeMap_set_lossy_storage_quality(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CubeMap_get_lossy_storage_quality(void * jarg1) {
  float jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  float result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (float)CubeMap_get_lossy_storage_quality(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CubeMap(void * jarg1) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  
  arg1 = (CubeMap *)jarg1; 
  delete_CubeMap(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Curve2D() {
  void * jresult ;
  Curve2D *result = 0 ;
  
  result = (Curve2D *)memnew(Curve2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Curve2D_get_point_count(void * jarg1) {
  int jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int result;
  
  arg1 = (Curve2D *)jarg1; 
  result = (int)Curve2D_get_point_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_0(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4, int jarg5) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_1(void * jarg1, Vector2* jarg2, Vector2* jarg3, Vector2* jarg4) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_2(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_3(void * jarg1, Vector2* jarg2) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_point_pos(void * jarg1, int jarg2, Vector2* jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_set_point_pos(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_get_point_pos(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_get_point_pos(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_point_in(void * jarg1, int jarg2, Vector2* jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_set_point_in(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_get_point_in(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_get_point_in(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_point_out(void * jarg1, int jarg2, Vector2* jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_set_point_out(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_get_point_out(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_get_point_out(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_remove_point(void * jarg1, int jarg2) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  Curve2D_remove_point(arg1,arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_interpolate(void * jarg1, int jarg2, float jarg3) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve2D_interpolate(arg1,arg2,arg3);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_interpolatef(void * jarg1, float jarg2) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve2D_interpolatef(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_bake_interval(void * jarg1, float jarg2) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  Curve2D_set_bake_interval(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve2D_get_bake_interval(void * jarg1) {
  float jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float result;
  
  arg1 = (Curve2D *)jarg1; 
  result = (float)Curve2D_get_bake_interval(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve2D_get_baked_length(void * jarg1) {
  float jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float result;
  
  arg1 = (Curve2D *)jarg1; 
  result = (float)Curve2D_get_baked_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_interpolate_baked__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  bool arg3 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = Curve2D_interpolate_baked__SWIG_0(arg1,arg2,arg3);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Curve2D_interpolate_baked__SWIG_1(void * jarg1, float jarg2) {
  Vector2 jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve2D_interpolate_baked__SWIG_0(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_get_baked_points(void * jarg1) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  result = Curve2D_get_baked_points(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_tesselate__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve2D_tesselate__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_tesselate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_tesselate__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_tesselate__SWIG_2(void * jarg1) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  result = Curve2D_tesselate__SWIG_0(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Curve2D(void * jarg1) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  delete_Curve2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Curve3D() {
  void * jresult ;
  Curve3D *result = 0 ;
  
  result = (Curve3D *)memnew(Curve3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Curve3D_get_point_count(void * jarg1) {
  int jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int result;
  
  arg1 = (Curve3D *)jarg1; 
  result = (int)Curve3D_get_point_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_3(void * jarg1, void * jarg2) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_pos(void * jarg1, int jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_set_point_pos(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_point_pos(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_get_point_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_tilt(void * jarg1, int jarg2, float jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Curve3D_set_point_tilt(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve3D_get_point_tilt(void * jarg1, int jarg2) {
  float jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Curve3D_get_point_tilt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_in(void * jarg1, int jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_set_point_in(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_point_in(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_get_point_in(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_out(void * jarg1, int jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_set_point_out(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_point_out(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_get_point_out(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_remove_point(void * jarg1, int jarg2) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  Curve3D_remove_point(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolate(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve3D_interpolate(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolatef(void * jarg1, float jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve3D_interpolatef(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_bake_interval(void * jarg1, float jarg2) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  Curve3D_set_bake_interval(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve3D_get_bake_interval(void * jarg1) {
  float jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float result;
  
  arg1 = (Curve3D *)jarg1; 
  result = (float)Curve3D_get_bake_interval(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve3D_get_baked_length(void * jarg1) {
  float jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float result;
  
  arg1 = (Curve3D *)jarg1; 
  result = (float)Curve3D_get_baked_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolate_baked__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  bool arg3 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = Curve3D_interpolate_baked__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolate_baked__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve3D_interpolate_baked__SWIG_0(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_baked_points(void * jarg1) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  result = Curve3D_get_baked_points(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_baked_tilts(void * jarg1) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  RealArray result;
  
  arg1 = (Curve3D *)jarg1; 
  result = Curve3D_get_baked_tilts(arg1);
  jresult = memnew(RealArray((const RealArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_tesselate__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve3D_tesselate__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_tesselate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_tesselate__SWIG_0(arg1,arg2);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_tesselate__SWIG_2(void * jarg1) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  result = Curve3D_tesselate__SWIG_0(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Curve3D(void * jarg1) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  delete_Curve3D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DynamicFontData() {
  void * jresult ;
  DynamicFontData *result = 0 ;
  
  result = (DynamicFontData *)memnew(DynamicFontData());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFontData_set_font_path(void * jarg1, wchar_t * jarg2) {
  DynamicFontData *arg1 = (DynamicFontData *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (DynamicFontData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  DynamicFontData_set_font_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicFontData_get_font_path(void * jarg1) {
  void * jresult ;
  DynamicFontData *arg1 = (DynamicFontData *) 0 ;
  String result;
  
  arg1 = (DynamicFontData *)jarg1; 
  result = DynamicFontData_get_font_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DynamicFontData(void * jarg1) {
  DynamicFontData *arg1 = (DynamicFontData *) 0 ;
  
  arg1 = (DynamicFontData *)jarg1; 
  delete_DynamicFontData(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorExportPlugin() {
  void * jresult ;
  EditorExportPlugin *result = 0 ;
  
  result = (EditorExportPlugin *)memnew(EditorExportPlugin());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorExportPlugin_custom_export(void * jarg1, wchar_t * jarg2, void * jarg3) {
  void * jresult ;
  EditorExportPlugin *arg1 = (EditorExportPlugin *) 0 ;
  String *arg2 = 0 ;
  EditorExportPlatform *arg3 = (EditorExportPlatform *) 0 ;
  Variant result;
  
  arg1 = (EditorExportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (EditorExportPlatform *)jarg3; 
  result = EditorExportPlugin_custom_export(arg1,(String const &)*arg2,arg3);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorExportPlugin(void * jarg1) {
  EditorExportPlugin *arg1 = (EditorExportPlugin *) 0 ;
  
  arg1 = (EditorExportPlugin *)jarg1; 
  delete_EditorExportPlugin(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorImportPlugin() {
  void * jresult ;
  EditorImportPlugin *result = 0 ;
  
  result = (EditorImportPlugin *)memnew(EditorImportPlugin());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorImportPlugin_can_reimport_multiple_files(void * jarg1) {
  unsigned int jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  bool result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  result = (bool)EditorImportPlugin_can_reimport_multiple_files(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_custom_export(void * jarg1, wchar_t * jarg2, void * jarg3) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  EditorExportPlatform *arg3 = (EditorExportPlatform *) 0 ;
  RawArray result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (EditorExportPlatform *)jarg3; 
  result = EditorImportPlugin_custom_export(arg1,(String const &)*arg2,arg3);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_get_name(void * jarg1) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  result = EditorImportPlugin_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_get_visible_name(void * jarg1) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  result = EditorImportPlugin_get_visible_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorImportPlugin_import(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  ResourceImportMetadata *arg3 = (ResourceImportMetadata *) 0 ;
  int result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (ResourceImportMetadata *)jarg3; 
  result = (int)EditorImportPlugin_import(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorImportPlugin_import_dialog(void * jarg1, wchar_t * jarg2) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorImportPlugin_import_dialog(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorImportPlugin_import_from_drop(void * jarg1, void * jarg2, wchar_t * jarg3) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  StringArray *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  EditorImportPlugin_import_from_drop(arg1,(StringArray const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorImportPlugin_reimport_multiple_files(void * jarg1, void * jarg2) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  EditorImportPlugin_reimport_multiple_files(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_validate_source_path(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = EditorImportPlugin_validate_source_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_expand_source_path(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = EditorImportPlugin_expand_source_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorImportPlugin(void * jarg1) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  delete_EditorImportPlugin(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorScenePostImport() {
  void * jresult ;
  EditorScenePostImport *result = 0 ;
  
  result = (EditorScenePostImport *)memnew(EditorScenePostImport());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorScenePostImport_post_import(void * jarg1, void * jarg2) {
  EditorScenePostImport *arg1 = (EditorScenePostImport *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorScenePostImport *)jarg1; 
  arg2 = (Object *)jarg2; 
  EditorScenePostImport_post_import(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorScenePostImport(void * jarg1) {
  EditorScenePostImport *arg1 = (EditorScenePostImport *) 0 ;
  
  arg1 = (EditorScenePostImport *)jarg1; 
  delete_EditorScenePostImport(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorScript() {
  void * jresult ;
  EditorScript *result = 0 ;
  
  result = (EditorScript *)memnew(EditorScript());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorScript__run(void * jarg1) {
  EditorScript *arg1 = (EditorScript *) 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  EditorScript__run(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorScript_add_root_node(void * jarg1, void * jarg2) {
  EditorScript *arg1 = (EditorScript *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  arg2 = (Object *)jarg2; 
  EditorScript_add_root_node(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorScript_get_scene(void * jarg1) {
  void * jresult ;
  EditorScript *arg1 = (EditorScript *) 0 ;
  Object *result = 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  result = (Object *)EditorScript_get_scene(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorScript(void * jarg1) {
  EditorScript *arg1 = (EditorScript *) 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  delete_EditorScript(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorSelection() {
  void * jresult ;
  EditorSelection *result = 0 ;
  
  result = (EditorSelection *)memnew(EditorSelection());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSelection_clear(void * jarg1) {
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  
  arg1 = (EditorSelection *)jarg1; 
  EditorSelection_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSelection_add_node(void * jarg1, void * jarg2) {
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (EditorSelection *)jarg1; 
  arg2 = (Node *)jarg2; 
  EditorSelection_add_node(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSelection_remove_node(void * jarg1, void * jarg2) {
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (EditorSelection *)jarg1; 
  arg2 = (Node *)jarg2; 
  EditorSelection_remove_node(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSelection_get_selected_nodes(void * jarg1) {
  void * jresult ;
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  Array result;
  
  arg1 = (EditorSelection *)jarg1; 
  result = EditorSelection_get_selected_nodes(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorSettings() {
  void * jresult ;
  EditorSettings *result = 0 ;
  
  result = (EditorSettings *)memnew(EditorSettings());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSettings_erase(void * jarg1, wchar_t * jarg2) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorSettings_erase(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_settings_path(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  String result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_settings_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_project_settings_path(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  String result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_project_settings_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSettings_set_favorite_dirs(void * jarg1, void * jarg2) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  EditorSettings_set_favorite_dirs(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_favorite_dirs(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_favorite_dirs(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSettings_set_recent_dirs(void * jarg1, void * jarg2) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  EditorSettings_set_recent_dirs(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_recent_dirs(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_recent_dirs(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorSettings(void * jarg1) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  delete_EditorSettings(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorSpatialGizmo() {
  void * jresult ;
  EditorSpatialGizmo *result = 0 ;
  
  result = (EditorSpatialGizmo *)memnew(EditorSpatialGizmo());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_commit_handle(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  EditorSpatialGizmo_commit_handle(arg1,arg2,(Variant const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSpatialGizmo_get_handle_name(void * jarg1, int jarg2) {
  void * jresult ;
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  result = EditorSpatialGizmo_get_handle_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSpatialGizmo_get_handle_value(void * jarg1, int jarg2) {
  void * jresult ;
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  Variant result;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  result = EditorSpatialGizmo_get_handle_value(arg1,arg2);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_redraw(void * jarg1) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  EditorSpatialGizmo_redraw(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_set_handle(void * jarg1, int jarg2, void * jarg3, Vector2* jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  Camera *arg3 = (Camera *) 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Camera *)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_set_handle(arg1,arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_lines__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  Material *arg3 = (Material *) 0 ;
  bool arg4 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Material *)jarg3; 
  arg4 = jarg4 ? true : false; 
  EditorSpatialGizmo_add_lines__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_lines__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  Material *arg3 = (Material *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Material *)jarg3; 
  EditorSpatialGizmo_add_lines__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_mesh__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Mesh *arg2 = (Mesh *) 0 ;
  bool arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Mesh *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_add_mesh__SWIG_0(arg1,arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_mesh__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Mesh *arg2 = (Mesh *) 0 ;
  bool arg3 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Mesh *)jarg2; 
  arg3 = jarg3 ? true : false; 
  EditorSpatialGizmo_add_mesh__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_mesh__SWIG_2(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Mesh *arg2 = (Mesh *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Mesh *)jarg2; 
  EditorSpatialGizmo_add_mesh__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_collision_segments(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_add_collision_segments(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_collision_triangles(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  TriangleMesh *arg2 = (TriangleMesh *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (TriangleMesh *)jarg2; 
  EditorSpatialGizmo_add_collision_triangles(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Material *arg2 = (Material *) 0 ;
  float arg3 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Material *)jarg2; 
  arg3 = (float)jarg3; 
  EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_unscaled_billboard__SWIG_1(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Material *arg2 = (Material *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Material *)jarg2; 
  EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_handles__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  EditorSpatialGizmo_add_handles__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_handles__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  EditorSpatialGizmo_add_handles__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_handles__SWIG_2(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_add_handles__SWIG_0(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_set_spatial_node(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Spatial *arg2 = (Spatial *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Spatial *)jarg2; 
  EditorSpatialGizmo_set_spatial_node(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EditorSpatialGizmo(void * jarg1) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  delete_EditorSpatialGizmo(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Environment() {
  void * jresult ;
  Environment *result = 0 ;
  
  result = (Environment *)memnew(Environment());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_set_background(void * jarg1, int jarg2) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  Environment_set_background(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Environment_get_background(void * jarg1) {
  int jresult ;
  Environment *arg1 = (Environment *) 0 ;
  int result;
  
  arg1 = (Environment *)jarg1; 
  result = (int)Environment_get_background(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_set_background_param(void * jarg1, int jarg2, void * jarg3) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Environment_set_background_param(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_get_background_param(void * jarg1, int jarg2) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  Environment_get_background_param(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_set_enable_fx(void * jarg1, int jarg2, unsigned int jarg3) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Environment_set_enable_fx(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Environment_is_fx_enabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Environment_is_fx_enabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_fx_set_param(void * jarg1, int jarg2, void * jarg3) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Environment_fx_set_param(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_fx_get_param(void * jarg1, int jarg2) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  Environment_fx_get_param(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Environment(void * jarg1) {
  Environment *arg1 = (Environment *) 0 ;
  
  arg1 = (Environment *)jarg1; 
  delete_Environment(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EventStream(void * jarg1) {
  EventStream *arg1 = (EventStream *) 0 ;
  
  arg1 = (EventStream *)jarg1; 
  delete_EventStream(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventStreamChibi() {
  void * jresult ;
  EventStreamChibi *result = 0 ;
  
  result = (EventStreamChibi *)memnew(EventStreamChibi());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EventStreamChibi(void * jarg1) {
  EventStreamChibi *arg1 = (EventStreamChibi *) 0 ;
  
  arg1 = (EventStreamChibi *)jarg1; 
  delete_EventStreamChibi(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Font_draw__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4, void * jarg5, int jarg6) {
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  Font_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Font_draw__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4, void * jarg5) {
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Font_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Font_draw__SWIG_2(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4) {
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Font_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_get_ascent(void * jarg1) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  result = (float)Font_get_ascent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_get_descent(void * jarg1) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  result = (float)Font_get_descent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_get_height(void * jarg1) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  result = (float)Font_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Font_is_distance_field_hint(void * jarg1) {
  unsigned int jresult ;
  Font *arg1 = (Font *) 0 ;
  bool result;
  
  arg1 = (Font *)jarg1; 
  result = (bool)Font_is_distance_field_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Font_get_string_size(void * jarg1, wchar_t * jarg2) {
  Vector2 jresult ;
  Font *arg1 = (Font *) 0 ;
  String *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Font *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return Vector2();
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Font_get_string_size(arg1,(String const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_draw_char__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, int jarg4, int jarg5, void * jarg6) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  Color *arg6 = 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return 0;
  } 
  result = (float)Font_draw_char__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,arg5,(Color const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_draw_char__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, int jarg4, int jarg5) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (float)Font_draw_char__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_draw_char__SWIG_2(void * jarg1, void * jarg2, Vector2* jarg3, int jarg4) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (float)Font_draw_char__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Font(void * jarg1) {
  Font *arg1 = (Font *) 0 ;
  
  arg1 = (Font *)jarg1; 
  delete_Font(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FuncRef() {
  void * jresult ;
  FuncRef *result = 0 ;
  
  result = (FuncRef *)memnew(FuncRef());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  Variant *arg10 = 0 ;
  Variant *arg11 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg10 = (Variant *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg11 = (Variant *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9,(Variant const &)*arg10,(Variant const &)*arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  Variant *arg10 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg10 = (Variant *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9,(Variant const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_9(void * jarg1, void * jarg2) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_10(void * jarg1) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  FuncRef_call_func__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_set_instance(void * jarg1, void * jarg2) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Object *)jarg2; 
  FuncRef_set_instance(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_set_function(void * jarg1, wchar_t * jarg2) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FuncRef_set_function(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FuncRef(void * jarg1) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  delete_FuncRef(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GDFunctionState_resume__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  Variant *arg2 = 0 ;
  Variant result;
  
  arg1 = (GDFunctionState *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = GDFunctionState_resume__SWIG_0(arg1,(Variant const &)*arg2);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GDFunctionState_resume__SWIG_1(void * jarg1) {
  void * jresult ;
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  Variant result;
  
  arg1 = (GDFunctionState *)jarg1; 
  result = GDFunctionState_resume__SWIG_0(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GDFunctionState_is_valid(void * jarg1) {
  unsigned int jresult ;
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  bool result;
  
  arg1 = (GDFunctionState *)jarg1; 
  result = (bool)GDFunctionState_is_valid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GDFunctionState(void * jarg1) {
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  
  arg1 = (GDFunctionState *)jarg1; 
  delete_GDFunctionState(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GDScript() {
  void * jresult ;
  GDScript *result = 0 ;
  
  result = (GDScript *)memnew(GDScript());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GDScript__new(void * jarg1) {
  GDScript *arg1 = (GDScript *) 0 ;
  
  arg1 = (GDScript *)jarg1; 
  GDScript_new(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GDScript_get_as_byte_code(void * jarg1) {
  void * jresult ;
  GDScript *arg1 = (GDScript *) 0 ;
  RawArray result;
  
  arg1 = (GDScript *)jarg1; 
  result = GDScript_get_as_byte_code(arg1);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GDScript(void * jarg1) {
  GDScript *arg1 = (GDScript *) 0 ;
  
  arg1 = (GDScript *)jarg1; 
  delete_GDScript(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_has(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_has(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Globals_set_order(void * jarg1, wchar_t * jarg2, int jarg3) {
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  Globals_set_order(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Globals_get_order(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Globals_get_order(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Globals_set_persisting(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  Globals_set_persisting(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_is_persisting(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_is_persisting(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Globals_clear(void * jarg1, wchar_t * jarg2) {
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Globals_clear(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_localize_path(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Globals_localize_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_globalize_path(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Globals_globalize_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Globals_save(void * jarg1) {
  int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  int result;
  
  arg1 = (Globals *)jarg1; 
  result = (int)Globals_save(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_has_singleton(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_has_singleton(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_get_singleton(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Object *)Globals_get_singleton(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_load_resource_pack(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_load_resource_pack(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Globals_save_custom(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Globals_save_custom(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_SingletonGetInstance() {
  void * jresult ;
  Globals *result = 0 ;
  
  result = (Globals *)Globals_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTTPClient() {
  void * jresult ;
  HTTPClient *result = 0 ;
  
  result = (HTTPClient *)memnew(HTTPClient());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_connect__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (int)HTTPClient_connect__SWIG_0(arg1,(String const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_connect__SWIG_1(void * jarg1, wchar_t * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)HTTPClient_connect__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_connect__SWIG_2(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)HTTPClient_connect__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_set_connection(void * jarg1, void * jarg2) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  StreamPeer *arg2 = (StreamPeer *) 0 ;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (StreamPeer *)jarg2; 
  HTTPClient_set_connection(arg1,arg2);
}


SWIGEXPORT StreamPeer* SWIGSTDCALL CSharp_HTTPClient_get_connection(void * jarg1) {
  StreamPeer* jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  Ref< StreamPeer > result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_get_connection(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_request_raw(void * jarg1, int jarg2, wchar_t * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  StringArray *arg4 = 0 ;
  RawArray *arg5 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StringArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg5 = (RawArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPClient_request_raw(arg1,arg2,(String const &)*arg3,(StringArray const &)*arg4,(RawArray const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_request__SWIG_0(void * jarg1, int jarg2, wchar_t * jarg3, void * jarg4, wchar_t * jarg5) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  StringArray *arg4 = 0 ;
  String *arg5 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StringArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  result = (int)HTTPClient_request__SWIG_0(arg1,arg2,(String const &)*arg3,(StringArray const &)*arg4,(String const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_request__SWIG_1(void * jarg1, int jarg2, wchar_t * jarg3, void * jarg4) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  StringArray *arg4 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StringArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPClient_request__SWIG_0(arg1,arg2,(String const &)*arg3,(StringArray const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_send_body_text(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)HTTPClient_send_body_text(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_send_body_data(void * jarg1, void * jarg2) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPClient_send_body_data(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_close(void * jarg1) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  
  arg1 = (HTTPClient *)jarg1; 
  HTTPClient_close(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPClient_has_response(void * jarg1) {
  unsigned int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (bool)HTTPClient_has_response(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPClient_is_response_chunked(void * jarg1) {
  unsigned int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (bool)HTTPClient_is_response_chunked(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_get_response_code(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_get_response_code(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_get_response_headers(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  StringArray result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_get_response_headers(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_get_response_headers_as_dictionary(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  Dictionary result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_get_response_headers_as_dictionary(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_get_response_body_length(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_get_response_body_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_read_response_body_chunk(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  RawArray result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_read_response_body_chunk(arg1);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_set_read_chunk_size(void * jarg1, int jarg2) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  HTTPClient_set_read_chunk_size(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_set_blocking_mode(void * jarg1, unsigned int jarg2) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool arg2 ;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  HTTPClient_set_blocking_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPClient_is_blocking_mode_enabled(void * jarg1) {
  unsigned int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (bool)HTTPClient_is_blocking_mode_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_get_status(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_get_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_poll(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_poll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_query_string_from_dict(void * jarg1, void * jarg2) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  Dictionary *arg2 = 0 ;
  String result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return 0;
  } 
  result = HTTPClient_query_string_from_dict(arg1,(Dictionary const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTTPClient(void * jarg1) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  
  arg1 = (HTTPClient *)jarg1; 
  delete_HTTPClient(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_resolve_hostname(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  IP *arg1 = (IP *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (IP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = IP_resolve_hostname(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IP_resolve_hostname_queue_item(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  IP *arg1 = (IP *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (IP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)IP_resolve_hostname_queue_item(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IP_get_resolve_item_status(void * jarg1, int jarg2) {
  int jresult ;
  IP *arg1 = (IP *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IP *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)IP_get_resolve_item_status(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_get_resolve_item_address(void * jarg1, int jarg2) {
  void * jresult ;
  IP *arg1 = (IP *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (IP *)jarg1; 
  arg2 = (int)jarg2; 
  result = IP_get_resolve_item_address(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IP_erase_resolve_item(void * jarg1, int jarg2) {
  IP *arg1 = (IP *) 0 ;
  int arg2 ;
  
  arg1 = (IP *)jarg1; 
  arg2 = (int)jarg2; 
  IP_erase_resolve_item(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_get_local_addresses(void * jarg1) {
  void * jresult ;
  IP *arg1 = (IP *) 0 ;
  Array result;
  
  arg1 = (IP *)jarg1; 
  result = IP_get_local_addresses(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_SingletonGetInstance() {
  void * jresult ;
  IP *result = 0 ;
  
  result = (IP *)IP_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageTexture() {
  void * jresult ;
  ImageTexture *result = 0 ;
  
  result = (ImageTexture *)memnew(ImageTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  ImageTexture_create__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ImageTexture_create__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create_from_image__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  ImageTexture_create_from_image__SWIG_0(arg1,(Image const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create_from_image__SWIG_1(void * jarg1, void * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  ImageTexture_create_from_image__SWIG_0(arg1,(Image const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageTexture_get_format(void * jarg1) {
  int jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = (int)ImageTexture_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_load(void * jarg1, wchar_t * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ImageTexture_load(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_data(void * jarg1, void * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  ImageTexture_set_data(arg1,(Image const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageTexture_get_data(void * jarg1) {
  void * jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = ImageTexture_get_data(arg1);
  jresult = memnew(Image((const Image &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_storage(void * jarg1, int jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int arg2 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (int)jarg2; 
  ImageTexture_set_storage(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageTexture_get_storage(void * jarg1) {
  int jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = (int)ImageTexture_get_storage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_lossy_storage_quality(void * jarg1, float jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  float arg2 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (float)jarg2; 
  ImageTexture_set_lossy_storage_quality(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageTexture_get_lossy_storage_quality(void * jarg1) {
  float jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  float result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = (float)ImageTexture_get_lossy_storage_quality(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_fix_alpha_edges(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_fix_alpha_edges(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_premultiply_alpha(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_premultiply_alpha(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_normal_to_xy(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_normal_to_xy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_shrink_x2_and_keep_size(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_shrink_x2_and_keep_size(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_size_override(void * jarg1, Vector2* jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ImageTexture_set_size_override(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImageTexture(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  delete_ImageTexture(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_key_pressed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Input_is_key_pressed(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_mouse_button_pressed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Input_is_mouse_button_pressed(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_joy_button_pressed(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)Input_is_joy_button_pressed(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_action_pressed(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Input_is_action_pressed(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_add_joy_mapping__SWIG_0(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  Input_add_joy_mapping__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_add_joy_mapping__SWIG_1(void * jarg1, wchar_t * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_add_joy_mapping__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_remove_joy_mapping(void * jarg1, wchar_t * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_remove_joy_mapping(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_joy_known(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Input_is_joy_known(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Input_get_joy_axis(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)Input_get_joy_axis(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_joy_name(void * jarg1, int jarg2) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = Input_get_joy_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_joy_guid(void * jarg1, int jarg2) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = Input_get_joy_guid(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Input_get_joy_vibration_strength(void * jarg1, int jarg2) {
  Vector2 jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = Input_get_joy_vibration_strength(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Input_get_joy_vibration_duration(void * jarg1, int jarg2) {
  float jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Input_get_joy_vibration_duration(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_start_joy_vibration__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  Input_start_joy_vibration__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_start_joy_vibration__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  Input_start_joy_vibration__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_stop_joy_vibration(void * jarg1, int jarg2) {
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  Input_stop_joy_vibration(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_accelerometer(void * jarg1) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  Vector3 result;
  
  arg1 = (Input *)jarg1; 
  result = Input_get_accelerometer(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_magnetometer(void * jarg1) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  Vector3 result;
  
  arg1 = (Input *)jarg1; 
  result = Input_get_magnetometer(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Input_get_mouse_speed(void * jarg1) {
  Vector2 jresult ;
  Input *arg1 = (Input *) 0 ;
  Vector2 result;
  
  arg1 = (Input *)jarg1; 
  result = Input_get_mouse_speed(arg1);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Input_get_mouse_button_mask(void * jarg1) {
  int jresult ;
  Input *arg1 = (Input *) 0 ;
  int result;
  
  arg1 = (Input *)jarg1; 
  result = (int)Input_get_mouse_button_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_set_mouse_mode(void * jarg1, int jarg2) {
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  Input_set_mouse_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Input_get_mouse_mode(void * jarg1) {
  int jresult ;
  Input *arg1 = (Input *) 0 ;
  int result;
  
  arg1 = (Input *)jarg1; 
  result = (int)Input_get_mouse_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_warp_mouse_pos(void * jarg1, Vector2* jarg2) {
  Input *arg1 = (Input *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Input_warp_mouse_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_action_press(void * jarg1, wchar_t * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_action_press(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_action_release(void * jarg1, wchar_t * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_action_release(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_set_custom_mouse_cursor__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3) {
  Input *arg1 = (Input *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Input_set_custom_mouse_cursor__SWIG_0(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_set_custom_mouse_cursor__SWIG_1(void * jarg1, void * jarg2) {
  Input *arg1 = (Input *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (Texture *)jarg2; 
  Input_set_custom_mouse_cursor__SWIG_0(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_SingletonGetInstance() {
  void * jresult ;
  Input *result = 0 ;
  
  result = (Input *)Input_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputMap_has_action(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)InputMap_has_action(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InputMap_get_action_id(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)InputMap_get_action_id(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_get_action_from_id(void * jarg1, int jarg2) {
  void * jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (InputMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = InputMap_get_action_from_id(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_get_actions(void * jarg1) {
  void * jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  Array result;
  
  arg1 = (InputMap *)jarg1; 
  result = InputMap_get_actions(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_add_action(void * jarg1, wchar_t * jarg2) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  InputMap_add_action(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_erase_action(void * jarg1, wchar_t * jarg2) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  InputMap_erase_action(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_action_add_event(void * jarg1, wchar_t * jarg2, void * jarg3) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  InputEvent *arg3 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  InputMap_action_add_event(arg1,(String const &)*arg2,(InputEvent const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputMap_action_has_event(void * jarg1, wchar_t * jarg2, void * jarg3) {
  unsigned int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  InputEvent *arg3 = 0 ;
  bool result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)InputMap_action_has_event(arg1,(String const &)*arg2,(InputEvent const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_action_erase_event(void * jarg1, wchar_t * jarg2, void * jarg3) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  InputEvent *arg3 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  InputMap_action_erase_event(arg1,(String const &)*arg2,(InputEvent const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_get_action_list(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  Array result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = InputMap_get_action_list(arg1,(String const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputMap_event_is_action(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  InputEvent *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (InputMap *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)InputMap_event_is_action(arg1,(InputEvent const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_load_from_globals(void * jarg1) {
  InputMap *arg1 = (InputMap *) 0 ;
  
  arg1 = (InputMap *)jarg1; 
  InputMap_load_from_globals(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_SingletonGetInstance() {
  void * jresult ;
  InputMap *result = 0 ;
  
  result = (InputMap *)InputMap_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LargeTexture() {
  void * jresult ;
  LargeTexture *result = 0 ;
  
  result = (LargeTexture *)memnew(LargeTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LargeTexture_add_piece(void * jarg1, Vector2* jarg2, void * jarg3) {
  int jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  Vector2 *arg2 = 0 ;
  Texture *arg3 = (Texture *) 0 ;
  int result;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Texture *)jarg3; 
  result = (int)LargeTexture_add_piece(arg1,(Vector2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_set_piece_offset(void * jarg1, int jarg2, Vector2* jarg3) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  LargeTexture_set_piece_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_set_piece_texture(void * jarg1, int jarg2, void * jarg3) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  LargeTexture_set_piece_texture(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_set_size(void * jarg1, Vector2* jarg2) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  LargeTexture_set_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_clear(void * jarg1) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  LargeTexture_clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LargeTexture_get_piece_count(void * jarg1) {
  int jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int result;
  
  arg1 = (LargeTexture *)jarg1; 
  result = (int)LargeTexture_get_piece_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_LargeTexture_get_piece_offset(void * jarg1, int jarg2) {
  Vector2 jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = LargeTexture_get_piece_offset(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_LargeTexture_get_piece_texture(void * jarg1, int jarg2) {
  Texture* jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = LargeTexture_get_piece_texture(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LargeTexture(void * jarg1) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  delete_LargeTexture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LineShape2D() {
  void * jresult ;
  LineShape2D *result = 0 ;
  
  result = (LineShape2D *)memnew(LineShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineShape2D_set_normal(void * jarg1, Vector2* jarg2) {
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (LineShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  LineShape2D_set_normal(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_LineShape2D_get_normal(void * jarg1) {
  Vector2 jresult ;
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (LineShape2D *)jarg1; 
  result = LineShape2D_get_normal(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineShape2D_set_d(void * jarg1, float jarg2) {
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (LineShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  LineShape2D_set_d(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_LineShape2D_get_d(void * jarg1) {
  float jresult ;
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  float result;
  
  arg1 = (LineShape2D *)jarg1; 
  result = (float)LineShape2D_get_d(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LineShape2D(void * jarg1) {
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  
  arg1 = (LineShape2D *)jarg1; 
  delete_LineShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MainLoop() {
  void * jresult ;
  MainLoop *result = 0 ;
  
  result = (MainLoop *)memnew(MainLoop());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__drop_files(void * jarg1, void * jarg2, int jarg3) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  StringArray *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  MainLoop__drop_files(arg1,(StringArray const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__finalize(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop__finalize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__idle(void * jarg1, float jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  MainLoop__idle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__initialize(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop__initialize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__input_event(void * jarg1, void * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  MainLoop__input_event(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__input_text(void * jarg1, wchar_t * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  MainLoop__input_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__iteration(void * jarg1, float jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  MainLoop__iteration(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_input_event(void * jarg1, void * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  MainLoop_input_event(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_input_text(void * jarg1, wchar_t * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  MainLoop_input_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_init(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop_init(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MainLoop_iteration(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)MainLoop_iteration(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MainLoop_idle(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)MainLoop_idle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_finish(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop_finish(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Material_set_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Material_get_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Material_get_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_blend_mode(void * jarg1, int jarg2) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  Material_set_blend_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_get_blend_mode(void * jarg1) {
  int jresult ;
  Material *arg1 = (Material *) 0 ;
  int result;
  
  arg1 = (Material *)jarg1; 
  result = (int)Material_get_blend_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_line_width(void * jarg1, float jarg2) {
  Material *arg1 = (Material *) 0 ;
  float arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (float)jarg2; 
  Material_set_line_width(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_get_line_width(void * jarg1) {
  float jresult ;
  Material *arg1 = (Material *) 0 ;
  float result;
  
  arg1 = (Material *)jarg1; 
  result = (float)Material_get_line_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_depth_draw_mode(void * jarg1, int jarg2) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  Material_set_depth_draw_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_get_depth_draw_mode(void * jarg1) {
  int jresult ;
  Material *arg1 = (Material *) 0 ;
  int result;
  
  arg1 = (Material *)jarg1; 
  result = (int)Material_get_depth_draw_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Material(void * jarg1) {
  Material *arg1 = (Material *) 0 ;
  
  arg1 = (Material *)jarg1; 
  delete_Material(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialShader() {
  void * jresult ;
  MaterialShader *result = 0 ;
  
  result = (MaterialShader *)memnew(MaterialShader());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MaterialShader(void * jarg1) {
  MaterialShader *arg1 = (MaterialShader *) 0 ;
  
  arg1 = (MaterialShader *)jarg1; 
  delete_MaterialShader(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialShaderGraph() {
  void * jresult ;
  MaterialShaderGraph *result = 0 ;
  
  result = (MaterialShaderGraph *)memnew(MaterialShaderGraph());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MaterialShaderGraph(void * jarg1) {
  MaterialShaderGraph *arg1 = (MaterialShaderGraph *) 0 ;
  
  arg1 = (MaterialShaderGraph *)jarg1; 
  delete_MaterialShaderGraph(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh() {
  void * jresult ;
  Mesh *result = 0 ;
  
  result = (Mesh *)memnew(Mesh());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_morph_target(void * jarg1, wchar_t * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Mesh_add_morph_target(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_get_morph_target_count(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)Mesh_get_morph_target_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_get_morph_target_name(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = Mesh_get_morph_target_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clear_morph_targets(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  Mesh_clear_morph_targets(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_set_morph_target_mode(void * jarg1, int jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  Mesh_set_morph_target_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_get_morph_target_mode(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)Mesh_get_morph_target_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_surface__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  Array *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  Mesh_add_surface__SWIG_0(arg1,arg2,(Array const &)*arg3,(Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_surface__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  Array *arg4 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Mesh_add_surface__SWIG_0(arg1,arg2,(Array const &)*arg3,(Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_surface__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Mesh_add_surface__SWIG_0(arg1,arg2,(Array const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_get_surface_count(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)Mesh_get_surface_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_surface_remove(void * jarg1, int jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  Mesh_surface_remove(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_array_len(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_array_len(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_array_index_len(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_array_index_len(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_format(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_format(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_primitive_type(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_primitive_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_surface_set_material(void * jarg1, int jarg2, void * jarg3) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Material *arg3 = (Material *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Material *)jarg3; 
  Mesh_surface_set_material(arg1,arg2,arg3);
}


SWIGEXPORT Material* SWIGSTDCALL CSharp_Mesh_surface_get_material(void * jarg1, int jarg2) {
  Material* jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Ref< Material > result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = Mesh_surface_get_material(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_surface_set_name(void * jarg1, int jarg2, wchar_t * jarg3) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Mesh_surface_set_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_surface_get_name(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = Mesh_surface_get_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_center_geometry(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  Mesh_center_geometry(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_regen_normalmaps(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  Mesh_regen_normalmaps(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_set_custom_aabb(void * jarg1, void * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  Mesh_set_custom_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_get_custom_aabb(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  AABB result;
  
  arg1 = (Mesh *)jarg1; 
  result = Mesh_get_custom_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  delete_Mesh(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshDataTool() {
  void * jresult ;
  MeshDataTool *result = 0 ;
  
  result = (MeshDataTool *)memnew(MeshDataTool());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_clear(void * jarg1) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  MeshDataTool_clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_create_from_surface(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Object *arg2 = (Object *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_create_from_surface(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_commit_to_surface(void * jarg1, void * jarg2) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Object *arg2 = (Object *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (int)MeshDataTool_commit_to_surface(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_format(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_vertex_count(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_vertex_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_edge_count(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_edge_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_face_count(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_face_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_normal(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_normal(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_normal(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_normal(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_tangent(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Plane *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Plane *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_tangent(arg1,arg2,(Plane const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_tangent(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Plane result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_tangent(arg1,arg2);
  jresult = memnew(Plane((const Plane &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_uv(void * jarg1, int jarg2, Vector2* jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_uv(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_MeshDataTool_get_vertex_uv(void * jarg1, int jarg2) {
  Vector2 jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_uv(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_uv2(void * jarg1, int jarg2, Vector2* jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_uv2(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_MeshDataTool_get_vertex_uv2(void * jarg1, int jarg2) {
  Vector2 jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_uv2(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_color(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_color(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_bones(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_bones(arg1,arg2,(IntArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_bones(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_bones(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_weights(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  RealArray *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RealArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_weights(arg1,arg2,(RealArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_weights(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  RealArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_weights(arg1,arg2);
  jresult = memnew(RealArray((const RealArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_meta(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_meta(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_get_vertex_meta(void * jarg1, int jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  MeshDataTool_get_vertex_meta(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_edges(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_edges(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_faces(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_faces(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_edge_vertex(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_get_edge_vertex(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_edge_faces(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_edge_faces(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_edge_meta(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_edge_meta(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_get_edge_meta(void * jarg1, int jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  MeshDataTool_get_edge_meta(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_face_vertex(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_get_face_vertex(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_face_edge(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_get_face_edge(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_face_meta(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_face_meta(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_get_face_meta(void * jarg1, int jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  MeshDataTool_get_face_meta(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_face_normal(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_face_normal(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_material(void * jarg1, void * jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Material *arg2 = (Material *) 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (Material *)jarg2; 
  MeshDataTool_set_material(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_material(void * jarg1) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Object *result = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (Object *)MeshDataTool_get_material(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshDataTool(void * jarg1) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  delete_MeshDataTool(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshLibrary() {
  void * jresult ;
  MeshLibrary *result = 0 ;
  
  result = (MeshLibrary *)memnew(MeshLibrary());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_create_item(void * jarg1, int jarg2) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  MeshLibrary_create_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_name(void * jarg1, int jarg2, wchar_t * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  MeshLibrary_set_item_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_mesh(void * jarg1, int jarg2, void * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  Mesh *arg3 = (Mesh *) 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Mesh *)jarg3; 
  MeshLibrary_set_item_mesh(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_navmesh(void * jarg1, int jarg2, void * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  NavigationMesh *arg3 = (NavigationMesh *) 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NavigationMesh *)jarg3; 
  MeshLibrary_set_item_navmesh(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_shape(void * jarg1, int jarg2, void * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  Shape *arg3 = (Shape *) 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Shape *)jarg3; 
  MeshLibrary_set_item_shape(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_name(void * jarg1, int jarg2) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT Mesh* SWIGSTDCALL CSharp_MeshLibrary_get_item_mesh(void * jarg1, int jarg2) {
  Mesh* jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  Ref< Mesh > result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_mesh(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT NavigationMesh* SWIGSTDCALL CSharp_MeshLibrary_get_item_navmesh(void * jarg1, int jarg2) {
  NavigationMesh* jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  Ref< NavigationMesh > result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_navmesh(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Shape* SWIGSTDCALL CSharp_MeshLibrary_get_item_shape(void * jarg1, int jarg2) {
  Shape* jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  Ref< Shape > result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_shape(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_remove_item(void * jarg1, int jarg2) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  MeshLibrary_remove_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_clear(void * jarg1) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  MeshLibrary_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_list(void * jarg1) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  IntArray result;
  
  arg1 = (MeshLibrary *)jarg1; 
  result = MeshLibrary_get_item_list(arg1);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshLibrary_get_last_unused_item_id(void * jarg1) {
  int jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int result;
  
  arg1 = (MeshLibrary *)jarg1; 
  result = (int)MeshLibrary_get_last_unused_item_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshLibrary(void * jarg1) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  delete_MeshLibrary(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultiMesh() {
  void * jresult ;
  MultiMesh *result = 0 ;
  
  result = (MultiMesh *)memnew(MultiMesh());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_mesh(void * jarg1, void * jarg2) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  Mesh *arg2 = (Mesh *) 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (Mesh *)jarg2; 
  MultiMesh_set_mesh(arg1,arg2);
}


SWIGEXPORT Mesh* SWIGSTDCALL CSharp_MultiMesh_get_mesh(void * jarg1) {
  Mesh* jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  Ref< Mesh > result;
  
  arg1 = (MultiMesh *)jarg1; 
  result = MultiMesh_get_mesh(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_instance_count(void * jarg1, int jarg2) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  MultiMesh_set_instance_count(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultiMesh_get_instance_count(void * jarg1) {
  int jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int result;
  
  arg1 = (MultiMesh *)jarg1; 
  result = (int)MultiMesh_get_instance_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_instance_transform(void * jarg1, int jarg2, void * jarg3) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  MultiMesh_set_instance_transform(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_instance_transform(void * jarg1, int jarg2) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = MultiMesh_get_instance_transform(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_instance_color(void * jarg1, int jarg2, void * jarg3) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  MultiMesh_set_instance_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_instance_color(void * jarg1, int jarg2) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = MultiMesh_get_instance_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_aabb(void * jarg1, void * jarg2) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  MultiMesh_set_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_aabb(void * jarg1) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  AABB result;
  
  arg1 = (MultiMesh *)jarg1; 
  result = MultiMesh_get_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_generate_aabb(void * jarg1) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  MultiMesh_generate_aabb(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MultiMesh(void * jarg1) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  delete_MultiMesh(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationMesh() {
  void * jresult ;
  NavigationMesh *result = 0 ;
  
  result = (NavigationMesh *)memnew(NavigationMesh());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMesh_set_vertices(void * jarg1, void * jarg2) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  NavigationMesh_set_vertices(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationMesh_get_vertices(void * jarg1) {
  void * jresult ;
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  Vector3Array result;
  
  arg1 = (NavigationMesh *)jarg1; 
  result = NavigationMesh_get_vertices(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMesh_add_polygon(void * jarg1, void * jarg2) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  NavigationMesh_add_polygon(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigationMesh_get_polygon_count(void * jarg1) {
  int jresult ;
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  int result;
  
  arg1 = (NavigationMesh *)jarg1; 
  result = (int)NavigationMesh_get_polygon_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationMesh_get_polygon(void * jarg1, int jarg2) {
  void * jresult ;
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (NavigationMesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = NavigationMesh_get_polygon(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMesh_clear_polygons(void * jarg1) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  NavigationMesh_clear_polygons(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NavigationMesh(void * jarg1) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  delete_NavigationMesh(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationPolygon() {
  void * jresult ;
  NavigationPolygon *result = 0 ;
  
  result = (NavigationPolygon *)memnew(NavigationPolygon());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_set_vertices(void * jarg1, void * jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  NavigationPolygon_set_vertices(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygon_get_vertices(void * jarg1) {
  void * jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  result = NavigationPolygon_get_vertices(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_add_polygon(void * jarg1, void * jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  NavigationPolygon_add_polygon(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigationPolygon_get_polygon_count(void * jarg1) {
  int jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  result = (int)NavigationPolygon_get_polygon_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygon_get_polygon(void * jarg1, int jarg2) {
  void * jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  result = NavigationPolygon_get_polygon(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_clear_polygons(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  NavigationPolygon_clear_polygons(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_add_outline(void * jarg1, void * jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  NavigationPolygon_add_outline(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_add_outline_at_index(void * jarg1, void * jarg2, int jarg3) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  NavigationPolygon_add_outline_at_index(arg1,(Vector2Array const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigationPolygon_get_outline_count(void * jarg1) {
  int jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  result = (int)NavigationPolygon_get_outline_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_set_outline(void * jarg1, int jarg2, void * jarg3) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  Vector2Array *arg3 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  NavigationPolygon_set_outline(arg1,arg2,(Vector2Array const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygon_get_outline(void * jarg1, int jarg2) {
  void * jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  Vector2Array result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  result = NavigationPolygon_get_outline(arg1,arg2);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_remove_outline(void * jarg1, int jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  NavigationPolygon_remove_outline(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_clear_outlines(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  NavigationPolygon_clear_outlines(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_make_polygons_from_outlines(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  NavigationPolygon_make_polygons_from_outlines(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NavigationPolygon(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  delete_NavigationPolygon(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node() {
  void * jresult ;
  Node *result = 0 ;
  
  result = (Node *)memnew(Node());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__enter_tree(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node__enter_tree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__exit_tree(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node__exit_tree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__fixed_process(void * jarg1, float jarg2) {
  Node *arg1 = (Node *) 0 ;
  float arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (float)jarg2; 
  Node__fixed_process(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__input(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Node__input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__process(void * jarg1, float jarg2) {
  Node *arg1 = (Node *) 0 ;
  float arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (float)jarg2; 
  Node__process(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__ready(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node__ready(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__unhandled_input(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Node__unhandled_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__unhandled_key_input(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Node__unhandled_key_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_name(void * jarg1, wchar_t * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str;
  Node_set_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_name(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool arg3 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node_add_child__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_1(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_add_child__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_child(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_remove_child(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_child_count(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_child_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_children(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Array result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_children(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_child(void * jarg1, int jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Node *)Node_get_child(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_has_node(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (bool)Node_has_node(arg1,(NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node(void * jarg1, void * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (Node *)Node_get_node(arg1,(NodePath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_parent(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Node_get_parent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_node__SWIG_0(void * jarg1, wchar_t * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (Node *)Node_find_node__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_node__SWIG_1(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (Node *)Node_find_node__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_node__SWIG_2(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Node *)Node_find_node__SWIG_0(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_has_node_and_resource(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (bool)Node_has_node_and_resource(arg1,(NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node_and_resource(void * jarg1, void * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  Array result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = Node_get_node_and_resource(arg1,(NodePath const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_inside_tree(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_inside_tree(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_a_parent_of(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (bool)Node_is_a_parent_of(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_greater_than(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (bool)Node_is_greater_than(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path_to(void * jarg1, void * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  NodePath result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = Node_get_path_to(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_to_group__SWIG_0(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  Node_add_to_group__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_to_group__SWIG_1(void * jarg1, wchar_t * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_add_to_group__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_from_group(void * jarg1, wchar_t * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_remove_from_group(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_in_group(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Node_is_in_group(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_move_child(void * jarg1, void * jarg2, int jarg3) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int arg3 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (int)jarg3; 
  Node_move_child(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_groups(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Array result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_groups(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_raise(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_raise(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_owner(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_set_owner(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_owner(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Node_get_owner(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_and_skip(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_remove_and_skip(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_index(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_tree(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_print_tree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_filename(void * jarg1, wchar_t * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_set_filename(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_filename(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_filename(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_propagate_notification(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  Node_propagate_notification(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_fixed_process(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_fixed_process(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node_get_fixed_process_delta_time(void * jarg1) {
  float jresult ;
  Node *arg1 = (Node *) 0 ;
  float result;
  
  arg1 = (Node *)jarg1; 
  result = (float)Node_get_fixed_process_delta_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_fixed_processing(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_fixed_processing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node_get_process_delta_time(void * jarg1) {
  float jresult ;
  Node *arg1 = (Node *) 0 ;
  float result;
  
  arg1 = (Node *)jarg1; 
  result = (float)Node_get_process_delta_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_input(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_input(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing_input(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_unhandled_input(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process_unhandled_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_unhandled_input(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing_unhandled_input(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_unhandled_key_input(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process_unhandled_key_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_unhandled_key_input(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing_unhandled_key_input(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_pause_mode(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  Node_set_pause_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_pause_mode(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_pause_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_can_process(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_can_process(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_stray_nodes(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_print_stray_nodes(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_position_in_parent(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_position_in_parent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_tree(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  SceneTree *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (SceneTree *)Node_get_tree(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_duplicate__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Node *)Node_duplicate__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_duplicate__SWIG_1(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Node_duplicate__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_replace_by__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool arg3 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node_replace_by__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_replace_by__SWIG_1(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_replace_by__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_scene_instance_load_placeholder(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_scene_instance_load_placeholder(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_get_scene_instance_load_placeholder(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_get_scene_instance_load_placeholder(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_viewport(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Object *)Node_get_viewport(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_queue_free(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_queue_free(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OccluderPolygon2D() {
  void * jresult ;
  OccluderPolygon2D *result = 0 ;
  
  result = (OccluderPolygon2D *)memnew(OccluderPolygon2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OccluderPolygon2D_set_closed(void * jarg1, unsigned int jarg2) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  bool arg2 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  OccluderPolygon2D_set_closed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OccluderPolygon2D_is_closed(void * jarg1) {
  unsigned int jresult ;
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  bool result;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  result = (bool)OccluderPolygon2D_is_closed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OccluderPolygon2D_set_cull_mode(void * jarg1, int jarg2) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  int arg2 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  arg2 = (int)jarg2; 
  OccluderPolygon2D_set_cull_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OccluderPolygon2D_get_cull_mode(void * jarg1) {
  int jresult ;
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  int result;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  result = (int)OccluderPolygon2D_get_cull_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OccluderPolygon2D_set_polygon(void * jarg1, void * jarg2) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  OccluderPolygon2D_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OccluderPolygon2D_get_polygon(void * jarg1) {
  void * jresult ;
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  result = OccluderPolygon2D_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OccluderPolygon2D(void * jarg1) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  delete_OccluderPolygon2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PCKPacker() {
  void * jresult ;
  PCKPacker *result = 0 ;
  
  result = (PCKPacker *)memnew(PCKPacker());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCKPacker_pck_start(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PCKPacker *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)PCKPacker_pck_start(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCKPacker_add_file(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  int jresult ;
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (PCKPacker *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)PCKPacker_add_file(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCKPacker_flush(void * jarg1, unsigned int jarg2) {
  int jresult ;
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (PCKPacker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)PCKPacker_flush(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PCKPacker(void * jarg1) {
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  
  arg1 = (PCKPacker *)jarg1; 
  delete_PCKPacker(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PHashTranslation() {
  void * jresult ;
  PHashTranslation *result = 0 ;
  
  result = (PHashTranslation *)memnew(PHashTranslation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHashTranslation_generate(void * jarg1, void * jarg2) {
  PHashTranslation *arg1 = (PHashTranslation *) 0 ;
  Translation *arg2 = (Translation *) 0 ;
  
  arg1 = (PHashTranslation *)jarg1; 
  arg2 = (Translation *)jarg2; 
  PHashTranslation_generate(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PHashTranslation(void * jarg1) {
  PHashTranslation *arg1 = (PHashTranslation *) 0 ;
  
  arg1 = (PHashTranslation *)jarg1; 
  delete_PHashTranslation(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PackedDataContainer() {
  void * jresult ;
  PackedDataContainer *result = 0 ;
  
  result = (PackedDataContainer *)memnew(PackedDataContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedDataContainer_pack(void * jarg1, void * jarg2) {
  int jresult ;
  PackedDataContainer *arg1 = (PackedDataContainer *) 0 ;
  Variant *arg2 = 0 ;
  int result;
  
  arg1 = (PackedDataContainer *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (int)PackedDataContainer_pack(arg1,(Variant const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedDataContainer_size(void * jarg1) {
  int jresult ;
  PackedDataContainer *arg1 = (PackedDataContainer *) 0 ;
  int result;
  
  arg1 = (PackedDataContainer *)jarg1; 
  result = (int)PackedDataContainer_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PackedDataContainer(void * jarg1) {
  PackedDataContainer *arg1 = (PackedDataContainer *) 0 ;
  
  arg1 = (PackedDataContainer *)jarg1; 
  delete_PackedDataContainer(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedDataContainerRef_size(void * jarg1) {
  int jresult ;
  PackedDataContainerRef *arg1 = (PackedDataContainerRef *) 0 ;
  int result;
  
  arg1 = (PackedDataContainerRef *)jarg1; 
  result = (int)PackedDataContainerRef_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PackedDataContainerRef(void * jarg1) {
  PackedDataContainerRef *arg1 = (PackedDataContainerRef *) 0 ;
  
  arg1 = (PackedDataContainerRef *)jarg1; 
  delete_PackedDataContainerRef(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PackedScene() {
  void * jresult ;
  PackedScene *result = 0 ;
  
  result = (PackedScene *)memnew(PackedScene());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedScene_pack(void * jarg1, void * jarg2) {
  int jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (PackedScene *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)PackedScene_pack(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PackedScene_instance__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  bool arg2 ;
  Node *result = 0 ;
  
  arg1 = (PackedScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Node *)PackedScene_instance__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PackedScene_instance__SWIG_1(void * jarg1) {
  void * jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  Node *result = 0 ;
  
  arg1 = (PackedScene *)jarg1; 
  result = (Node *)PackedScene_instance__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackedScene_can_instance(void * jarg1) {
  unsigned int jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  bool result;
  
  arg1 = (PackedScene *)jarg1; 
  result = (bool)PackedScene_can_instance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT SceneState* SWIGSTDCALL CSharp_PackedScene_get_state(void * jarg1) {
  SceneState* jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  Ref< SceneState > result;
  
  arg1 = (PackedScene *)jarg1; 
  result = PackedScene_get_state(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PackedScene(void * jarg1) {
  PackedScene *arg1 = (PackedScene *) 0 ;
  
  arg1 = (PackedScene *)jarg1; 
  delete_PackedScene(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketPeer_get_var(void * jarg1) {
  void * jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  Variant result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = PacketPeer_get_var(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_put_var(void * jarg1, void * jarg2) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  Variant *arg2 = 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (int)PacketPeer_put_var(arg1,(Variant const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketPeer_get_packet(void * jarg1) {
  void * jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  RawArray result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = PacketPeer_get_packet(arg1);
  jresult = memnew(RawArray((const RawArray &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_put_packet(void * jarg1, void * jarg2) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)PacketPeer_put_packet(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_get_packet_error(void * jarg1) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = (int)PacketPeer_get_packet_error(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_get_available_packet_count(void * jarg1) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = (int)PacketPeer_get_available_packet_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PacketPeer(void * jarg1) {
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  
  arg1 = (PacketPeer *)jarg1; 
  delete_PacketPeer(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketPeerStream() {
  void * jresult ;
  PacketPeerStream *result = 0 ;
  
  result = (PacketPeerStream *)memnew(PacketPeerStream());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketPeerStream_set_stream_peer(void * jarg1, void * jarg2) {
  PacketPeerStream *arg1 = (PacketPeerStream *) 0 ;
  StreamPeer *arg2 = (StreamPeer *) 0 ;
  
  arg1 = (PacketPeerStream *)jarg1; 
  arg2 = (StreamPeer *)jarg2; 
  PacketPeerStream_set_stream_peer(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PacketPeerStream(void * jarg1) {
  PacketPeerStream *arg1 = (PacketPeerStream *) 0 ;
  
  arg1 = (PacketPeerStream *)jarg1; 
  delete_PacketPeerStream(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_listen__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)PacketPeerUDP_listen__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_listen__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PacketPeerUDP_listen__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketPeerUDP_close(void * jarg1) {
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  PacketPeerUDP_close(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_wait(void * jarg1) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (int)PacketPeerUDP_wait(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketPeerUDP_is_listening(void * jarg1) {
  unsigned int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  bool result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (bool)PacketPeerUDP_is_listening(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketPeerUDP_get_packet_ip(void * jarg1) {
  void * jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  String result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = PacketPeerUDP_get_packet_ip(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_get_packet_address(void * jarg1) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (int)PacketPeerUDP_get_packet_address(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_get_packet_port(void * jarg1) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (int)PacketPeerUDP_get_packet_port(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_set_send_address(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)PacketPeerUDP_set_send_address(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketPeerUDP() {
  void * jresult ;
  PacketPeerUDP *result = 0 ;
  
  result = (PacketPeerUDP *)new_PacketPeerUDP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PacketPeerUDP(void * jarg1) {
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  delete_PacketPeerUDP(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Physics2DShapeQueryParameters() {
  void * jresult ;
  Physics2DShapeQueryParameters *result = 0 ;
  
  result = (Physics2DShapeQueryParameters *)memnew(Physics2DShapeQueryParameters());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_shape(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Shape2D *arg2 = (Shape2D *) 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Shape2D *)jarg2; 
  Physics2DShapeQueryParameters_set_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_shape_rid(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_shape_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_shape_rid(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  RID result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_shape_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_transform(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_transform(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Matrix32 result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_motion(void * jarg1, Vector2* jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_motion(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_motion(void * jarg1) {
  Vector2 jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_motion(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_margin(void * jarg1, float jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  float arg2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (float)jarg2; 
  Physics2DShapeQueryParameters_set_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_margin(void * jarg1) {
  float jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  float result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = (float)Physics2DShapeQueryParameters_get_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_layer_mask(void * jarg1, int jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  Physics2DShapeQueryParameters_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_layer_mask(void * jarg1) {
  int jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = (int)Physics2DShapeQueryParameters_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_object_type_mask(void * jarg1, int jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  Physics2DShapeQueryParameters_set_object_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_object_type_mask(void * jarg1) {
  int jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = (int)Physics2DShapeQueryParameters_get_object_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_exclude(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Array *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_exclude(arg1,(Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_exclude(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_exclude(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Physics2DShapeQueryParameters(void * jarg1) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  delete_Physics2DShapeQueryParameters(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_count(void * jarg1) {
  int jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  result = (int)Physics2DShapeQueryResult_get_result_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_rid(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DShapeQueryResult_get_result_rid(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_object_id(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DShapeQueryResult_get_result_object_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_object(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)Physics2DShapeQueryResult_get_result_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_object_shape(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DShapeQueryResult_get_result_object_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Physics2DShapeQueryResult(void * jarg1) {
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  delete_Physics2DShapeQueryResult(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Physics2DTestMotionResult() {
  void * jresult ;
  Physics2DTestMotionResult *result = 0 ;
  
  result = (Physics2DTestMotionResult *)memnew(Physics2DTestMotionResult());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_motion(void * jarg1) {
  Vector2 jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_motion(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_motion_remainder(void * jarg1) {
  Vector2 jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_motion_remainder(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collision_point(void * jarg1) {
  Vector2 jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collision_point(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collision_normal(void * jarg1) {
  Vector2 jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collision_normal(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_velocity(void * jarg1) {
  Vector2 jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collider_velocity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_id(void * jarg1) {
  int jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  int result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = (int)Physics2DTestMotionResult_get_collider_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_rid(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  RID result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collider_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = (Object *)Physics2DTestMotionResult_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_shape(void * jarg1) {
  int jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  int result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = (int)Physics2DTestMotionResult_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Physics2DTestMotionResult(void * jarg1) {
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  delete_Physics2DTestMotionResult(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsShapeQueryParameters() {
  void * jresult ;
  PhysicsShapeQueryParameters *result = 0 ;
  
  result = (PhysicsShapeQueryParameters *)memnew(PhysicsShapeQueryParameters());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_shape(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Shape *arg2 = (Shape *) 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (Shape *)jarg2; 
  PhysicsShapeQueryParameters_set_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_shape_rid(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsShapeQueryParameters_set_shape_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_shape_rid(void * jarg1) {
  void * jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  RID result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = PhysicsShapeQueryParameters_get_shape_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_transform(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsShapeQueryParameters_set_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_transform(void * jarg1) {
  void * jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Transform result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = PhysicsShapeQueryParameters_get_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_margin(void * jarg1, float jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  float arg2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (float)jarg2; 
  PhysicsShapeQueryParameters_set_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_margin(void * jarg1) {
  float jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  float result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = (float)PhysicsShapeQueryParameters_get_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_layer_mask(void * jarg1, int jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsShapeQueryParameters_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_layer_mask(void * jarg1) {
  int jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = (int)PhysicsShapeQueryParameters_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_object_type_mask(void * jarg1, int jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsShapeQueryParameters_set_object_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_object_type_mask(void * jarg1) {
  int jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = (int)PhysicsShapeQueryParameters_get_object_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_exclude(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Array *arg2 = 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  PhysicsShapeQueryParameters_set_exclude(arg1,(Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_exclude(void * jarg1) {
  void * jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = PhysicsShapeQueryParameters_get_exclude(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsShapeQueryParameters(void * jarg1) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  delete_PhysicsShapeQueryParameters(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_count(void * jarg1) {
  int jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  result = (int)PhysicsShapeQueryResult_get_result_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_rid(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsShapeQueryResult_get_result_rid(arg1,arg2);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_object_id(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsShapeQueryResult_get_result_object_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_object(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)PhysicsShapeQueryResult_get_result_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_object_shape(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsShapeQueryResult_get_result_object_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsShapeQueryResult(void * jarg1) {
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  delete_PhysicsShapeQueryResult(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlaneShape() {
  void * jresult ;
  PlaneShape *result = 0 ;
  
  result = (PlaneShape *)memnew(PlaneShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlaneShape_set_plane(void * jarg1, void * jarg2) {
  PlaneShape *arg1 = (PlaneShape *) 0 ;
  Plane *arg2 = 0 ;
  
  arg1 = (PlaneShape *)jarg1; 
  arg2 = (Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  PlaneShape_set_plane(arg1,(Plane const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneShape_get_plane(void * jarg1) {
  void * jresult ;
  PlaneShape *arg1 = (PlaneShape *) 0 ;
  Plane result;
  
  arg1 = (PlaneShape *)jarg1; 
  result = PlaneShape_get_plane(arg1);
  jresult = memnew(Plane((const Plane &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlaneShape(void * jarg1) {
  PlaneShape *arg1 = (PlaneShape *) 0 ;
  
  arg1 = (PlaneShape *)jarg1; 
  delete_PlaneShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonPathFinder() {
  void * jresult ;
  PolygonPathFinder *result = 0 ;
  
  result = (PolygonPathFinder *)memnew(PolygonPathFinder());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPathFinder_setup(void * jarg1, void * jarg2, void * jarg3) {
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2Array *arg2 = 0 ;
  IntArray *arg3 = 0 ;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (IntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  PolygonPathFinder_setup(arg1,(Vector2Array const &)*arg2,(IntArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_find_path(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2Array result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = PolygonPathFinder_find_path(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_get_intersections(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2Array result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = PolygonPathFinder_get_intersections(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_PolygonPathFinder_get_closest_point(void * jarg1, Vector2* jarg2) {
  Vector2 jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  result = PolygonPathFinder_get_closest_point(arg1,(Vector2 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPathFinder_is_point_inside(void * jarg1, Vector2* jarg2) {
  unsigned int jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)PolygonPathFinder_is_point_inside(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPathFinder_set_point_penalty(void * jarg1, int jarg2, float jarg3) {
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  PolygonPathFinder_set_point_penalty(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolygonPathFinder_get_point_penalty(void * jarg1, int jarg2) {
  float jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)PolygonPathFinder_get_point_penalty(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_get_bounds(void * jarg1) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Rect2 result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  result = PolygonPathFinder_get_bounds(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolygonPathFinder(void * jarg1) {
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  delete_PolygonPathFinder(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayShape() {
  void * jresult ;
  RayShape *result = 0 ;
  
  result = (RayShape *)memnew(RayShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayShape_set_length(void * jarg1, float jarg2) {
  RayShape *arg1 = (RayShape *) 0 ;
  float arg2 ;
  
  arg1 = (RayShape *)jarg1; 
  arg2 = (float)jarg2; 
  RayShape_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RayShape_get_length(void * jarg1) {
  float jresult ;
  RayShape *arg1 = (RayShape *) 0 ;
  float result;
  
  arg1 = (RayShape *)jarg1; 
  result = (float)RayShape_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RayShape(void * jarg1) {
  RayShape *arg1 = (RayShape *) 0 ;
  
  arg1 = (RayShape *)jarg1; 
  delete_RayShape(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayShape2D() {
  void * jresult ;
  RayShape2D *result = 0 ;
  
  result = (RayShape2D *)memnew(RayShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayShape2D_set_length(void * jarg1, float jarg2) {
  RayShape2D *arg1 = (RayShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (RayShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  RayShape2D_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RayShape2D_get_length(void * jarg1) {
  float jresult ;
  RayShape2D *arg1 = (RayShape2D *) 0 ;
  float result;
  
  arg1 = (RayShape2D *)jarg1; 
  result = (float)RayShape2D_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RayShape2D(void * jarg1) {
  RayShape2D *arg1 = (RayShape2D *) 0 ;
  
  arg1 = (RayShape2D *)jarg1; 
  delete_RayShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleShape2D() {
  void * jresult ;
  RectangleShape2D *result = 0 ;
  
  result = (RectangleShape2D *)memnew(RectangleShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleShape2D_set_extents(void * jarg1, Vector2* jarg2) {
  RectangleShape2D *arg1 = (RectangleShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RectangleShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RectangleShape2D_set_extents(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_RectangleShape2D_get_extents(void * jarg1) {
  Vector2 jresult ;
  RectangleShape2D *arg1 = (RectangleShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (RectangleShape2D *)jarg1; 
  result = RectangleShape2D_get_extents(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RectangleShape2D(void * jarg1) {
  RectangleShape2D *arg1 = (RectangleShape2D *) 0 ;
  
  arg1 = (RectangleShape2D *)jarg1; 
  delete_RectangleShape2D(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RenderTargetTexture(void * jarg1) {
  RenderTargetTexture *arg1 = (RenderTargetTexture *) 0 ;
  
  arg1 = (RenderTargetTexture *)jarg1; 
  delete_RenderTargetTexture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResourcePreloader() {
  void * jresult ;
  ResourcePreloader *result = 0 ;
  
  result = (ResourcePreloader *)memnew(ResourcePreloader());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourcePreloader_add_resource(void * jarg1, wchar_t * jarg2, void * jarg3) {
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  ResourcePreloader_add_resource(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourcePreloader_remove_resource(void * jarg1, wchar_t * jarg2) {
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourcePreloader_remove_resource(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourcePreloader_rename_resource(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ResourcePreloader_rename_resource(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourcePreloader_has_resource(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)ResourcePreloader_has_resource(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourcePreloader_get_resource(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Object *)ResourcePreloader_get_resource(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourcePreloader_get_resource_list(void * jarg1) {
  void * jresult ;
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  StringArray result;
  
  arg1 = (ResourcePreloader *)jarg1; 
  result = ResourcePreloader_get_resource_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SamplePlayer() {
  void * jresult ;
  SamplePlayer *result = 0 ;
  
  result = (SamplePlayer *)memnew(SamplePlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_sample_library(void * jarg1, void * jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  SampleLibrary *arg2 = (SampleLibrary *) 0 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (SampleLibrary *)jarg2; 
  SamplePlayer_set_sample_library(arg1,arg2);
}


SWIGEXPORT SampleLibrary* SWIGSTDCALL CSharp_SamplePlayer_get_sample_library(void * jarg1) {
  SampleLibrary* jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  Ref< SampleLibrary > result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = SamplePlayer_get_sample_library(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_polyphony(void * jarg1, int jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer_set_polyphony(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_polyphony(void * jarg1) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (int)SamplePlayer_get_polyphony(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_play__SWIG_0(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (int)SamplePlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_play__SWIG_1(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SamplePlayer_play__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_stop(void * jarg1, int jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer_stop(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_stop_all(void * jarg1) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  SamplePlayer_stop_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_mix_rate(void * jarg1, int jarg2, int jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  SamplePlayer_set_mix_rate(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pitch_scale(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_pitch_scale(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_volume(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_volume(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_volume_db(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_volume_db(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pan__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  SamplePlayer_set_pan__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pan__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_pan__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pan__SWIG_2(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_pan__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_filter__SWIG_0(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  SamplePlayer_set_filter__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_filter__SWIG_1(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  SamplePlayer_set_filter__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_chorus(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_chorus(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_reverb(void * jarg1, int jarg2, int jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_reverb(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_mix_rate(void * jarg1, int jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SamplePlayer_get_mix_rate(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pitch_scale(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pitch_scale(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_volume(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_volume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_volume_db(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_volume_db(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pan(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pan(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pan_depth(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pan_depth(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pan_height(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pan_height(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_filter_type(void * jarg1, int jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SamplePlayer_get_filter_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_filter_cutoff(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_filter_cutoff(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_filter_resonance(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_filter_resonance(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_filter_gain(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_filter_gain(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_chorus(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_chorus(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_reverb_room(void * jarg1, int jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SamplePlayer_get_reverb_room(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_reverb(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_reverb(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pitch_scale(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_pitch_scale(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_volume(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_volume(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_volume_db(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_volume_db(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pan__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_default_pan__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pan__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_default_pan__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pan__SWIG_2(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_pan__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_filter__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  SamplePlayer_set_default_filter__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_filter__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_default_filter__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_chorus(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_chorus(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_reverb(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_default_reverb(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pitch_scale(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pitch_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_volume(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_volume_db(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pan(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pan_depth(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pan_depth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pan_height(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pan_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_type(void * jarg1) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (int)SamplePlayer_get_default_filter_type(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_cutoff(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_filter_cutoff(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_resonance(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_filter_resonance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_gain(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_filter_gain(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_chorus(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_chorus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_default_reverb_room(void * jarg1) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (int)SamplePlayer_get_default_reverb_room(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_reverb(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_reverb(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplePlayer_is_active(void * jarg1) {
  unsigned int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  bool result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (bool)SamplePlayer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplePlayer_is_voice_active(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SamplePlayer_is_voice_active(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneTree() {
  void * jresult ;
  SceneTree *result = 0 ;
  
  result = (SceneTree *)memnew(SceneTree());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_notify_group(void * jarg1, int jarg2, wchar_t * jarg3, int jarg4) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  SceneTree_notify_group(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_group(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_set_group(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_nodes_in_group(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  String *arg2 = 0 ;
  Array result;
  
  arg1 = (SceneTree *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = SceneTree_get_nodes_in_group(arg1,(String const &)*arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_root(void * jarg1) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  Viewport *result = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  result = (Viewport *)SceneTree_get_root(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_has_group(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SceneTree_has_group(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_auto_accept_quit(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_auto_accept_quit(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_editor_hint(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_editor_hint(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_editor_hint(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_editor_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_debug_collisions_hint(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_debug_collisions_hint(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_debugging_collisions_hint(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_debugging_collisions_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_debug_navigation_hint(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_debug_navigation_hint(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_debugging_navigation_hint(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_debugging_navigation_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_edited_scene_root(void * jarg1, void * jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (Object *)jarg2; 
  SceneTree_set_edited_scene_root(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_edited_scene_root(void * jarg1) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  Object *result = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  result = (Object *)SceneTree_get_edited_scene_root(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_pause(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_pause(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_paused(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_input_as_handled(void * jarg1) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  SceneTree_set_input_as_handled(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_get_node_count(void * jarg1) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (int)SceneTree_get_node_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_get_frame(void * jarg1) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (int)SceneTree_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_quit(void * jarg1) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  SceneTree_quit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_screen_stretch(void * jarg1, int jarg2, int jarg3, Vector2* jarg4) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SceneTree_set_screen_stretch(arg1,arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_queue_delete(void * jarg1, void * jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (Object *)jarg2; 
  SceneTree_queue_delete(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_0(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_1(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_2(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_3(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5, void * jarg6) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_4(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_5(void * jarg1, int jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_current_scene(void * jarg1, void * jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (Node *)jarg2; 
  SceneTree_set_current_scene(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_current_scene(void * jarg1) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  Node *result = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  result = (Node *)SceneTree_get_current_scene(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_change_scene(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SceneTree_change_scene(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_change_scene_to(void * jarg1, void * jarg2) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  PackedScene *arg2 = (PackedScene *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (PackedScene *)jarg2; 
  result = (int)SceneTree_change_scene_to(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_reload_current_scene(void * jarg1) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (int)SceneTree_reload_current_scene(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SegmentShape2D() {
  void * jresult ;
  SegmentShape2D *result = 0 ;
  
  result = (SegmentShape2D *)memnew(SegmentShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SegmentShape2D_set_a(void * jarg1, Vector2* jarg2) {
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SegmentShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SegmentShape2D_set_a(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_SegmentShape2D_get_a(void * jarg1) {
  Vector2 jresult ;
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (SegmentShape2D *)jarg1; 
  result = SegmentShape2D_get_a(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SegmentShape2D_set_b(void * jarg1, Vector2* jarg2) {
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SegmentShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SegmentShape2D_set_b(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_SegmentShape2D_get_b(void * jarg1) {
  Vector2 jresult ;
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (SegmentShape2D *)jarg1; 
  result = SegmentShape2D_get_b(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SegmentShape2D(void * jarg1) {
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  
  arg1 = (SegmentShape2D *)jarg1; 
  delete_SegmentShape2D(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShaderMaterial() {
  void * jresult ;
  ShaderMaterial *result = 0 ;
  
  result = (ShaderMaterial *)memnew(ShaderMaterial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderMaterial_set_shader(void * jarg1, void * jarg2) {
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  Shader *arg2 = (Shader *) 0 ;
  
  arg1 = (ShaderMaterial *)jarg1; 
  arg2 = (Shader *)jarg2; 
  ShaderMaterial_set_shader(arg1,arg2);
}


SWIGEXPORT Shader* SWIGSTDCALL CSharp_ShaderMaterial_get_shader(void * jarg1) {
  Shader* jresult ;
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  Ref< Shader > result;
  
  arg1 = (ShaderMaterial *)jarg1; 
  result = ShaderMaterial_get_shader(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderMaterial_set_shader_param(void * jarg1, wchar_t * jarg2, void * jarg3) {
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ShaderMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ShaderMaterial_set_shader_param(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderMaterial_get_shader_param(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  String *arg2 = 0 ;
  Variant result;
  
  arg1 = (ShaderMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = ShaderMaterial_get_shader_param(arg1,(String const &)*arg2);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShaderMaterial(void * jarg1) {
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  
  arg1 = (ShaderMaterial *)jarg1; 
  delete_ShaderMaterial(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoundRoomParams() {
  void * jresult ;
  SoundRoomParams *result = 0 ;
  
  result = (SoundRoomParams *)memnew(SoundRoomParams());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundRoomParams_set_param(void * jarg1, int jarg2, float jarg3) {
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SoundRoomParams_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundRoomParams_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SoundRoomParams_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundRoomParams_set_reverb_mode(void * jarg1, int jarg2) {
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int arg2 ;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = (int)jarg2; 
  SoundRoomParams_set_reverb_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundRoomParams_get_reverb_mode(void * jarg1) {
  int jresult ;
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int result;
  
  arg1 = (SoundRoomParams *)jarg1; 
  result = (int)SoundRoomParams_get_reverb_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundRoomParams_set_force_params_to_all_sources(void * jarg1, unsigned int jarg2) {
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  bool arg2 ;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SoundRoomParams_set_force_params_to_all_sources(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundRoomParams_is_forcing_params_to_all_sources(void * jarg1) {
  unsigned int jresult ;
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  bool result;
  
  arg1 = (SoundRoomParams *)jarg1; 
  result = (bool)SoundRoomParams_is_forcing_params_to_all_sources(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spatial() {
  void * jresult ;
  Spatial *result = 0 ;
  
  result = (Spatial *)memnew(Spatial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_transform(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Spatial_set_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_transform(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Transform result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_translation(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_translation(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_translation(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_translation(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_rotation(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_rotation(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_rotation(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_rotation(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_rotation_deg(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_rotation_deg(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_rotation_deg(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_rotation_deg(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_scale(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_scale(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_scale(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_scale(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_global_transform(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Spatial_set_global_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_global_transform(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Transform result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_global_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_parent_spatial(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  result = (Object *)Spatial_get_parent_spatial(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_ignore_transform_notification(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_ignore_transform_notification(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_as_toplevel(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_as_toplevel(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_set_as_toplevel(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_set_as_toplevel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT World* SWIGSTDCALL CSharp_Spatial_get_world(void * jarg1) {
  World* jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Ref< World > result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_world(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_update_gizmo(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_update_gizmo(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_gizmo(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  SpatialGizmo *arg2 = (SpatialGizmo *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (SpatialGizmo *)jarg2; 
  Spatial_set_gizmo(arg1,arg2);
}


SWIGEXPORT SpatialGizmo* SWIGSTDCALL CSharp_Spatial_get_gizmo(void * jarg1) {
  SpatialGizmo* jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Ref< SpatialGizmo > result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_gizmo(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_show(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_show(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_hide(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_hide(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_visible(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_hidden(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_hidden(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_hidden(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_hidden(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_notify_local_transform(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_notify_local_transform(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_local_transform_notification_enabled(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_local_transform_notification_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate(void * jarg1, void * jarg2, float jarg3) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  Spatial_rotate(arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_global_rotate(void * jarg1, void * jarg2, float jarg3) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  Spatial_global_rotate(arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate_x(void * jarg1, float jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  float arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (float)jarg2; 
  Spatial_rotate_x(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate_y(void * jarg1, float jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  float arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (float)jarg2; 
  Spatial_rotate_y(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate_z(void * jarg1, float jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  float arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (float)jarg2; 
  Spatial_rotate_z(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_translate(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_translate(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_global_translate(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_global_translate(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_orthonormalize(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_orthonormalize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_identity(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_set_identity(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_look_at(void * jarg1, void * jarg2, void * jarg3) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_look_at(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_look_at_from_pos(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_look_at_from_pos(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialPlayer_set_param(void * jarg1, int jarg2, float jarg3) {
  SpatialPlayer *arg1 = (SpatialPlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SpatialPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SpatialPlayer_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialPlayer_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SpatialPlayer *arg1 = (SpatialPlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SpatialPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SpatialPlayer_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpatialSamplePlayer() {
  void * jresult ;
  SpatialSamplePlayer *result = 0 ;
  
  result = (SpatialSamplePlayer *)memnew(SpatialSamplePlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_set_sample_library(void * jarg1, void * jarg2) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  SampleLibrary *arg2 = (SampleLibrary *) 0 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (SampleLibrary *)jarg2; 
  SpatialSamplePlayer_set_sample_library(arg1,arg2);
}


SWIGEXPORT SampleLibrary* SWIGSTDCALL CSharp_SpatialSamplePlayer_get_sample_library(void * jarg1) {
  SampleLibrary* jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  Ref< SampleLibrary > result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  result = SpatialSamplePlayer_get_sample_library(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_set_polyphony(void * jarg1, int jarg2) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SpatialSamplePlayer_set_polyphony(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialSamplePlayer_get_polyphony(void * jarg1) {
  int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  result = (int)SpatialSamplePlayer_get_polyphony(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialSamplePlayer_play__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)SpatialSamplePlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialSamplePlayer_play__SWIG_1(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SpatialSamplePlayer_play__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_voice_set_pitch_scale(void * jarg1, int jarg2, float jarg3) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SpatialSamplePlayer_voice_set_pitch_scale(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_voice_set_volume_scale_db(void * jarg1, int jarg2, float jarg3) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SpatialSamplePlayer_voice_set_volume_scale_db(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialSamplePlayer_is_voice_active(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SpatialSamplePlayer_is_voice_active(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_stop_voice(void * jarg1, int jarg2) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SpatialSamplePlayer_stop_voice(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_stop_all(void * jarg1) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  SpatialSamplePlayer_stop_all(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpatialStreamPlayer() {
  void * jresult ;
  SpatialStreamPlayer *result = 0 ;
  
  result = (SpatialStreamPlayer *)memnew(SpatialStreamPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_stream(void * jarg1, void * jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  AudioStream *arg2 = (AudioStream *) 0 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (AudioStream *)jarg2; 
  SpatialStreamPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT AudioStream* SWIGSTDCALL CSharp_SpatialStreamPlayer_get_stream(void * jarg1) {
  AudioStream* jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  Ref< AudioStream > result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = SpatialStreamPlayer_get_stream(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_play__SWIG_0(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_play__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_play__SWIG_1(void * jarg1) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  SpatialStreamPlayer_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_stop(void * jarg1) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  SpatialStreamPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpatialStreamPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_loop(void * jarg1, unsigned int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpatialStreamPlayer_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_has_loop(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_volume(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_volume(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_volume_db(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_buffering_msec(void * jarg1, int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SpatialStreamPlayer_set_buffering_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialStreamPlayer_get_buffering_msec(void * jarg1) {
  int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  int result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (int)SpatialStreamPlayer_get_buffering_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_loop_restart_time(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_set_loop_restart_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_loop_restart_time(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_loop_restart_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialStreamPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  String result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = SpatialStreamPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialStreamPlayer_get_loop_count(void * jarg1) {
  int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  int result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (int)SpatialStreamPlayer_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_pos(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_seek_pos(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_seek_pos(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpatialStreamPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_length(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamPlayer() {
  void * jresult ;
  StreamPlayer *result = 0 ;
  
  result = (StreamPlayer *)memnew(StreamPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_stream(void * jarg1, void * jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  AudioStream *arg2 = (AudioStream *) 0 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (AudioStream *)jarg2; 
  StreamPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT AudioStream* SWIGSTDCALL CSharp_StreamPlayer_get_stream(void * jarg1) {
  AudioStream* jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  Ref< AudioStream > result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = StreamPlayer_get_stream(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_play__SWIG_0(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_play__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_play__SWIG_1(void * jarg1) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  StreamPlayer_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_stop(void * jarg1) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  StreamPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_loop(void * jarg1, unsigned int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPlayer_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_has_loop(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_volume(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_volume(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_volume_db(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_buffering_msec(void * jarg1, int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPlayer_set_buffering_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPlayer_get_buffering_msec(void * jarg1) {
  int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  int result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (int)StreamPlayer_get_buffering_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_loop_restart_time(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_set_loop_restart_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_loop_restart_time(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_loop_restart_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  String result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = StreamPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPlayer_get_loop_count(void * jarg1) {
  int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  int result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (int)StreamPlayer_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_pos(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_seek_pos(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_seek_pos(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_length(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Timer() {
  void * jresult ;
  Timer *result = 0 ;
  
  result = (Timer *)memnew(Timer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_wait_time(void * jarg1, float jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  float arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = (float)jarg2; 
  Timer_set_wait_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Timer_get_wait_time(void * jarg1) {
  float jresult ;
  Timer *arg1 = (Timer *) 0 ;
  float result;
  
  arg1 = (Timer *)jarg1; 
  result = (float)Timer_get_wait_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_one_shot(void * jarg1, unsigned int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Timer_set_one_shot(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Timer_is_one_shot(void * jarg1) {
  unsigned int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  arg1 = (Timer *)jarg1; 
  result = (bool)Timer_is_one_shot(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_autostart(void * jarg1, unsigned int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Timer_set_autostart(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Timer_has_autostart(void * jarg1) {
  unsigned int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  arg1 = (Timer *)jarg1; 
  result = (bool)Timer_has_autostart(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_start(void * jarg1) {
  Timer *arg1 = (Timer *) 0 ;
  
  arg1 = (Timer *)jarg1; 
  Timer_start(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_stop(void * jarg1) {
  Timer *arg1 = (Timer *) 0 ;
  
  arg1 = (Timer *)jarg1; 
  Timer_stop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_active(void * jarg1, unsigned int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Timer_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Timer_is_active(void * jarg1) {
  unsigned int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  arg1 = (Timer *)jarg1; 
  result = (bool)Timer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Timer_get_time_left(void * jarg1) {
  float jresult ;
  Timer *arg1 = (Timer *) 0 ;
  float result;
  
  arg1 = (Timer *)jarg1; 
  result = (float)Timer_get_time_left(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_timer_process_mode(void * jarg1, int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = (int)jarg2; 
  Timer_set_timer_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Timer_get_timer_process_mode(void * jarg1) {
  int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  arg1 = (Timer *)jarg1; 
  result = (int)Timer_get_timer_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tween() {
  void * jresult ;
  Tween *result = 0 ;
  
  result = (Tween *)memnew(Tween());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_is_active(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_active(void * jarg1, unsigned int jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  bool arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tween_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_is_repeat(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_is_repeat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_repeat(void * jarg1, unsigned int jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  bool arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tween_set_repeat(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_speed(void * jarg1, float jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  float arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (float)jarg2; 
  Tween_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tween_get_speed(void * jarg1) {
  float jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float result;
  
  arg1 = (Tween *)jarg1; 
  result = (float)Tween_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_tween_process_mode(void * jarg1, int jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  int arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (int)jarg2; 
  Tween_set_tween_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tween_get_tween_process_mode(void * jarg1) {
  int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  int result;
  
  arg1 = (Tween *)jarg1; 
  result = (int)Tween_get_tween_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_start(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_start(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_reset(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_reset(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_reset_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_reset_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_stop(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_stop(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_stop_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_stop_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_resume(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_resume(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_resume_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_resume_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_remove(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_remove(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_remove_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_remove_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_seek(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)Tween_seek(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tween_tell(void * jarg1) {
  float jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float result;
  
  arg1 = (Tween *)jarg1; 
  result = (float)Tween_tell(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tween_get_runtime(void * jarg1) {
  float jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float result;
  
  arg1 = (Tween *)jarg1; 
  result = (float)Tween_get_runtime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_property__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8, float jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  result = (bool)Tween_interpolate_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_property__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)Tween_interpolate_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_method__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8, float jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  result = (bool)Tween_interpolate_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_method__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)Tween_interpolate_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_0(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_1(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_2(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_3(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_4(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_5(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_0(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_1(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_2(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_3(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_4(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4, void * jarg5) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_5(void * jarg1, void * jarg2, float jarg3, wchar_t * jarg4) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_property__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, wchar_t * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_follow_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_property__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, wchar_t * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_follow_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_method__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, wchar_t * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_follow_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_method__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5, wchar_t * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_follow_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_property__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, wchar_t * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_targeting_property__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_property__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, wchar_t * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_targeting_property__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_method__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, wchar_t * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_targeting_method__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_method__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, wchar_t * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_targeting_method__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VehicleWheel() {
  void * jresult ;
  VehicleWheel *result = 0 ;
  
  result = (VehicleWheel *)memnew(VehicleWheel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_radius(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_radius(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_rest_length(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_rest_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_rest_length(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_rest_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_travel(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_travel(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_travel(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_travel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_stiffness(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_stiffness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_stiffness(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_stiffness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_max_force(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_max_force(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_max_force(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_max_force(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_damping_compression(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_damping_compression(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_damping_compression(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_damping_compression(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_damping_relaxation(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_damping_relaxation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_damping_relaxation(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_damping_relaxation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_use_as_traction(void * jarg1, unsigned int jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VehicleWheel_set_use_as_traction(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VehicleWheel_is_used_as_traction(void * jarg1) {
  unsigned int jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (bool)VehicleWheel_is_used_as_traction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_use_as_steering(void * jarg1, unsigned int jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VehicleWheel_set_use_as_steering(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VehicleWheel_is_used_as_steering(void * jarg1) {
  unsigned int jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (bool)VehicleWheel_is_used_as_steering(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_friction_slip(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_friction_slip(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_friction_slip(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_friction_slip(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Viewport() {
  void * jresult ;
  Viewport *result = 0 ;
  
  result = (Viewport *)memnew(Viewport());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_rect(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Viewport_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_rect(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT World2D* SWIGSTDCALL CSharp_Viewport_find_world_2d(void * jarg1) {
  World2D* jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Ref< World2D > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_find_world_2d(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_world(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  World *arg2 = (World *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (World *)jarg2; 
  Viewport_set_world(arg1,arg2);
}


SWIGEXPORT World* SWIGSTDCALL CSharp_Viewport_get_world(void * jarg1) {
  World* jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Ref< World > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_world(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT World* SWIGSTDCALL CSharp_Viewport_find_world(void * jarg1) {
  World* jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Ref< World > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_find_world(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_canvas_transform(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Viewport_set_canvas_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_canvas_transform(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_canvas_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_global_canvas_transform(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Viewport_set_global_canvas_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_global_canvas_transform(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_global_canvas_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_final_transform(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_final_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_visible_rect(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_visible_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_transparent_background(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_transparent_background(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_has_transparent_background(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_has_transparent_background(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override__SWIG_0(void * jarg1, unsigned int jarg2, Vector2* jarg3, Vector2* jarg4) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Viewport_set_size_override__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override__SWIG_1(void * jarg1, unsigned int jarg2, Vector2* jarg3) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Viewport_set_size_override__SWIG_0(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override__SWIG_2(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_size_override__SWIG_0(arg1,arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Viewport_get_size_override(void * jarg1) {
  Vector2 jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Vector2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_size_override(arg1);
  return result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_size_override_enabled(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_size_override_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override_stretch(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_size_override_stretch(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_size_override_stretch_enabled(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_size_override_stretch_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_queue_screen_capture(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  Viewport_queue_screen_capture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_screen_capture(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Image result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_screen_capture(arg1);
  jresult = memnew(Image((const Image &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_as_render_target(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_as_render_target(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_set_as_render_target(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_set_as_render_target(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_vflip(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_vflip(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_vflip(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_vflip(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_clear_on_new_frame(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_clear_on_new_frame(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_clear_on_new_frame(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_clear_on_new_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_render_target_clear(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  Viewport_render_target_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_filter(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_filter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_filter(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_filter(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_gen_mipmaps(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_gen_mipmaps(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_gen_mipmaps(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_gen_mipmaps(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_update_mode(void * jarg1, int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  int arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (int)jarg2; 
  Viewport_set_render_target_update_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Viewport_get_render_target_update_mode(void * jarg1) {
  int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  int result;
  
  arg1 = (Viewport *)jarg1; 
  result = (int)Viewport_get_render_target_update_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT RenderTargetTexture* SWIGSTDCALL CSharp_Viewport_get_render_target_texture(void * jarg1) {
  RenderTargetTexture* jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Ref< RenderTargetTexture > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_render_target_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_physics_object_picking(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_physics_object_picking(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_physics_object_picking(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_physics_object_picking(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_viewport(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  RID result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_viewport(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_input(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Viewport_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_unhandled_input(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Viewport_unhandled_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_update_worlds(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  Viewport_update_worlds(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_use_own_world(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_use_own_world(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_using_own_world(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_using_own_world(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_camera(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  result = (Camera *)Viewport_get_camera(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_as_audio_listener(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_as_audio_listener(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_audio_listener(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_audio_listener(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_as_audio_listener_2d(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_as_audio_listener_2d(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_audio_listener_2d(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_audio_listener_2d(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_to_screen_rect(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Viewport_set_render_target_to_screen_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Viewport_get_mouse_pos(void * jarg1) {
  Vector2 jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Vector2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_mouse_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_warp_mouse(void * jarg1, Vector2* jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Viewport_warp_mouse(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_gui_has_modal_stack(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_gui_has_modal_stack(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_gui_get_drag_data(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Variant result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_gui_get_drag_data(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_disable_input(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_disable_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_input_disabled(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_input_disabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityNotifier() {
  void * jresult ;
  VisibilityNotifier *result = 0 ;
  
  result = (VisibilityNotifier *)memnew(VisibilityNotifier());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityNotifier_set_aabb(void * jarg1, void * jarg2) {
  VisibilityNotifier *arg1 = (VisibilityNotifier *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (VisibilityNotifier *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  VisibilityNotifier_set_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisibilityNotifier_get_aabb(void * jarg1) {
  void * jresult ;
  VisibilityNotifier *arg1 = (VisibilityNotifier *) 0 ;
  AABB result;
  
  arg1 = (VisibilityNotifier *)jarg1; 
  result = VisibilityNotifier_get_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityNotifier_is_on_screen(void * jarg1) {
  unsigned int jresult ;
  VisibilityNotifier *arg1 = (VisibilityNotifier *) 0 ;
  bool result;
  
  arg1 = (VisibilityNotifier *)jarg1; 
  result = (bool)VisibilityNotifier_is_on_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualInstance_set_base(void * jarg1, void * jarg2) {
  VisualInstance *arg1 = (VisualInstance *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualInstance *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualInstance_set_base(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualInstance_set_layer_mask(void * jarg1, int jarg2) {
  VisualInstance *arg1 = (VisualInstance *) 0 ;
  int arg2 ;
  
  arg1 = (VisualInstance *)jarg1; 
  arg2 = (int)jarg2; 
  VisualInstance_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualInstance_get_layer_mask(void * jarg1) {
  int jresult ;
  VisualInstance *arg1 = (VisualInstance *) 0 ;
  int result;
  
  arg1 = (VisualInstance *)jarg1; 
  result = (int)VisualInstance_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorldEnvironment() {
  void * jresult ;
  WorldEnvironment *result = 0 ;
  
  result = (WorldEnvironment *)memnew(WorldEnvironment());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldEnvironment_set_environment(void * jarg1, void * jarg2) {
  WorldEnvironment *arg1 = (WorldEnvironment *) 0 ;
  Environment *arg2 = (Environment *) 0 ;
  
  arg1 = (WorldEnvironment *)jarg1; 
  arg2 = (Environment *)jarg2; 
  WorldEnvironment_set_environment(arg1,arg2);
}


SWIGEXPORT Environment* SWIGSTDCALL CSharp_WorldEnvironment_get_environment(void * jarg1) {
  Environment* jresult ;
  WorldEnvironment *arg1 = (WorldEnvironment *) 0 ;
  Ref< Environment > result;
  
  arg1 = (WorldEnvironment *)jarg1; 
  result = WorldEnvironment_get_environment(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimationPlayer() {
  void * jresult ;
  AnimationPlayer *result = 0 ;
  
  result = (AnimationPlayer *)memnew(AnimationPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationPlayer_add_animation(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  Animation *arg3 = (Animation *) 0 ;
  int result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Animation *)jarg3; 
  result = (int)AnimationPlayer_add_animation(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_remove_animation(void * jarg1, wchar_t * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_remove_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_rename_animation(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationPlayer_rename_animation(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationPlayer_has_animation(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationPlayer_has_animation(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Animation* SWIGSTDCALL CSharp_AnimationPlayer_get_animation(void * jarg1, wchar_t * jarg2) {
  Animation* jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  Ref< Animation > result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationPlayer_get_animation(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_animation_list(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  StringArray result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_animation_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_animation_set_next(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationPlayer_animation_set_next(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_animation_get_next(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationPlayer_animation_get_next(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_blend_time(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, float jarg4) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (float)jarg4; 
  AnimationPlayer_set_blend_time(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_blend_time(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (float)AnimationPlayer_get_blend_time(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_default_blend_time(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_set_default_blend_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_default_blend_time(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_default_blend_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_0(void * jarg1, wchar_t * jarg2, float jarg3, float jarg4, unsigned int jarg5) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_1(void * jarg1, wchar_t * jarg2, float jarg3, float jarg4) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_2(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_3(void * jarg1, wchar_t * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_4(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play_backwards__SWIG_0(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationPlayer_play_backwards__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play_backwards__SWIG_1(void * jarg1, wchar_t * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_play_backwards__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play_backwards__SWIG_2(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_play_backwards__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_stop__SWIG_0(void * jarg1, unsigned int jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimationPlayer_stop__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_stop__SWIG_1(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_stop__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_stop_all(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_stop_all(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (bool)AnimationPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_current_animation(void * jarg1, wchar_t * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_set_current_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_current_animation(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_current_animation(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_queue(void * jarg1, wchar_t * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_queue(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_clear_queue(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_clear_queue(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_active(void * jarg1, unsigned int jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimationPlayer_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationPlayer_is_active(void * jarg1) {
  unsigned int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (bool)AnimationPlayer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_speed(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_speed(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_autoplay(void * jarg1, wchar_t * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_set_autoplay(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_autoplay(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_autoplay(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_root(void * jarg1, void * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  AnimationPlayer_set_root(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_root(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  NodePath result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_root(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_seek__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  AnimationPlayer_seek__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_seek__SWIG_1(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_seek__SWIG_0(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_pos(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_find_animation(void * jarg1, void * jarg2) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  Animation *arg2 = (Animation *) 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (Animation *)jarg2; 
  result = AnimationPlayer_find_animation(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_clear_caches(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_clear_caches(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_animation_process_mode(void * jarg1, int jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  AnimationPlayer_set_animation_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationPlayer_get_animation_process_mode(void * jarg1) {
  int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  int result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (int)AnimationPlayer_get_animation_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_current_animation_pos(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_current_animation_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_current_animation_length(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_current_animation_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_advance(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_advance(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimationTreePlayer() {
  void * jresult ;
  AnimationTreePlayer *result = 0 ;
  
  result = (AnimationTreePlayer *)memnew(AnimationTreePlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_add_node(void * jarg1, int jarg2, wchar_t * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationTreePlayer_add_node(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_node_exists(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationTreePlayer_node_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_node_rename(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)AnimationTreePlayer_node_rename(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_type(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_node_get_type(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_input_count(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_node_get_input_count(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_input_source(void * jarg1, wchar_t * jarg2, int jarg3) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = AnimationTreePlayer_node_get_input_source(arg1,(String const &)*arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_set_animation(void * jarg1, wchar_t * jarg2, void * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Animation *arg3 = (Animation *) 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Animation *)jarg3; 
  AnimationTreePlayer_animation_node_set_animation(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT Animation* SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_get_animation(void * jarg1, wchar_t * jarg2) {
  Animation* jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Ref< Animation > result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_animation_node_get_animation(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_set_master_animation(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationTreePlayer_animation_node_set_master_animation(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_get_master_animation(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_animation_node_get_master_animation(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_set_filter_path(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  NodePath *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_animation_node_set_filter_path(arg1,(String const &)*arg2,(NodePath const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_fadein_time(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_fadein_time(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_fadein_time(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_fadein_time(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_fadeout_time(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_fadeout_time(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_fadeout_time(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_fadeout_time(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_autorestart(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  AnimationTreePlayer_oneshot_node_set_autorestart(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_autorestart_delay(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_autorestart_delay(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_has_autorestart(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationTreePlayer_oneshot_node_has_autorestart(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_autorestart_delay(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_autorestart_delay(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_start(void * jarg1, wchar_t * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationTreePlayer_oneshot_node_start(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_stop(void * jarg1, wchar_t * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationTreePlayer_oneshot_node_stop(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_is_active(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationTreePlayer_oneshot_node_is_active(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_filter_path(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  NodePath *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_oneshot_node_set_filter_path(arg1,(String const &)*arg2,(NodePath const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_mix_node_set_amount(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_mix_node_set_amount(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_mix_node_get_amount(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_mix_node_get_amount(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend2_node_set_amount(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_blend2_node_set_amount(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_blend2_node_get_amount(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_blend2_node_get_amount(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend2_node_set_filter_path(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  NodePath *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_blend2_node_set_filter_path(arg1,(String const &)*arg2,(NodePath const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend3_node_set_amount(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_blend3_node_set_amount(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_blend3_node_get_amount(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_blend3_node_get_amount(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend4_node_set_amount(void * jarg1, wchar_t * jarg2, Vector2* jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_blend4_node_set_amount(arg1,(String const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_AnimationTreePlayer_blend4_node_get_amount(void * jarg1, wchar_t * jarg2) {
  Vector2 jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return Vector2();
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_blend4_node_get_amount(arg1,(String const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_timescale_node_set_scale(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_timescale_node_set_scale(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_timescale_node_get_scale(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_timescale_node_get_scale(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_timeseek_node_seek(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_timeseek_node_seek(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_input_count(void * jarg1, wchar_t * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_transition_node_set_input_count(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_get_input_count(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_transition_node_get_input_count(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_delete_input(void * jarg1, wchar_t * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_transition_node_delete_input(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_input_auto_advance(void * jarg1, wchar_t * jarg2, int jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_transition_node_set_input_auto_advance(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_has_input_auto_advance(void * jarg1, wchar_t * jarg2, int jarg3) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (bool)AnimationTreePlayer_transition_node_has_input_auto_advance(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_xfade_time(void * jarg1, wchar_t * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_transition_node_set_xfade_time(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_get_xfade_time(void * jarg1, wchar_t * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_transition_node_get_xfade_time(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_current(void * jarg1, wchar_t * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_transition_node_set_current(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_get_current(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_transition_node_get_current(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_node_set_pos(void * jarg1, wchar_t * jarg2, Vector2* jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_node_set_pos(arg1,(String const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_pos(void * jarg1, wchar_t * jarg2) {
  Vector2 jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return Vector2();
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_node_get_pos(arg1,(String const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_remove_node(void * jarg1, wchar_t * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationTreePlayer_remove_node(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_connect(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, int jarg4) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (int)AnimationTreePlayer_connect(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_is_connected(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, int jarg4) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (bool)AnimationTreePlayer_is_connected(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_disconnect(void * jarg1, wchar_t * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_disconnect(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_active(void * jarg1, unsigned int jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimationTreePlayer_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_is_active(void * jarg1) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = (bool)AnimationTreePlayer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_base_path(void * jarg1, void * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_set_base_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_get_base_path(void * jarg1) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = AnimationTreePlayer_get_base_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_master_player(void * jarg1, void * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_set_master_player(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_get_master_player(void * jarg1) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = AnimationTreePlayer_get_master_player(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_get_node_list(void * jarg1) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  StringArray result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = AnimationTreePlayer_get_node_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_animation_process_mode(void * jarg1, int jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  AnimationTreePlayer_set_animation_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_get_animation_process_mode(void * jarg1) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = (int)AnimationTreePlayer_get_animation_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_advance(void * jarg1, float jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationTreePlayer_advance(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_reset(void * jarg1) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  AnimationTreePlayer_reset(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_recompute_caches(void * jarg1) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  AnimationTreePlayer_recompute_caches(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BakedLightInstance() {
  void * jresult ;
  BakedLightInstance *result = 0 ;
  
  result = (BakedLightInstance *)memnew(BakedLightInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLightInstance_set_baked_light(void * jarg1, void * jarg2) {
  BakedLightInstance *arg1 = (BakedLightInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (BakedLightInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  BakedLightInstance_set_baked_light(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLightInstance_get_baked_light(void * jarg1) {
  void * jresult ;
  BakedLightInstance *arg1 = (BakedLightInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (BakedLightInstance *)jarg1; 
  result = (Object *)BakedLightInstance_get_baked_light(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLightInstance_get_baked_light_instance(void * jarg1) {
  void * jresult ;
  BakedLightInstance *arg1 = (BakedLightInstance *) 0 ;
  RID result;
  
  arg1 = (BakedLightInstance *)jarg1; 
  result = BakedLightInstance_get_baked_light_instance(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BakedLightSampler() {
  void * jresult ;
  BakedLightSampler *result = 0 ;
  
  result = (BakedLightSampler *)memnew(BakedLightSampler());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLightSampler_set_param(void * jarg1, int jarg2, float jarg3) {
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (BakedLightSampler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  BakedLightSampler_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLightSampler_get_param(void * jarg1, int jarg2) {
  float jresult ;
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (BakedLightSampler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)BakedLightSampler_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLightSampler_set_resolution(void * jarg1, int jarg2) {
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLightSampler *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLightSampler_set_resolution(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLightSampler_get_resolution(void * jarg1) {
  int jresult ;
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int result;
  
  arg1 = (BakedLightSampler *)jarg1; 
  result = (int)BakedLightSampler_get_resolution(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BitmapFont() {
  void * jresult ;
  BitmapFont *result = 0 ;
  
  result = (BitmapFont *)memnew(BitmapFont());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapFont_create_from_fnt(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (BitmapFont *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)BitmapFont_create_from_fnt(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_height(void * jarg1, float jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  float arg2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (float)jarg2; 
  BitmapFont_set_height(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_ascent(void * jarg1, float jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  float arg2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (float)jarg2; 
  BitmapFont_set_ascent(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_kerning_pair(void * jarg1, int jarg2, int jarg3, int jarg4) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  BitmapFont_add_kerning_pair(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapFont_get_kerning_pair(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)BitmapFont_get_kerning_pair(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_texture(void * jarg1, void * jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (Texture *)jarg2; 
  BitmapFont_add_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_char__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, Vector2* jarg5, float jarg6) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  BitmapFont_add_char__SWIG_0(arg1,arg2,arg3,(Rect2 const &)*arg4,(Vector2 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_char__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, Vector2* jarg5) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  BitmapFont_add_char__SWIG_0(arg1,arg2,arg3,(Rect2 const &)*arg4,(Vector2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_char__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  BitmapFont_add_char__SWIG_0(arg1,arg2,arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapFont_get_texture_count(void * jarg1) {
  int jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int result;
  
  arg1 = (BitmapFont *)jarg1; 
  result = (int)BitmapFont_get_texture_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_BitmapFont_get_texture(void * jarg1, int jarg2) {
  Texture* jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  result = BitmapFont_get_texture(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_BitmapFont_get_char_size__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Vector2 jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = BitmapFont_get_char_size__SWIG_0(arg1,arg2,arg3);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_BitmapFont_get_char_size__SWIG_1(void * jarg1, int jarg2) {
  Vector2 jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  result = BitmapFont_get_char_size__SWIG_0(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_distance_field_hint(void * jarg1, unsigned int jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  bool arg2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BitmapFont_set_distance_field_hint(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_clear(void * jarg1) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  BitmapFont_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_fallback(void * jarg1, void * jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (Object *)jarg2; 
  BitmapFont_set_fallback(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BitmapFont_get_fallback(void * jarg1) {
  void * jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  Object *result = 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  result = (Object *)BitmapFont_get_fallback(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BitmapFont(void * jarg1) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  delete_BitmapFont(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoneAttachment() {
  void * jresult ;
  BoneAttachment *result = 0 ;
  
  result = (BoneAttachment *)memnew(BoneAttachment());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera() {
  void * jresult ;
  Camera *result = 0 ;
  
  result = (Camera *)memnew(Camera());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_ray_normal(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_ray_normal(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_local_ray_normal(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_local_ray_normal(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_ray_origin(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_ray_origin(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Camera_unproject_position(void * jarg1, void * jarg2) {
  Vector2 jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return Vector2();
  } 
  result = Camera_unproject_position(arg1,(Vector3 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_is_position_behind(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Camera_is_position_behind(arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_position(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_position(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_perspective(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Camera *arg1 = (Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  Camera_set_perspective(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_orthogonal(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Camera *arg1 = (Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  Camera_set_orthogonal(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_make_current(void * jarg1) {
  Camera *arg1 = (Camera *) 0 ;
  
  arg1 = (Camera *)jarg1; 
  Camera_make_current(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_clear_current(void * jarg1) {
  Camera *arg1 = (Camera *) 0 ;
  
  arg1 = (Camera *)jarg1; 
  Camera_clear_current(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_is_current(void * jarg1) {
  unsigned int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  bool result;
  
  arg1 = (Camera *)jarg1; 
  result = (bool)Camera_is_current(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_get_camera_transform(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Transform result;
  
  arg1 = (Camera *)jarg1; 
  result = Camera_get_camera_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_fov(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_fov(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_size(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_zfar(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_zfar(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_znear(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_znear(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_get_projection(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  result = (int)Camera_get_projection(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_visible_layers(void * jarg1, int jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  Camera_set_visible_layers(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_get_visible_layers(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  result = (int)Camera_get_visible_layers(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_environment(void * jarg1, void * jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  Environment *arg2 = (Environment *) 0 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Environment *)jarg2; 
  Camera_set_environment(arg1,arg2);
}


SWIGEXPORT Environment* SWIGSTDCALL CSharp_Camera_get_environment(void * jarg1) {
  Environment* jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Ref< Environment > result;
  
  arg1 = (Camera *)jarg1; 
  result = Camera_get_environment(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_keep_aspect_mode(void * jarg1, int jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  Camera_set_keep_aspect_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_get_keep_aspect_mode(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  result = (int)Camera_get_keep_aspect_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem__draw(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem__draw(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_set_state(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  CanvasItem_edit_set_state(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_edit_get_state(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Variant result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_edit_get_state(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_set_rect(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  CanvasItem_edit_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_rotate(void * jarg1, float jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasItem_edit_rotate(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_item_rect(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_item_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_item_and_children_rect(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_item_and_children_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_canvas_item(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  RID result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_canvas_item(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_visible(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_hidden(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_hidden(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_show(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_show(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_hide(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_hide(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_hidden(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_hidden(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_update(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_update(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_as_toplevel(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_as_toplevel(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_set_as_toplevel(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_set_as_toplevel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_blend_mode(void * jarg1, int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasItem_set_blend_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasItem_get_blend_mode(void * jarg1) {
  int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (int)CanvasItem_get_blend_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_light_mask(void * jarg1, int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasItem_set_light_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasItem_get_light_mask(void * jarg1) {
  int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (int)CanvasItem_get_light_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_opacity(void * jarg1, float jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasItem_set_opacity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_get_opacity(void * jarg1) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (float)CanvasItem_get_opacity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_self_opacity(void * jarg1, float jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasItem_set_self_opacity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_get_self_opacity(void * jarg1) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (float)CanvasItem_get_self_opacity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_draw_behind_parent(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_draw_behind_parent(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_draw_behind_parent_enabled(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_draw_behind_parent_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_line__SWIG_0(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4, float jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  float arg5 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg5 = (float)jarg5; 
  CanvasItem_draw_line__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_line__SWIG_1(void * jarg1, Vector2* jarg2, Vector2* jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_line__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_rect(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_rect(arg1,(Rect2 const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_circle(void * jarg1, Vector2* jarg2, float jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_circle(arg1,(Vector2 const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture__SWIG_0(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  CanvasItem_draw_texture_rect__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture_rect__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  CanvasItem_draw_texture_rect__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect_region__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  CanvasItem_draw_texture_rect_region__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect_region__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture_rect_region__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect_region__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture_rect_region__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_style_box(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  StyleBox *arg2 = (StyleBox *) 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (StyleBox *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_style_box(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_primitive__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  Texture *arg5 = (Texture *) 0 ;
  float arg6 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg5 = (Texture *)jarg5; 
  arg6 = (float)jarg6; 
  CanvasItem_draw_primitive__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_primitive__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  Texture *arg5 = (Texture *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg5 = (Texture *)jarg5; 
  CanvasItem_draw_primitive__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_primitive__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_primitive__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_polygon__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  Texture *arg5 = (Texture *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg5 = (Texture *)jarg5; 
  CanvasItem_draw_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_polygon__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_polygon__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_colored_polygon__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  Color *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  Texture *arg5 = (Texture *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg5 = (Texture *)jarg5; 
  CanvasItem_draw_colored_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(Color const &)*arg3,(Vector2Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_colored_polygon__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  Color *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_colored_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(Color const &)*arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_colored_polygon__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_colored_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_string__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4, void * jarg5, int jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Font *arg2 = (Font *) 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Font *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  CanvasItem_draw_string__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_string__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Font *arg2 = (Font *) 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Font *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_string__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_string__SWIG_2(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Font *arg2 = (Font *) 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Font *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  CanvasItem_draw_string__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_draw_char__SWIG_0(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4, wchar_t * jarg5, void * jarg6) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Font *arg2 = (Font *) 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  String *arg5 = 0 ;
  Color *arg6 = 0 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Font *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return 0;
  } 
  result = (float)CanvasItem_draw_char__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(String const &)*arg5,(Color const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_draw_char__SWIG_1(void * jarg1, void * jarg2, Vector2* jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Font *arg2 = (Font *) 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  String *arg5 = 0 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Font *)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  result = (float)CanvasItem_draw_char__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(String const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_set_transform(void * jarg1, Vector2* jarg2, float jarg3, Vector2* jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_set_transform(arg1,(Vector2 const &)*arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_set_transform_matrix(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_set_transform_matrix(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_global_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_global_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_global_transform_with_canvas(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_global_transform_with_canvas(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_viewport_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_viewport_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_viewport_rect(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_viewport_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_canvas_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_canvas_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_CanvasItem_get_local_mouse_pos(void * jarg1) {
  Vector2 jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_local_mouse_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_CanvasItem_get_global_mouse_pos(void * jarg1) {
  Vector2 jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_global_mouse_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_canvas(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  RID result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_canvas(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_world_2d(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Object *result = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (Object *)CanvasItem_get_world_2d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_material(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  CanvasItemMaterial *arg2 = (CanvasItemMaterial *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (CanvasItemMaterial *)jarg2; 
  CanvasItem_set_material(arg1,arg2);
}


SWIGEXPORT CanvasItemMaterial* SWIGSTDCALL CSharp_CanvasItem_get_material(void * jarg1) {
  CanvasItemMaterial* jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Ref< CanvasItemMaterial > result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_material(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_use_parent_material(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_use_parent_material(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_get_use_parent_material(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_get_use_parent_material(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_make_input_local(void * jarg1, void * jarg2) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  InputEvent *arg2 = 0 ;
  InputEvent result;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = CanvasItem_make_input_local(arg1,(InputEvent const &)*arg2);
  jresult = memnew(InputEvent((const InputEvent &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasLayer() {
  void * jresult ;
  CanvasLayer *result = 0 ;
  
  result = (CanvasLayer *)memnew(CanvasLayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_layer(void * jarg1, int jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasLayer_set_layer(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasLayer_get_layer(void * jarg1) {
  int jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  int result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = (int)CanvasLayer_get_layer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_transform(void * jarg1, void * jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CanvasLayer_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_transform(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_offset(void * jarg1, Vector2* jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasLayer_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_CanvasLayer_get_offset(void * jarg1) {
  Vector2 jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_rotation(void * jarg1, float jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasLayer_set_rotation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasLayer_get_rotation(void * jarg1) {
  float jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = (float)CanvasLayer_get_rotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_rotationd(void * jarg1, float jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasLayer_set_rotationd(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasLayer_get_rotationd(void * jarg1) {
  float jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = (float)CanvasLayer_get_rotationd(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_scale(void * jarg1, Vector2* jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasLayer_set_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_CanvasLayer_get_scale(void * jarg1) {
  Vector2 jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT World2D* SWIGSTDCALL CSharp_CanvasLayer_get_world_2d(void * jarg1) {
  World2D* jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Ref< World2D > result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_world_2d(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_viewport(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  RID result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_viewport(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject__input_event(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  Object *arg2 = (Object *) 0 ;
  InputEvent *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  CollisionObject__input_event(arg1,arg2,(InputEvent const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  Shape *arg2 = (Shape *) 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (Shape *)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  CollisionObject_add_shape__SWIG_0(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_add_shape__SWIG_1(void * jarg1, void * jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  Shape *arg2 = (Shape *) 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (Shape *)jarg2; 
  CollisionObject_add_shape__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionObject_get_shape_count(void * jarg1) {
  int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = (int)CollisionObject_get_shape_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_shape(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  Shape *arg3 = (Shape *) 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Shape *)jarg3; 
  CollisionObject_set_shape(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_shape_transform(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  CollisionObject_set_shape_transform(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_shape_as_trigger(void * jarg1, int jarg2, unsigned int jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  CollisionObject_set_shape_as_trigger(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject_is_shape_set_as_trigger(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)CollisionObject_is_shape_set_as_trigger(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Shape* SWIGSTDCALL CSharp_CollisionObject_get_shape(void * jarg1, int jarg2) {
  Shape* jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  Ref< Shape > result;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject_get_shape(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject_get_shape_transform(void * jarg1, int jarg2) {
  void * jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject_get_shape_transform(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_remove_shape(void * jarg1, int jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionObject_remove_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_clear_shapes(void * jarg1) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  CollisionObject_clear_shapes(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_ray_pickable(void * jarg1, unsigned int jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionObject_set_ray_pickable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject_is_ray_pickable(void * jarg1) {
  unsigned int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = (bool)CollisionObject_is_ray_pickable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_capture_input_on_drag(void * jarg1, unsigned int jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionObject_set_capture_input_on_drag(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject_get_capture_input_on_drag(void * jarg1) {
  unsigned int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = (bool)CollisionObject_get_capture_input_on_drag(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject_get_rid(void * jarg1) {
  void * jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  RID result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = CollisionObject_get_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionPolygon() {
  void * jresult ;
  CollisionPolygon *result = 0 ;
  
  result = (CollisionPolygon *)memnew(CollisionPolygon());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon_set_build_mode(void * jarg1, int jarg2) {
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionPolygon_set_build_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon_get_build_mode(void * jarg1) {
  int jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (int)CollisionPolygon_get_build_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon_set_depth(void * jarg1, float jarg2) {
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  float arg2 ;
  
  arg1 = (CollisionPolygon *)jarg1; 
  arg2 = (float)jarg2; 
  CollisionPolygon_set_depth(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CollisionPolygon_get_depth(void * jarg1) {
  float jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  float result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (float)CollisionPolygon_get_depth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon_set_polygon(void * jarg1, void * jarg2) {
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (CollisionPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CollisionPolygon_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionPolygon_get_polygon(void * jarg1) {
  void * jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  Vector2Array result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = CollisionPolygon_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon_get_collision_object_first_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (int)CollisionPolygon_get_collision_object_first_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon_get_collision_object_last_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (int)CollisionPolygon_get_collision_object_last_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionShape() {
  void * jresult ;
  CollisionShape *result = 0 ;
  
  result = (CollisionShape *)memnew(CollisionShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_resource_changed(void * jarg1, void * jarg2) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  arg2 = (Object *)jarg2; 
  CollisionShape_resource_changed(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_set_shape(void * jarg1, void * jarg2) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  arg2 = (Object *)jarg2; 
  CollisionShape_set_shape(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionShape_get_shape(void * jarg1) {
  void * jresult ;
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  Object *result = 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  result = (Object *)CollisionShape_get_shape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_set_trigger(void * jarg1, unsigned int jarg2) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionShape_set_trigger(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionShape_is_trigger(void * jarg1) {
  unsigned int jresult ;
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  bool result;
  
  arg1 = (CollisionShape *)jarg1; 
  result = (bool)CollisionShape_is_trigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_make_convex_from_brothers(void * jarg1) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  CollisionShape_make_convex_from_brothers(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionShape_get_collision_object_shape_index(void * jarg1) {
  int jresult ;
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  int result;
  
  arg1 = (CollisionShape *)jarg1; 
  result = (int)CollisionShape_get_collision_object_shape_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Control() {
  void * jresult ;
  Control *result = 0 ;
  
  result = (Control *)memnew(Control());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control__input_event(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Control__input_event(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_can_drop_data(void * jarg1, Vector2* jarg2, void * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  Variant *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Control_can_drop_data(arg1,(Vector2 const &)*arg2,(Variant const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_drop_data(void * jarg1, Vector2* jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Control_drop_data(arg1,(Vector2 const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_drag_data(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Object *)Control_get_drag_data(arg1,(Vector2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_minimum_size(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_minimum_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_accept_event(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_accept_event(arg1);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_combined_minimum_size(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_combined_minimum_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_anchor__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  Control_set_anchor__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_anchor__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Control_set_anchor__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_anchor(void * jarg1, int jarg2) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Control_get_anchor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_margin(void * jarg1, int jarg2, float jarg3) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Control_set_margin(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_anchor_and_margin(void * jarg1, int jarg2, int jarg3, float jarg4) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Control_set_anchor_and_margin(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_begin(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_begin(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_end(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_end(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_pos(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_size(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_custom_minimum_size(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_custom_minimum_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_global_pos(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_global_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_rotation(void * jarg1, float jarg2) {
  Control *arg1 = (Control *) 0 ;
  float arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (float)jarg2; 
  Control_set_rotation(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_rotation_deg(void * jarg1, float jarg2) {
  Control *arg1 = (Control *) 0 ;
  float arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (float)jarg2; 
  Control_set_rotation_deg(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_scale(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_margin(void * jarg1, int jarg2) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Control_get_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_begin(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_begin(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_end(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_end(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_pos(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_size(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_rotation(void * jarg1) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  result = (float)Control_get_rotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_rotation_deg(void * jarg1) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  result = (float)Control_get_rotation_deg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_scale(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_custom_minimum_size(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_custom_minimum_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_parent_area_size(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_parent_area_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Control_get_global_pos(void * jarg1) {
  Vector2 jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_global_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_rect(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Rect2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_global_rect(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Rect2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_global_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_area_as_parent_rect__SWIG_0(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_area_as_parent_rect__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_area_as_parent_rect__SWIG_1(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_set_area_as_parent_rect__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_show_modal__SWIG_0(void * jarg1, unsigned int jarg2) {
  Control *arg1 = (Control *) 0 ;
  bool arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Control_show_modal__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_show_modal__SWIG_1(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_show_modal__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_focus_mode(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_focus_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_focus_mode(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_focus_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_focus(void * jarg1) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  result = (bool)Control_has_focus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_grab_focus(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_grab_focus(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_release_focus(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_release_focus(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_focus_owner(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Control *result = 0 ;
  
  arg1 = (Control *)jarg1; 
  result = (Control *)Control_get_focus_owner(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_h_size_flags(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_h_size_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_h_size_flags(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_h_size_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_stretch_ratio(void * jarg1, float jarg2) {
  Control *arg1 = (Control *) 0 ;
  float arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (float)jarg2; 
  Control_set_stretch_ratio(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_stretch_ratio(void * jarg1) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  result = (float)Control_get_stretch_ratio(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_v_size_flags(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_v_size_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_v_size_flags(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_v_size_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_theme(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Theme *arg2 = (Theme *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Theme *)jarg2; 
  Control_set_theme(arg1,arg2);
}


SWIGEXPORT Theme* SWIGSTDCALL CSharp_Control_get_theme(void * jarg1) {
  Theme* jresult ;
  Control *arg1 = (Control *) 0 ;
  Ref< Theme > result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_theme(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_icon_override(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Texture *)jarg3; 
  Control_add_icon_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_shader_override(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Shader *arg3 = (Shader *) 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Shader *)jarg3; 
  Control_add_shader_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_style_override(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  StyleBox *arg3 = (StyleBox *) 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StyleBox *)jarg3; 
  Control_add_style_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_font_override(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Font *arg3 = (Font *) 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Font *)jarg3; 
  Control_add_font_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_color_override(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Control_add_color_override(arg1,(String const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_constant_override(void * jarg1, wchar_t * jarg2, int jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  Control_add_constant_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Control_get_icon__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Texture* jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< Texture > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_icon__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Control_get_icon__SWIG_1(void * jarg1, wchar_t * jarg2) {
  Texture* jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Ref< Texture > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_icon__SWIG_0(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT StyleBox* SWIGSTDCALL CSharp_Control_get_stylebox__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  StyleBox* jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< StyleBox > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_stylebox__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT StyleBox* SWIGSTDCALL CSharp_Control_get_stylebox__SWIG_1(void * jarg1, wchar_t * jarg2) {
  StyleBox* jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Ref< StyleBox > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_stylebox__SWIG_0(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Font* SWIGSTDCALL CSharp_Control_get_font__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  Font* jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Ref< Font > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_font__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Font* SWIGSTDCALL CSharp_Control_get_font__SWIG_1(void * jarg1, wchar_t * jarg2) {
  Font* jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Ref< Font > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return NULL;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_font__SWIG_0(arg1,(String const &)*arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_color__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_color__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_color__SWIG_1(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Color result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_color__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_constant__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)Control_get_constant__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_constant__SWIG_1(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Control_get_constant__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_icon_override(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_icon_override(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_stylebox_override(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_stylebox_override(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_font_override(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_font_override(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_color_override(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_color_override(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_constant_override(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_constant_override(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_icon__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Control_has_icon__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_icon__SWIG_1(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_icon__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_stylebox__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Control_has_stylebox__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_stylebox__SWIG_1(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_stylebox__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_font__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Control_has_font__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_font__SWIG_1(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_font__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_color__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Control_has_color__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_color__SWIG_1(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_color__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_constant__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Control_has_constant__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_constant__SWIG_1(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Control_has_constant__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_parent_control(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Control *result = 0 ;
  
  arg1 = (Control *)jarg1; 
  result = (Control *)Control_get_parent_control(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_tooltip(void * jarg1, wchar_t * jarg2) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Control_set_tooltip(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_tooltip__SWIG_0(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  String result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Control_get_tooltip__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_tooltip__SWIG_1(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_tooltip__SWIG_0(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_default_cursor_shape(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_default_cursor_shape(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_default_cursor_shape(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_default_cursor_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_cursor_shape__SWIG_0(void * jarg1, Vector2* jarg2) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)Control_get_cursor_shape__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_cursor_shape__SWIG_1(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_cursor_shape__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_focus_neighbour(void * jarg1, int jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  NodePath *arg3 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Control_set_focus_neighbour(arg1,arg2,(NodePath const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_focus_neighbour(void * jarg1, int jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  result = Control_get_focus_neighbour(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_ignore_mouse(void * jarg1, unsigned int jarg2) {
  Control *arg1 = (Control *) 0 ;
  bool arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Control_set_ignore_mouse(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_is_ignoring_mouse(void * jarg1) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  result = (bool)Control_is_ignoring_mouse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_force_drag(void * jarg1, void * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  Variant *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  Control_force_drag(arg1,(Variant const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_stop_mouse(void * jarg1, unsigned int jarg2) {
  Control *arg1 = (Control *) 0 ;
  bool arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Control_set_stop_mouse(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_is_stopping_mouse(void * jarg1) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  result = (bool)Control_is_stopping_mouse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_grab_click_focus(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_grab_click_focus(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_drag_forwarding(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Control *)jarg2; 
  Control_set_drag_forwarding(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_drag_preview(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Control *)jarg2; 
  Control_set_drag_preview(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_warp_mouse(void * jarg1, Vector2* jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_warp_mouse(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_minimum_size_changed(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_minimum_size_changed(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DynamicFont() {
  void * jresult ;
  DynamicFont *result = 0 ;
  
  result = (DynamicFont *)memnew(DynamicFont());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_set_font_data(void * jarg1, void * jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  DynamicFontData *arg2 = (DynamicFontData *) 0 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (DynamicFontData *)jarg2; 
  DynamicFont_set_font_data(arg1,arg2);
}


SWIGEXPORT DynamicFontData* SWIGSTDCALL CSharp_DynamicFont_get_font_data(void * jarg1) {
  DynamicFontData* jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  Ref< DynamicFontData > result;
  
  arg1 = (DynamicFont *)jarg1; 
  result = DynamicFont_get_font_data(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_set_size(void * jarg1, int jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  DynamicFont_set_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicFont_get_size(void * jarg1) {
  int jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int result;
  
  arg1 = (DynamicFont *)jarg1; 
  result = (int)DynamicFont_get_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_add_fallback(void * jarg1, void * jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  DynamicFontData *arg2 = (DynamicFontData *) 0 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (DynamicFontData *)jarg2; 
  DynamicFont_add_fallback(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_set_fallback(void * jarg1, int jarg2, void * jarg3) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  DynamicFontData *arg3 = (DynamicFontData *) 0 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (DynamicFontData *)jarg3; 
  DynamicFont_set_fallback(arg1,arg2,arg3);
}


SWIGEXPORT DynamicFontData* SWIGSTDCALL CSharp_DynamicFont_get_fallback(void * jarg1, int jarg2) {
  DynamicFontData* jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  Ref< DynamicFontData > result;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  result = DynamicFont_get_fallback(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_remove_fallback(void * jarg1, int jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  DynamicFont_remove_fallback(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicFont_get_fallback_count(void * jarg1) {
  int jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int result;
  
  arg1 = (DynamicFont *)jarg1; 
  result = (int)DynamicFont_get_fallback_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DynamicFont(void * jarg1) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  
  arg1 = (DynamicFont *)jarg1; 
  delete_DynamicFont(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorPlugin() {
  void * jresult ;
  EditorPlugin *result = 0 ;
  
  result = (EditorPlugin *)memnew(EditorPlugin());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_apply_changes(void * jarg1) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  EditorPlugin_apply_changes(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_clear(void * jarg1) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  EditorPlugin_clear(arg1);
}


SWIGEXPORT EditorSpatialGizmo* SWIGSTDCALL CSharp_EditorPlugin_create_spatial_gizmo(void * jarg1, void * jarg2) {
  EditorSpatialGizmo* jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Spatial *arg2 = (Spatial *) 0 ;
  Ref< EditorSpatialGizmo > result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Spatial *)jarg2; 
  result = EditorPlugin_create_spatial_gizmo(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_edit(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Object *)jarg2; 
  EditorPlugin_edit(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_forward_input_event(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  InputEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)EditorPlugin_forward_input_event(arg1,(InputEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_forward_spatial_input_event(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Camera *arg2 = (Camera *) 0 ;
  InputEvent *arg3 = 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Camera *)jarg2; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)EditorPlugin_forward_spatial_input_event(arg1,arg2,(InputEvent const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_breakpoints(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  StringArray result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_breakpoints(arg1);
  jresult = memnew(StringArray((const StringArray &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_name(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  String result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_state(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Dictionary result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_state(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_handles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)EditorPlugin_handles(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_has_main_screen(void * jarg1) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (bool)EditorPlugin_has_main_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_make_visible(void * jarg1, unsigned int jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  bool arg2 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EditorPlugin_make_visible(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_set_state(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Dictionary *arg2 = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return ;
  } 
  EditorPlugin_set_state(arg1,(Dictionary const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_control_to_container(void * jarg1, int jarg2, void * jarg3) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  int arg2 ;
  Control *arg3 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Control *)jarg3; 
  EditorPlugin_add_control_to_container(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_control_to_bottom_panel(void * jarg1, void * jarg2, wchar_t * jarg3) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *arg2 = (Control *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Control *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  EditorPlugin_add_control_to_bottom_panel(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_control_to_dock(void * jarg1, int jarg2, void * jarg3) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  int arg2 ;
  Control *arg3 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Control *)jarg3; 
  EditorPlugin_add_control_to_dock(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_control_from_docks(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Control *)jarg2; 
  EditorPlugin_remove_control_from_docks(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_control_from_bottom_panel(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Control *)jarg2; 
  EditorPlugin_remove_control_from_bottom_panel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_custom_type(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4, void * jarg5) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Script *arg4 = (Script *) 0 ;
  Texture *arg5 = (Texture *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Script *)jarg4; 
  arg5 = (Texture *)jarg5; 
  EditorPlugin_add_custom_type(arg1,(String const &)*arg2,(String const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_custom_type(void * jarg1, wchar_t * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorPlugin_remove_custom_type(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_import_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  EditorImportPlugin *arg2 = (EditorImportPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (EditorImportPlugin *)jarg2; 
  EditorPlugin_add_import_plugin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_import_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  EditorImportPlugin *arg2 = (EditorImportPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (EditorImportPlugin *)jarg2; 
  EditorPlugin_remove_import_plugin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_export_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  EditorExportPlugin *arg2 = (EditorExportPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (EditorExportPlugin *)jarg2; 
  EditorPlugin_add_export_plugin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_export_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  EditorExportPlugin *arg2 = (EditorExportPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (EditorExportPlugin *)jarg2; 
  EditorPlugin_remove_export_plugin(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_base_control(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *result = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (Control *)EditorPlugin_get_base_control(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_undo_redo(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  UndoRedo *result = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (UndoRedo *)EditorPlugin_get_undo_redo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_selection(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  EditorSelection *result = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (EditorSelection *)EditorPlugin_get_selection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT EditorSettings* SWIGSTDCALL CSharp_EditorPlugin_get_editor_settings(void * jarg1) {
  EditorSettings* jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Ref< EditorSettings > result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_editor_settings(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventPlayer() {
  void * jresult ;
  EventPlayer *result = 0 ;
  
  result = (EventPlayer *)memnew(EventPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_stream(void * jarg1, void * jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  EventStream *arg2 = (EventStream *) 0 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (EventStream *)jarg2; 
  EventPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT EventStream* SWIGSTDCALL CSharp_EventPlayer_get_stream(void * jarg1) {
  EventStream* jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  Ref< EventStream > result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = EventPlayer_get_stream(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_play(void * jarg1) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  
  arg1 = (EventPlayer *)jarg1; 
  EventPlayer_play(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_stop(void * jarg1) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  
  arg1 = (EventPlayer *)jarg1; 
  EventPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EventPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_loop(void * jarg1, unsigned int jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EventPlayer_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_has_loop(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_volume(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_volume(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_pitch_scale(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_pitch_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_pitch_scale(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_pitch_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_tempo_scale(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_tempo_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_tempo_scale(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_tempo_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_volume_db(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  String result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = EventPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EventPlayer_get_loop_count(void * jarg1) {
  int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (int)EventPlayer_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_pos(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_seek_pos(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_seek_pos(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_length(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EventPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_channel_volume(void * jarg1, int jarg2, float jarg3) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  EventPlayer_set_channel_volume(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_channel_volume(void * jarg1, int jarg2) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)EventPlayer_get_channel_volume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_channel_last_note_time(void * jarg1, int jarg2) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)EventPlayer_get_channel_last_note_time(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FixedMaterial() {
  void * jresult ;
  FixedMaterial *result = 0 ;
  
  result = (FixedMaterial *)memnew(FixedMaterial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_parameter(void * jarg1, int jarg2, void * jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FixedMaterial_set_parameter(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_get_parameter(void * jarg1, int jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  FixedMaterial_get_parameter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_texture(void * jarg1, int jarg2, void * jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  FixedMaterial_set_texture(arg1,arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_FixedMaterial_get_texture(void * jarg1, int jarg2) {
  Texture* jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = FixedMaterial_get_texture(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_texcoord_mode(void * jarg1, int jarg2, int jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  FixedMaterial_set_texcoord_mode(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FixedMaterial_get_texcoord_mode(void * jarg1, int jarg2) {
  int jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)FixedMaterial_get_texcoord_mode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_fixed_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  FixedMaterial_set_fixed_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FixedMaterial_get_fixed_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)FixedMaterial_get_fixed_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_uv_transform(void * jarg1, void * jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  FixedMaterial_set_uv_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FixedMaterial_get_uv_transform(void * jarg1) {
  void * jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  Transform result;
  
  arg1 = (FixedMaterial *)jarg1; 
  result = FixedMaterial_get_uv_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_light_shader(void * jarg1, int jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  FixedMaterial_set_light_shader(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FixedMaterial_get_light_shader(void * jarg1) {
  int jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int result;
  
  arg1 = (FixedMaterial *)jarg1; 
  result = (int)FixedMaterial_get_light_shader(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_point_size(void * jarg1, float jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  FixedMaterial_set_point_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_FixedMaterial_get_point_size(void * jarg1) {
  float jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  float result;
  
  arg1 = (FixedMaterial *)jarg1; 
  result = (float)FixedMaterial_get_point_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FixedMaterial(void * jarg1) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  delete_FixedMaterial(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_material_override(void * jarg1, void * jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  GeometryInstance_set_material_override(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeometryInstance_get_material_override(void * jarg1) {
  void * jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (Object *)GeometryInstance_get_material_override(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  GeometryInstance_set_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeometryInstance_get_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GeometryInstance_get_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_cast_shadows_setting(void * jarg1, int jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  GeometryInstance_set_cast_shadows_setting(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeometryInstance_get_cast_shadows_setting(void * jarg1) {
  int jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (int)GeometryInstance_get_cast_shadows_setting(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_draw_range_begin(void * jarg1, float jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (float)jarg2; 
  GeometryInstance_set_draw_range_begin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeometryInstance_get_draw_range_begin(void * jarg1) {
  float jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (float)GeometryInstance_get_draw_range_begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_draw_range_end(void * jarg1, float jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (float)jarg2; 
  GeometryInstance_set_draw_range_end(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeometryInstance_get_draw_range_end(void * jarg1) {
  float jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (float)GeometryInstance_get_draw_range_end(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_baked_light_texture_id(void * jarg1, int jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  GeometryInstance_set_baked_light_texture_id(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeometryInstance_get_baked_light_texture_id(void * jarg1) {
  int jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (int)GeometryInstance_get_baked_light_texture_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_extra_cull_margin(void * jarg1, float jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (float)jarg2; 
  GeometryInstance_set_extra_cull_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeometryInstance_get_extra_cull_margin(void * jarg1) {
  float jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (float)GeometryInstance_get_extra_cull_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GraphEdit() {
  void * jresult ;
  GraphEdit *result = 0 ;
  
  result = (GraphEdit *)memnew(GraphEdit());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphEdit_connect_node(void * jarg1, wchar_t * jarg2, int jarg3, wchar_t * jarg4, int jarg5) {
  int jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int arg5 ;
  int result;
  
  arg1 = (GraphEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  result = (int)GraphEdit_connect_node(arg1,(String const &)*arg2,arg3,(String const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphEdit_is_node_connected(void * jarg1, wchar_t * jarg2, int jarg3, wchar_t * jarg4, int jarg5) {
  unsigned int jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (GraphEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  result = (bool)GraphEdit_is_node_connected(arg1,(String const &)*arg2,arg3,(String const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphEdit_disconnect_node(void * jarg1, wchar_t * jarg2, int jarg3, wchar_t * jarg4, int jarg5) {
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (GraphEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  GraphEdit_disconnect_node(arg1,(String const &)*arg2,arg3,(String const &)*arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphEdit_get_connection_list(void * jarg1) {
  void * jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  Array result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = GraphEdit_get_connection_list(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_GraphEdit_get_scroll_ofs(void * jarg1) {
  Vector2 jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  Vector2 result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = GraphEdit_get_scroll_ofs(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphEdit_set_zoom(void * jarg1, float jarg2) {
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  float arg2 ;
  
  arg1 = (GraphEdit *)jarg1; 
  arg2 = (float)jarg2; 
  GraphEdit_set_zoom(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GraphEdit_get_zoom(void * jarg1) {
  float jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  float result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = (float)GraphEdit_get_zoom(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphEdit_set_right_disconnects(void * jarg1, unsigned int jarg2) {
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (GraphEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GraphEdit_set_right_disconnects(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphEdit_is_right_disconnects_enabled(void * jarg1) {
  unsigned int jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  bool result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = (bool)GraphEdit_is_right_disconnects_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GridMap() {
  void * jresult ;
  GridMap *result = 0 ;
  
  result = (GridMap *)memnew(GridMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_theme(void * jarg1, void * jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  MeshLibrary *arg2 = (MeshLibrary *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (MeshLibrary *)jarg2; 
  GridMap_set_theme(arg1,arg2);
}


SWIGEXPORT MeshLibrary* SWIGSTDCALL CSharp_GridMap_get_theme(void * jarg1) {
  MeshLibrary* jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  Ref< MeshLibrary > result;
  
  arg1 = (GridMap *)jarg1; 
  result = GridMap_get_theme(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_bake(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_bake(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_is_baking_enabled(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_is_baking_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_cell_size(void * jarg1, float jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  float arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (float)jarg2; 
  GridMap_set_cell_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GridMap_get_cell_size(void * jarg1) {
  float jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  float result;
  
  arg1 = (GridMap *)jarg1; 
  result = (float)GridMap_get_cell_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_octant_size(void * jarg1, int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  GridMap_set_octant_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_octant_size(void * jarg1) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  result = (int)GridMap_get_octant_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_cell_item__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  GridMap_set_cell_item__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_cell_item__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  GridMap_set_cell_item__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_cell_item(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)GridMap_get_cell_item(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_cell_item_orientation(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)GridMap_get_cell_item_orientation(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_resource_changed(void * jarg1, void * jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (Object *)jarg2; 
  GridMap_resource_changed(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_center_x(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_center_x(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_get_center_x(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_get_center_x(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_center_y(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_center_y(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_get_center_y(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_get_center_y(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_center_z(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_center_z(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_get_center_z(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_get_center_z(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  GridMap_set_clip__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  GridMap_set_clip__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  GridMap_set_clip__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_3(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_clip__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_create_area(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  AABB *arg3 = 0 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return 0;
  } 
  result = (int)GridMap_create_area(arg1,arg2,(AABB const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_area_get_bounds(void * jarg1, int jarg2) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  AABB result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = GridMap_area_get_bounds(arg1,arg2);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_exterior_portal(void * jarg1, int jarg2, unsigned int jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  GridMap_area_set_exterior_portal(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_name(void * jarg1, int jarg2, wchar_t * jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  GridMap_area_set_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_area_get_name(void * jarg1, int jarg2) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = GridMap_area_get_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_area_is_exterior_portal(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GridMap_area_is_exterior_portal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_portal_disable_distance(void * jarg1, int jarg2, float jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GridMap_area_set_portal_disable_distance(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GridMap_area_get_portal_disable_distance(void * jarg1, int jarg2) {
  float jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GridMap_area_get_portal_disable_distance(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_portal_disable_color(void * jarg1, int jarg2, void * jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  GridMap_area_set_portal_disable_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_area_get_portal_disable_color(void * jarg1, int jarg2) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = GridMap_area_get_portal_disable_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_erase_area(void * jarg1, int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  GridMap_erase_area(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_unused_area_id(void * jarg1) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  result = (int)GridMap_get_unused_area_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_bake_geometry(void * jarg1) {
  GridMap *arg1 = (GridMap *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  GridMap_bake_geometry(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_use_baked_light(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_use_baked_light(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_is_using_baked_light(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_is_using_baked_light(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_clear(void * jarg1) {
  GridMap *arg1 = (GridMap *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  GridMap_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTTPRequest() {
  void * jresult ;
  HTTPRequest *result = 0 ;
  
  result = (HTTPRequest *)memnew(HTTPRequest());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_request__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (int)HTTPRequest_request__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_request__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPRequest_request__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_request__SWIG_2(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)HTTPRequest_request__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_cancel_request(void * jarg1) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  HTTPRequest_cancel_request(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_http_client_status(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_http_client_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_use_threads(void * jarg1, unsigned int jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  bool arg2 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  HTTPRequest_set_use_threads(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPRequest_is_using_threads(void * jarg1) {
  unsigned int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  bool result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (bool)HTTPRequest_is_using_threads(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_body_size_limit(void * jarg1, int jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int arg2 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  arg2 = (int)jarg2; 
  HTTPRequest_set_body_size_limit(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_body_size_limit(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_body_size_limit(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_max_redirects(void * jarg1, int jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int arg2 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  arg2 = (int)jarg2; 
  HTTPRequest_set_max_redirects(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_max_redirects(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_max_redirects(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_download_file(void * jarg1, wchar_t * jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  HTTPRequest_set_download_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPRequest_get_download_file(void * jarg1) {
  void * jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = HTTPRequest_get_download_file(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_downloaded_bytes(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_downloaded_bytes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_body_size(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_body_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImmediateGeometry() {
  void * jresult ;
  ImmediateGeometry *result = 0 ;
  
  result = (ImmediateGeometry *)memnew(ImmediateGeometry());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_begin(void * jarg1, int jarg2, void * jarg3) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  ImmediateGeometry_begin(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_normal(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_normal(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_tangent(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Plane *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_tangent(arg1,(Plane const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_color(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_uv(void * jarg1, Vector2* jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_uv(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_uv2(void * jarg1, Vector2* jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_uv2(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_add_vertex(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_add_vertex(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_add_sphere(void * jarg1, int jarg2, int jarg3, float jarg4) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  ImmediateGeometry_add_sphere(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_end(void * jarg1) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  ImmediateGeometry_end(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_clear(void * jarg1) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  ImmediateGeometry_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstancePlaceholder_replace_by_instance__SWIG_0(void * jarg1, void * jarg2) {
  InstancePlaceholder *arg1 = (InstancePlaceholder *) 0 ;
  PackedScene *arg2 = (PackedScene *) 0 ;
  
  arg1 = (InstancePlaceholder *)jarg1; 
  arg2 = (PackedScene *)jarg2; 
  InstancePlaceholder_replace_by_instance__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstancePlaceholder_replace_by_instance__SWIG_1(void * jarg1) {
  InstancePlaceholder *arg1 = (InstancePlaceholder *) 0 ;
  
  arg1 = (InstancePlaceholder *)jarg1; 
  InstancePlaceholder_replace_by_instance__SWIG_0(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstancePlaceholder_get_instance_path(void * jarg1) {
  void * jresult ;
  InstancePlaceholder *arg1 = (InstancePlaceholder *) 0 ;
  String result;
  
  arg1 = (InstancePlaceholder *)jarg1; 
  result = InstancePlaceholder_get_instance_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InterpolatedCamera() {
  void * jresult ;
  InterpolatedCamera *result = 0 ;
  
  result = (InterpolatedCamera *)memnew(InterpolatedCamera());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_target_path(void * jarg1, void * jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  InterpolatedCamera_set_target_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InterpolatedCamera_get_target_path(void * jarg1) {
  void * jresult ;
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  NodePath result;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  result = InterpolatedCamera_get_target_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_target(void * jarg1, void * jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  Camera *arg2 = (Camera *) 0 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = (Camera *)jarg2; 
  InterpolatedCamera_set_target(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_speed(void * jarg1, float jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  float arg2 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = (float)jarg2; 
  InterpolatedCamera_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_InterpolatedCamera_get_speed(void * jarg1) {
  float jresult ;
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  float result;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  result = (float)InterpolatedCamera_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_interpolation_enabled(void * jarg1, unsigned int jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  InterpolatedCamera_set_interpolation_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InterpolatedCamera_is_interpolation_enabled(void * jarg1) {
  unsigned int jresult ;
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  bool result;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  result = (bool)InterpolatedCamera_is_interpolation_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InverseKinematics() {
  void * jresult ;
  InverseKinematics *result = 0 ;
  
  result = (InverseKinematics *)memnew(InverseKinematics());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_bone_name(void * jarg1, wchar_t * jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  InverseKinematics_set_bone_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InverseKinematics_get_bone_name(void * jarg1) {
  void * jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  String result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = InverseKinematics_get_bone_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_iterations(void * jarg1, int jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (int)jarg2; 
  InverseKinematics_set_iterations(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_InverseKinematics_get_iterations(void * jarg1) {
  int jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (int)InverseKinematics_get_iterations(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_chain_size(void * jarg1, int jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (int)jarg2; 
  InverseKinematics_set_chain_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_InverseKinematics_get_chain_size(void * jarg1) {
  int jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (int)InverseKinematics_get_chain_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_precision(void * jarg1, float jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (float)jarg2; 
  InverseKinematics_set_precision(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_InverseKinematics_get_precision(void * jarg1) {
  float jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (float)InverseKinematics_get_precision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_speed(void * jarg1, float jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (float)jarg2; 
  InverseKinematics_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_InverseKinematics_get_speed(void * jarg1) {
  float jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (float)InverseKinematics_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemList() {
  void * jresult ;
  ItemList *result = 0 ;
  
  result = (ItemList *)memnew(ItemList());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_item__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, unsigned int jarg4) {
  ItemList *arg1 = (ItemList *) 0 ;
  String *arg2 = 0 ;
  Texture *arg3 = (Texture *) 0 ;
  bool arg4 ;
  
  arg1 = (ItemList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Texture *)jarg3; 
  arg4 = jarg4 ? true : false; 
  ItemList_add_item__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_item__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  String *arg2 = 0 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Texture *)jarg3; 
  ItemList_add_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_item__SWIG_2(void * jarg1, wchar_t * jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ItemList_add_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_icon_item__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Texture *)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_add_icon_item__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_icon_item__SWIG_1(void * jarg1, void * jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Texture *)jarg2; 
  ItemList_add_icon_item__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_text(void * jarg1, int jarg2, wchar_t * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ItemList_set_item_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_text(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_icon(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  ItemList_set_item_icon(arg1,arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_ItemList_get_item_icon(void * jarg1, int jarg2) {
  Texture* jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_icon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_icon_region(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  ItemList_set_item_icon_region(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_icon_region(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Rect2 result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_icon_region(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_selectable(void * jarg1, int jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_set_item_selectable(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_is_item_selectable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ItemList_is_item_selectable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_disabled(void * jarg1, int jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_set_item_disabled(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_is_item_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ItemList_is_item_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_metadata(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ItemList_set_item_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_get_item_metadata(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_get_item_metadata(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_custom_bg_color(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ItemList_set_item_custom_bg_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_custom_bg_color(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_custom_bg_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_tooltip(void * jarg1, int jarg2, wchar_t * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ItemList_set_item_tooltip(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_tooltip(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_tooltip(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_select__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_select__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_select__SWIG_1(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_select__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_unselect(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_unselect(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_is_selected(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ItemList_is_selected(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_item_count(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_item_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_remove_item(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_remove_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_clear(void * jarg1) {
  ItemList *arg1 = (ItemList *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  ItemList_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_sort_items_by_text(void * jarg1) {
  ItemList *arg1 = (ItemList *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  ItemList_sort_items_by_text(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_fixed_column_width(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_fixed_column_width(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_fixed_column_width(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_fixed_column_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_same_column_width(void * jarg1, unsigned int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  bool arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ItemList_set_same_column_width(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_is_same_column_width(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_is_same_column_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_max_text_lines(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_max_text_lines(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_max_text_lines(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_max_text_lines(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_max_columns(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_max_columns(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_max_columns(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_max_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_select_mode(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_select_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_select_mode(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_select_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_icon_mode(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_icon_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_icon_mode(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_icon_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_fixed_icon_size(void * jarg1, Vector2* jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ItemList_set_fixed_icon_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ItemList_get_fixed_icon_size(void * jarg1) {
  Vector2 jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 result;
  
  arg1 = (ItemList *)jarg1; 
  result = ItemList_get_fixed_icon_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_icon_scale(void * jarg1, float jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  float arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (float)jarg2; 
  ItemList_set_icon_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemList_get_icon_scale(void * jarg1) {
  float jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  float result;
  
  arg1 = (ItemList *)jarg1; 
  result = (float)ItemList_get_icon_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_allow_rmb_select(void * jarg1, unsigned int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  bool arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ItemList_set_allow_rmb_select(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_get_allow_rmb_select(void * jarg1) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  result = (bool)ItemList_get_allow_rmb_select(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_item_at_pos__SWIG_0(void * jarg1, Vector2* jarg2, unsigned int jarg3) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)ItemList_get_item_at_pos__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_item_at_pos__SWIG_1(void * jarg1, Vector2* jarg2) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)ItemList_get_item_at_pos__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_ensure_current_is_visible(void * jarg1) {
  ItemList *arg1 = (ItemList *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  ItemList_ensure_current_is_visible(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_node_a(void * jarg1, void * jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint_set_node_a(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_get_node_a(void * jarg1) {
  void * jresult ;
  Joint *arg1 = (Joint *) 0 ;
  NodePath result;
  
  arg1 = (Joint *)jarg1; 
  result = Joint_get_node_a(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_node_b(void * jarg1, void * jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint_set_node_b(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_get_node_b(void * jarg1) {
  void * jresult ;
  Joint *arg1 = (Joint *) 0 ;
  NodePath result;
  
  arg1 = (Joint *)jarg1; 
  result = Joint_get_node_b(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_solver_priority(void * jarg1, int jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  int arg2 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = (int)jarg2; 
  Joint_set_solver_priority(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Joint_get_solver_priority(void * jarg1) {
  int jresult ;
  Joint *arg1 = (Joint *) 0 ;
  int result;
  
  arg1 = (Joint *)jarg1; 
  result = (int)Joint_get_solver_priority(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_exclude_nodes_from_collision(void * jarg1, unsigned int jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  bool arg2 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Joint_set_exclude_nodes_from_collision(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Joint_get_exclude_nodes_from_collision(void * jarg1) {
  unsigned int jresult ;
  Joint *arg1 = (Joint *) 0 ;
  bool result;
  
  arg1 = (Joint *)jarg1; 
  result = (bool)Joint_get_exclude_nodes_from_collision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Label() {
  void * jresult ;
  Label *result = 0 ;
  
  result = (Label *)memnew(Label());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_align(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_align(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_valign(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_valign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_valign(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_valign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_text(void * jarg1, wchar_t * jarg2) {
  Label *arg1 = (Label *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Label *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Label_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Label_get_text(void * jarg1) {
  void * jresult ;
  Label *arg1 = (Label *) 0 ;
  String result;
  
  arg1 = (Label *)jarg1; 
  result = Label_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_autowrap(void * jarg1, unsigned int jarg2) {
  Label *arg1 = (Label *) 0 ;
  bool arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Label_set_autowrap(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Label_has_autowrap(void * jarg1) {
  unsigned int jresult ;
  Label *arg1 = (Label *) 0 ;
  bool result;
  
  arg1 = (Label *)jarg1; 
  result = (bool)Label_has_autowrap(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_clip_text(void * jarg1, unsigned int jarg2) {
  Label *arg1 = (Label *) 0 ;
  bool arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Label_set_clip_text(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Label_is_clipping_text(void * jarg1) {
  unsigned int jresult ;
  Label *arg1 = (Label *) 0 ;
  bool result;
  
  arg1 = (Label *)jarg1; 
  result = (bool)Label_is_clipping_text(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_uppercase(void * jarg1, unsigned int jarg2) {
  Label *arg1 = (Label *) 0 ;
  bool arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Label_set_uppercase(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Label_is_uppercase(void * jarg1) {
  unsigned int jresult ;
  Label *arg1 = (Label *) 0 ;
  bool result;
  
  arg1 = (Label *)jarg1; 
  result = (bool)Label_is_uppercase(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_line_height(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_line_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_line_count(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_line_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_total_character_count(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_total_character_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_visible_characters(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_visible_characters(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_visible_characters(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_visible_characters(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_percent_visible(void * jarg1, float jarg2) {
  Label *arg1 = (Label *) 0 ;
  float arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (float)jarg2; 
  Label_set_percent_visible(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Label_get_percent_visible(void * jarg1) {
  float jresult ;
  Label *arg1 = (Label *) 0 ;
  float result;
  
  arg1 = (Label *)jarg1; 
  result = (float)Label_get_percent_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_lines_skipped(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_lines_skipped(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_lines_skipped(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_lines_skipped(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_max_lines_visible(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_max_lines_visible(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_max_lines_visible(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_max_lines_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_parameter(void * jarg1, int jarg2, float jarg3) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Light_set_parameter(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_get_parameter(void * jarg1, int jarg2) {
  float jresult ;
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Light_get_parameter(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_color(void * jarg1, int jarg2, void * jarg3) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Light_set_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_get_color(void * jarg1, int jarg2) {
  void * jresult ;
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  result = Light_get_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_project_shadows(void * jarg1, unsigned int jarg2) {
  Light *arg1 = (Light *) 0 ;
  bool arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light_set_project_shadows(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_has_project_shadows(void * jarg1) {
  unsigned int jresult ;
  Light *arg1 = (Light *) 0 ;
  bool result;
  
  arg1 = (Light *)jarg1; 
  result = (bool)Light_has_project_shadows(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_projector(void * jarg1, void * jarg2) {
  Light *arg1 = (Light *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (Texture *)jarg2; 
  Light_set_projector(arg1,arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Light_get_projector(void * jarg1) {
  Texture* jresult ;
  Light *arg1 = (Light *) 0 ;
  Ref< Texture > result;
  
  arg1 = (Light *)jarg1; 
  result = Light_get_projector(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_operator(void * jarg1, int jarg2) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  Light_set_operator(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_get_operator(void * jarg1) {
  int jresult ;
  Light *arg1 = (Light *) 0 ;
  int result;
  
  arg1 = (Light *)jarg1; 
  result = (int)Light_get_operator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_bake_mode(void * jarg1, int jarg2) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  Light_set_bake_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_get_bake_mode(void * jarg1) {
  int jresult ;
  Light *arg1 = (Light *) 0 ;
  int result;
  
  arg1 = (Light *)jarg1; 
  result = (int)Light_get_bake_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_enabled(void * jarg1, unsigned int jarg2) {
  Light *arg1 = (Light *) 0 ;
  bool arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_is_enabled(void * jarg1) {
  unsigned int jresult ;
  Light *arg1 = (Light *) 0 ;
  bool result;
  
  arg1 = (Light *)jarg1; 
  result = (bool)Light_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_editor_only(void * jarg1, unsigned int jarg2) {
  Light *arg1 = (Light *) 0 ;
  bool arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light_set_editor_only(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_is_editor_only(void * jarg1) {
  unsigned int jresult ;
  Light *arg1 = (Light *) 0 ;
  bool result;
  
  arg1 = (Light *)jarg1; 
  result = (bool)Light_is_editor_only(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LineEdit() {
  void * jresult ;
  LineEdit *result = 0 ;
  
  result = (LineEdit *)memnew(LineEdit());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_align(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_set_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineEdit_get_align(void * jarg1) {
  int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  int result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (int)LineEdit_get_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_clear(void * jarg1) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  LineEdit_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select_all(void * jarg1) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  LineEdit_select_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_text(void * jarg1, wchar_t * jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  LineEdit_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineEdit_get_text(void * jarg1) {
  void * jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  String result;
  
  arg1 = (LineEdit *)jarg1; 
  result = LineEdit_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_cursor_pos(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_set_cursor_pos(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineEdit_get_cursor_pos(void * jarg1) {
  int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  int result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (int)LineEdit_get_cursor_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_cursor_set_blink_enabled(void * jarg1, unsigned int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  LineEdit_cursor_set_blink_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LineEdit_cursor_get_blink_enabled(void * jarg1) {
  unsigned int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (bool)LineEdit_cursor_get_blink_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_cursor_set_blink_speed(void * jarg1, float jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  float arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (float)jarg2; 
  LineEdit_cursor_set_blink_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_LineEdit_cursor_get_blink_speed(void * jarg1) {
  float jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  float result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (float)LineEdit_cursor_get_blink_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_max_length(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_set_max_length(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineEdit_get_max_length(void * jarg1) {
  int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  int result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (int)LineEdit_get_max_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_append_at_cursor(void * jarg1, wchar_t * jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  LineEdit_append_at_cursor(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_editable(void * jarg1, unsigned int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  LineEdit_set_editable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LineEdit_is_editable(void * jarg1) {
  unsigned int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (bool)LineEdit_is_editable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_secret(void * jarg1, unsigned int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  LineEdit_set_secret(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LineEdit_is_secret(void * jarg1) {
  unsigned int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (bool)LineEdit_is_secret(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  LineEdit_select__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select__SWIG_1(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_select__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select__SWIG_2(void * jarg1) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  LineEdit_select__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_menu_option(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_menu_option(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineEdit_get_menu(void * jarg1) {
  void * jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  PopupMenu *result = 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  result = (PopupMenu *)LineEdit_get_menu(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Listener() {
  void * jresult ;
  Listener *result = 0 ;
  
  result = (Listener *)memnew(Listener());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Listener_make_current(void * jarg1) {
  Listener *arg1 = (Listener *) 0 ;
  
  arg1 = (Listener *)jarg1; 
  Listener_make_current(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Listener_clear_current(void * jarg1) {
  Listener *arg1 = (Listener *) 0 ;
  
  arg1 = (Listener *)jarg1; 
  Listener_clear_current(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Listener_is_current(void * jarg1) {
  unsigned int jresult ;
  Listener *arg1 = (Listener *) 0 ;
  bool result;
  
  arg1 = (Listener *)jarg1; 
  result = (bool)Listener_is_current(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Listener_get_listener_transform(void * jarg1) {
  void * jresult ;
  Listener *arg1 = (Listener *) 0 ;
  Transform result;
  
  arg1 = (Listener *)jarg1; 
  result = Listener_get_listener_transform(arg1);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshInstance() {
  void * jresult ;
  MeshInstance *result = 0 ;
  
  result = (MeshInstance *)memnew(MeshInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_set_mesh(void * jarg1, void * jarg2) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  Mesh *arg2 = (Mesh *) 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  arg2 = (Mesh *)jarg2; 
  MeshInstance_set_mesh(arg1,arg2);
}


SWIGEXPORT Mesh* SWIGSTDCALL CSharp_MeshInstance_get_mesh(void * jarg1) {
  Mesh* jresult ;
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  Ref< Mesh > result;
  
  arg1 = (MeshInstance *)jarg1; 
  result = MeshInstance_get_mesh(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_set_skeleton_path(void * jarg1, void * jarg2) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  MeshInstance_set_skeleton_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshInstance_get_skeleton_path(void * jarg1) {
  void * jresult ;
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  NodePath result;
  
  arg1 = (MeshInstance *)jarg1; 
  result = MeshInstance_get_skeleton_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshInstance_get_aabb(void * jarg1) {
  void * jresult ;
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  AABB result;
  
  arg1 = (MeshInstance *)jarg1; 
  result = MeshInstance_get_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_create_trimesh_collision(void * jarg1) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  MeshInstance_create_trimesh_collision(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_create_convex_collision(void * jarg1) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  MeshInstance_create_convex_collision(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultiMeshInstance() {
  void * jresult ;
  MultiMeshInstance *result = 0 ;
  
  result = (MultiMeshInstance *)memnew(MultiMeshInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMeshInstance_set_multimesh(void * jarg1, void * jarg2) {
  MultiMeshInstance *arg1 = (MultiMeshInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (MultiMeshInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  MultiMeshInstance_set_multimesh(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMeshInstance_get_multimesh(void * jarg1) {
  void * jresult ;
  MultiMeshInstance *arg1 = (MultiMeshInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (MultiMeshInstance *)jarg1; 
  result = (Object *)MultiMeshInstance_get_multimesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Navigation() {
  void * jresult ;
  Navigation *result = 0 ;
  
  result = (Navigation *)memnew(Navigation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation_navmesh_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  NavigationMesh *arg2 = (NavigationMesh *) 0 ;
  Transform *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  int result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (NavigationMesh *)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (Object *)jarg4; 
  result = (int)Navigation_navmesh_create__SWIG_0(arg1,arg2,(Transform const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation_navmesh_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  NavigationMesh *arg2 = (NavigationMesh *) 0 ;
  Transform *arg3 = 0 ;
  int result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (NavigationMesh *)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = (int)Navigation_navmesh_create__SWIG_0(arg1,arg2,(Transform const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation_navmesh_set_transform(void * jarg1, int jarg2, void * jarg3) {
  Navigation *arg1 = (Navigation *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Navigation_navmesh_set_transform(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation_navmesh_remove(void * jarg1, int jarg2) {
  Navigation *arg1 = (Navigation *) 0 ;
  int arg2 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (int)jarg2; 
  Navigation_navmesh_remove(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_simple_path__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  bool arg4 ;
  Vector3Array result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = Navigation_get_simple_path__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_simple_path__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3Array result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_simple_path__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_to_segment__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  bool arg4 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = Navigation_get_closest_point_to_segment__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_to_segment__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_closest_point_to_segment__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_closest_point(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_normal(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_closest_point_normal(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_owner(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Object *)Navigation_get_closest_point_owner(arg1,(Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation_set_up_vector(void * jarg1, void * jarg2) {
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Navigation_set_up_vector(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_up_vector(void * jarg1) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  result = Navigation_get_up_vector(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationMeshInstance() {
  void * jresult ;
  NavigationMeshInstance *result = 0 ;
  
  result = (NavigationMeshInstance *)memnew(NavigationMeshInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMeshInstance_set_navigation_mesh(void * jarg1, void * jarg2) {
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  NavigationMeshInstance_set_navigation_mesh(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationMeshInstance_get_navigation_mesh(void * jarg1) {
  void * jresult ;
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  result = (Object *)NavigationMeshInstance_get_navigation_mesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMeshInstance_set_enabled(void * jarg1, unsigned int jarg2) {
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  NavigationMeshInstance_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NavigationMeshInstance_is_enabled(void * jarg1) {
  unsigned int jresult ;
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  bool result;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  result = (bool)NavigationMeshInstance_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node2D() {
  void * jresult ;
  Node2D *result = 0 ;
  
  result = (Node2D *)memnew(Node2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_pos(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_set_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_rot(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_set_rot(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_rotd(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_set_rotd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_scale(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_set_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Node2D_get_pos(void * jarg1) {
  Vector2 jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 result;
  
  arg1 = (Node2D *)jarg1; 
  result = Node2D_get_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node2D_get_rot(void * jarg1) {
  float jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  float result;
  
  arg1 = (Node2D *)jarg1; 
  result = (float)Node2D_get_rot(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node2D_get_rotd(void * jarg1) {
  float jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  float result;
  
  arg1 = (Node2D *)jarg1; 
  result = (float)Node2D_get_rotd(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Node2D_get_scale(void * jarg1) {
  Vector2 jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 result;
  
  arg1 = (Node2D *)jarg1; 
  result = Node2D_get_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_rotate(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_rotate(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_x__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node2D_move_local_x__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_x__SWIG_1(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_move_local_x__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_y__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node2D_move_local_y__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_y__SWIG_1(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_move_local_y__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_translate(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_translate(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_global_translate(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_global_translate(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_scale(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_global_pos(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_set_global_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Node2D_get_global_pos(void * jarg1) {
  Vector2 jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 result;
  
  arg1 = (Node2D *)jarg1; 
  result = Node2D_get_global_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_transform(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Node2D_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_global_transform(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Node2D_set_global_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_look_at(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_look_at(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node2D_get_angle_to(void * jarg1, Vector2* jarg2) {
  float jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)Node2D_get_angle_to(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_z(void * jarg1, int jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  int arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (int)jarg2; 
  Node2D_set_z(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node2D_get_z(void * jarg1) {
  int jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  int result;
  
  arg1 = (Node2D *)jarg1; 
  result = (int)Node2D_get_z(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_z_as_relative(void * jarg1, unsigned int jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node2D_set_z_as_relative(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node2D_is_z_relative(void * jarg1) {
  unsigned int jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  bool result;
  
  arg1 = (Node2D *)jarg1; 
  result = (bool)Node2D_is_z_relative(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_edit_set_pivot(void * jarg1, Vector2* jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_edit_set_pivot(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node2D_get_relative_transform_to_parent(void * jarg1, void * jarg2) {
  void * jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  Matrix32 result;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = Node2D_get_relative_transform_to_parent(arg1,arg2);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OmniLight() {
  void * jresult ;
  OmniLight *result = 0 ;
  
  result = (OmniLight *)memnew(OmniLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Panel() {
  void * jresult ;
  Panel *result = 0 ;
  
  result = (Panel *)memnew(Panel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParallaxBackground() {
  void * jresult ;
  ParallaxBackground *result = 0 ;
  
  result = (ParallaxBackground *)memnew(ParallaxBackground());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_scroll_offset(void * jarg1, Vector2* jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_scroll_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxBackground_get_scroll_offset(void * jarg1) {
  Vector2 jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_scroll_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_scroll_base_offset(void * jarg1, Vector2* jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_scroll_base_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxBackground_get_scroll_base_offset(void * jarg1) {
  Vector2 jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_scroll_base_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_scroll_base_scale(void * jarg1, Vector2* jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_scroll_base_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxBackground_get_scroll_base_scale(void * jarg1) {
  Vector2 jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_scroll_base_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_limit_begin(void * jarg1, Vector2* jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_limit_begin(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxBackground_get_limit_begin(void * jarg1) {
  Vector2 jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_limit_begin(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_limit_end(void * jarg1, Vector2* jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_limit_end(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxBackground_get_limit_end(void * jarg1) {
  Vector2 jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_limit_end(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_ignore_camera_zoom(void * jarg1, unsigned int jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  bool arg2 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ParallaxBackground_set_ignore_camera_zoom(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParallaxBackground_is_ignore_camera_zoom(void * jarg1) {
  unsigned int jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  bool result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = (bool)ParallaxBackground_is_ignore_camera_zoom(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParallaxLayer() {
  void * jresult ;
  ParallaxLayer *result = 0 ;
  
  result = (ParallaxLayer *)memnew(ParallaxLayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxLayer_set_motion_scale(void * jarg1, Vector2* jarg2) {
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxLayer_set_motion_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxLayer_get_motion_scale(void * jarg1) {
  Vector2 jresult ;
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxLayer *)jarg1; 
  result = ParallaxLayer_get_motion_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxLayer_set_mirroring(void * jarg1, Vector2* jarg2) {
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxLayer_set_mirroring(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ParallaxLayer_get_mirroring(void * jarg1) {
  Vector2 jresult ;
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxLayer *)jarg1; 
  result = ParallaxLayer_get_mirroring(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParticleAttractor2D() {
  void * jresult ;
  ParticleAttractor2D *result = 0 ;
  
  result = (ParticleAttractor2D *)memnew(ParticleAttractor2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_enabled(void * jarg1, unsigned int jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  bool arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ParticleAttractor2D_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParticleAttractor2D_is_enabled(void * jarg1) {
  unsigned int jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  bool result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (bool)ParticleAttractor2D_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_radius(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_radius(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_disable_radius(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_disable_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_disable_radius(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_disable_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_gravity(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_gravity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_gravity(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_gravity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_absorption(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_absorption(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_absorption(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_absorption(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_particles_path(void * jarg1, void * jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  ParticleAttractor2D_set_particles_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParticleAttractor2D_get_particles_path(void * jarg1) {
  void * jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  NodePath result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = ParticleAttractor2D_get_particles_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Particles() {
  void * jresult ;
  Particles *result = 0 ;
  
  result = (Particles *)memnew(Particles());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_amount(void * jarg1, int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  Particles_set_amount(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles_get_amount(void * jarg1) {
  int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int result;
  
  arg1 = (Particles *)jarg1; 
  result = (int)Particles_get_amount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emitting(void * jarg1, unsigned int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles_set_emitting(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles_is_emitting(void * jarg1) {
  unsigned int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  bool result;
  
  arg1 = (Particles *)jarg1; 
  result = (bool)Particles_is_emitting(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_visibility_aabb(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  Particles_set_visibility_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_visibility_aabb(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  AABB result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_visibility_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emission_half_extents(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Particles_set_emission_half_extents(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_emission_half_extents(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3 result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_emission_half_extents(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emission_base_velocity(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Particles_set_emission_base_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_emission_base_velocity(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3 result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_emission_base_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emission_points(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  Particles_set_emission_points(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_emission_points(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3Array result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_emission_points(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_gravity_normal(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Particles_set_gravity_normal(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_gravity_normal(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3 result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_gravity_normal(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_variable(void * jarg1, int jarg2, float jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles_set_variable(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_variable(void * jarg1, int jarg2) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles_get_variable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_randomness(void * jarg1, int jarg2, float jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles_set_randomness(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_randomness(void * jarg1, int jarg2) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles_get_randomness(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_color_phase_pos(void * jarg1, int jarg2, float jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles_set_color_phase_pos(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_color_phase_pos(void * jarg1, int jarg2) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles_get_color_phase_pos(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_color_phase_color(void * jarg1, int jarg2, void * jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Particles_set_color_phase_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_color_phase_color(void * jarg1, int jarg2) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = Particles_get_color_phase_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_material(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Material *arg2 = (Material *) 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Material *)jarg2; 
  Particles_set_material(arg1,arg2);
}


SWIGEXPORT Material* SWIGSTDCALL CSharp_Particles_get_material(void * jarg1) {
  Material* jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Ref< Material > result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_material(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emit_timeout(void * jarg1, float jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  float arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (float)jarg2; 
  Particles_set_emit_timeout(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_emit_timeout(void * jarg1) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  result = (float)Particles_get_emit_timeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_height_from_velocity(void * jarg1, unsigned int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles_set_height_from_velocity(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles_has_height_from_velocity(void * jarg1) {
  unsigned int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  bool result;
  
  arg1 = (Particles *)jarg1; 
  result = (bool)Particles_has_height_from_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_use_local_coordinates(void * jarg1, unsigned int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles_set_use_local_coordinates(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles_is_using_local_coordinates(void * jarg1) {
  unsigned int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  bool result;
  
  arg1 = (Particles *)jarg1; 
  result = (bool)Particles_is_using_local_coordinates(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_color_phases(void * jarg1, int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  Particles_set_color_phases(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles_get_color_phases(void * jarg1) {
  int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int result;
  
  arg1 = (Particles *)jarg1; 
  result = (int)Particles_get_color_phases(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Particles2D() {
  void * jresult ;
  Particles2D *result = 0 ;
  
  result = (Particles2D *)memnew(Particles2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emitting(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_emitting(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_emitting(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_emitting(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_amount(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_amount(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_amount(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_amount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_lifetime(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_lifetime(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_lifetime(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_lifetime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_time_scale(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_time_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_time_scale(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_time_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_pre_process_time(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_pre_process_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_pre_process_time(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_pre_process_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emit_timeout(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_emit_timeout(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_emit_timeout(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_emit_timeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_param(void * jarg1, int jarg2, float jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles2D_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_param(void * jarg1, int jarg2) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles2D_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_randomness(void * jarg1, int jarg2, float jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles2D_set_randomness(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_randomness(void * jarg1, int jarg2) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles2D_get_randomness(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Particles2D_set_texture(void * jarg1, void * jarg2) {
  Texture* jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  Ref< Texture > result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = Particles2D_set_texture(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Particles2D_get_texture(void * jarg1) {
  Texture* jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Ref< Texture > result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Particles2D_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_color(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Color result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT ColorRamp* SWIGSTDCALL CSharp_Particles2D_set_color_ramp(void * jarg1, void * jarg2) {
  ColorRamp* jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  Ref< ColorRamp > result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = Particles2D_set_color_ramp(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT ColorRamp* SWIGSTDCALL CSharp_Particles2D_get_color_ramp(void * jarg1) {
  ColorRamp* jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Ref< ColorRamp > result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_color_ramp(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emissor_offset(void * jarg1, Vector2* jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Particles2D_set_emissor_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Particles2D_get_emissor_offset(void * jarg1) {
  Vector2 jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_emissor_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_flip_h(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_flip_v(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_h_frames(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_h_frames(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_h_frames(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_h_frames(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_v_frames(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_v_frames(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_v_frames(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_v_frames(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emission_half_extents(void * jarg1, Vector2* jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Particles2D_set_emission_half_extents(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Particles2D_get_emission_half_extents(void * jarg1) {
  Vector2 jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_emission_half_extents(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color_phases(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_color_phases(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_color_phases(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_color_phases(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color_phase_color(void * jarg1, int jarg2, void * jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Particles2D_set_color_phase_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_color_phase_color(void * jarg1, int jarg2) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Particles2D_get_color_phase_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color_phase_pos(void * jarg1, int jarg2, float jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles2D_set_color_phase_pos(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_color_phase_pos(void * jarg1, int jarg2) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles2D_get_color_phase_pos(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_pre_process(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_pre_process(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_reset(void * jarg1) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  Particles2D_reset(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_use_local_space(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_use_local_space(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_using_local_space(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_using_local_space(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_initial_velocity(void * jarg1, Vector2* jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Particles2D_set_initial_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Particles2D_get_initial_velocity(void * jarg1) {
  Vector2 jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_initial_velocity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_explosiveness(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_explosiveness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_explosiveness(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_explosiveness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emission_points(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Particles2D_set_emission_points(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_emission_points(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_emission_points(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Patch9Frame() {
  void * jresult ;
  Patch9Frame *result = 0 ;
  
  result = (Patch9Frame *)memnew(Patch9Frame());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_texture(void * jarg1, void * jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (Object *)jarg2; 
  Patch9Frame_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patch9Frame_get_texture(void * jarg1) {
  void * jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = (Object *)Patch9Frame_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_modulate(void * jarg1, void * jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Patch9Frame_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patch9Frame_get_modulate(void * jarg1) {
  void * jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Color result;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = Patch9Frame_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_patch_margin(void * jarg1, int jarg2, int jarg3) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Patch9Frame_set_patch_margin(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Patch9Frame_get_patch_margin(void * jarg1, int jarg2) {
  int jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Patch9Frame_get_patch_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_region_rect(void * jarg1, void * jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Patch9Frame_set_region_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patch9Frame_get_region_rect(void * jarg1) {
  void * jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Rect2 result;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = Patch9Frame_get_region_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_draw_center(void * jarg1, unsigned int jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  bool arg2 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Patch9Frame_set_draw_center(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Patch9Frame_get_draw_center(void * jarg1) {
  unsigned int jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  bool result;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = (bool)Patch9Frame_get_draw_center(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Path() {
  void * jresult ;
  Path *result = 0 ;
  
  result = (Path *)memnew(Path());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Path_set_curve(void * jarg1, void * jarg2) {
  Path *arg1 = (Path *) 0 ;
  Curve3D *arg2 = (Curve3D *) 0 ;
  
  arg1 = (Path *)jarg1; 
  arg2 = (Curve3D *)jarg2; 
  Path_set_curve(arg1,arg2);
}


SWIGEXPORT Curve3D* SWIGSTDCALL CSharp_Path_get_curve(void * jarg1) {
  Curve3D* jresult ;
  Path *arg1 = (Path *) 0 ;
  Ref< Curve3D > result;
  
  arg1 = (Path *)jarg1; 
  result = Path_get_curve(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Path2D() {
  void * jresult ;
  Path2D *result = 0 ;
  
  result = (Path2D *)memnew(Path2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Path2D_set_curve(void * jarg1, void * jarg2) {
  Path2D *arg1 = (Path2D *) 0 ;
  Curve2D *arg2 = (Curve2D *) 0 ;
  
  arg1 = (Path2D *)jarg1; 
  arg2 = (Curve2D *)jarg2; 
  Path2D_set_curve(arg1,arg2);
}


SWIGEXPORT Curve2D* SWIGSTDCALL CSharp_Path2D_get_curve(void * jarg1) {
  Curve2D* jresult ;
  Path2D *arg1 = (Path2D *) 0 ;
  Ref< Curve2D > result;
  
  arg1 = (Path2D *)jarg1; 
  result = Path2D_get_curve(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathFollow() {
  void * jresult ;
  PathFollow *result = 0 ;
  
  result = (PathFollow *)memnew(PathFollow());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_h_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_h_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_h_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_h_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_v_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_v_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_v_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_v_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_unit_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_unit_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_unit_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_unit_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_rotation_mode(void * jarg1, int jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  int arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (int)jarg2; 
  PathFollow_set_rotation_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PathFollow_get_rotation_mode(void * jarg1) {
  int jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  int result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (int)PathFollow_get_rotation_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_cubic_interpolation(void * jarg1, unsigned int jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow_set_cubic_interpolation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow_get_cubic_interpolation(void * jarg1) {
  unsigned int jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (bool)PathFollow_get_cubic_interpolation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_loop(void * jarg1, unsigned int jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow_has_loop(void * jarg1) {
  unsigned int jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (bool)PathFollow_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathFollow2D() {
  void * jresult ;
  PathFollow2D *result = 0 ;
  
  result = (PathFollow2D *)memnew(PathFollow2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_h_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_h_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_h_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_h_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_v_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_v_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_v_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_v_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_unit_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_unit_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_unit_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_unit_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_rotate(void * jarg1, unsigned int jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow2D_set_rotate(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow2D_is_rotating(void * jarg1) {
  unsigned int jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (bool)PathFollow2D_is_rotating(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_cubic_interpolation(void * jarg1, unsigned int jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow2D_set_cubic_interpolation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow2D_get_cubic_interpolation(void * jarg1) {
  unsigned int jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (bool)PathFollow2D_get_cubic_interpolation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_loop(void * jarg1, unsigned int jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow2D_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow2D_has_loop(void * jarg1) {
  unsigned int jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (bool)PathFollow2D_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_layer_mask(void * jarg1, int jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody_get_layer_mask(void * jarg1) {
  int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int result;
  
  arg1 = (PhysicsBody *)jarg1; 
  result = (int)PhysicsBody_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_collision_mask(void * jarg1, int jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody_get_collision_mask(void * jarg1) {
  int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int result;
  
  arg1 = (PhysicsBody *)jarg1; 
  result = (int)PhysicsBody_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_add_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  PhysicsBody *arg2 = (PhysicsBody *) 0 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (PhysicsBody *)jarg2; 
  PhysicsBody_add_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_remove_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  PhysicsBody *arg2 = (PhysicsBody *) 0 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (PhysicsBody *)jarg2; 
  PhysicsBody_remove_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PinJoint() {
  void * jresult ;
  PinJoint *result = 0 ;
  
  result = (PinJoint *)memnew(PinJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PinJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  PinJoint *arg1 = (PinJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (PinJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  PinJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PinJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  PinJoint *arg1 = (PinJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (PinJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)PinJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon2D() {
  void * jresult ;
  Polygon2D *result = 0 ;
  
  result = (Polygon2D *)memnew(Polygon2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_polygon(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Polygon2D_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_polygon(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_uv(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Polygon2D_set_uv(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_uv(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_uv(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_color(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Polygon2D_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_color(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Color result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_vertex_colors(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  ColorArray *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (ColorArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  Polygon2D_set_vertex_colors(arg1,(ColorArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_vertex_colors(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  ColorArray result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_vertex_colors(arg1);
  jresult = memnew(ColorArray((const ColorArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  Polygon2D_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_texture(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (Object *)Polygon2D_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture_offset(void * jarg1, Vector2* jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Polygon2D_set_texture_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Polygon2D_get_texture_offset(void * jarg1) {
  Vector2 jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_texture_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture_rotation(void * jarg1, float jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float arg2 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (float)jarg2; 
  Polygon2D_set_texture_rotation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Polygon2D_get_texture_rotation(void * jarg1) {
  float jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (float)Polygon2D_get_texture_rotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture_scale(void * jarg1, Vector2* jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Polygon2D_set_texture_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Polygon2D_get_texture_scale(void * jarg1) {
  Vector2 jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_texture_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_invert(void * jarg1, unsigned int jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Polygon2D_set_invert(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Polygon2D_get_invert(void * jarg1) {
  unsigned int jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  bool result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (bool)Polygon2D_get_invert(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_invert_border(void * jarg1, float jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float arg2 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (float)jarg2; 
  Polygon2D_set_invert_border(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Polygon2D_get_invert_border(void * jarg1) {
  float jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (float)Polygon2D_get_invert_border(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_offset(void * jarg1, Vector2* jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Polygon2D_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Polygon2D_get_offset(void * jarg1) {
  Vector2 jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Popup() {
  void * jresult ;
  Popup *result = 0 ;
  
  result = (Popup *)memnew(Popup());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered__SWIG_0(void * jarg1, Vector2* jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Popup_popup_centered__SWIG_0(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered__SWIG_1(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup_centered__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_ratio__SWIG_0(void * jarg1, float jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  float arg2 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = (float)jarg2; 
  Popup_popup_centered_ratio__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_ratio__SWIG_1(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup_centered_ratio__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_minsize__SWIG_0(void * jarg1, Vector2* jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Popup_popup_centered_minsize__SWIG_0(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_minsize__SWIG_1(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup_centered_minsize__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_set_exclusive(void * jarg1, unsigned int jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  bool arg2 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Popup_set_exclusive(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Popup_is_exclusive(void * jarg1) {
  unsigned int jresult ;
  Popup *arg1 = (Popup *) 0 ;
  bool result;
  
  arg1 = (Popup *)jarg1; 
  result = (bool)Popup_is_exclusive(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PopupDialog() {
  void * jresult ;
  PopupDialog *result = 0 ;
  
  result = (PopupDialog *)memnew(PopupDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PopupMenu() {
  void * jresult ;
  PopupMenu *result = 0 ;
  
  result = (PopupMenu *)memnew(PopupMenu());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_item__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4, int jarg5) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  PopupMenu_add_icon_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_item__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  PopupMenu_add_icon_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_item__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_add_icon_item__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_item__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  PopupMenu_add_item__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_item__SWIG_1(void * jarg1, wchar_t * jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  PopupMenu_add_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_item__SWIG_2(void * jarg1, wchar_t * jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  PopupMenu_add_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_item__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4, int jarg5) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  PopupMenu_add_icon_check_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_item__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  PopupMenu_add_icon_check_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_item__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_add_icon_check_item__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_item__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  PopupMenu_add_check_item__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_item__SWIG_1(void * jarg1, wchar_t * jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  PopupMenu_add_check_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_item__SWIG_2(void * jarg1, wchar_t * jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  PopupMenu_add_check_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_submenu_item__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  PopupMenu_add_submenu_item__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_submenu_item__SWIG_1(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_add_submenu_item__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_shortcut__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  ShortCut *arg3 = (ShortCut *) 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (ShortCut *)jarg3; 
  arg4 = (int)jarg4; 
  PopupMenu_add_icon_shortcut__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_shortcut__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  ShortCut *arg3 = (ShortCut *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (ShortCut *)jarg3; 
  PopupMenu_add_icon_shortcut__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_shortcut__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  ShortCut *arg2 = (ShortCut *) 0 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (ShortCut *)jarg2; 
  arg3 = (int)jarg3; 
  PopupMenu_add_shortcut__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_shortcut__SWIG_1(void * jarg1, void * jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  ShortCut *arg2 = (ShortCut *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (ShortCut *)jarg2; 
  PopupMenu_add_shortcut__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_shortcut__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  ShortCut *arg3 = (ShortCut *) 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (ShortCut *)jarg3; 
  arg4 = (int)jarg4; 
  PopupMenu_add_icon_check_shortcut__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_shortcut__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  ShortCut *arg3 = (ShortCut *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (ShortCut *)jarg3; 
  PopupMenu_add_icon_check_shortcut__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_shortcut__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  ShortCut *arg2 = (ShortCut *) 0 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (ShortCut *)jarg2; 
  arg3 = (int)jarg3; 
  PopupMenu_add_check_shortcut__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_shortcut__SWIG_1(void * jarg1, void * jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  ShortCut *arg2 = (ShortCut *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (ShortCut *)jarg2; 
  PopupMenu_add_check_shortcut__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_text(void * jarg1, int jarg2, wchar_t * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_set_item_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_icon(void * jarg1, int jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Object *)jarg3; 
  PopupMenu_set_item_icon(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_accelerator(void * jarg1, int jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  PopupMenu_set_item_accelerator(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_metadata(void * jarg1, int jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PopupMenu_set_item_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_checked(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_checked(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_disabled(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_disabled(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_shortcut(void * jarg1, int jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  ShortCut *arg3 = (ShortCut *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ShortCut *)jarg3; 
  PopupMenu_set_item_shortcut(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_submenu(void * jarg1, int jarg2, wchar_t * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_set_item_submenu(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_as_separator(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_as_separator(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_as_checkable(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_as_checkable(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_ID(void * jarg1, int jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  PopupMenu_set_item_ID(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PopupMenu_get_item_text(void * jarg1, int jarg2) {
  void * jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = PopupMenu_get_item_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PopupMenu_get_item_icon(void * jarg1, int jarg2) {
  void * jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)PopupMenu_get_item_icon(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_get_item_metadata(void * jarg1, int jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  PopupMenu_get_item_metadata(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_accelerator(void * jarg1, int jarg2) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PopupMenu_get_item_accelerator(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT ShortCut* SWIGSTDCALL CSharp_PopupMenu_get_item_shortcut(void * jarg1, int jarg2) {
  ShortCut* jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Ref< ShortCut > result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = PopupMenu_get_item_shortcut(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PopupMenu_get_item_submenu(void * jarg1, int jarg2) {
  void * jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = PopupMenu_get_item_submenu(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_separator(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_separator(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_checkable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_checkable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_checked(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_checked(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_ID(void * jarg1, int jarg2) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PopupMenu_get_item_ID(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_index(void * jarg1, int jarg2) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PopupMenu_get_item_index(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_count(void * jarg1) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  result = (int)PopupMenu_get_item_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_separator(void * jarg1) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  PopupMenu_add_separator(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_remove_item(void * jarg1, int jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  PopupMenu_remove_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_clear(void * jarg1) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  PopupMenu_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PopupPanel() {
  void * jresult ;
  PopupPanel *result = 0 ;
  
  result = (PopupPanel *)memnew(PopupPanel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Portal() {
  void * jresult ;
  Portal *result = 0 ;
  
  result = (Portal *)memnew(Portal());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_shape(void * jarg1, void * jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Portal_set_shape(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Portal_get_shape(void * jarg1) {
  void * jresult ;
  Portal *arg1 = (Portal *) 0 ;
  Vector2Array result;
  
  arg1 = (Portal *)jarg1; 
  result = Portal_get_shape(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_enabled(void * jarg1, unsigned int jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  bool arg2 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Portal_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Portal_is_enabled(void * jarg1) {
  unsigned int jresult ;
  Portal *arg1 = (Portal *) 0 ;
  bool result;
  
  arg1 = (Portal *)jarg1; 
  result = (bool)Portal_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_disable_distance(void * jarg1, float jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  float arg2 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (float)jarg2; 
  Portal_set_disable_distance(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Portal_get_disable_distance(void * jarg1) {
  float jresult ;
  Portal *arg1 = (Portal *) 0 ;
  float result;
  
  arg1 = (Portal *)jarg1; 
  result = (float)Portal_get_disable_distance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_disabled_color(void * jarg1, void * jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Portal_set_disabled_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Portal_get_disabled_color(void * jarg1) {
  void * jresult ;
  Portal *arg1 = (Portal *) 0 ;
  Color result;
  
  arg1 = (Portal *)jarg1; 
  result = Portal_get_disabled_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_connect_range(void * jarg1, float jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  float arg2 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (float)jarg2; 
  Portal_set_connect_range(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Portal_get_connect_range(void * jarg1) {
  float jresult ;
  Portal *arg1 = (Portal *) 0 ;
  float result;
  
  arg1 = (Portal *)jarg1; 
  result = (float)Portal_get_connect_range(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position2D() {
  void * jresult ;
  Position2D *result = 0 ;
  
  result = (Position2D *)memnew(Position2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position3D() {
  void * jresult ;
  Position3D *result = 0 ;
  
  result = (Position3D *)memnew(Position3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProximityGroup() {
  void * jresult ;
  ProximityGroup *result = 0 ;
  
  result = (ProximityGroup *)memnew(ProximityGroup());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_set_group_name(void * jarg1, wchar_t * jarg2) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ProximityGroup_set_group_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_broadcast(void * jarg1, wchar_t * jarg2, void * jarg3) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ProximityGroup_broadcast(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_set_dispatch_mode(void * jarg1, int jarg2) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  int arg2 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  arg2 = (int)jarg2; 
  ProximityGroup_set_dispatch_mode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_set_grid_radius(void * jarg1, void * jarg2) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ProximityGroup_set_grid_radius(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityGroup_get_grid_radius(void * jarg1) {
  void * jresult ;
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  Vector3 result;
  
  arg1 = (ProximityGroup *)jarg1; 
  result = ProximityGroup_get_grid_radius(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quad() {
  void * jresult ;
  Quad *result = 0 ;
  
  result = (Quad *)memnew(Quad());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_axis(void * jarg1, int jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  int arg2 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = (int)jarg2; 
  Quad_set_axis(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Quad_get_axis(void * jarg1) {
  int jresult ;
  Quad *arg1 = (Quad *) 0 ;
  int result;
  
  arg1 = (Quad *)jarg1; 
  result = (int)Quad_get_axis(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_size(void * jarg1, Vector2* jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Quad_set_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Quad_get_size(void * jarg1) {
  Vector2 jresult ;
  Quad *arg1 = (Quad *) 0 ;
  Vector2 result;
  
  arg1 = (Quad *)jarg1; 
  result = Quad_get_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_centered(void * jarg1, unsigned int jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  bool arg2 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Quad_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Quad_is_centered(void * jarg1) {
  unsigned int jresult ;
  Quad *arg1 = (Quad *) 0 ;
  bool result;
  
  arg1 = (Quad *)jarg1; 
  result = (bool)Quad_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_offset(void * jarg1, Vector2* jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Quad_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Quad_get_offset(void * jarg1) {
  Vector2 jresult ;
  Quad *arg1 = (Quad *) 0 ;
  Vector2 result;
  
  arg1 = (Quad *)jarg1; 
  result = Quad_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Range() {
  void * jresult ;
  Range *result = 0 ;
  
  result = (Range *)memnew(Range());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_val(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_val(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_value(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_min(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_min(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_max(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_max(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_step(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_page(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_page(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_unit_value(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_unit_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_val(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_val(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_value(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_value(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_min(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_min(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_max(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_max(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_step(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_step(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_page(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_page(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_unit_value(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_unit_value(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_rounded_values(void * jarg1, unsigned int jarg2) {
  Range *arg1 = (Range *) 0 ;
  bool arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Range_set_rounded_values(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_is_rounded_values(void * jarg1) {
  unsigned int jresult ;
  Range *arg1 = (Range *) 0 ;
  bool result;
  
  arg1 = (Range *)jarg1; 
  result = (bool)Range_is_rounded_values(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_exp_unit_value(void * jarg1, unsigned int jarg2) {
  Range *arg1 = (Range *) 0 ;
  bool arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Range_set_exp_unit_value(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_is_unit_value_exp(void * jarg1) {
  unsigned int jresult ;
  Range *arg1 = (Range *) 0 ;
  bool result;
  
  arg1 = (Range *)jarg1; 
  result = (bool)Range_is_unit_value_exp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_share(void * jarg1, void * jarg2) {
  Range *arg1 = (Range *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (Object *)jarg2; 
  Range_share(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_unshare(void * jarg1) {
  Range *arg1 = (Range *) 0 ;
  
  arg1 = (Range *)jarg1; 
  Range_unshare(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayCast() {
  void * jresult ;
  RayCast *result = 0 ;
  
  result = (RayCast *)memnew(RayCast());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_enabled(void * jarg1, unsigned int jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  bool arg2 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RayCast_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast_is_enabled(void * jarg1) {
  unsigned int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  bool result;
  
  arg1 = (RayCast *)jarg1; 
  result = (bool)RayCast_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_cast_to(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RayCast_set_cast_to(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_cast_to(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 result;
  
  arg1 = (RayCast *)jarg1; 
  result = RayCast_get_cast_to(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast_is_colliding(void * jarg1) {
  unsigned int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  bool result;
  
  arg1 = (RayCast *)jarg1; 
  result = (bool)RayCast_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_collider(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Object *result = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  result = (Object *)RayCast_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast_get_collider_shape(void * jarg1) {
  int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  int result;
  
  arg1 = (RayCast *)jarg1; 
  result = (int)RayCast_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_collision_point(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 result;
  
  arg1 = (RayCast *)jarg1; 
  result = RayCast_get_collision_point(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_collision_normal(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 result;
  
  arg1 = (RayCast *)jarg1; 
  result = RayCast_get_collision_normal(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_add_exception_rid(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast_add_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_add_exception(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast_add_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_remove_exception_rid(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast_remove_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_remove_exception(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast_remove_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_clear_exceptions(void * jarg1) {
  RayCast *arg1 = (RayCast *) 0 ;
  
  arg1 = (RayCast *)jarg1; 
  RayCast_clear_exceptions(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_layer_mask(void * jarg1, int jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast_get_layer_mask(void * jarg1) {
  int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  int result;
  
  arg1 = (RayCast *)jarg1; 
  result = (int)RayCast_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_type_mask(void * jarg1, int jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast_set_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast_get_type_mask(void * jarg1) {
  int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  int result;
  
  arg1 = (RayCast *)jarg1; 
  result = (int)RayCast_get_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayCast2D() {
  void * jresult ;
  RayCast2D *result = 0 ;
  
  result = (RayCast2D *)memnew(RayCast2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_enabled(void * jarg1, unsigned int jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RayCast2D_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast2D_is_enabled(void * jarg1) {
  unsigned int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  bool result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (bool)RayCast2D_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_cast_to(void * jarg1, Vector2* jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RayCast2D_set_cast_to(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_RayCast2D_get_cast_to(void * jarg1) {
  Vector2 jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = RayCast2D_get_cast_to(arg1);
  return result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast2D_is_colliding(void * jarg1) {
  unsigned int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  bool result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (bool)RayCast2D_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast2D_get_collider(void * jarg1) {
  void * jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (Object *)RayCast2D_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast2D_get_collider_shape(void * jarg1) {
  int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (int)RayCast2D_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_RayCast2D_get_collision_point(void * jarg1) {
  Vector2 jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = RayCast2D_get_collision_point(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_RayCast2D_get_collision_normal(void * jarg1) {
  Vector2 jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = RayCast2D_get_collision_normal(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_add_exception_rid(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast2D_add_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_add_exception(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast2D_add_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_remove_exception_rid(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast2D_remove_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_remove_exception(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast2D_remove_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_clear_exceptions(void * jarg1) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  RayCast2D_clear_exceptions(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_layer_mask(void * jarg1, int jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast2D_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast2D_get_layer_mask(void * jarg1) {
  int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (int)RayCast2D_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_type_mask(void * jarg1, int jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast2D_set_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast2D_get_type_mask(void * jarg1) {
  int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (int)RayCast2D_get_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReferenceFrame() {
  void * jresult ;
  ReferenceFrame *result = 0 ;
  
  result = (ReferenceFrame *)memnew(ReferenceFrame());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteTransform2D() {
  void * jresult ;
  RemoteTransform2D *result = 0 ;
  
  result = (RemoteTransform2D *)memnew(RemoteTransform2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteTransform2D_set_remote_node(void * jarg1, void * jarg2) {
  RemoteTransform2D *arg1 = (RemoteTransform2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (RemoteTransform2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  RemoteTransform2D_set_remote_node(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemoteTransform2D_get_remote_node(void * jarg1) {
  void * jresult ;
  RemoteTransform2D *arg1 = (RemoteTransform2D *) 0 ;
  NodePath result;
  
  arg1 = (RemoteTransform2D *)jarg1; 
  result = RemoteTransform2D_get_remote_node(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RichTextLabel() {
  void * jresult ;
  RichTextLabel *result = 0 ;
  
  result = (RichTextLabel *)memnew(RichTextLabel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_add_text(void * jarg1, wchar_t * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  RichTextLabel_add_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_add_image(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Texture *)jarg2; 
  RichTextLabel_add_image(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_newline(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_newline(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_font(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Object *)jarg2; 
  RichTextLabel_push_font(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_color(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  RichTextLabel_push_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_align(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_align(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_indent(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_indent(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_list(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_list(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_meta(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  RichTextLabel_push_meta(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_underline(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_push_underline(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_table(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_table(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_table_column_expand(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  RichTextLabel_set_table_column_expand(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_cell(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_push_cell(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_pop(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_pop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_clear(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_meta_underline(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_meta_underline(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_meta_underlined(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_meta_underlined(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_scroll_active(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_scroll_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_scroll_active(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_scroll_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_scroll_follow(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_scroll_follow(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_scroll_following(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_scroll_following(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RichTextLabel_get_v_scroll(void * jarg1) {
  void * jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Object *result = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (Object *)RichTextLabel_get_v_scroll(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_scroll_to_line(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_scroll_to_line(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_tab_size(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_set_tab_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_get_tab_size(void * jarg1) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (int)RichTextLabel_get_tab_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_selection_enabled(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_selection_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_selection_enabled(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_selection_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_parse_bbcode(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RichTextLabel_parse_bbcode(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_append_bbcode(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RichTextLabel_append_bbcode(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_bbcode(void * jarg1, wchar_t * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  RichTextLabel_set_bbcode(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RichTextLabel_get_bbcode(void * jarg1) {
  void * jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = RichTextLabel_get_bbcode(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_visible_characters(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_set_visible_characters(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_get_visible_characters(void * jarg1) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (int)RichTextLabel_get_visible_characters(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_get_total_character_count(void * jarg1) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (int)RichTextLabel_get_total_character_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_use_bbcode(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_use_bbcode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_using_bbcode(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_using_bbcode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidBody() {
  void * jresult ;
  RigidBody *result = 0 ;
  
  result = (RigidBody *)memnew(RigidBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody__integrate_forces(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  PhysicsDirectBodyState *arg2 = (PhysicsDirectBodyState *) 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (PhysicsDirectBodyState *)jarg2; 
  RigidBody__integrate_forces(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_mode(void * jarg1, int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody_get_mode(void * jarg1) {
  int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  int result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (int)RigidBody_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_mass(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_mass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_mass(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_weight(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_weight(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_weight(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_weight(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_friction(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_friction(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_bounce(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_bounce(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_linear_velocity(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_set_linear_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody_get_linear_velocity(void * jarg1) {
  void * jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 result;
  
  arg1 = (RigidBody *)jarg1; 
  result = RigidBody_get_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_angular_velocity(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_set_angular_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody_get_angular_velocity(void * jarg1) {
  void * jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 result;
  
  arg1 = (RigidBody *)jarg1; 
  result = RigidBody_get_angular_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_gravity_scale(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_gravity_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_gravity_scale(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_gravity_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_linear_damp(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_linear_damp(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_angular_damp(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_angular_damp(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_max_contacts_reported(void * jarg1, int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody_set_max_contacts_reported(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody_get_max_contacts_reported(void * jarg1) {
  int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  int result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (int)RigidBody_get_max_contacts_reported(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_use_custom_integrator(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_use_custom_integrator(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_using_custom_integrator(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_using_custom_integrator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_contact_monitor(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_contact_monitor(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_contact_monitor_enabled(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_contact_monitor_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_use_continuous_collision_detection(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_use_continuous_collision_detection(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_using_continuous_collision_detection(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_using_continuous_collision_detection(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_axis_velocity(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_set_axis_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_apply_impulse(void * jarg1, void * jarg2, void * jarg3) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_apply_impulse(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_sleeping(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_sleeping(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_can_sleep(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_can_sleep(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_able_to_sleep(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_able_to_sleep(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_axis_lock(void * jarg1, int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody_set_axis_lock(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody_get_axis_lock(void * jarg1) {
  int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  int result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (int)RigidBody_get_axis_lock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody_get_colliding_bodies(void * jarg1) {
  void * jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  Array result;
  
  arg1 = (RigidBody *)jarg1; 
  result = RigidBody_get_colliding_bodies(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Room() {
  void * jresult ;
  Room *result = 0 ;
  
  result = (Room *)memnew(Room());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_set_room(void * jarg1, void * jarg2) {
  Room *arg1 = (Room *) 0 ;
  Room *arg2 = (Room *) 0 ;
  
  arg1 = (Room *)jarg1; 
  arg2 = (Room *)jarg2; 
  Room_set_room(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Room_get_room(void * jarg1) {
  void * jresult ;
  Room *arg1 = (Room *) 0 ;
  Room *result = 0 ;
  
  arg1 = (Room *)jarg1; 
  result = (Room *)Room_get_room(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_compute_room_from_subtree(void * jarg1) {
  Room *arg1 = (Room *) 0 ;
  
  arg1 = (Room *)jarg1; 
  Room_compute_room_from_subtree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_set_simulate_acoustics(void * jarg1, unsigned int jarg2) {
  Room *arg1 = (Room *) 0 ;
  bool arg2 ;
  
  arg1 = (Room *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Room_set_simulate_acoustics(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Room_is_simulating_acoustics(void * jarg1) {
  unsigned int jresult ;
  Room *arg1 = (Room *) 0 ;
  bool result;
  
  arg1 = (Room *)jarg1; 
  result = (bool)Room_is_simulating_acoustics(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollBar_set_custom_step(void * jarg1, float jarg2) {
  ScrollBar *arg1 = (ScrollBar *) 0 ;
  float arg2 ;
  
  arg1 = (ScrollBar *)jarg1; 
  arg2 = (float)jarg2; 
  ScrollBar_set_custom_step(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ScrollBar_get_custom_step(void * jarg1) {
  float jresult ;
  ScrollBar *arg1 = (ScrollBar *) 0 ;
  float result;
  
  arg1 = (ScrollBar *)jarg1; 
  result = (float)ScrollBar_get_custom_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Skeleton() {
  void * jresult ;
  Skeleton *result = 0 ;
  
  result = (Skeleton *)memnew(Skeleton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_add_bone(void * jarg1, wchar_t * jarg2) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Skeleton_add_bone(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_find_bone(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Skeleton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Skeleton_find_bone(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_name(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_get_bone_parent(void * jarg1, int jarg2) {
  int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Skeleton_get_bone_parent(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_parent(void * jarg1, int jarg2, int jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Skeleton_set_bone_parent(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_get_bone_count(void * jarg1) {
  int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int result;
  
  arg1 = (Skeleton *)jarg1; 
  result = (int)Skeleton_get_bone_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_unparent_bone_and_rest(void * jarg1, int jarg2) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  Skeleton_unparent_bone_and_rest(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_rest(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_rest(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_rest(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_rest(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_disable_rest(void * jarg1, int jarg2, unsigned int jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Skeleton_set_bone_disable_rest(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Skeleton_is_bone_rest_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Skeleton_is_bone_rest_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_bind_child_node_to_bone(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Node *arg3 = (Node *) 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3; 
  Skeleton_bind_child_node_to_bone(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_unbind_child_node_from_bone(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Node *arg3 = (Node *) 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3; 
  Skeleton_unbind_child_node_from_bone(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bound_child_nodes_to_bone(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bound_child_nodes_to_bone(arg1,arg2);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_clear_bones(void * jarg1) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  Skeleton_clear_bones(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_pose(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_pose(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_pose(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_pose(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_global_pose(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_global_pose(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_global_pose(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_global_pose(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_custom_pose(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_custom_pose(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_custom_pose(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_custom_pose(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_transform(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_transform(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Slider_set_ticks(void * jarg1, int jarg2) {
  Slider *arg1 = (Slider *) 0 ;
  int arg2 ;
  
  arg1 = (Slider *)jarg1; 
  arg2 = (int)jarg2; 
  Slider_set_ticks(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Slider_get_ticks(void * jarg1) {
  int jresult ;
  Slider *arg1 = (Slider *) 0 ;
  int result;
  
  arg1 = (Slider *)jarg1; 
  result = (int)Slider_get_ticks(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Slider_get_ticks_on_borders(void * jarg1) {
  unsigned int jresult ;
  Slider *arg1 = (Slider *) 0 ;
  bool result;
  
  arg1 = (Slider *)jarg1; 
  result = (bool)Slider_get_ticks_on_borders(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Slider_set_ticks_on_borders(void * jarg1, unsigned int jarg2) {
  Slider *arg1 = (Slider *) 0 ;
  bool arg2 ;
  
  arg1 = (Slider *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Slider_set_ticks_on_borders(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SliderJoint() {
  void * jresult ;
  SliderJoint *result = 0 ;
  
  result = (SliderJoint *)memnew(SliderJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SliderJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  SliderJoint *arg1 = (SliderJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SliderJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SliderJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SliderJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SliderJoint *arg1 = (SliderJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SliderJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SliderJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundPlayer2D_set_param(void * jarg1, int jarg2, float jarg3) {
  SoundPlayer2D *arg1 = (SoundPlayer2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SoundPlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SoundPlayer2D_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundPlayer2D_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SoundPlayer2D *arg1 = (SoundPlayer2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SoundPlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SoundPlayer2D_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpinBox() {
  void * jresult ;
  SpinBox *result = 0 ;
  
  result = (SpinBox *)memnew(SpinBox());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpinBox_set_suffix(void * jarg1, wchar_t * jarg2) {
  SpinBox *arg1 = (SpinBox *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpinBox *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpinBox_set_suffix(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpinBox_get_suffix(void * jarg1) {
  void * jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  String result;
  
  arg1 = (SpinBox *)jarg1; 
  result = SpinBox_get_suffix(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpinBox_set_prefix(void * jarg1, wchar_t * jarg2) {
  SpinBox *arg1 = (SpinBox *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpinBox *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpinBox_set_prefix(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpinBox_get_prefix(void * jarg1) {
  void * jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  String result;
  
  arg1 = (SpinBox *)jarg1; 
  result = SpinBox_get_prefix(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpinBox_set_editable(void * jarg1, unsigned int jarg2) {
  SpinBox *arg1 = (SpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = (SpinBox *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpinBox_set_editable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpinBox_is_editable(void * jarg1) {
  unsigned int jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  bool result;
  
  arg1 = (SpinBox *)jarg1; 
  result = (bool)SpinBox_is_editable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpinBox_get_line_edit(void * jarg1) {
  void * jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  Object *result = 0 ;
  
  arg1 = (SpinBox *)jarg1; 
  result = (Object *)SpinBox_get_line_edit(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpotLight() {
  void * jresult ;
  SpotLight *result = 0 ;
  
  result = (SpotLight *)memnew(SpotLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sprite() {
  void * jresult ;
  Sprite *result = 0 ;
  
  result = (Sprite *)memnew(Sprite());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_texture(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Texture *)jarg2; 
  Sprite_set_texture(arg1,arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Sprite_get_texture(void * jarg1) {
  Texture* jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Ref< Texture > result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_centered(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_centered(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_offset(void * jarg1, Vector2* jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Sprite_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Sprite_get_offset(void * jarg1) {
  Vector2 jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_flip_h(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_flip_v(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_region(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_region(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_region(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_region(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_region_rect(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Sprite_set_region_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_get_region_rect(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Rect2 result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_region_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_frame(void * jarg1, int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite_get_frame(void * jarg1) {
  int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  int result;
  
  arg1 = (Sprite *)jarg1; 
  result = (int)Sprite_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_vframes(void * jarg1, int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite_set_vframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite_get_vframes(void * jarg1) {
  int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  int result;
  
  arg1 = (Sprite *)jarg1; 
  result = (int)Sprite_get_vframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_hframes(void * jarg1, int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite_set_hframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite_get_hframes(void * jarg1) {
  int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  int result;
  
  arg1 = (Sprite *)jarg1; 
  result = (int)Sprite_get_hframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_modulate(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Sprite_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_get_modulate(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Color result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_centered(void * jarg1, unsigned int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpriteBase3D_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_is_centered(void * jarg1) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (bool)SpriteBase3D_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_offset(void * jarg1, Vector2* jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SpriteBase3D_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_SpriteBase3D_get_offset(void * jarg1) {
  Vector2 jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Vector2 result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = SpriteBase3D_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_flip_h(void * jarg1, unsigned int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpriteBase3D_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (bool)SpriteBase3D_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_flip_v(void * jarg1, unsigned int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpriteBase3D_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (bool)SpriteBase3D_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_modulate(void * jarg1, void * jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  SpriteBase3D_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteBase3D_get_modulate(void * jarg1) {
  void * jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Color result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = SpriteBase3D_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_opacity(void * jarg1, float jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (float)jarg2; 
  SpriteBase3D_set_opacity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpriteBase3D_get_opacity(void * jarg1) {
  float jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (float)SpriteBase3D_get_opacity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_pixel_size(void * jarg1, float jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (float)jarg2; 
  SpriteBase3D_set_pixel_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpriteBase3D_get_pixel_size(void * jarg1) {
  float jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (float)SpriteBase3D_get_pixel_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_axis(void * jarg1, int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  SpriteBase3D_set_axis(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpriteBase3D_get_axis(void * jarg1) {
  int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (int)SpriteBase3D_get_axis(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_draw_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  SpriteBase3D_set_draw_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_get_draw_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SpriteBase3D_get_draw_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_alpha_cut_mode(void * jarg1, int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  SpriteBase3D_set_alpha_cut_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpriteBase3D_get_alpha_cut_mode(void * jarg1) {
  int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (int)SpriteBase3D_get_alpha_cut_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteBase3D_get_item_rect(void * jarg1) {
  void * jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Rect2 result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = SpriteBase3D_get_item_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StaticBody() {
  void * jresult ;
  StaticBody *result = 0 ;
  
  result = (StaticBody *)memnew(StaticBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_constant_linear_velocity(void * jarg1, void * jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  StaticBody_set_constant_linear_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_constant_angular_velocity(void * jarg1, void * jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  StaticBody_set_constant_angular_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticBody_get_constant_linear_velocity(void * jarg1) {
  void * jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 result;
  
  arg1 = (StaticBody *)jarg1; 
  result = StaticBody_get_constant_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticBody_get_constant_angular_velocity(void * jarg1) {
  void * jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 result;
  
  arg1 = (StaticBody *)jarg1; 
  result = StaticBody_get_constant_angular_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_friction(void * jarg1, float jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody_get_friction(void * jarg1) {
  float jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  float result;
  
  arg1 = (StaticBody *)jarg1; 
  result = (float)StaticBody_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_bounce(void * jarg1, float jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody_get_bounce(void * jarg1) {
  float jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  float result;
  
  arg1 = (StaticBody *)jarg1; 
  result = (float)StaticBody_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TabContainer() {
  void * jresult ;
  TabContainer *result = 0 ;
  
  result = (TabContainer *)memnew(TabContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TabContainer_get_tab_count(void * jarg1) {
  int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (int)TabContainer_get_tab_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_current_tab(void * jarg1, int jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  TabContainer_set_current_tab(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TabContainer_get_current_tab(void * jarg1) {
  int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (int)TabContainer_get_current_tab(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_current_tab_control(void * jarg1) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  Control *result = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  result = (Control *)TabContainer_get_current_tab_control(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_tab_control(void * jarg1, int jarg2) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  Control *result = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Control *)TabContainer_get_tab_control(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tab_align(void * jarg1, int jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  TabContainer_set_tab_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TabContainer_get_tab_align(void * jarg1) {
  int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (int)TabContainer_get_tab_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tabs_visible(void * jarg1, unsigned int jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TabContainer_set_tabs_visible(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TabContainer_are_tabs_visible(void * jarg1) {
  unsigned int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  bool result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (bool)TabContainer_are_tabs_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tab_title(void * jarg1, int jarg2, wchar_t * jarg3) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TabContainer_set_tab_title(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_tab_title(void * jarg1, int jarg2) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = TabContainer_get_tab_title(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tab_icon(void * jarg1, int jarg2, void * jarg3) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  TabContainer_set_tab_icon(arg1,arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TabContainer_get_tab_icon(void * jarg1, int jarg2) {
  Texture* jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = TabContainer_get_tab_icon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_popup(void * jarg1, void * jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  Popup *arg2 = (Popup *) 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (Popup *)jarg2; 
  TabContainer_set_popup(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_popup(void * jarg1) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  Popup *result = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  result = (Popup *)TabContainer_get_popup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tabs() {
  void * jresult ;
  Tabs *result = 0 ;
  
  result = (Tabs *)memnew(Tabs());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tabs_get_tab_count(void * jarg1) {
  int jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int result;
  
  arg1 = (Tabs *)jarg1; 
  result = (int)Tabs_get_tab_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_current_tab(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_set_current_tab(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tabs_get_current_tab(void * jarg1) {
  int jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int result;
  
  arg1 = (Tabs *)jarg1; 
  result = (int)Tabs_get_current_tab(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_tab_title(void * jarg1, int jarg2, wchar_t * jarg3) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Tabs_set_tab_title(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tabs_get_tab_title(void * jarg1, int jarg2) {
  void * jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  result = Tabs_get_tab_title(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_tab_icon(void * jarg1, int jarg2, void * jarg3) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  Tabs_set_tab_icon(arg1,arg2,arg3);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Tabs_get_tab_icon(void * jarg1, int jarg2) {
  Texture* jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  result = Tabs_get_tab_icon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_remove_tab(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_remove_tab(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_add_tab(void * jarg1, wchar_t * jarg2, void * jarg3) {
  Tabs *arg1 = (Tabs *) 0 ;
  String *arg2 = 0 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (Tabs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Texture *)jarg3; 
  Tabs_add_tab(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_tab_align(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_set_tab_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tabs_get_tab_align(void * jarg1) {
  int jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int result;
  
  arg1 = (Tabs *)jarg1; 
  result = (int)Tabs_get_tab_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_ensure_tab_visible(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_ensure_tab_visible(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TestCube() {
  void * jresult ;
  TestCube *result = 0 ;
  
  result = (TestCube *)memnew(TestCube());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextEdit() {
  void * jresult ;
  TextEdit *result = 0 ;
  
  result = (TextEdit *)memnew(TextEdit());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_text(void * jarg1, wchar_t * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TextEdit_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_insert_text_at_cursor(void * jarg1, wchar_t * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TextEdit_insert_text_at_cursor(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_line_count(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_line_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_text(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  result = TextEdit_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_line(void * jarg1, int jarg2) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  result = TextEdit_get_line(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_column__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TextEdit_cursor_set_column__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_column__SWIG_1(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_cursor_set_column__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_line__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TextEdit_cursor_set_line__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_line__SWIG_1(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_cursor_set_line__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_cursor_get_column(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_cursor_get_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_cursor_get_line(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_cursor_get_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_blink_enabled(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_cursor_set_blink_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextEdit_cursor_get_blink_enabled(void * jarg1) {
  unsigned int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (bool)TextEdit_cursor_get_blink_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_blink_speed(void * jarg1, float jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  float arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (float)jarg2; 
  TextEdit_cursor_set_blink_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TextEdit_cursor_get_blink_speed(void * jarg1) {
  float jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  float result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (float)TextEdit_cursor_get_blink_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_readonly(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_set_readonly(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_wrap(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_set_wrap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_max_chars(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_set_max_chars(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cut(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_cut(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_copy(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_copy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_paste(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_paste(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_select_all(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_select_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_select(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  TextEdit_select(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextEdit_is_selection_active(void * jarg1) {
  unsigned int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (bool)TextEdit_is_selection_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_from_line(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_from_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_from_column(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_from_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_to_line(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_to_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_to_column(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_to_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_selection_text(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  result = TextEdit_get_selection_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_word_under_cursor(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  result = TextEdit_get_word_under_cursor(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_search(void * jarg1, wchar_t * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  IntArray result;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = TextEdit_search(arg1,(String const &)*arg2,arg3,arg4,arg5);
  jresult = memnew(IntArray((const IntArray &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_undo(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_undo(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_redo(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_redo(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_clear_undo_history(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_clear_undo_history(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_syntax_coloring(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_set_syntax_coloring(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextEdit_is_syntax_coloring_enabled(void * jarg1) {
  unsigned int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (bool)TextEdit_is_syntax_coloring_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_add_keyword_color(void * jarg1, wchar_t * jarg2, void * jarg3) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_add_keyword_color(arg1,(String const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_add_color_region__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4, unsigned int jarg5) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  TextEdit_add_color_region__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(Color const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_add_color_region__SWIG_1(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, void * jarg4) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_add_color_region__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_symbol_color(void * jarg1, void * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_set_symbol_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_custom_bg_color(void * jarg1, void * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_set_custom_bg_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_clear_colors(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_clear_colors(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_menu_option(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_menu_option(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_menu(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  PopupMenu *result = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  result = (PopupMenu *)TextEdit_get_menu(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureFrame() {
  void * jresult ;
  TextureFrame *result = 0 ;
  
  result = (TextureFrame *)memnew(TextureFrame());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_texture(void * jarg1, void * jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureFrame_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureFrame_get_texture(void * jarg1) {
  void * jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureFrame *)jarg1; 
  result = (Object *)TextureFrame_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_modulate(void * jarg1, void * jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextureFrame_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureFrame_get_modulate(void * jarg1) {
  void * jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Color result;
  
  arg1 = (TextureFrame *)jarg1; 
  result = TextureFrame_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_expand(void * jarg1, unsigned int jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  bool arg2 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextureFrame_set_expand(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureFrame_has_expand(void * jarg1) {
  unsigned int jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  bool result;
  
  arg1 = (TextureFrame *)jarg1; 
  result = (bool)TextureFrame_has_expand(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_stretch_mode(void * jarg1, int jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  int arg2 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = (int)jarg2; 
  TextureFrame_set_stretch_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextureFrame_get_stretch_mode(void * jarg1) {
  int jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  int result;
  
  arg1 = (TextureFrame *)jarg1; 
  result = (int)TextureFrame_get_stretch_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureProgress() {
  void * jresult ;
  TextureProgress *result = 0 ;
  
  result = (TextureProgress *)memnew(TextureProgress());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_under_texture(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureProgress_set_under_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_under_texture(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (Object *)TextureProgress_get_under_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_progress_texture(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureProgress_set_progress_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_progress_texture(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (Object *)TextureProgress_get_progress_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_over_texture(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureProgress_set_over_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_over_texture(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (Object *)TextureProgress_get_over_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_fill_mode(void * jarg1, int jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  int arg2 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (int)jarg2; 
  TextureProgress_set_fill_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextureProgress_get_fill_mode(void * jarg1) {
  int jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  int result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (int)TextureProgress_get_fill_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_radial_initial_angle(void * jarg1, float jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float arg2 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (float)jarg2; 
  TextureProgress_set_radial_initial_angle(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TextureProgress_get_radial_initial_angle(void * jarg1) {
  float jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (float)TextureProgress_get_radial_initial_angle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_radial_center_offset(void * jarg1, Vector2* jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TextureProgress_set_radial_center_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TextureProgress_get_radial_center_offset(void * jarg1) {
  Vector2 jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Vector2 result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = TextureProgress_get_radial_center_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_fill_degrees(void * jarg1, float jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float arg2 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (float)jarg2; 
  TextureProgress_set_fill_degrees(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TextureProgress_get_fill_degrees(void * jarg1) {
  float jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (float)TextureProgress_get_fill_degrees(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TileMap() {
  void * jresult ;
  TileMap *result = 0 ;
  
  result = (TileMap *)memnew(TileMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_tileset(void * jarg1, void * jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  TileSet *arg2 = (TileSet *) 0 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (TileSet *)jarg2; 
  TileMap_set_tileset(arg1,arg2);
}


SWIGEXPORT TileSet* SWIGSTDCALL CSharp_TileMap_get_tileset(void * jarg1) {
  TileSet* jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Ref< TileSet > result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_tileset(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_mode(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_mode(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_half_offset(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_half_offset(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_half_offset(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_half_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_custom_transform(void * jarg1, void * jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  TileMap_set_custom_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_get_custom_transform(void * jarg1) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Matrix32 result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_custom_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell_size(void * jarg1, Vector2* jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileMap_set_cell_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileMap_get_cell_size(void * jarg1) {
  Vector2 jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_cell_size(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_quadrant_size(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_quadrant_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_quadrant_size(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_quadrant_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_tile_origin(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_tile_origin(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_tile_origin(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_tile_origin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_center_x(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_center_x(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_get_center_x(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_get_center_x(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_center_y(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_center_y(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_get_center_y(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_get_center_y(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_y_sort_mode(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_y_sort_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_y_sort_mode_enabled(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_is_y_sort_mode_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_use_kinematic(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_collision_use_kinematic(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_get_collision_use_kinematic(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_get_collision_use_kinematic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_layer(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_collision_layer(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_collision_layer(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_collision_layer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_mask(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_collision_mask(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_friction(void * jarg1, float jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  float arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (float)jarg2; 
  TileMap_set_collision_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TileMap_get_collision_friction(void * jarg1) {
  float jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  float result;
  
  arg1 = (TileMap *)jarg1; 
  result = (float)TileMap_get_collision_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_bounce(void * jarg1, float jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  float arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (float)jarg2; 
  TileMap_set_collision_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TileMap_get_collision_bounce(void * jarg1) {
  float jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  float result;
  
  arg1 = (TileMap *)jarg1; 
  result = (float)TileMap_get_collision_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_occluder_light_mask(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_occluder_light_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_occluder_light_mask(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_occluder_light_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_0(void * jarg1, Vector2* jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_1(void * jarg1, Vector2* jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_2(void * jarg1, Vector2* jarg2, int jarg3, unsigned int jarg4) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_3(void * jarg1, Vector2* jarg2, int jarg3) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_cell(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)TileMap_get_cell(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_cellv(void * jarg1, Vector2* jarg2) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)TileMap_get_cellv(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_cell_x_flipped(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TileMap_is_cell_x_flipped(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_cell_y_flipped(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TileMap_is_cell_y_flipped(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_cell_transposed(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TileMap_is_cell_transposed(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_clear(void * jarg1) {
  TileMap *arg1 = (TileMap *) 0 ;
  
  arg1 = (TileMap *)jarg1; 
  TileMap_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_get_used_cells(void * jarg1) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Array result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_used_cells(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileMap_map_to_world__SWIG_0(void * jarg1, Vector2* jarg2, unsigned int jarg3) {
  Vector2 jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  arg3 = jarg3 ? true : false; 
  result = TileMap_map_to_world__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileMap_map_to_world__SWIG_1(void * jarg1, Vector2* jarg2) {
  Vector2 jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  result = TileMap_map_to_world__SWIG_0(arg1,(Vector2 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TileMap_world_to_map(void * jarg1, Vector2* jarg2) {
  Vector2 jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  result = TileMap_world_to_map(arg1,(Vector2 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TouchScreenButton() {
  void * jresult ;
  TouchScreenButton *result = 0 ;
  
  result = (TouchScreenButton *)memnew(TouchScreenButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_texture(void * jarg1, void * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  TouchScreenButton_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_texture(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (Object *)TouchScreenButton_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_texture_pressed(void * jarg1, void * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  TouchScreenButton_set_texture_pressed(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_texture_pressed(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (Object *)TouchScreenButton_get_texture_pressed(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_bitmask(void * jarg1, void * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  TouchScreenButton_set_bitmask(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_bitmask(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (Object *)TouchScreenButton_get_bitmask(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_action(void * jarg1, wchar_t * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TouchScreenButton_set_action(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_action(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  String result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = TouchScreenButton_get_action(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_visibility_mode(void * jarg1, int jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  int arg2 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (int)jarg2; 
  TouchScreenButton_set_visibility_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TouchScreenButton_get_visibility_mode(void * jarg1) {
  int jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  int result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (int)TouchScreenButton_get_visibility_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_passby_press(void * jarg1, unsigned int jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  bool arg2 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TouchScreenButton_set_passby_press(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TouchScreenButton_is_passby_press_enabled(void * jarg1) {
  unsigned int jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  bool result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (bool)TouchScreenButton_is_passby_press_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TouchScreenButton_is_pressed(void * jarg1) {
  unsigned int jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  bool result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (bool)TouchScreenButton_is_pressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tree() {
  void * jresult ;
  Tree *result = 0 ;
  
  result = (Tree *)memnew(Tree());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_clear(void * jarg1) {
  Tree *arg1 = (Tree *) 0 ;
  
  arg1 = (Tree *)jarg1; 
  Tree_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_create_item__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  result = (TreeItem *)Tree_create_item__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_create_item__SWIG_1(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_create_item__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_root(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_get_root(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_min_width(void * jarg1, int jarg2, int jarg3) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Tree_set_column_min_width(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_expand(void * jarg1, int jarg2, unsigned int jarg3) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Tree_set_column_expand(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_column_width(void * jarg1, int jarg2) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Tree_get_column_width(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_hide_root(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_hide_root(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_next_selected(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  result = (TreeItem *)Tree_get_next_selected(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_selected(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_get_selected(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_selected_column(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_selected_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_pressed_button(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_pressed_button(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_select_mode(void * jarg1, int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  Tree_set_select_mode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_columns(void * jarg1, int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  Tree_set_columns(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_columns(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_edited(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_get_edited(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_edited_column(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_edited_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_custom_popup_rect(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Rect2 result;
  
  arg1 = (Tree *)jarg1; 
  result = Tree_get_custom_popup_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_item_area_rect__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  int arg3 ;
  Rect2 result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  arg3 = (int)jarg3; 
  result = Tree_get_item_area_rect__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_item_area_rect__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  Rect2 result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  result = Tree_get_item_area_rect__SWIG_0(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_item_at_pos(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Vector2 *arg2 = 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (TreeItem *)Tree_get_item_at_pos(arg1,(Vector2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_column_at_pos(void * jarg1, Vector2* jarg2) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)Tree_get_column_at_pos(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_ensure_cursor_is_visible(void * jarg1) {
  Tree *arg1 = (Tree *) 0 ;
  
  arg1 = (Tree *)jarg1; 
  Tree_ensure_cursor_is_visible(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_titles_visible(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_column_titles_visible(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_are_column_titles_visible(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_are_column_titles_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_title(void * jarg1, int jarg2, wchar_t * jarg3) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Tree_set_column_title(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_column_title(void * jarg1, int jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  result = Tree_get_column_title(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Tree_get_scroll(void * jarg1) {
  Vector2 jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Vector2 result;
  
  arg1 = (Tree *)jarg1; 
  result = Tree_get_scroll(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_hide_folding(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_hide_folding(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_is_folding_hidden(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_is_folding_hidden(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_drop_mode_flags(void * jarg1, int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  Tree_set_drop_mode_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_drop_mode_flags(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_drop_mode_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_allow_rmb_select(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_allow_rmb_select(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_get_allow_rmb_select(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_get_allow_rmb_select(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_single_select_cell_editing_only_when_already_selected(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_single_select_cell_editing_only_when_already_selected(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_get_single_select_cell_editing_only_when_already_selected(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_get_single_select_cell_editing_only_when_already_selected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VScrollBar() {
  void * jresult ;
  VScrollBar *result = 0 ;
  
  result = (VScrollBar *)memnew(VScrollBar());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VSeparator() {
  void * jresult ;
  VSeparator *result = 0 ;
  
  result = (VSeparator *)memnew(VSeparator());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VSlider() {
  void * jresult ;
  VSlider *result = 0 ;
  
  result = (VSlider *)memnew(VSlider());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VehicleBody() {
  void * jresult ;
  VehicleBody *result = 0 ;
  
  result = (VehicleBody *)memnew(VehicleBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_mass(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_mass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_mass(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_friction(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_friction(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_engine_force(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_engine_force(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_engine_force(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_engine_force(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_brake(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_brake(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_brake(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_brake(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_steering(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_steering(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_steering(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_steering(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VehicleBody_get_linear_velocity(void * jarg1) {
  void * jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  Vector3 result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = VehicleBody_get_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoPlayer() {
  void * jresult ;
  VideoPlayer *result = 0 ;
  
  result = (VideoPlayer *)memnew(VideoPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_stream(void * jarg1, void * jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  VideoStream *arg2 = (VideoStream *) 0 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (VideoStream *)jarg2; 
  VideoPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT VideoStream* SWIGSTDCALL CSharp_VideoPlayer_get_stream(void * jarg1) {
  VideoStream* jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  Ref< VideoStream > result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = VideoPlayer_get_stream(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_play(void * jarg1) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  VideoPlayer_play(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_stop(void * jarg1) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  VideoPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VideoPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_volume(void * jarg1, float jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  VideoPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VideoPlayer_get_volume(void * jarg1) {
  float jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (float)VideoPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_volume_db(void * jarg1, float jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  VideoPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VideoPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (float)VideoPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_audio_track(void * jarg1, int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  VideoPlayer_set_audio_track(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoPlayer_get_audio_track(void * jarg1) {
  int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (int)VideoPlayer_get_audio_track(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  String result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = VideoPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VideoPlayer_get_stream_pos(void * jarg1) {
  float jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (float)VideoPlayer_get_stream_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VideoPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_expand(void * jarg1, unsigned int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VideoPlayer_set_expand(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_has_expand(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_has_expand(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_buffering_msec(void * jarg1, int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  VideoPlayer_set_buffering_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoPlayer_get_buffering_msec(void * jarg1) {
  int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (int)VideoPlayer_get_buffering_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_VideoPlayer_get_video_texture(void * jarg1) {
  Texture* jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  Ref< Texture > result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = VideoPlayer_get_video_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewportSprite() {
  void * jresult ;
  ViewportSprite *result = 0 ;
  
  result = (ViewportSprite *)memnew(ViewportSprite());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_viewport_path(void * jarg1, void * jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  ViewportSprite_set_viewport_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSprite_get_viewport_path(void * jarg1) {
  void * jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  NodePath result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = ViewportSprite_get_viewport_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_centered(void * jarg1, unsigned int jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ViewportSprite_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSprite_is_centered(void * jarg1) {
  unsigned int jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  bool result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = (bool)ViewportSprite_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_offset(void * jarg1, Vector2* jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ViewportSprite_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_ViewportSprite_get_offset(void * jarg1) {
  Vector2 jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Vector2 result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = ViewportSprite_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_modulate(void * jarg1, void * jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ViewportSprite_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSprite_get_modulate(void * jarg1) {
  void * jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Color result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = ViewportSprite_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityEnabler() {
  void * jresult ;
  VisibilityEnabler *result = 0 ;
  
  result = (VisibilityEnabler *)memnew(VisibilityEnabler());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityEnabler_set_enabler(void * jarg1, int jarg2, unsigned int jarg3) {
  VisibilityEnabler *arg1 = (VisibilityEnabler *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (VisibilityEnabler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  VisibilityEnabler_set_enabler(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityEnabler_is_enabler_enabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VisibilityEnabler *arg1 = (VisibilityEnabler *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (VisibilityEnabler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)VisibilityEnabler_is_enabler_enabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityNotifier2D() {
  void * jresult ;
  VisibilityNotifier2D *result = 0 ;
  
  result = (VisibilityNotifier2D *)memnew(VisibilityNotifier2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityNotifier2D_set_rect(void * jarg1, void * jarg2) {
  VisibilityNotifier2D *arg1 = (VisibilityNotifier2D *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (VisibilityNotifier2D *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisibilityNotifier2D_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisibilityNotifier2D_get_rect(void * jarg1) {
  void * jresult ;
  VisibilityNotifier2D *arg1 = (VisibilityNotifier2D *) 0 ;
  Rect2 result;
  
  arg1 = (VisibilityNotifier2D *)jarg1; 
  result = VisibilityNotifier2D_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityNotifier2D_is_on_screen(void * jarg1) {
  unsigned int jresult ;
  VisibilityNotifier2D *arg1 = (VisibilityNotifier2D *) 0 ;
  bool result;
  
  arg1 = (VisibilityNotifier2D *)jarg1; 
  result = (bool)VisibilityNotifier2D_is_on_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WindowDialog() {
  void * jresult ;
  WindowDialog *result = 0 ;
  
  result = (WindowDialog *)memnew(WindowDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WindowDialog_set_title(void * jarg1, wchar_t * jarg2) {
  WindowDialog *arg1 = (WindowDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (WindowDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  WindowDialog_set_title(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WindowDialog_get_title(void * jarg1) {
  void * jresult ;
  WindowDialog *arg1 = (WindowDialog *) 0 ;
  String result;
  
  arg1 = (WindowDialog *)jarg1; 
  result = WindowDialog_get_title(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WindowDialog_get_close_button(void * jarg1) {
  void * jresult ;
  WindowDialog *arg1 = (WindowDialog *) 0 ;
  TextureButton *result = 0 ;
  
  arg1 = (WindowDialog *)jarg1; 
  result = (TextureButton *)WindowDialog_get_close_button(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_YSort() {
  void * jresult ;
  YSort *result = 0 ;
  
  result = (YSort *)memnew(YSort());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_YSort_set_sort_enabled(void * jarg1, unsigned int jarg2) {
  YSort *arg1 = (YSort *) 0 ;
  bool arg2 ;
  
  arg1 = (YSort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  YSort_set_sort_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_YSort_is_sort_enabled(void * jarg1) {
  unsigned int jresult ;
  YSort *arg1 = (YSort *) 0 ;
  bool result;
  
  arg1 = (YSort *)jarg1; 
  result = (bool)YSort_is_sort_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AcceptDialog() {
  void * jresult ;
  AcceptDialog *result = 0 ;
  
  result = (AcceptDialog *)memnew(AcceptDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_get_ok(void * jarg1) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  Object *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = (Object *)AcceptDialog_get_ok(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_get_label(void * jarg1) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  Object *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = (Object *)AcceptDialog_get_label(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AcceptDialog_set_hide_on_ok(void * jarg1, unsigned int jarg2) {
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AcceptDialog_set_hide_on_ok(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AcceptDialog_get_hide_on_ok(void * jarg1) {
  unsigned int jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  bool result;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = (bool)AcceptDialog_get_hide_on_ok(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_button__SWIG_0(void * jarg1, wchar_t * jarg2, unsigned int jarg3, wchar_t * jarg4) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  String *arg4 = 0 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (Button *)AcceptDialog_add_button__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_button__SWIG_1(void * jarg1, wchar_t * jarg2, unsigned int jarg3) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (Button *)AcceptDialog_add_button__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_button__SWIG_2(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Button *)AcceptDialog_add_button__SWIG_0(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_cancel(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Button *)AcceptDialog_add_cancel(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_register_text_enter(void * jarg1, void * jarg2) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  Object *arg2 = (Object *) 0 ;
  LineEdit *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (LineEdit *)AcceptDialog_register_text_enter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AcceptDialog_set_text(void * jarg1, wchar_t * jarg2) {
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AcceptDialog_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_get_text(void * jarg1) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String result;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = AcceptDialog_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimatedSprite() {
  void * jresult ;
  AnimatedSprite *result = 0 ;
  
  result = (AnimatedSprite *)memnew(AnimatedSprite());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_sprite_frames(void * jarg1, void * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  SpriteFrames *arg2 = (SpriteFrames *) 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (SpriteFrames *)jarg2; 
  AnimatedSprite_set_sprite_frames(arg1,arg2);
}


SWIGEXPORT SpriteFrames* SWIGSTDCALL CSharp_AnimatedSprite_get_sprite_frames(void * jarg1) {
  SpriteFrames* jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Ref< SpriteFrames > result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_sprite_frames(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_animation(void * jarg1, wchar_t * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimatedSprite_set_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite_get_animation(void * jarg1) {
  void * jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  String result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_animation(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_play__SWIG_0(void * jarg1, wchar_t * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimatedSprite_play__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_play__SWIG_1(void * jarg1) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  AnimatedSprite_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_stop(void * jarg1) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  AnimatedSprite_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_playing(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_centered(void * jarg1, unsigned int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimatedSprite_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_centered(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_offset(void * jarg1, Vector2* jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  AnimatedSprite_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_AnimatedSprite_get_offset(void * jarg1) {
  Vector2 jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Vector2 result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_flip_h(void * jarg1, unsigned int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimatedSprite_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_flip_v(void * jarg1, unsigned int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimatedSprite_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_frame(void * jarg1, int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  int arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (int)jarg2; 
  AnimatedSprite_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimatedSprite_get_frame(void * jarg1) {
  int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  int result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (int)AnimatedSprite_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_modulate(void * jarg1, void * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  AnimatedSprite_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite_get_modulate(void * jarg1) {
  void * jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Color result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimatedSprite3D() {
  void * jresult ;
  AnimatedSprite3D *result = 0 ;
  
  result = (AnimatedSprite3D *)memnew(AnimatedSprite3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_set_sprite_frames(void * jarg1, void * jarg2) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  SpriteFrames *arg2 = (SpriteFrames *) 0 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  arg2 = (SpriteFrames *)jarg2; 
  AnimatedSprite3D_set_sprite_frames(arg1,arg2);
}


SWIGEXPORT SpriteFrames* SWIGSTDCALL CSharp_AnimatedSprite3D_get_sprite_frames(void * jarg1) {
  SpriteFrames* jresult ;
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  Ref< SpriteFrames > result;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  result = AnimatedSprite3D_get_sprite_frames(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_set_animation(void * jarg1, wchar_t * jarg2) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimatedSprite3D_set_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite3D_get_animation(void * jarg1) {
  void * jresult ;
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  String result;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  result = AnimatedSprite3D_get_animation(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_play__SWIG_0(void * jarg1, wchar_t * jarg2) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimatedSprite3D_play__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_play__SWIG_1(void * jarg1) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  AnimatedSprite3D_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_stop(void * jarg1) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  AnimatedSprite3D_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite3D_is_playing(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  result = (bool)AnimatedSprite3D_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_set_frame(void * jarg1, int jarg2) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  AnimatedSprite3D_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimatedSprite3D_get_frame(void * jarg1) {
  int jresult ;
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  int result;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  result = (int)AnimatedSprite3D_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Area() {
  void * jresult ;
  Area *result = 0 ;
  
  result = (Area *)memnew(Area());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_space_override_mode(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  Area_set_space_override_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_get_space_override_mode(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int)Area_get_space_override_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity_is_point(void * jarg1, unsigned int jarg2) {
  Area *arg1 = (Area *) 0 ;
  bool arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area_set_gravity_is_point(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_is_gravity_a_point(void * jarg1) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  result = (bool)Area_is_gravity_a_point(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity_distance_scale(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_gravity_distance_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_gravity_distance_scale(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_gravity_distance_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity_vector(void * jarg1, void * jarg2) {
  Area *arg1 = (Area *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Area_set_gravity_vector(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area_get_gravity_vector(void * jarg1) {
  void * jresult ;
  Area *arg1 = (Area *) 0 ;
  Vector3 result;
  
  arg1 = (Area *)jarg1; 
  result = Area_get_gravity_vector(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_gravity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_gravity(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_gravity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_angular_damp(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_angular_damp(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_linear_damp(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_linear_damp(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_priority(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_priority(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_priority(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_priority(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_collision_mask(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  Area_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_get_collision_mask(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int)Area_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_layer_mask(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  Area_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_get_layer_mask(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int)Area_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_monitorable(void * jarg1, unsigned int jarg2) {
  Area *arg1 = (Area *) 0 ;
  bool arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area_set_monitorable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_is_monitorable(void * jarg1) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  result = (bool)Area_is_monitorable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_enable_monitoring(void * jarg1, unsigned int jarg2) {
  Area *arg1 = (Area *) 0 ;
  bool arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area_set_enable_monitoring(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_is_monitoring_enabled(void * jarg1) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  result = (bool)Area_is_monitoring_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area_get_overlapping_bodies(void * jarg1) {
  void * jresult ;
  Area *arg1 = (Area *) 0 ;
  Array result;
  
  arg1 = (Area *)jarg1; 
  result = Area_get_overlapping_bodies(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area_get_overlapping_areas(void * jarg1) {
  void * jresult ;
  Area *arg1 = (Area *) 0 ;
  Array result;
  
  arg1 = (Area *)jarg1; 
  result = Area_get_overlapping_areas(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_overlaps_body(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area_overlaps_body(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_overlaps_area(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area_overlaps_area(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BackBufferCopy() {
  void * jresult ;
  BackBufferCopy *result = 0 ;
  
  result = (BackBufferCopy *)memnew(BackBufferCopy());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackBufferCopy_set_rect(void * jarg1, void * jarg2) {
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (BackBufferCopy *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  BackBufferCopy_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackBufferCopy_get_rect(void * jarg1) {
  void * jresult ;
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  Rect2 result;
  
  arg1 = (BackBufferCopy *)jarg1; 
  result = BackBufferCopy_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackBufferCopy_set_copy_mode(void * jarg1, int jarg2) {
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  int arg2 ;
  
  arg1 = (BackBufferCopy *)jarg1; 
  arg2 = (int)jarg2; 
  BackBufferCopy_set_copy_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BackBufferCopy_get_copy_mode(void * jarg1) {
  int jresult ;
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  int result;
  
  arg1 = (BackBufferCopy *)jarg1; 
  result = (int)BackBufferCopy_get_copy_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton__pressed(void * jarg1) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  
  arg1 = (BaseButton *)jarg1; 
  BaseButton__pressed(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton__toggled(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton__toggled(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_pressed(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_pressed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_pressed(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_pressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_hovered(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_hovered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_toggle_mode(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_toggle_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_toggle_mode(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_toggle_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_disabled(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_disabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_disabled(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_disabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_click_on_press(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_click_on_press(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_get_click_on_press(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_get_click_on_press(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseButton_get_draw_mode(void * jarg1) {
  int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  int result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (int)BaseButton_get_draw_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_enabled_focus_mode(void * jarg1, int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  int arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = (int)jarg2; 
  BaseButton_set_enabled_focus_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseButton_get_enabled_focus_mode(void * jarg1) {
  int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  int result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (int)BaseButton_get_enabled_focus_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_shortcut(void * jarg1, void * jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  BaseButton_set_shortcut(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseButton_get_shortcut(void * jarg1) {
  void * jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (BaseButton *)jarg1; 
  result = (Object *)BaseButton_get_shortcut(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Button() {
  void * jresult ;
  Button *result = 0 ;
  
  result = (Button *)memnew(Button());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_text(void * jarg1, wchar_t * jarg2) {
  Button *arg1 = (Button *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Button *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Button_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Button_get_text(void * jarg1) {
  void * jresult ;
  Button *arg1 = (Button *) 0 ;
  String result;
  
  arg1 = (Button *)jarg1; 
  result = Button_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_button_icon(void * jarg1, void * jarg2) {
  Button *arg1 = (Button *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = (Texture *)jarg2; 
  Button_set_button_icon(arg1,arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Button_get_button_icon(void * jarg1) {
  Texture* jresult ;
  Button *arg1 = (Button *) 0 ;
  Ref< Texture > result;
  
  arg1 = (Button *)jarg1; 
  result = Button_get_button_icon(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_flat(void * jarg1, unsigned int jarg2) {
  Button *arg1 = (Button *) 0 ;
  bool arg2 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Button_set_flat(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_clip_text(void * jarg1, unsigned int jarg2) {
  Button *arg1 = (Button *) 0 ;
  bool arg2 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Button_set_clip_text(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Button_get_clip_text(void * jarg1) {
  unsigned int jresult ;
  Button *arg1 = (Button *) 0 ;
  bool result;
  
  arg1 = (Button *)jarg1; 
  result = (bool)Button_get_clip_text(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_text_align(void * jarg1, int jarg2) {
  Button *arg1 = (Button *) 0 ;
  int arg2 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = (int)jarg2; 
  Button_set_text_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Button_get_text_align(void * jarg1) {
  int jresult ;
  Button *arg1 = (Button *) 0 ;
  int result;
  
  arg1 = (Button *)jarg1; 
  result = (int)Button_get_text_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Button_is_flat(void * jarg1) {
  unsigned int jresult ;
  Button *arg1 = (Button *) 0 ;
  bool result;
  
  arg1 = (Button *)jarg1; 
  result = (bool)Button_is_flat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_add_button(void * jarg1, wchar_t * jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ButtonArray_add_button(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_add_icon_button__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (Texture *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ButtonArray_add_icon_button__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_add_icon_button__SWIG_1(void * jarg1, void * jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (Texture *)jarg2; 
  ButtonArray_add_icon_button__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_set_button_text(void * jarg1, int jarg2, wchar_t * jarg3) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ButtonArray_set_button_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_set_button_icon(void * jarg1, int jarg2, void * jarg3) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  ButtonArray_set_button_icon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonArray_get_button_text(void * jarg1, int jarg2) {
  void * jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = ButtonArray_get_button_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_ButtonArray_get_button_icon(void * jarg1, int jarg2) {
  Texture* jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = ButtonArray_get_button_icon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonArray_get_button_count(void * jarg1) {
  int jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int result;
  
  arg1 = (ButtonArray *)jarg1; 
  result = (int)ButtonArray_get_button_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonArray_get_selected(void * jarg1) {
  int jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int result;
  
  arg1 = (ButtonArray *)jarg1; 
  result = (int)ButtonArray_get_selected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonArray_get_hovered(void * jarg1) {
  int jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int result;
  
  arg1 = (ButtonArray *)jarg1; 
  result = (int)ButtonArray_get_hovered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_set_selected(void * jarg1, int jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  ButtonArray_set_selected(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_erase_button(void * jarg1, int jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  ButtonArray_erase_button(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_clear(void * jarg1) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  ButtonArray_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera2D() {
  void * jresult ;
  Camera2D *result = 0 ;
  
  result = (Camera2D *)memnew(Camera2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_offset(void * jarg1, Vector2* jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Camera2D_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Camera2D_get_offset(void * jarg1) {
  Vector2 jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_anchor_mode(void * jarg1, int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  Camera2D_set_anchor_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera2D_get_anchor_mode(void * jarg1) {
  int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  int result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (int)Camera2D_get_anchor_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_rotating(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_rotating(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_rotating(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_rotating(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_make_current(void * jarg1) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  Camera2D_make_current(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_clear_current(void * jarg1) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  Camera2D_clear_current(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_current(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_current(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_limit(void * jarg1, int jarg2, int jarg3) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Camera2D_set_limit(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera2D_get_limit(void * jarg1, int jarg2) {
  int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Camera2D_get_limit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_v_drag_enabled(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_v_drag_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_v_drag_enabled(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_v_drag_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_h_drag_enabled(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_h_drag_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_h_drag_enabled(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_h_drag_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_v_offset(void * jarg1, float jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  float arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (float)jarg2; 
  Camera2D_set_v_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_v_offset(void * jarg1) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (float)Camera2D_get_v_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_h_offset(void * jarg1, float jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  float arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (float)jarg2; 
  Camera2D_set_h_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_h_offset(void * jarg1) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (float)Camera2D_get_h_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_drag_margin(void * jarg1, int jarg2, float jarg3) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Camera2D_set_drag_margin(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_drag_margin(void * jarg1, int jarg2) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Camera2D_get_drag_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Camera2D_get_camera_pos(void * jarg1) {
  Vector2 jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_camera_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Camera2D_get_camera_screen_center(void * jarg1) {
  Vector2 jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_camera_screen_center(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_zoom(void * jarg1, Vector2* jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Camera2D_set_zoom(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Camera2D_get_zoom(void * jarg1) {
  Vector2 jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_zoom(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_follow_smoothing(void * jarg1, float jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  float arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (float)jarg2; 
  Camera2D_set_follow_smoothing(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_follow_smoothing(void * jarg1) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (float)Camera2D_get_follow_smoothing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_enable_follow_smoothing(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_enable_follow_smoothing(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_follow_smoothing_enabled(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_follow_smoothing_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_force_update_scroll(void * jarg1) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  Camera2D_force_update_scroll(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasModulate() {
  void * jresult ;
  CanvasModulate *result = 0 ;
  
  result = (CanvasModulate *)memnew(CanvasModulate());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasModulate_set_color(void * jarg1, void * jarg2) {
  CanvasModulate *arg1 = (CanvasModulate *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (CanvasModulate *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasModulate_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasModulate_get_color(void * jarg1) {
  void * jresult ;
  CanvasModulate *arg1 = (CanvasModulate *) 0 ;
  Color result;
  
  arg1 = (CanvasModulate *)jarg1; 
  result = CanvasModulate_get_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CheckBox() {
  void * jresult ;
  CheckBox *result = 0 ;
  
  result = (CheckBox *)memnew(CheckBox());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CheckButton() {
  void * jresult ;
  CheckButton *result = 0 ;
  
  result = (CheckButton *)memnew(CheckButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D__input_event(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  InputEvent *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  CollisionObject2D__input_event(arg1,arg2,(InputEvent const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  Shape2D *arg2 = (Shape2D *) 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (Shape2D *)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CollisionObject2D_add_shape__SWIG_0(arg1,arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_add_shape__SWIG_1(void * jarg1, void * jarg2) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  Shape2D *arg2 = (Shape2D *) 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (Shape2D *)jarg2; 
  CollisionObject2D_add_shape__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionObject2D_get_shape_count(void * jarg1) {
  int jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  result = (int)CollisionObject2D_get_shape_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_shape(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  Shape *arg3 = (Shape *) 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Shape *)jarg3; 
  CollisionObject2D_set_shape(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_shape_transform(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CollisionObject2D_set_shape_transform(arg1,arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_shape_as_trigger(void * jarg1, int jarg2, unsigned int jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  CollisionObject2D_set_shape_as_trigger(arg1,arg2,arg3);
}


SWIGEXPORT Shape2D* SWIGSTDCALL CSharp_CollisionObject2D_get_shape(void * jarg1, int jarg2) {
  Shape2D* jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  Ref< Shape2D > result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject2D_get_shape(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject2D_get_shape_transform(void * jarg1, int jarg2) {
  void * jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  Matrix32 result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject2D_get_shape_transform(arg1,arg2);
  jresult = memnew(Matrix32((const Matrix32 &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject2D_is_shape_set_as_trigger(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)CollisionObject2D_is_shape_set_as_trigger(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_remove_shape(void * jarg1, int jarg2) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionObject2D_remove_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_clear_shapes(void * jarg1) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  CollisionObject2D_clear_shapes(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject2D_get_rid(void * jarg1) {
  void * jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  RID result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  result = CollisionObject2D_get_rid(arg1);
  jresult = memnew(RID((const RID &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_pickable(void * jarg1, unsigned int jarg2) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionObject2D_set_pickable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject2D_is_pickable(void * jarg1) {
  unsigned int jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  bool result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  result = (bool)CollisionObject2D_is_pickable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionPolygon2D() {
  void * jresult ;
  CollisionPolygon2D *result = 0 ;
  
  result = (CollisionPolygon2D *)memnew(CollisionPolygon2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon2D_set_polygon(void * jarg1, void * jarg2) {
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CollisionPolygon2D_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionPolygon2D_get_polygon(void * jarg1) {
  void * jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = CollisionPolygon2D_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon2D_set_build_mode(void * jarg1, int jarg2) {
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionPolygon2D_set_build_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon2D_get_build_mode(void * jarg1) {
  int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (int)CollisionPolygon2D_get_build_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon2D_set_trigger(void * jarg1, unsigned int jarg2) {
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionPolygon2D_set_trigger(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionPolygon2D_is_trigger(void * jarg1) {
  unsigned int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  bool result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (bool)CollisionPolygon2D_is_trigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon2D_get_collision_object_first_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (int)CollisionPolygon2D_get_collision_object_first_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon2D_get_collision_object_last_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (int)CollisionPolygon2D_get_collision_object_last_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionShape2D() {
  void * jresult ;
  CollisionShape2D *result = 0 ;
  
  result = (CollisionShape2D *)memnew(CollisionShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape2D_set_shape(void * jarg1, void * jarg2) {
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (CollisionShape2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  CollisionShape2D_set_shape(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionShape2D_get_shape(void * jarg1) {
  void * jresult ;
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (CollisionShape2D *)jarg1; 
  result = (Object *)CollisionShape2D_get_shape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape2D_set_trigger(void * jarg1, unsigned int jarg2) {
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionShape2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionShape2D_set_trigger(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionShape2D_is_trigger(void * jarg1) {
  unsigned int jresult ;
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  bool result;
  
  arg1 = (CollisionShape2D *)jarg1; 
  result = (bool)CollisionShape2D_is_trigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionShape2D_get_collision_object_shape_index(void * jarg1) {
  int jresult ;
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  int result;
  
  arg1 = (CollisionShape2D *)jarg1; 
  result = (int)CollisionShape2D_get_collision_object_shape_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorPickerButton() {
  void * jresult ;
  ColorPickerButton *result = 0 ;
  
  result = (ColorPickerButton *)memnew(ColorPickerButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPickerButton_set_color(void * jarg1, void * jarg2) {
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ColorPickerButton *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorPickerButton_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPickerButton_get_color(void * jarg1) {
  void * jresult ;
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  Color result;
  
  arg1 = (ColorPickerButton *)jarg1; 
  result = ColorPickerButton_get_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPickerButton_get_picker(void * jarg1) {
  void * jresult ;
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  ColorPicker *result = 0 ;
  
  arg1 = (ColorPickerButton *)jarg1; 
  result = (ColorPicker *)ColorPickerButton_get_picker(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPickerButton_set_edit_alpha(void * jarg1, unsigned int jarg2) {
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPickerButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ColorPickerButton_set_edit_alpha(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPickerButton_is_editing_alpha(void * jarg1) {
  unsigned int jresult ;
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  bool result;
  
  arg1 = (ColorPickerButton *)jarg1; 
  result = (bool)ColorPickerButton_is_editing_alpha(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConeTwistJoint() {
  void * jresult ;
  ConeTwistJoint *result = 0 ;
  
  result = (ConeTwistJoint *)memnew(ConeTwistJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConeTwistJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  ConeTwistJoint *arg1 = (ConeTwistJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (ConeTwistJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  ConeTwistJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ConeTwistJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  ConeTwistJoint *arg1 = (ConeTwistJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (ConeTwistJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)ConeTwistJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfirmationDialog() {
  void * jresult ;
  ConfirmationDialog *result = 0 ;
  
  result = (ConfirmationDialog *)memnew(ConfirmationDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfirmationDialog_get_cancel(void * jarg1) {
  void * jresult ;
  ConfirmationDialog *arg1 = (ConfirmationDialog *) 0 ;
  Button *result = 0 ;
  
  arg1 = (ConfirmationDialog *)jarg1; 
  result = (Button *)ConfirmationDialog_get_cancel(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Container() {
  void * jresult ;
  Container *result = 0 ;
  
  result = (Container *)memnew(Container());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Container_queue_sort(void * jarg1) {
  Container *arg1 = (Container *) 0 ;
  
  arg1 = (Container *)jarg1; 
  Container_queue_sort(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Container_fit_child_in_rect(void * jarg1, void * jarg2, void * jarg3) {
  Container *arg1 = (Container *) 0 ;
  Control *arg2 = (Control *) 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (Container *)jarg1; 
  arg2 = (Control *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Container_fit_child_in_rect(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectionalLight() {
  void * jresult ;
  DirectionalLight *result = 0 ;
  
  result = (DirectionalLight *)memnew(DirectionalLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectionalLight_set_shadow_mode(void * jarg1, int jarg2) {
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int arg2 ;
  
  arg1 = (DirectionalLight *)jarg1; 
  arg2 = (int)jarg2; 
  DirectionalLight_set_shadow_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirectionalLight_get_shadow_mode(void * jarg1) {
  int jresult ;
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int result;
  
  arg1 = (DirectionalLight *)jarg1; 
  result = (int)DirectionalLight_get_shadow_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectionalLight_set_shadow_param(void * jarg1, int jarg2, float jarg3) {
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (DirectionalLight *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  DirectionalLight_set_shadow_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DirectionalLight_get_shadow_param(void * jarg1, int jarg2) {
  float jresult ;
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (DirectionalLight *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)DirectionalLight_get_shadow_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorFileDialog() {
  void * jresult ;
  EditorFileDialog *result = 0 ;
  
  result = (EditorFileDialog *)memnew(EditorFileDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_clear_filters(void * jarg1) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  EditorFileDialog_clear_filters(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_add_filter(void * jarg1, wchar_t * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_add_filter(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_current_dir(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = EditorFileDialog_get_current_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_current_file(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = EditorFileDialog_get_current_file(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_current_path(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = EditorFileDialog_get_current_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_current_dir(void * jarg1, wchar_t * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_set_current_dir(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_current_file(void * jarg1, wchar_t * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_set_current_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_current_path(void * jarg1, wchar_t * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_set_current_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_mode(void * jarg1, int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  EditorFileDialog_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorFileDialog_get_mode(void * jarg1) {
  int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (int)EditorFileDialog_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_vbox(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  VBoxContainer *result = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (VBoxContainer *)EditorFileDialog_get_vbox(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_access(void * jarg1, int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  EditorFileDialog_set_access(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorFileDialog_get_access(void * jarg1) {
  int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (int)EditorFileDialog_get_access(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_show_hidden_files(void * jarg1, unsigned int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EditorFileDialog_set_show_hidden_files(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorFileDialog_is_showing_hidden_files(void * jarg1) {
  unsigned int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  bool result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (bool)EditorFileDialog_is_showing_hidden_files(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_display_mode(void * jarg1, int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  EditorFileDialog_set_display_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorFileDialog_get_display_mode(void * jarg1) {
  int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (int)EditorFileDialog_get_display_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_disable_overwrite_warning(void * jarg1, unsigned int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EditorFileDialog_set_disable_overwrite_warning(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorFileDialog_is_overwrite_warning_disabled(void * jarg1) {
  unsigned int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  bool result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (bool)EditorFileDialog_is_overwrite_warning_disabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_invalidate(void * jarg1) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  EditorFileDialog_invalidate(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileDialog() {
  void * jresult ;
  FileDialog *result = 0 ;
  
  result = (FileDialog *)memnew(FileDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_clear_filters(void * jarg1) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  FileDialog_clear_filters(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_add_filter(void * jarg1, wchar_t * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_add_filter(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_current_dir(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  String result;
  
  arg1 = (FileDialog *)jarg1; 
  result = FileDialog_get_current_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_current_file(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  String result;
  
  arg1 = (FileDialog *)jarg1; 
  result = FileDialog_get_current_file(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_current_path(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  String result;
  
  arg1 = (FileDialog *)jarg1; 
  result = FileDialog_get_current_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_current_dir(void * jarg1, wchar_t * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_set_current_dir(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_current_file(void * jarg1, wchar_t * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_set_current_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_current_path(void * jarg1, wchar_t * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_set_current_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_mode(void * jarg1, int jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (FileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  FileDialog_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileDialog_get_mode(void * jarg1) {
  int jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  int result;
  
  arg1 = (FileDialog *)jarg1; 
  result = (int)FileDialog_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_vbox(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  VBoxContainer *result = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  result = (VBoxContainer *)FileDialog_get_vbox(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_access(void * jarg1, int jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (FileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  FileDialog_set_access(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileDialog_get_access(void * jarg1) {
  int jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  int result;
  
  arg1 = (FileDialog *)jarg1; 
  result = (int)FileDialog_get_access(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_show_hidden_files(void * jarg1, unsigned int jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (FileDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  FileDialog_set_show_hidden_files(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileDialog_is_showing_hidden_files(void * jarg1) {
  unsigned int jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  bool result;
  
  arg1 = (FileDialog *)jarg1; 
  result = (bool)FileDialog_is_showing_hidden_files(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_invalidate(void * jarg1) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  FileDialog_invalidate(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic6DOFJoint() {
  void * jresult ;
  Generic6DOFJoint *result = 0 ;
  
  result = (Generic6DOFJoint *)memnew(Generic6DOFJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_param_x(void * jarg1, int jarg2, float jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Generic6DOFJoint_set_param_x(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Generic6DOFJoint_get_param_x(void * jarg1, int jarg2) {
  float jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Generic6DOFJoint_get_param_x(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_param_y(void * jarg1, int jarg2, float jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Generic6DOFJoint_set_param_y(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Generic6DOFJoint_get_param_y(void * jarg1, int jarg2) {
  float jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Generic6DOFJoint_get_param_y(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_param_z(void * jarg1, int jarg2, float jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Generic6DOFJoint_set_param_z(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Generic6DOFJoint_get_param_z(void * jarg1, int jarg2) {
  float jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Generic6DOFJoint_get_param_z(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_flag_x(void * jarg1, int jarg2, unsigned int jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Generic6DOFJoint_set_flag_x(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Generic6DOFJoint_get_flag_x(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Generic6DOFJoint_get_flag_x(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_flag_y(void * jarg1, int jarg2, unsigned int jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Generic6DOFJoint_set_flag_y(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Generic6DOFJoint_get_flag_y(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Generic6DOFJoint_get_flag_y(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_flag_z(void * jarg1, int jarg2, unsigned int jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Generic6DOFJoint_set_flag_z(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Generic6DOFJoint_get_flag_z(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Generic6DOFJoint_get_flag_z(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GraphNode() {
  void * jresult ;
  GraphNode *result = 0 ;
  
  result = (GraphNode *)memnew(GraphNode());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_title(void * jarg1, wchar_t * jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  GraphNode_set_title(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_title(void * jarg1) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  String result;
  
  arg1 = (GraphNode *)jarg1; 
  result = GraphNode_get_title(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_slot(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  int arg7 ;
  Color *arg8 = 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (Color *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  GraphNode_set_slot(arg1,arg2,arg3,arg4,(Color const &)*arg5,arg6,arg7,(Color const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_clear_slot(void * jarg1, int jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  GraphNode_clear_slot(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_clear_all_slots(void * jarg1) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  GraphNode_clear_all_slots(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphNode_is_slot_enabled_left(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GraphNode_is_slot_enabled_left(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_slot_type_left(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_slot_type_left(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_slot_color_left(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_slot_color_left(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphNode_is_slot_enabled_right(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GraphNode_is_slot_enabled_right(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_slot_type_right(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_slot_type_right(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_slot_color_right(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_slot_color_right(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_offset(void * jarg1, Vector2* jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  GraphNode_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_GraphNode_get_offset(void * jarg1) {
  Vector2 jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  Vector2 result;
  
  arg1 = (GraphNode *)jarg1; 
  result = GraphNode_get_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_output_count(void * jarg1) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  result = (int)GraphNode_get_connection_output_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_input_count(void * jarg1) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  result = (int)GraphNode_get_connection_input_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_GraphNode_get_connection_output_pos(void * jarg1, int jarg2) {
  Vector2 jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_output_pos(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_output_type(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_connection_output_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_connection_output_color(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_output_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_GraphNode_get_connection_input_pos(void * jarg1, int jarg2) {
  Vector2 jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_input_pos(arg1,arg2);
  return result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_input_type(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_connection_input_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_connection_input_color(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_input_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_show_close_button(void * jarg1, unsigned int jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  bool arg2 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GraphNode_set_show_close_button(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphNode_is_close_button_visible(void * jarg1) {
  unsigned int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  bool result;
  
  arg1 = (GraphNode *)jarg1; 
  result = (bool)GraphNode_is_close_button_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GridContainer() {
  void * jresult ;
  GridContainer *result = 0 ;
  
  result = (GridContainer *)memnew(GridContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridContainer_set_columns(void * jarg1, int jarg2) {
  GridContainer *arg1 = (GridContainer *) 0 ;
  int arg2 ;
  
  arg1 = (GridContainer *)jarg1; 
  arg2 = (int)jarg2; 
  GridContainer_set_columns(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridContainer_get_columns(void * jarg1) {
  int jresult ;
  GridContainer *arg1 = (GridContainer *) 0 ;
  int result;
  
  arg1 = (GridContainer *)jarg1; 
  result = (int)GridContainer_get_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HButtonArray() {
  void * jresult ;
  HButtonArray *result = 0 ;
  
  result = (HButtonArray *)memnew(HButtonArray());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HScrollBar() {
  void * jresult ;
  HScrollBar *result = 0 ;
  
  result = (HScrollBar *)memnew(HScrollBar());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSeparator() {
  void * jresult ;
  HSeparator *result = 0 ;
  
  result = (HSeparator *)memnew(HSeparator());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSlider() {
  void * jresult ;
  HSlider *result = 0 ;
  
  result = (HSlider *)memnew(HSlider());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HingeJoint() {
  void * jresult ;
  HingeJoint *result = 0 ;
  
  result = (HingeJoint *)memnew(HingeJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HingeJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  HingeJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HingeJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)HingeJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HingeJoint_set_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  HingeJoint_set_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HingeJoint_get_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)HingeJoint_get_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_node_a(void * jarg1, void * jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint2D_set_node_a(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint2D_get_node_a(void * jarg1) {
  void * jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath result;
  
  arg1 = (Joint2D *)jarg1; 
  result = Joint2D_get_node_a(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_node_b(void * jarg1, void * jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint2D_set_node_b(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint2D_get_node_b(void * jarg1) {
  void * jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath result;
  
  arg1 = (Joint2D *)jarg1; 
  result = Joint2D_get_node_b(arg1);
  jresult = memnew(NodePath((const NodePath &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_bias(void * jarg1, float jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  float arg2 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = (float)jarg2; 
  Joint2D_set_bias(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Joint2D_get_bias(void * jarg1) {
  float jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  float result;
  
  arg1 = (Joint2D *)jarg1; 
  result = (float)Joint2D_get_bias(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_exclude_nodes_from_collision(void * jarg1, unsigned int jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Joint2D_set_exclude_nodes_from_collision(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Joint2D_get_exclude_nodes_from_collision(void * jarg1) {
  unsigned int jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  bool result;
  
  arg1 = (Joint2D *)jarg1; 
  result = (bool)Joint2D_get_exclude_nodes_from_collision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinematicBody() {
  void * jresult ;
  KinematicBody *result = 0 ;
  
  result = (KinematicBody *)memnew(KinematicBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_move(void * jarg1, void * jarg2) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = KinematicBody_move(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_move_to(void * jarg1, void * jarg2) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = KinematicBody_move_to(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_teleport_to(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)KinematicBody_can_teleport_to(arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_is_colliding(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collision_pos(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = KinematicBody_get_collision_pos(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collision_normal(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = KinematicBody_get_collision_normal(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collider_velocity(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = KinematicBody_get_collider_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collider(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Object *result = 0 ;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (Object *)KinematicBody_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinematicBody_get_collider_shape(void * jarg1) {
  int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  int result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (int)KinematicBody_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_static_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_static_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_static_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_static_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_kinematic_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_kinematic_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_kinematic_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_kinematic_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_rigid_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_rigid_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_rigid_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_rigid_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_character_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_character_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_character_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_character_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collision_margin(void * jarg1, float jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  float arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (float)jarg2; 
  KinematicBody_set_collision_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_KinematicBody_get_collision_margin(void * jarg1) {
  float jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  float result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (float)KinematicBody_get_collision_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Light2D() {
  void * jresult ;
  Light2D *result = 0 ;
  
  result = (Light2D *)memnew(Light2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_enabled(void * jarg1, unsigned int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light2D_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light2D_is_enabled(void * jarg1) {
  unsigned int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  bool result;
  
  arg1 = (Light2D *)jarg1; 
  result = (bool)Light2D_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_texture(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  Light2D_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_texture(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  result = (Object *)Light2D_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_texture_offset(void * jarg1, Vector2* jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Light2D_set_texture_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Light2D_get_texture_offset(void * jarg1) {
  Vector2 jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Vector2 result;
  
  arg1 = (Light2D *)jarg1; 
  result = Light2D_get_texture_offset(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_color(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Light2D_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_color(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Color result;
  
  arg1 = (Light2D *)jarg1; 
  result = Light2D_get_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_height(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_height(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_height(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_energy(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_energy(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_energy(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_energy(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_texture_scale(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_texture_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_texture_scale(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_texture_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_z_range_min(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_z_range_min(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_z_range_min(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_z_range_min(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_z_range_max(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_z_range_max(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_z_range_max(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_z_range_max(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_layer_range_min(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_layer_range_min(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_layer_range_min(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_layer_range_min(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_layer_range_max(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_layer_range_max(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_layer_range_max(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_layer_range_max(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_item_mask(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_item_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_item_mask(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_item_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_item_shadow_mask(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_item_shadow_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_item_shadow_mask(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_item_shadow_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_mode(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_mode(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_enabled(void * jarg1, unsigned int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light2D_set_shadow_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light2D_is_shadow_enabled(void * jarg1) {
  unsigned int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  bool result;
  
  arg1 = (Light2D *)jarg1; 
  result = (bool)Light2D_is_shadow_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_buffer_size(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_shadow_buffer_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_shadow_buffer_size(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_shadow_buffer_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_esm_multiplier(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_shadow_esm_multiplier(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_shadow_esm_multiplier(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_shadow_esm_multiplier(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_color(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Light2D_set_shadow_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_shadow_color(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Color result;
  
  arg1 = (Light2D *)jarg1; 
  result = Light2D_get_shadow_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LightOccluder2D() {
  void * jresult ;
  LightOccluder2D *result = 0 ;
  
  result = (LightOccluder2D *)memnew(LightOccluder2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightOccluder2D_set_occluder_polygon(void * jarg1, void * jarg2) {
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  OccluderPolygon2D *arg2 = (OccluderPolygon2D *) 0 ;
  
  arg1 = (LightOccluder2D *)jarg1; 
  arg2 = (OccluderPolygon2D *)jarg2; 
  LightOccluder2D_set_occluder_polygon(arg1,arg2);
}


SWIGEXPORT OccluderPolygon2D* SWIGSTDCALL CSharp_LightOccluder2D_get_occluder_polygon(void * jarg1) {
  OccluderPolygon2D* jresult ;
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  Ref< OccluderPolygon2D > result;
  
  arg1 = (LightOccluder2D *)jarg1; 
  result = LightOccluder2D_get_occluder_polygon(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightOccluder2D_set_occluder_light_mask(void * jarg1, int jarg2) {
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  int arg2 ;
  
  arg1 = (LightOccluder2D *)jarg1; 
  arg2 = (int)jarg2; 
  LightOccluder2D_set_occluder_light_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LightOccluder2D_get_occluder_light_mask(void * jarg1) {
  int jresult ;
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  int result;
  
  arg1 = (LightOccluder2D *)jarg1; 
  result = (int)LightOccluder2D_get_occluder_light_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkButton() {
  void * jresult ;
  LinkButton *result = 0 ;
  
  result = (LinkButton *)memnew(LinkButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkButton_set_text(void * jarg1, wchar_t * jarg2) {
  LinkButton *arg1 = (LinkButton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (LinkButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  LinkButton_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkButton_get_text(void * jarg1) {
  void * jresult ;
  LinkButton *arg1 = (LinkButton *) 0 ;
  String result;
  
  arg1 = (LinkButton *)jarg1; 
  result = LinkButton_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkButton_set_underline_mode(void * jarg1, int jarg2) {
  LinkButton *arg1 = (LinkButton *) 0 ;
  int arg2 ;
  
  arg1 = (LinkButton *)jarg1; 
  arg2 = (int)jarg2; 
  LinkButton_set_underline_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LinkButton_get_underline_mode(void * jarg1) {
  int jresult ;
  LinkButton *arg1 = (LinkButton *) 0 ;
  int result;
  
  arg1 = (LinkButton *)jarg1; 
  result = (int)LinkButton_get_underline_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MarginContainer() {
  void * jresult ;
  MarginContainer *result = 0 ;
  
  result = (MarginContainer *)memnew(MarginContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MenuButton() {
  void * jresult ;
  MenuButton *result = 0 ;
  
  result = (MenuButton *)memnew(MenuButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MenuButton_get_popup(void * jarg1) {
  void * jresult ;
  MenuButton *arg1 = (MenuButton *) 0 ;
  PopupMenu *result = 0 ;
  
  arg1 = (MenuButton *)jarg1; 
  result = (PopupMenu *)MenuButton_get_popup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Navigation2D() {
  void * jresult ;
  Navigation2D *result = 0 ;
  
  result = (Navigation2D *)memnew(Navigation2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation2D_navpoly_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  NavigationPolygon *arg2 = (NavigationPolygon *) 0 ;
  Matrix32 *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  int result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (NavigationPolygon *)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg4 = (Object *)jarg4; 
  result = (int)Navigation2D_navpoly_create__SWIG_0(arg1,arg2,(Matrix32 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation2D_navpoly_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  NavigationPolygon *arg2 = (NavigationPolygon *) 0 ;
  Matrix32 *arg3 = 0 ;
  int result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (NavigationPolygon *)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = (int)Navigation2D_navpoly_create__SWIG_0(arg1,arg2,(Matrix32 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation2D_navpoly_set_transform(void * jarg1, int jarg2, void * jarg3) {
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  int arg2 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Navigation2D_navpoly_set_transform(arg1,arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation2D_navpoly_remove(void * jarg1, int jarg2) {
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  int arg2 ;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (int)jarg2; 
  Navigation2D_navpoly_remove(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_simple_path__SWIG_0(void * jarg1, Vector2* jarg2, Vector2* jarg3, unsigned int jarg4) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  bool arg4 ;
  Vector2Array result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = Navigation2D_get_simple_path__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,arg4);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_simple_path__SWIG_1(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2Array result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Navigation2D_get_simple_path__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result));
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Navigation2D_get_closest_point(void * jarg1, Vector2* jarg2) {
  Vector2 jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  result = Navigation2D_get_closest_point(arg1,(Vector2 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_closest_point_owner(void * jarg1, Vector2* jarg2) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Object *)Navigation2D_get_closest_point_owner(arg1,(Vector2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationPolygonInstance() {
  void * jresult ;
  NavigationPolygonInstance *result = 0 ;
  
  result = (NavigationPolygonInstance *)memnew(NavigationPolygonInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygonInstance_set_navigation_polygon(void * jarg1, void * jarg2) {
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  NavigationPolygon *arg2 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  arg2 = (NavigationPolygon *)jarg2; 
  NavigationPolygonInstance_set_navigation_polygon(arg1,arg2);
}


SWIGEXPORT NavigationPolygon* SWIGSTDCALL CSharp_NavigationPolygonInstance_get_navigation_polygon(void * jarg1) {
  NavigationPolygon* jresult ;
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  Ref< NavigationPolygon > result;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  result = NavigationPolygonInstance_get_navigation_polygon(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygonInstance_set_enabled(void * jarg1, unsigned int jarg2) {
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  NavigationPolygonInstance_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NavigationPolygonInstance_is_enabled(void * jarg1) {
  unsigned int jresult ;
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  bool result;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  result = (bool)NavigationPolygonInstance_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OptionButton() {
  void * jresult ;
  OptionButton *result = 0 ;
  
  result = (OptionButton *)memnew(OptionButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_item__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (OptionButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  OptionButton_add_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_item__SWIG_1(void * jarg1, wchar_t * jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  OptionButton_add_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_icon_item(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (Texture *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  OptionButton_add_icon_item(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_text(void * jarg1, int jarg2, wchar_t * jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  OptionButton_set_item_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_icon(void * jarg1, int jarg2, void * jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  Texture *arg3 = (Texture *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Texture *)jarg3; 
  OptionButton_set_item_icon(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_disabled(void * jarg1, int jarg2, unsigned int jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  OptionButton_set_item_disabled(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_ID(void * jarg1, int jarg2, int jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  OptionButton_set_item_ID(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_metadata(void * jarg1, int jarg2, void * jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  OptionButton_set_item_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OptionButton_get_item_text(void * jarg1, int jarg2) {
  void * jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = OptionButton_get_item_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_OptionButton_get_item_icon(void * jarg1, int jarg2) {
  Texture* jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  Ref< Texture > result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = OptionButton_get_item_icon(arg1,arg2);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_item_ID(void * jarg1, int jarg2) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)OptionButton_get_item_ID(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_get_item_metadata(void * jarg1, int jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  OptionButton_get_item_metadata(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OptionButton_is_item_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)OptionButton_is_item_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_item_count(void * jarg1) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  result = (int)OptionButton_get_item_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_separator(void * jarg1) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  OptionButton_add_separator(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_clear(void * jarg1) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  OptionButton_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_select(void * jarg1, int jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  OptionButton_select(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_selected(void * jarg1) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  result = (int)OptionButton_get_selected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_selected_ID(void * jarg1) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  result = (int)OptionButton_get_selected_ID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_get_selected_metadata(void * jarg1) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  OptionButton_get_selected_metadata(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_remove_item(void * jarg1, int jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  OptionButton_remove_item(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PanelContainer() {
  void * jresult ;
  PanelContainer *result = 0 ;
  
  result = (PanelContainer *)memnew(PanelContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_layer_mask(void * jarg1, int jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody2D_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody2D_get_layer_mask(void * jarg1) {
  int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = (int)PhysicsBody2D_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_collision_mask(void * jarg1, int jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody2D_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody2D_get_collision_mask(void * jarg1) {
  int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = (int)PhysicsBody2D_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody2D_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody2D_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody2D_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody2D_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody2D_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody2D_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_one_way_collision_direction(void * jarg1, Vector2* jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  PhysicsBody2D_set_one_way_collision_direction(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_PhysicsBody2D_get_one_way_collision_direction(void * jarg1) {
  Vector2 jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = PhysicsBody2D_get_one_way_collision_direction(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_one_way_collision_max_depth(void * jarg1, float jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  PhysicsBody2D_set_one_way_collision_max_depth(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsBody2D_get_one_way_collision_max_depth(void * jarg1) {
  float jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  float result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = (float)PhysicsBody2D_get_one_way_collision_max_depth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_add_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  PhysicsBody2D *arg2 = (PhysicsBody2D *) 0 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (PhysicsBody2D *)jarg2; 
  PhysicsBody2D_add_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_remove_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  PhysicsBody2D *arg2 = (PhysicsBody2D *) 0 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (PhysicsBody2D *)jarg2; 
  PhysicsBody2D_remove_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PinJoint2D() {
  void * jresult ;
  PinJoint2D *result = 0 ;
  
  result = (PinJoint2D *)memnew(PinJoint2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PinJoint2D_set_softness(void * jarg1, float jarg2) {
  PinJoint2D *arg1 = (PinJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (PinJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  PinJoint2D_set_softness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PinJoint2D_get_softness(void * jarg1) {
  float jresult ;
  PinJoint2D *arg1 = (PinJoint2D *) 0 ;
  float result;
  
  arg1 = (PinJoint2D *)jarg1; 
  result = (float)PinJoint2D_get_softness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProgressBar() {
  void * jresult ;
  ProgressBar *result = 0 ;
  
  result = (ProgressBar *)memnew(ProgressBar());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressBar_set_percent_visible(void * jarg1, unsigned int jarg2) {
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  bool arg2 ;
  
  arg1 = (ProgressBar *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ProgressBar_set_percent_visible(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProgressBar_is_percent_visible(void * jarg1) {
  unsigned int jresult ;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  bool result;
  
  arg1 = (ProgressBar *)jarg1; 
  result = (bool)ProgressBar_is_percent_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidBody2D() {
  void * jresult ;
  RigidBody2D *result = 0 ;
  
  result = (RigidBody2D *)memnew(RigidBody2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D__integrate_forces(void * jarg1, void * jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Physics2DDirectBodyState *arg2 = (Physics2DDirectBodyState *) 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Physics2DDirectBodyState *)jarg2; 
  RigidBody2D__integrate_forces(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_mode(void * jarg1, int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody2D_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody2D_get_mode(void * jarg1) {
  int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (int)RigidBody2D_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_mass(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_mass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_mass(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_inertia(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_inertia(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_inertia(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_inertia(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_weight(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_weight(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_weight(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_weight(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_friction(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_friction(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_bounce(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_bounce(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_gravity_scale(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_gravity_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_gravity_scale(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_gravity_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_linear_damp(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_linear_damp(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_angular_damp(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_angular_damp(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_linear_velocity(void * jarg1, Vector2* jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_set_linear_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_RigidBody2D_get_linear_velocity(void * jarg1) {
  Vector2 jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = RigidBody2D_get_linear_velocity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_angular_velocity(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_angular_velocity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_angular_velocity(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_angular_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_max_contacts_reported(void * jarg1, int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody2D_set_max_contacts_reported(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody2D_get_max_contacts_reported(void * jarg1) {
  int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (int)RigidBody2D_get_max_contacts_reported(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_use_custom_integrator(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_use_custom_integrator(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_using_custom_integrator(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_using_custom_integrator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_contact_monitor(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_contact_monitor(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_contact_monitor_enabled(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_contact_monitor_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_continuous_collision_detection_mode(void * jarg1, int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody2D_set_continuous_collision_detection_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody2D_get_continuous_collision_detection_mode(void * jarg1) {
  int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (int)RigidBody2D_get_continuous_collision_detection_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_axis_velocity(void * jarg1, Vector2* jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_set_axis_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_apply_impulse(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_apply_impulse(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_applied_force(void * jarg1, Vector2* jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_set_applied_force(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_RigidBody2D_get_applied_force(void * jarg1) {
  Vector2 jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = RigidBody2D_get_applied_force(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_applied_torque(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_applied_torque(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_applied_torque(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_applied_torque(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_add_force(void * jarg1, Vector2* jarg2, Vector2* jarg3) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_add_force(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_sleeping(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_sleeping(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_can_sleep(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_can_sleep(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_able_to_sleep(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_able_to_sleep(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_test_motion__SWIG_0(void * jarg1, Vector2* jarg2, float jarg3, void * jarg4) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  Physics2DTestMotionResult *arg4 = (Physics2DTestMotionResult *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Physics2DTestMotionResult *)jarg4; 
  result = (bool)RigidBody2D_test_motion__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_test_motion__SWIG_1(void * jarg1, Vector2* jarg2, float jarg3) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)RigidBody2D_test_motion__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_test_motion__SWIG_2(void * jarg1, Vector2* jarg2) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)RigidBody2D_test_motion__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody2D_get_colliding_bodies(void * jarg1) {
  void * jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Array result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = RigidBody2D_get_colliding_bodies(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SamplePlayer2D() {
  void * jresult ;
  SamplePlayer2D *result = 0 ;
  
  result = (SamplePlayer2D *)memnew(SamplePlayer2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_set_sample_library(void * jarg1, void * jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  SampleLibrary *arg2 = (SampleLibrary *) 0 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (SampleLibrary *)jarg2; 
  SamplePlayer2D_set_sample_library(arg1,arg2);
}


SWIGEXPORT SampleLibrary* SWIGSTDCALL CSharp_SamplePlayer2D_get_sample_library(void * jarg1) {
  SampleLibrary* jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  Ref< SampleLibrary > result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  result = SamplePlayer2D_get_sample_library(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_set_polyphony(void * jarg1, int jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer2D_set_polyphony(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer2D_get_polyphony(void * jarg1) {
  int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  result = (int)SamplePlayer2D_get_polyphony(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer2D_play__SWIG_0(void * jarg1, wchar_t * jarg2, int jarg3) {
  int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)SamplePlayer2D_play__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer2D_play__SWIG_1(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SamplePlayer2D_play__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_voice_set_pitch_scale(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer2D_voice_set_pitch_scale(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_voice_set_volume_scale_db(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer2D_voice_set_volume_scale_db(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplePlayer2D_is_voice_active(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SamplePlayer2D_is_voice_active(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_stop_voice(void * jarg1, int jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer2D_stop_voice(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_stop_all(void * jarg1) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  SamplePlayer2D_stop_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_set_random_pitch_scale(void * jarg1, float jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer2D_set_random_pitch_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer2D_get_random_pitch_scale(void * jarg1) {
  float jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  float result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  result = (float)SamplePlayer2D_get_random_pitch_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScrollContainer() {
  void * jresult ;
  ScrollContainer *result = 0 ;
  
  result = (ScrollContainer *)memnew(ScrollContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_enable_h_scroll(void * jarg1, unsigned int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ScrollContainer_set_enable_h_scroll(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScrollContainer_is_h_scroll_enabled(void * jarg1) {
  unsigned int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (bool)ScrollContainer_is_h_scroll_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_enable_v_scroll(void * jarg1, unsigned int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ScrollContainer_set_enable_v_scroll(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScrollContainer_is_v_scroll_enabled(void * jarg1) {
  unsigned int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (bool)ScrollContainer_is_v_scroll_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_h_scroll(void * jarg1, int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = (int)jarg2; 
  ScrollContainer_set_h_scroll(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScrollContainer_get_h_scroll(void * jarg1) {
  int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (int)ScrollContainer_get_h_scroll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_v_scroll(void * jarg1, int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = (int)jarg2; 
  ScrollContainer_set_v_scroll(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScrollContainer_get_v_scroll(void * jarg1) {
  int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (int)ScrollContainer_get_v_scroll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplitContainer_set_split_offset(void * jarg1, int jarg2) {
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int arg2 ;
  
  arg1 = (SplitContainer *)jarg1; 
  arg2 = (int)jarg2; 
  SplitContainer_set_split_offset(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplitContainer_get_split_offset(void * jarg1) {
  int jresult ;
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int result;
  
  arg1 = (SplitContainer *)jarg1; 
  result = (int)SplitContainer_get_split_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplitContainer_set_collapsed(void * jarg1, unsigned int jarg2) {
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (SplitContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SplitContainer_set_collapsed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplitContainer_is_collapsed(void * jarg1) {
  unsigned int jresult ;
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  bool result;
  
  arg1 = (SplitContainer *)jarg1; 
  result = (bool)SplitContainer_is_collapsed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplitContainer_set_dragger_visibility(void * jarg1, int jarg2) {
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int arg2 ;
  
  arg1 = (SplitContainer *)jarg1; 
  arg2 = (int)jarg2; 
  SplitContainer_set_dragger_visibility(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplitContainer_get_dragger_visibility(void * jarg1) {
  int jresult ;
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int result;
  
  arg1 = (SplitContainer *)jarg1; 
  result = (int)SplitContainer_get_dragger_visibility(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sprite3D() {
  void * jresult ;
  Sprite3D *result = 0 ;
  
  result = (Sprite3D *)memnew(Sprite3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_texture(void * jarg1, void * jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (Texture *)jarg2; 
  Sprite3D_set_texture(arg1,arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_Sprite3D_get_texture(void * jarg1) {
  Texture* jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  Ref< Texture > result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = Sprite3D_get_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_region(void * jarg1, unsigned int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite3D_set_region(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite3D_is_region(void * jarg1) {
  unsigned int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  bool result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (bool)Sprite3D_is_region(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_region_rect(void * jarg1, void * jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Sprite3D_set_region_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite3D_get_region_rect(void * jarg1) {
  void * jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  Rect2 result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = Sprite3D_get_region_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_frame(void * jarg1, int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite3D_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite3D_get_frame(void * jarg1) {
  int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (int)Sprite3D_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_vframes(void * jarg1, int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite3D_set_vframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite3D_get_vframes(void * jarg1) {
  int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (int)Sprite3D_get_vframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_hframes(void * jarg1, int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite3D_set_hframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite3D_get_hframes(void * jarg1) {
  int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (int)Sprite3D_get_hframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StaticBody2D() {
  void * jresult ;
  StaticBody2D *result = 0 ;
  
  result = (StaticBody2D *)memnew(StaticBody2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_constant_linear_velocity(void * jarg1, Vector2* jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  StaticBody2D_set_constant_linear_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_constant_angular_velocity(void * jarg1, float jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody2D_set_constant_angular_velocity(arg1,arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_StaticBody2D_get_constant_linear_velocity(void * jarg1) {
  Vector2 jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = StaticBody2D_get_constant_linear_velocity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody2D_get_constant_angular_velocity(void * jarg1) {
  float jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = (float)StaticBody2D_get_constant_angular_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_friction(void * jarg1, float jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody2D_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody2D_get_friction(void * jarg1) {
  float jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = (float)StaticBody2D_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_bounce(void * jarg1, float jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody2D_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody2D_get_bounce(void * jarg1) {
  float jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = (float)StaticBody2D_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureButton() {
  void * jresult ;
  TextureButton *result = 0 ;
  
  result = (TextureButton *)memnew(TextureButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_normal_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Texture *)jarg2; 
  TextureButton_set_normal_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_pressed_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Texture *)jarg2; 
  TextureButton_set_pressed_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_hover_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Texture *)jarg2; 
  TextureButton_set_hover_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_disabled_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Texture *)jarg2; 
  TextureButton_set_disabled_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_focused_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Texture *arg2 = (Texture *) 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Texture *)jarg2; 
  TextureButton_set_focused_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_click_mask(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  BitMap *arg2 = (BitMap *) 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (BitMap *)jarg2; 
  TextureButton_set_click_mask(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_texture_scale(void * jarg1, Vector2* jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TextureButton_set_texture_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_modulate(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextureButton_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TextureButton_get_normal_texture(void * jarg1) {
  Texture* jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Ref< Texture > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_normal_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TextureButton_get_pressed_texture(void * jarg1) {
  Texture* jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Ref< Texture > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_pressed_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TextureButton_get_hover_texture(void * jarg1) {
  Texture* jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Ref< Texture > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_hover_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TextureButton_get_disabled_texture(void * jarg1) {
  Texture* jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Ref< Texture > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_disabled_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Texture* SWIGSTDCALL CSharp_TextureButton_get_focused_texture(void * jarg1) {
  Texture* jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Ref< Texture > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_focused_texture(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT BitMap* SWIGSTDCALL CSharp_TextureButton_get_click_mask(void * jarg1) {
  BitMap* jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Ref< BitMap > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_click_mask(arg1);
  
  jresult = (&result)->ptr();
  if (jresult) jresult->reference();
  
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_TextureButton_get_texture_scale(void * jarg1) {
  Vector2 jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Vector2 result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_texture_scale(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_modulate(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Color result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolButton() {
  void * jresult ;
  ToolButton *result = 0 ;
  
  result = (ToolButton *)memnew(ToolButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VButtonArray() {
  void * jresult ;
  VButtonArray *result = 0 ;
  
  result = (VButtonArray *)memnew(VButtonArray());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VSplitContainer() {
  void * jresult ;
  VSplitContainer *result = 0 ;
  
  result = (VSplitContainer *)memnew(VSplitContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityEnabler2D() {
  void * jresult ;
  VisibilityEnabler2D *result = 0 ;
  
  result = (VisibilityEnabler2D *)memnew(VisibilityEnabler2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityEnabler2D_set_enabler(void * jarg1, int jarg2, unsigned int jarg3) {
  VisibilityEnabler2D *arg1 = (VisibilityEnabler2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (VisibilityEnabler2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  VisibilityEnabler2D_set_enabler(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityEnabler2D_is_enabler_enabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VisibilityEnabler2D *arg1 = (VisibilityEnabler2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (VisibilityEnabler2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)VisibilityEnabler2D_is_enabler_enabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Area2D() {
  void * jresult ;
  Area2D *result = 0 ;
  
  result = (Area2D *)memnew(Area2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_space_override_mode(void * jarg1, int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  Area2D_set_space_override_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area2D_get_space_override_mode(void * jarg1) {
  int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int result;
  
  arg1 = (Area2D *)jarg1; 
  result = (int)Area2D_get_space_override_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity_is_point(void * jarg1, unsigned int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area2D_set_gravity_is_point(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_is_gravity_a_point(void * jarg1) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  result = (bool)Area2D_is_gravity_a_point(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity_distance_scale(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_gravity_distance_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_gravity_distance_scale(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_gravity_distance_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity_vector(void * jarg1, Vector2* jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Area2D_set_gravity_vector(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_Area2D_get_gravity_vector(void * jarg1) {
  Vector2 jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Vector2 result;
  
  arg1 = (Area2D *)jarg1; 
  result = Area2D_get_gravity_vector(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_gravity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_gravity(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_gravity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_linear_damp(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_linear_damp(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_angular_damp(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_angular_damp(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_priority(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_priority(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_priority(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_priority(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_collision_mask(void * jarg1, int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  Area2D_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area2D_get_collision_mask(void * jarg1) {
  int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int result;
  
  arg1 = (Area2D *)jarg1; 
  result = (int)Area2D_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_layer_mask(void * jarg1, int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  Area2D_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area2D_get_layer_mask(void * jarg1) {
  int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int result;
  
  arg1 = (Area2D *)jarg1; 
  result = (int)Area2D_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area2D_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area2D_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area2D_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area2D_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_enable_monitoring(void * jarg1, unsigned int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area2D_set_enable_monitoring(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_is_monitoring_enabled(void * jarg1) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  result = (bool)Area2D_is_monitoring_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_monitorable(void * jarg1, unsigned int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area2D_set_monitorable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_is_monitorable(void * jarg1) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  result = (bool)Area2D_is_monitorable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area2D_get_overlapping_bodies(void * jarg1) {
  void * jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Array result;
  
  arg1 = (Area2D *)jarg1; 
  result = Area2D_get_overlapping_bodies(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area2D_get_overlapping_areas(void * jarg1) {
  void * jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Array result;
  
  arg1 = (Area2D *)jarg1; 
  result = Area2D_get_overlapping_areas(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_overlaps_body(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area2D_overlaps_body(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_overlaps_area(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area2D_overlaps_area(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxContainer_add_spacer(void * jarg1, unsigned int jarg2) {
  BoxContainer *arg1 = (BoxContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (BoxContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BoxContainer_add_spacer(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BoxContainer_get_alignment(void * jarg1) {
  int jresult ;
  BoxContainer *arg1 = (BoxContainer *) 0 ;
  int result;
  
  arg1 = (BoxContainer *)jarg1; 
  result = (int)BoxContainer_get_alignment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxContainer_set_alignment(void * jarg1, int jarg2) {
  BoxContainer *arg1 = (BoxContainer *) 0 ;
  int arg2 ;
  
  arg1 = (BoxContainer *)jarg1; 
  arg2 = (int)jarg2; 
  BoxContainer_set_alignment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ButtonGroup() {
  void * jresult ;
  ButtonGroup *result = 0 ;
  
  result = (ButtonGroup *)memnew(ButtonGroup());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonGroup_get_pressed_button(void * jarg1) {
  void * jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  BaseButton *result = 0 ;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = (BaseButton *)ButtonGroup_get_pressed_button(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonGroup_get_pressed_button_index(void * jarg1) {
  int jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  int result;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = (int)ButtonGroup_get_pressed_button_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonGroup_get_focused_button(void * jarg1) {
  void * jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  BaseButton *result = 0 ;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = (BaseButton *)ButtonGroup_get_focused_button(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonGroup_get_button_list(void * jarg1) {
  void * jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  Array result;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = ButtonGroup_get_button_list(arg1);
  jresult = memnew(Array((const Array &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonGroup_set_pressed_button(void * jarg1, void * jarg2) {
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  BaseButton *arg2 = (BaseButton *) 0 ;
  
  arg1 = (ButtonGroup *)jarg1; 
  arg2 = (BaseButton *)jarg2; 
  ButtonGroup_set_pressed_button(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CenterContainer() {
  void * jresult ;
  CenterContainer *result = 0 ;
  
  result = (CenterContainer *)memnew(CenterContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CenterContainer_set_use_top_left(void * jarg1, unsigned int jarg2) {
  CenterContainer *arg1 = (CenterContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (CenterContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CenterContainer_set_use_top_left(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CenterContainer_is_using_top_left(void * jarg1) {
  unsigned int jresult ;
  CenterContainer *arg1 = (CenterContainer *) 0 ;
  bool result;
  
  arg1 = (CenterContainer *)jarg1; 
  result = (bool)CenterContainer_is_using_top_left(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorPicker() {
  void * jresult ;
  ColorPicker *result = 0 ;
  
  result = (ColorPicker *)memnew(ColorPicker());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_set_color(void * jarg1, void * jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorPicker_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPicker_get_color(void * jarg1) {
  void * jresult ;
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  Color result;
  
  arg1 = (ColorPicker *)jarg1; 
  result = ColorPicker_get_color(arg1);
  jresult = memnew(Color((const Color &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_set_raw_mode(void * jarg1, unsigned int jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ColorPicker_set_raw_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker_is_raw_mode(void * jarg1) {
  unsigned int jresult ;
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool result;
  
  arg1 = (ColorPicker *)jarg1; 
  result = (bool)ColorPicker_is_raw_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_set_edit_alpha(void * jarg1, unsigned int jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ColorPicker_set_edit_alpha(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker_is_editing_alpha(void * jarg1) {
  unsigned int jresult ;
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool result;
  
  arg1 = (ColorPicker *)jarg1; 
  result = (bool)ColorPicker_is_editing_alpha(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_add_preset(void * jarg1, void * jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorPicker_add_preset(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DampedSpringJoint2D() {
  void * jresult ;
  DampedSpringJoint2D *result = 0 ;
  
  result = (DampedSpringJoint2D *)memnew(DampedSpringJoint2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_length(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_length(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_rest_length(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_rest_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_rest_length(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_rest_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_stiffness(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_stiffness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_stiffness(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_stiffness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_damping(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_damping(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_damping(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_damping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GrooveJoint2D() {
  void * jresult ;
  GrooveJoint2D *result = 0 ;
  
  result = (GrooveJoint2D *)memnew(GrooveJoint2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrooveJoint2D_set_length(void * jarg1, float jarg2) {
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  GrooveJoint2D_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GrooveJoint2D_get_length(void * jarg1) {
  float jresult ;
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float result;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  result = (float)GrooveJoint2D_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrooveJoint2D_set_initial_offset(void * jarg1, float jarg2) {
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  GrooveJoint2D_set_initial_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GrooveJoint2D_get_initial_offset(void * jarg1) {
  float jresult ;
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float result;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  result = (float)GrooveJoint2D_get_initial_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBoxContainer() {
  void * jresult ;
  HBoxContainer *result = 0 ;
  
  result = (HBoxContainer *)memnew(HBoxContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSplitContainer() {
  void * jresult ;
  HSplitContainer *result = 0 ;
  
  result = (HSplitContainer *)memnew(HSplitContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinematicBody2D() {
  void * jresult ;
  KinematicBody2D *result = 0 ;
  
  result = (KinematicBody2D *)memnew(KinematicBody2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_KinematicBody2D_move(void * jarg1, Vector2* jarg2) {
  Vector2 jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  result = KinematicBody2D_move(arg1,(Vector2 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_KinematicBody2D_move_to(void * jarg1, Vector2* jarg2) {
  Vector2 jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return Vector2();
  } 
  result = KinematicBody2D_move_to(arg1,(Vector2 const &)*arg2);
  return result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody2D_test_move(void * jarg1, Vector2* jarg2) {
  unsigned int jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)KinematicBody2D_test_move(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_KinematicBody2D_get_travel(void * jarg1) {
  Vector2 jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_travel(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody2D_revert_motion(void * jarg1) {
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  
  arg1 = (KinematicBody2D *)jarg1; 
  KinematicBody2D_revert_motion(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody2D_is_colliding(void * jarg1) {
  unsigned int jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  bool result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (bool)KinematicBody2D_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_KinematicBody2D_get_collision_pos(void * jarg1) {
  Vector2 jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collision_pos(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_KinematicBody2D_get_collision_normal(void * jarg1) {
  Vector2 jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collision_normal(arg1);
  return result;
  return jresult;
}


SWIGEXPORT Vector2 SWIGSTDCALL CSharp_KinematicBody2D_get_collider_velocity(void * jarg1) {
  Vector2 jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collider_velocity(arg1);
  return result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collider(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (Object *)KinematicBody2D_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinematicBody2D_get_collider_shape(void * jarg1) {
  int jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  int result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (int)KinematicBody2D_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collider_metadata(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Variant result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collider_metadata(arg1);
  jresult = memnew(Variant((const Variant &)result));
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody2D_set_collision_margin(void * jarg1, float jarg2) {
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  KinematicBody2D_set_collision_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_KinematicBody2D_get_collision_margin(void * jarg1) {
  float jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  float result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (float)KinematicBody2D_get_collision_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VBoxContainer() {
  void * jresult ;
  VBoxContainer *result = 0 ;
  
  result = (VBoxContainer *)memnew(VBoxContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Object * SWIGSTDCALL CSharp_PathRemap_SWIGUpcast(PathRemap *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Performance_SWIGUpcast(Performance *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Physics2DDirectBodyState_SWIGUpcast(Physics2DDirectBodyState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Physics2DDirectBodyState * SWIGSTDCALL CSharp_Physics2DDirectBodyStateSW_SWIGUpcast(Physics2DDirectBodyStateSW *jarg1) {
    return (Physics2DDirectBodyState *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_SWIGUpcast(Physics2DDirectSpaceState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Physics2DServer_SWIGUpcast(Physics2DServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Physics2DServer * SWIGSTDCALL CSharp_Physics2DServerSW_SWIGUpcast(Physics2DServerSW *jarg1) {
    return (Physics2DServer *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_PhysicsDirectBodyState_SWIGUpcast(PhysicsDirectBodyState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT PhysicsDirectBodyState * SWIGSTDCALL CSharp_PhysicsDirectBodyStateSW_SWIGUpcast(PhysicsDirectBodyStateSW *jarg1) {
    return (PhysicsDirectBodyState *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_SWIGUpcast(PhysicsDirectSpaceState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_PhysicsServer_SWIGUpcast(PhysicsServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT PhysicsServer * SWIGSTDCALL CSharp_PhysicsServerSW_SWIGUpcast(PhysicsServerSW *jarg1) {
    return (PhysicsServer *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Reference_SWIGUpcast(Reference *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_RegEx_SWIGUpcast(RegEx *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Resource_SWIGUpcast(Resource *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_ResourceImportMetadata_SWIGUpcast(ResourceImportMetadata *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_ResourceInteractiveLoader_SWIGUpcast(ResourceInteractiveLoader *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_RoomBounds_SWIGUpcast(RoomBounds *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Sample_SWIGUpcast(Sample *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_SampleLibrary_SWIGUpcast(SampleLibrary *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_SceneState_SWIGUpcast(SceneState *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Script_SWIGUpcast(Script *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Shader_SWIGUpcast(Shader *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shader * SWIGSTDCALL CSharp_ShaderGraph_SWIGUpcast(ShaderGraph *jarg1) {
    return (Shader *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Shape_SWIGUpcast(Shape *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Shape2D_SWIGUpcast(Shape2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_ShortCut_SWIGUpcast(ShortCut *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_SpatialGizmo_SWIGUpcast(SpatialGizmo *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_SpatialSound2DServer_SWIGUpcast(SpatialSound2DServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT SpatialSound2DServer * SWIGSTDCALL CSharp_SpatialSound2DServerSW_SWIGUpcast(SpatialSound2DServerSW *jarg1) {
    return (SpatialSound2DServer *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_SpatialSoundServer_SWIGUpcast(SpatialSoundServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT SpatialSoundServer * SWIGSTDCALL CSharp_SpatialSoundServerSW_SWIGUpcast(SpatialSoundServerSW *jarg1) {
    return (SpatialSoundServer *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_SphereShape_SWIGUpcast(SphereShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_SpriteFrames_SWIGUpcast(SpriteFrames *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_StreamPeer_SWIGUpcast(StreamPeer *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT StreamPeer * SWIGSTDCALL CSharp_StreamPeerSSL_SWIGUpcast(StreamPeerSSL *jarg1) {
    return (StreamPeer *)jarg1;
}

SWIGEXPORT StreamPeer * SWIGSTDCALL CSharp_StreamPeerTCP_SWIGUpcast(StreamPeerTCP *jarg1) {
    return (StreamPeer *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_StyleBox_SWIGUpcast(StyleBox *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxEmpty_SWIGUpcast(StyleBoxEmpty *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxFlat_SWIGUpcast(StyleBoxFlat *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxImageMask_SWIGUpcast(StyleBoxImageMask *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxTexture_SWIGUpcast(StyleBoxTexture *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_SurfaceTool_SWIGUpcast(SurfaceTool *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_TCP_Server_SWIGUpcast(TCP_Server *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Texture_SWIGUpcast(Texture *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Theme_SWIGUpcast(Theme *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_TileSet_SWIGUpcast(TileSet *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Translation_SWIGUpcast(Translation *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_TranslationServer_SWIGUpcast(TranslationServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_TreeItem_SWIGUpcast(TreeItem *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_UndoRedo_SWIGUpcast(UndoRedo *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_VideoStream_SWIGUpcast(VideoStream *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT VideoStream * SWIGSTDCALL CSharp_VideoStreamTheora_SWIGUpcast(VideoStreamTheora *jarg1) {
    return (VideoStream *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_VisualServer_SWIGUpcast(VisualServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_WeakRef_SWIGUpcast(WeakRef *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_World_SWIGUpcast(World *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_World2D_SWIGUpcast(World2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_XMLParser_SWIGUpcast(XMLParser *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Directory_SWIGUpcast(_Directory *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_File_SWIGUpcast(_File *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Geometry_SWIGUpcast(_Geometry *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Marshalls_SWIGUpcast(_Marshalls *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Mutex_SWIGUpcast(_Mutex *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_OS_SWIGUpcast(_OS *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_ResourceLoader_SWIGUpcast(_ResourceLoader *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_ResourceSaver_SWIGUpcast(_ResourceSaver *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Semaphore_SWIGUpcast(_Semaphore *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Thread_SWIGUpcast(_Thread *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Animation_SWIGUpcast(Animation *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_AtlasTexture_SWIGUpcast(AtlasTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_AudioServer_SWIGUpcast(AudioServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT AudioServer * SWIGSTDCALL CSharp_AudioServerSW_SWIGUpcast(AudioServerSW *jarg1) {
    return (AudioServer *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_AudioStream_SWIGUpcast(AudioStream *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamMPC_SWIGUpcast(AudioStreamMPC *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamOGGVorbis_SWIGUpcast(AudioStreamOGGVorbis *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamOpus_SWIGUpcast(AudioStreamOpus *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_AudioStreamPlayback_SWIGUpcast(AudioStreamPlayback *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamSpeex_SWIGUpcast(AudioStreamSpeex *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_BakedLight_SWIGUpcast(BakedLight *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_BitMap_SWIGUpcast(BitMap *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_BoxShape_SWIGUpcast(BoxShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Script * SWIGSTDCALL CSharp_CSharpScript_SWIGUpcast(CSharpScript *jarg1) {
    return (Script *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_CanvasItemMaterial_SWIGUpcast(CanvasItemMaterial *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shader * SWIGSTDCALL CSharp_CanvasItemShader_SWIGUpcast(CanvasItemShader *jarg1) {
    return (Shader *)jarg1;
}

SWIGEXPORT ShaderGraph * SWIGSTDCALL CSharp_CanvasItemShaderGraph_SWIGUpcast(CanvasItemShaderGraph *jarg1) {
    return (ShaderGraph *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_CapsuleShape_SWIGUpcast(CapsuleShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_CapsuleShape2D_SWIGUpcast(CapsuleShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_CircleShape2D_SWIGUpcast(CircleShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_ColorRamp_SWIGUpcast(ColorRamp *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_ConcavePolygonShape_SWIGUpcast(ConcavePolygonShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_ConcavePolygonShape2D_SWIGUpcast(ConcavePolygonShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_ConfigFile_SWIGUpcast(ConfigFile *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_ConvexPolygonShape_SWIGUpcast(ConvexPolygonShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_ConvexPolygonShape2D_SWIGUpcast(ConvexPolygonShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_CubeMap_SWIGUpcast(CubeMap *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Curve2D_SWIGUpcast(Curve2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Curve3D_SWIGUpcast(Curve3D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_DynamicFontData_SWIGUpcast(DynamicFontData *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorExportPlugin_SWIGUpcast(EditorExportPlugin *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorImportPlugin_SWIGUpcast(EditorImportPlugin *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorScenePostImport_SWIGUpcast(EditorScenePostImport *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorScript_SWIGUpcast(EditorScript *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_EditorSelection_SWIGUpcast(EditorSelection *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_EditorSettings_SWIGUpcast(EditorSettings *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT SpatialGizmo * SWIGSTDCALL CSharp_EditorSpatialGizmo_SWIGUpcast(EditorSpatialGizmo *jarg1) {
    return (SpatialGizmo *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Environment_SWIGUpcast(Environment *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_EventStream_SWIGUpcast(EventStream *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT EventStream * SWIGSTDCALL CSharp_EventStreamChibi_SWIGUpcast(EventStreamChibi *jarg1) {
    return (EventStream *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Font_SWIGUpcast(Font *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_FuncRef_SWIGUpcast(FuncRef *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_GDFunctionState_SWIGUpcast(GDFunctionState *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Script * SWIGSTDCALL CSharp_GDScript_SWIGUpcast(GDScript *jarg1) {
    return (Script *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Globals_SWIGUpcast(Globals *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_HTTPClient_SWIGUpcast(HTTPClient *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_IP_SWIGUpcast(IP *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT IP * SWIGSTDCALL CSharp_IP_Unix_SWIGUpcast(IP_Unix *jarg1) {
    return (IP *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_ImageTexture_SWIGUpcast(ImageTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Input_SWIGUpcast(Input *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Input * SWIGSTDCALL CSharp_InputDefault_SWIGUpcast(InputDefault *jarg1) {
    return (Input *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_InputMap_SWIGUpcast(InputMap *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_LargeTexture_SWIGUpcast(LargeTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_LineShape2D_SWIGUpcast(LineShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_MainLoop_SWIGUpcast(MainLoop *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Material_SWIGUpcast(Material *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shader * SWIGSTDCALL CSharp_MaterialShader_SWIGUpcast(MaterialShader *jarg1) {
    return (Shader *)jarg1;
}

SWIGEXPORT ShaderGraph * SWIGSTDCALL CSharp_MaterialShaderGraph_SWIGUpcast(MaterialShaderGraph *jarg1) {
    return (ShaderGraph *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Mesh_SWIGUpcast(Mesh *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_MeshDataTool_SWIGUpcast(MeshDataTool *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_MeshLibrary_SWIGUpcast(MeshLibrary *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_MultiMesh_SWIGUpcast(MultiMesh *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_NavigationMesh_SWIGUpcast(NavigationMesh *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_NavigationPolygon_SWIGUpcast(NavigationPolygon *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Node_SWIGUpcast(Node *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_OccluderPolygon2D_SWIGUpcast(OccluderPolygon2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PCKPacker_SWIGUpcast(PCKPacker *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Translation * SWIGSTDCALL CSharp_PHashTranslation_SWIGUpcast(PHashTranslation *jarg1) {
    return (Translation *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_PackedDataContainer_SWIGUpcast(PackedDataContainer *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PackedDataContainerRef_SWIGUpcast(PackedDataContainerRef *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_PackedScene_SWIGUpcast(PackedScene *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PacketPeer_SWIGUpcast(PacketPeer *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT PacketPeer * SWIGSTDCALL CSharp_PacketPeerStream_SWIGUpcast(PacketPeerStream *jarg1) {
    return (PacketPeer *)jarg1;
}

SWIGEXPORT PacketPeer * SWIGSTDCALL CSharp_PacketPeerUDP_SWIGUpcast(PacketPeerUDP *jarg1) {
    return (PacketPeer *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_SWIGUpcast(Physics2DShapeQueryParameters *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Physics2DShapeQueryResult_SWIGUpcast(Physics2DShapeQueryResult *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Physics2DTestMotionResult_SWIGUpcast(Physics2DTestMotionResult *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_SWIGUpcast(PhysicsShapeQueryParameters *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PhysicsShapeQueryResult_SWIGUpcast(PhysicsShapeQueryResult *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_PlaneShape_SWIGUpcast(PlaneShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_PolygonPathFinder_SWIGUpcast(PolygonPathFinder *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_RayShape_SWIGUpcast(RayShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_RayShape2D_SWIGUpcast(RayShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_RectangleShape2D_SWIGUpcast(RectangleShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_RenderTargetTexture_SWIGUpcast(RenderTargetTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_ResourcePreloader_SWIGUpcast(ResourcePreloader *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_SamplePlayer_SWIGUpcast(SamplePlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT MainLoop * SWIGSTDCALL CSharp_SceneTree_SWIGUpcast(SceneTree *jarg1) {
    return (MainLoop *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_SegmentShape2D_SWIGUpcast(SegmentShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Material * SWIGSTDCALL CSharp_ShaderMaterial_SWIGUpcast(ShaderMaterial *jarg1) {
    return (Material *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_SoundRoomParams_SWIGUpcast(SoundRoomParams *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Spatial_SWIGUpcast(Spatial *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_SpatialPlayer_SWIGUpcast(SpatialPlayer *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT SpatialPlayer * SWIGSTDCALL CSharp_SpatialSamplePlayer_SWIGUpcast(SpatialSamplePlayer *jarg1) {
    return (SpatialPlayer *)jarg1;
}

SWIGEXPORT SpatialPlayer * SWIGSTDCALL CSharp_SpatialStreamPlayer_SWIGUpcast(SpatialStreamPlayer *jarg1) {
    return (SpatialPlayer *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_StreamPlayer_SWIGUpcast(StreamPlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Timer_SWIGUpcast(Timer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Tween_SWIGUpcast(Tween *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_VehicleWheel_SWIGUpcast(VehicleWheel *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Viewport_SWIGUpcast(Viewport *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_VisibilityNotifier_SWIGUpcast(VisibilityNotifier *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_VisualInstance_SWIGUpcast(VisualInstance *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_WorldEnvironment_SWIGUpcast(WorldEnvironment *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_AnimationPlayer_SWIGUpcast(AnimationPlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_AnimationTreePlayer_SWIGUpcast(AnimationTreePlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_BakedLightInstance_SWIGUpcast(BakedLightInstance *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_BakedLightSampler_SWIGUpcast(BakedLightSampler *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Font * SWIGSTDCALL CSharp_BitmapFont_SWIGUpcast(BitmapFont *jarg1) {
    return (Font *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_BoneAttachment_SWIGUpcast(BoneAttachment *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Camera_SWIGUpcast(Camera *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_CanvasItem_SWIGUpcast(CanvasItem *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_CanvasLayer_SWIGUpcast(CanvasLayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_CollisionObject_SWIGUpcast(CollisionObject *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_CollisionPolygon_SWIGUpcast(CollisionPolygon *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_CollisionShape_SWIGUpcast(CollisionShape *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT CanvasItem * SWIGSTDCALL CSharp_Control_SWIGUpcast(Control *jarg1) {
    return (CanvasItem *)jarg1;
}

SWIGEXPORT Font * SWIGSTDCALL CSharp_DynamicFont_SWIGUpcast(DynamicFont *jarg1) {
    return (Font *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_EditorPlugin_SWIGUpcast(EditorPlugin *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_EventPlayer_SWIGUpcast(EventPlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Material * SWIGSTDCALL CSharp_FixedMaterial_SWIGUpcast(FixedMaterial *jarg1) {
    return (Material *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_GeometryInstance_SWIGUpcast(GeometryInstance *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_GraphEdit_SWIGUpcast(GraphEdit *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_GridMap_SWIGUpcast(GridMap *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_HTTPRequest_SWIGUpcast(HTTPRequest *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_ImmediateGeometry_SWIGUpcast(ImmediateGeometry *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_InstancePlaceholder_SWIGUpcast(InstancePlaceholder *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Camera * SWIGSTDCALL CSharp_InterpolatedCamera_SWIGUpcast(InterpolatedCamera *jarg1) {
    return (Camera *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_InverseKinematics_SWIGUpcast(InverseKinematics *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_ItemList_SWIGUpcast(ItemList *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Joint_SWIGUpcast(Joint *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Label_SWIGUpcast(Label *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_Light_SWIGUpcast(Light *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_LineEdit_SWIGUpcast(LineEdit *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Listener_SWIGUpcast(Listener *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_MeshInstance_SWIGUpcast(MeshInstance *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_MultiMeshInstance_SWIGUpcast(MultiMeshInstance *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Navigation_SWIGUpcast(Navigation *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_NavigationMeshInstance_SWIGUpcast(NavigationMeshInstance *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT CanvasItem * SWIGSTDCALL CSharp_Node2D_SWIGUpcast(Node2D *jarg1) {
    return (CanvasItem *)jarg1;
}

SWIGEXPORT Light * SWIGSTDCALL CSharp_OmniLight_SWIGUpcast(OmniLight *jarg1) {
    return (Light *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Panel_SWIGUpcast(Panel *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT CanvasLayer * SWIGSTDCALL CSharp_ParallaxBackground_SWIGUpcast(ParallaxBackground *jarg1) {
    return (CanvasLayer *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_ParallaxLayer_SWIGUpcast(ParallaxLayer *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_ParticleAttractor2D_SWIGUpcast(ParticleAttractor2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_Particles_SWIGUpcast(Particles *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Particles2D_SWIGUpcast(Particles2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Patch9Frame_SWIGUpcast(Patch9Frame *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Path_SWIGUpcast(Path *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Path2D_SWIGUpcast(Path2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_PathFollow_SWIGUpcast(PathFollow *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_PathFollow2D_SWIGUpcast(PathFollow2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT CollisionObject * SWIGSTDCALL CSharp_PhysicsBody_SWIGUpcast(PhysicsBody *jarg1) {
    return (CollisionObject *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_PinJoint_SWIGUpcast(PinJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Polygon2D_SWIGUpcast(Polygon2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Popup_SWIGUpcast(Popup *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_PopupDialog_SWIGUpcast(PopupDialog *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_PopupMenu_SWIGUpcast(PopupMenu *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_PopupPanel_SWIGUpcast(PopupPanel *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_Portal_SWIGUpcast(Portal *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Position2D_SWIGUpcast(Position2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Position3D_SWIGUpcast(Position3D *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_ProximityGroup_SWIGUpcast(ProximityGroup *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_Quad_SWIGUpcast(Quad *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Range_SWIGUpcast(Range *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_RayCast_SWIGUpcast(RayCast *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_RayCast2D_SWIGUpcast(RayCast2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_ReferenceFrame_SWIGUpcast(ReferenceFrame *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_RemoteTransform2D_SWIGUpcast(RemoteTransform2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_RichTextLabel_SWIGUpcast(RichTextLabel *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_RigidBody_SWIGUpcast(RigidBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_Room_SWIGUpcast(Room *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_ScrollBar_SWIGUpcast(ScrollBar *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Separator_SWIGUpcast(Separator *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Skeleton_SWIGUpcast(Skeleton *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_Slider_SWIGUpcast(Slider *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_SliderJoint_SWIGUpcast(SliderJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_SoundPlayer2D_SWIGUpcast(SoundPlayer2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_SpinBox_SWIGUpcast(SpinBox *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Light * SWIGSTDCALL CSharp_SpotLight_SWIGUpcast(SpotLight *jarg1) {
    return (Light *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Sprite_SWIGUpcast(Sprite *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_SpriteBase3D_SWIGUpcast(SpriteBase3D *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_StaticBody_SWIGUpcast(StaticBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_TabContainer_SWIGUpcast(TabContainer *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Tabs_SWIGUpcast(Tabs *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_TestCube_SWIGUpcast(TestCube *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_TextEdit_SWIGUpcast(TextEdit *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_TextureFrame_SWIGUpcast(TextureFrame *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_TextureProgress_SWIGUpcast(TextureProgress *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_TileMap_SWIGUpcast(TileMap *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_TouchScreenButton_SWIGUpcast(TouchScreenButton *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Tree_SWIGUpcast(Tree *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT ScrollBar * SWIGSTDCALL CSharp_VScrollBar_SWIGUpcast(VScrollBar *jarg1) {
    return (ScrollBar *)jarg1;
}

SWIGEXPORT Separator * SWIGSTDCALL CSharp_VSeparator_SWIGUpcast(VSeparator *jarg1) {
    return (Separator *)jarg1;
}

SWIGEXPORT Slider * SWIGSTDCALL CSharp_VSlider_SWIGUpcast(VSlider *jarg1) {
    return (Slider *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_VehicleBody_SWIGUpcast(VehicleBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_VideoPlayer_SWIGUpcast(VideoPlayer *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_ViewportSprite_SWIGUpcast(ViewportSprite *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT VisibilityNotifier * SWIGSTDCALL CSharp_VisibilityEnabler_SWIGUpcast(VisibilityEnabler *jarg1) {
    return (VisibilityNotifier *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_VisibilityNotifier2D_SWIGUpcast(VisibilityNotifier2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_WindowDialog_SWIGUpcast(WindowDialog *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_YSort_SWIGUpcast(YSort *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT WindowDialog * SWIGSTDCALL CSharp_AcceptDialog_SWIGUpcast(AcceptDialog *jarg1) {
    return (WindowDialog *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_AnimatedSprite_SWIGUpcast(AnimatedSprite *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT SpriteBase3D * SWIGSTDCALL CSharp_AnimatedSprite3D_SWIGUpcast(AnimatedSprite3D *jarg1) {
    return (SpriteBase3D *)jarg1;
}

SWIGEXPORT CollisionObject * SWIGSTDCALL CSharp_Area_SWIGUpcast(Area *jarg1) {
    return (CollisionObject *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_BackBufferCopy_SWIGUpcast(BackBufferCopy *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_BaseButton_SWIGUpcast(BaseButton *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT BaseButton * SWIGSTDCALL CSharp_Button_SWIGUpcast(Button *jarg1) {
    return (BaseButton *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_ButtonArray_SWIGUpcast(ButtonArray *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Camera2D_SWIGUpcast(Camera2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CanvasModulate_SWIGUpcast(CanvasModulate *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_CheckBox_SWIGUpcast(CheckBox *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_CheckButton_SWIGUpcast(CheckButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CollisionObject2D_SWIGUpcast(CollisionObject2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CollisionPolygon2D_SWIGUpcast(CollisionPolygon2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CollisionShape2D_SWIGUpcast(CollisionShape2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_ColorPickerButton_SWIGUpcast(ColorPickerButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_ConeTwistJoint_SWIGUpcast(ConeTwistJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT AcceptDialog * SWIGSTDCALL CSharp_ConfirmationDialog_SWIGUpcast(ConfirmationDialog *jarg1) {
    return (AcceptDialog *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Container_SWIGUpcast(Container *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Light * SWIGSTDCALL CSharp_DirectionalLight_SWIGUpcast(DirectionalLight *jarg1) {
    return (Light *)jarg1;
}

SWIGEXPORT ConfirmationDialog * SWIGSTDCALL CSharp_EditorFileDialog_SWIGUpcast(EditorFileDialog *jarg1) {
    return (ConfirmationDialog *)jarg1;
}

SWIGEXPORT ConfirmationDialog * SWIGSTDCALL CSharp_FileDialog_SWIGUpcast(FileDialog *jarg1) {
    return (ConfirmationDialog *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_Generic6DOFJoint_SWIGUpcast(Generic6DOFJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_GraphNode_SWIGUpcast(GraphNode *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_GridContainer_SWIGUpcast(GridContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT ButtonArray * SWIGSTDCALL CSharp_HButtonArray_SWIGUpcast(HButtonArray *jarg1) {
    return (ButtonArray *)jarg1;
}

SWIGEXPORT ScrollBar * SWIGSTDCALL CSharp_HScrollBar_SWIGUpcast(HScrollBar *jarg1) {
    return (ScrollBar *)jarg1;
}

SWIGEXPORT Separator * SWIGSTDCALL CSharp_HSeparator_SWIGUpcast(HSeparator *jarg1) {
    return (Separator *)jarg1;
}

SWIGEXPORT Slider * SWIGSTDCALL CSharp_HSlider_SWIGUpcast(HSlider *jarg1) {
    return (Slider *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_HingeJoint_SWIGUpcast(HingeJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Joint2D_SWIGUpcast(Joint2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_KinematicBody_SWIGUpcast(KinematicBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Light2D_SWIGUpcast(Light2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_LightOccluder2D_SWIGUpcast(LightOccluder2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT BaseButton * SWIGSTDCALL CSharp_LinkButton_SWIGUpcast(LinkButton *jarg1) {
    return (BaseButton *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_MarginContainer_SWIGUpcast(MarginContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_MenuButton_SWIGUpcast(MenuButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Navigation2D_SWIGUpcast(Navigation2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_NavigationPolygonInstance_SWIGUpcast(NavigationPolygonInstance *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_OptionButton_SWIGUpcast(OptionButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_PanelContainer_SWIGUpcast(PanelContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT CollisionObject2D * SWIGSTDCALL CSharp_PhysicsBody2D_SWIGUpcast(PhysicsBody2D *jarg1) {
    return (CollisionObject2D *)jarg1;
}

SWIGEXPORT Joint2D * SWIGSTDCALL CSharp_PinJoint2D_SWIGUpcast(PinJoint2D *jarg1) {
    return (Joint2D *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_ProgressBar_SWIGUpcast(ProgressBar *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT PhysicsBody2D * SWIGSTDCALL CSharp_RigidBody2D_SWIGUpcast(RigidBody2D *jarg1) {
    return (PhysicsBody2D *)jarg1;
}

SWIGEXPORT SoundPlayer2D * SWIGSTDCALL CSharp_SamplePlayer2D_SWIGUpcast(SamplePlayer2D *jarg1) {
    return (SoundPlayer2D *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_ScrollContainer_SWIGUpcast(ScrollContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_SplitContainer_SWIGUpcast(SplitContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT SpriteBase3D * SWIGSTDCALL CSharp_Sprite3D_SWIGUpcast(Sprite3D *jarg1) {
    return (SpriteBase3D *)jarg1;
}

SWIGEXPORT PhysicsBody2D * SWIGSTDCALL CSharp_StaticBody2D_SWIGUpcast(StaticBody2D *jarg1) {
    return (PhysicsBody2D *)jarg1;
}

SWIGEXPORT BaseButton * SWIGSTDCALL CSharp_TextureButton_SWIGUpcast(TextureButton *jarg1) {
    return (BaseButton *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_ToolButton_SWIGUpcast(ToolButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT ButtonArray * SWIGSTDCALL CSharp_VButtonArray_SWIGUpcast(VButtonArray *jarg1) {
    return (ButtonArray *)jarg1;
}

SWIGEXPORT SplitContainer * SWIGSTDCALL CSharp_VSplitContainer_SWIGUpcast(VSplitContainer *jarg1) {
    return (SplitContainer *)jarg1;
}

SWIGEXPORT VisibilityNotifier2D * SWIGSTDCALL CSharp_VisibilityEnabler2D_SWIGUpcast(VisibilityEnabler2D *jarg1) {
    return (VisibilityNotifier2D *)jarg1;
}

SWIGEXPORT CollisionObject2D * SWIGSTDCALL CSharp_Area2D_SWIGUpcast(Area2D *jarg1) {
    return (CollisionObject2D *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_BoxContainer_SWIGUpcast(BoxContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_ButtonGroup_SWIGUpcast(ButtonGroup *jarg1) {
    return (BoxContainer *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_CenterContainer_SWIGUpcast(CenterContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_ColorPicker_SWIGUpcast(ColorPicker *jarg1) {
    return (BoxContainer *)jarg1;
}

SWIGEXPORT Joint2D * SWIGSTDCALL CSharp_DampedSpringJoint2D_SWIGUpcast(DampedSpringJoint2D *jarg1) {
    return (Joint2D *)jarg1;
}

SWIGEXPORT Joint2D * SWIGSTDCALL CSharp_GrooveJoint2D_SWIGUpcast(GrooveJoint2D *jarg1) {
    return (Joint2D *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_HBoxContainer_SWIGUpcast(HBoxContainer *jarg1) {
    return (BoxContainer *)jarg1;
}

SWIGEXPORT SplitContainer * SWIGSTDCALL CSharp_HSplitContainer_SWIGUpcast(HSplitContainer *jarg1) {
    return (SplitContainer *)jarg1;
}

SWIGEXPORT PhysicsBody2D * SWIGSTDCALL CSharp_KinematicBody2D_SWIGUpcast(KinematicBody2D *jarg1) {
    return (PhysicsBody2D *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_VBoxContainer_SWIGUpcast(VBoxContainer *jarg1) {
    return (BoxContainer *)jarg1;
}

#ifdef __cplusplus
}
#endif

