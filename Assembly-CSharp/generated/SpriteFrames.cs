/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class SpriteFrames : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal SpriteFrames(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.SpriteFrames_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected SpriteFrames(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.SpriteFrames_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpriteFrames obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void add_animation(string anim) {
    GodotEnginePINVOKE.SpriteFrames_add_animation(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_animation(string anim) {
    bool ret = GodotEnginePINVOKE.SpriteFrames_has_animation(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void remove_animation(string anim) {
    GodotEnginePINVOKE.SpriteFrames_remove_animation(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void rename_animation(string anim, string newname) {
    GodotEnginePINVOKE.SpriteFrames_rename_animation(swigCPtr, anim, newname);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_animation_speed(string anim, float speed) {
    GodotEnginePINVOKE.SpriteFrames_set_animation_speed(swigCPtr, anim, speed);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float get_animation_speed(string anim) {
    float ret = GodotEnginePINVOKE.SpriteFrames_get_animation_speed(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_animation_loop(string anim, bool loop) {
    GodotEnginePINVOKE.SpriteFrames_set_animation_loop(swigCPtr, anim, loop);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool get_animation_loop(string anim) {
    bool ret = GodotEnginePINVOKE.SpriteFrames_get_animation_loop(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void add_frame(string anim, Object frame, int atpos) {
    GodotEnginePINVOKE.SpriteFrames_add_frame__SWIG_0(swigCPtr, anim, Object.getCPtr(frame), atpos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_frame(string anim, Object frame) {
    GodotEnginePINVOKE.SpriteFrames_add_frame__SWIG_1(swigCPtr, anim, Object.getCPtr(frame));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_frame_count(string anim) {
    int ret = GodotEnginePINVOKE.SpriteFrames_get_frame_count(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Object get_frame(string anim, int idx) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.SpriteFrames_get_frame(swigCPtr, anim, idx);
    Object ret = InternalHelpers.GetManagedObjectFor(cPtr);
    if (ret == null) {
      ret = new Object(cPtr, false);
    }
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_frame(string anim, int idx, Object txt) {
    GodotEnginePINVOKE.SpriteFrames_set_frame(swigCPtr, anim, idx, Object.getCPtr(txt));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_frame(string anim, int idx) {
    GodotEnginePINVOKE.SpriteFrames_remove_frame(swigCPtr, anim, idx);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear(string anim) {
    GodotEnginePINVOKE.SpriteFrames_clear(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear_all() {
    GodotEnginePINVOKE.SpriteFrames_clear_all(swigCPtr);
  }

  public SpriteFrames() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_SpriteFrames());
    }
  }

}

}
