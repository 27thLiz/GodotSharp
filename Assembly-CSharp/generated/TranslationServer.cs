/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class TranslationServer : Object {
  private static TranslationServer instance;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal TranslationServer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.TranslationServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected TranslationServer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.TranslationServer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TranslationServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static TranslationServer Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal TranslationServer() {}


  public void set_locale(string locale) {
    GodotEnginePINVOKE.TranslationServer_set_locale(swigCPtr, locale);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_locale() {
    string ret = GodotEnginePINVOKE.TranslationServer_get_locale(swigCPtr);
    return ret;
  }

  public string translate(string message) {
    string ret = GodotEnginePINVOKE.TranslationServer_translate(swigCPtr, message);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void add_translation(Translation translation) {
    GodotEnginePINVOKE.TranslationServer_add_translation(swigCPtr, Translation.getCPtr(translation));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_translation(Translation translation) {
    GodotEnginePINVOKE.TranslationServer_remove_translation(swigCPtr, Translation.getCPtr(translation));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    GodotEnginePINVOKE.TranslationServer_clear(swigCPtr);
  }

  private static TranslationServer SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TranslationServer_SingletonGetInstance();
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    TranslationServer ret = InternalHelpers.UnmanagedGetManaged(cPtr) as TranslationServer;
    return ret;
  }

}

}
