/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Variant : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Variant(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Variant obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Variant() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Variant(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  // Implicit conversions
  
  public static implicit operator bool(Variant from) {
    return from.operator_to_bool();
  }
  
  public static implicit operator int(Variant from) {
    return from.operator_to_int();
  }
  
  public static implicit operator float(Variant from) {
    return from.operator_to_float();
  }
  
  public static implicit operator Vector2(Variant from) {
    return from.operator_to_Vector2();
  }
  
  public static implicit operator Rect2(Variant from) {
    return from.operator_to_Rect2();
  }
  
  public static implicit operator Matrix32(Variant from) {
    return from.operator_to_Matrix32();
  }
  
  public static implicit operator Vector3(Variant from) {
    return from.operator_to_Vector3();
  }
  
  public static implicit operator Matrix3(Variant from) {
    return from.operator_to_Matrix3();
  }
  
  public static implicit operator Quat(Variant from) {
    return from.operator_to_Quat();
  }
  
  public static implicit operator Transform(Variant from) {
    return from.operator_to_Transform();
  }
  
  public static implicit operator Object(Variant from) {
    return from.operator_to_Object();
  }
  
  public static implicit operator Node(Variant from) {
    return from.operator_to_Node();
  }
  
  public static implicit operator Control(Variant from) {
    return from.operator_to_Control();
  }
  
  // Implicit constructors
  
  public static implicit operator Variant(bool from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(int from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(float from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Vector2 from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Rect2 from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Matrix32 from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Vector3 from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Matrix3 from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Quat from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Transform from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(string from) {
    return new Variant(from);
  }
  
  public static implicit operator Variant(Object from) {
    return new Variant(from);
  }
  
  public bool operator_to_bool() {
    bool ret = GodotEnginePINVOKE.Variant_operator_to_bool(swigCPtr);
    return ret;
  }

  public int operator_to_int() {
    int ret = GodotEnginePINVOKE.Variant_operator_to_int(swigCPtr);
    return ret;
  }

  public float operator_to_float() {
    float ret = GodotEnginePINVOKE.Variant_operator_to_float(swigCPtr);
    return ret;
  }

  public string operator_to_String() {
    string ret = GodotEnginePINVOKE.Variant_operator_to_String(swigCPtr);
    return ret;
  }

  public Vector2 operator_to_Vector2() {
    Vector2 ret = GodotEnginePINVOKE.Variant_operator_to_Vector2(swigCPtr);
    return ret;
}

  public Rect2 operator_to_Rect2() {
    Rect2 ret = GodotEnginePINVOKE.Variant_operator_to_Rect2(swigCPtr);
    return ret;
}

  public Matrix32 operator_to_Matrix32() {
    Matrix32 ret = GodotEnginePINVOKE.Variant_operator_to_Matrix32(swigCPtr);
    return ret;
}

  public Vector3 operator_to_Vector3() {
    Vector3 ret = GodotEnginePINVOKE.Variant_operator_to_Vector3(swigCPtr);
    return ret;
}

  public Matrix3 operator_to_Matrix3() {
    Matrix3 ret = GodotEnginePINVOKE.Variant_operator_to_Matrix3(swigCPtr);
    return ret;
}

  public Quat operator_to_Quat() {
    Quat ret = GodotEnginePINVOKE.Variant_operator_to_Quat(swigCPtr);
    return ret;
}

  public Transform operator_to_Transform() {
    Transform ret = GodotEnginePINVOKE.Variant_operator_to_Transform(swigCPtr);
    return ret;
}

  public Object operator_to_Object() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Variant_operator_to_Object(swigCPtr);
    Object ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object(cPtr, false);
    return ret;
  }

  public Node operator_to_Node() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Variant_operator_to_Node(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public Control operator_to_Control() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Variant_operator_to_Control(swigCPtr);
    Control ret = (cPtr == global::System.IntPtr.Zero) ? null : new Control(cPtr, false);
    return ret;
  }

  public Variant() : this(GodotEnginePINVOKE.new_Variant__SWIG_0(), true) {
  }

  public Variant(bool p_bool) : this(GodotEnginePINVOKE.new_Variant__SWIG_1(p_bool), true) {
  }

  public Variant(int p_int) : this(GodotEnginePINVOKE.new_Variant__SWIG_2(p_int), true) {
  }

  public Variant(float p_float) : this(GodotEnginePINVOKE.new_Variant__SWIG_3(p_float), true) {
  }

  public Variant(string p_string) : this(GodotEnginePINVOKE.new_Variant__SWIG_4(p_string), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Vector2 p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_5(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Rect2 p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_6(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Matrix32 p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_7(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Vector3 p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_8(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Matrix3 p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_9(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Quat p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_10(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Transform p_transform) : this(GodotEnginePINVOKE.new_Variant__SWIG_11(ref p_transform), true) {
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Variant(Object p_object) : this(GodotEnginePINVOKE.new_Variant__SWIG_12(Object.getCPtr(p_object)), true) {
  }

}

}
