/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Shape2D : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Shape2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Shape2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Shape2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Shape2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Shape2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Shape2D() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Shape2D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal Shape2D() {}


  public void set_custom_solver_bias(float bias) {
    GodotEnginePINVOKE.Shape2D_set_custom_solver_bias(swigCPtr, bias);
  }

  public float get_custom_solver_bias() {
    float ret = GodotEnginePINVOKE.Shape2D_get_custom_solver_bias(swigCPtr);
    return ret;
  }

  public bool collide(Matrix32 local_xform, Shape2D with_shape, Matrix32 shape_xform) {
    bool ret = GodotEnginePINVOKE.Shape2D_collide(swigCPtr, ref local_xform, Shape2D.getCPtr(with_shape), ref shape_xform);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool collide_with_motion(Matrix32 local_xform, Vector2 local_motion, Shape2D with_shape, Matrix32 shape_xform, Vector2 shape_motion) {
    bool ret = GodotEnginePINVOKE.Shape2D_collide_with_motion(swigCPtr, ref local_xform, ref local_motion, Shape2D.getCPtr(with_shape), ref shape_xform, ref shape_motion);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Variant collide_and_get_contacts(Matrix32 local_xform, Shape2D with_shape, Matrix32 shape_xform) {
    Variant ret = new Variant(GodotEnginePINVOKE.Shape2D_collide_and_get_contacts(swigCPtr, ref local_xform, Shape2D.getCPtr(with_shape), ref shape_xform), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Variant collide_with_motion_and_get_contacts(Matrix32 local_xform, Vector2 local_motion, Shape2D with_shape, Matrix32 shape_xform, Vector2 shape_motion) {
    Variant ret = new Variant(GodotEnginePINVOKE.Shape2D_collide_with_motion_and_get_contacts(swigCPtr, ref local_xform, ref local_motion, Shape2D.getCPtr(with_shape), ref shape_xform, ref shape_motion), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
