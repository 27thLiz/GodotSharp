/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class RoomBounds : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal RoomBounds(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.RoomBounds_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected RoomBounds(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.RoomBounds_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RoomBounds obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_bounds(SWIGTYPE_p_Dictionary bsp_tree) {
    GodotEnginePINVOKE.RoomBounds_set_bounds(swigCPtr, SWIGTYPE_p_Dictionary.getCPtr(bsp_tree));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Dictionary get_bounds() {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.RoomBounds_get_bounds(swigCPtr), true);
    return ret;
  }

  public void set_geometry_hint(SWIGTYPE_p_Vector3Array triangles) {
    GodotEnginePINVOKE.RoomBounds_set_geometry_hint(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(triangles));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector3Array get_geometry_hint() {
    SWIGTYPE_p_Vector3Array ret = new SWIGTYPE_p_Vector3Array(GodotEnginePINVOKE.RoomBounds_get_geometry_hint(swigCPtr), true);
    return ret;
  }

  public void regenerate_bsp() {
    GodotEnginePINVOKE.RoomBounds_regenerate_bsp(swigCPtr);
  }

  public void regenerate_bsp_cubic() {
    GodotEnginePINVOKE.RoomBounds_regenerate_bsp_cubic(swigCPtr);
  }

  public RoomBounds() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_RoomBounds());
    }
  }

}

}
