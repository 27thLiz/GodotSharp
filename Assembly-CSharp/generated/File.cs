/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class File : Reference {
  public static readonly int READ = 1;
  public static readonly int WRITE = 2;
  public static readonly int READ_WRITE = 3;
  public static readonly int WRITE_READ = 7;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal File(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.File_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected File(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.File_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(File obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~File() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_File(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public File() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_File());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public int open_encrypted(string path, int mode_flags, SWIGTYPE_p_RawArray key) {
    int ret = GodotEnginePINVOKE.File_open_encrypted(swigCPtr, path, mode_flags, SWIGTYPE_p_RawArray.getCPtr(key));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int open_encrypted_with_pass(string path, int mode_flags, string pass) {
    int ret = GodotEnginePINVOKE.File_open_encrypted_with_pass(swigCPtr, path, mode_flags, pass);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int open(string path, int flags) {
    int ret = GodotEnginePINVOKE.File_open(swigCPtr, path, flags);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void close() {
    GodotEnginePINVOKE.File_close(swigCPtr);
  }

  public bool is_open() {
    bool ret = GodotEnginePINVOKE.File_is_open(swigCPtr);
    return ret;
  }

  public void seek(int pos) {
    GodotEnginePINVOKE.File_seek(swigCPtr, pos);
  }

  public void seek_end(int pos) {
    GodotEnginePINVOKE.File_seek_end__SWIG_0(swigCPtr, pos);
  }

  public void seek_end() {
    GodotEnginePINVOKE.File_seek_end__SWIG_1(swigCPtr);
  }

  public int get_pos() {
    int ret = GodotEnginePINVOKE.File_get_pos(swigCPtr);
    return ret;
  }

  public int get_len() {
    int ret = GodotEnginePINVOKE.File_get_len(swigCPtr);
    return ret;
  }

  public bool eof_reached() {
    bool ret = GodotEnginePINVOKE.File_eof_reached(swigCPtr);
    return ret;
  }

  public int get_8() {
    int ret = GodotEnginePINVOKE.File_get_8(swigCPtr);
    return ret;
  }

  public int get_16() {
    int ret = GodotEnginePINVOKE.File_get_16(swigCPtr);
    return ret;
  }

  public int get_32() {
    int ret = GodotEnginePINVOKE.File_get_32(swigCPtr);
    return ret;
  }

  public int get_64() {
    int ret = GodotEnginePINVOKE.File_get_64(swigCPtr);
    return ret;
  }

  public float get_float() {
    float ret = GodotEnginePINVOKE.File_get_float(swigCPtr);
    return ret;
  }

  public float get_double() {
    float ret = GodotEnginePINVOKE.File_get_double(swigCPtr);
    return ret;
  }

  public float get_real() {
    float ret = GodotEnginePINVOKE.File_get_real(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_RawArray get_buffer(int len) {
    SWIGTYPE_p_RawArray ret = new SWIGTYPE_p_RawArray(GodotEnginePINVOKE.File_get_buffer(swigCPtr, len), true);
    return ret;
  }

  public string get_line() {
    string ret = GodotEnginePINVOKE.File_get_line(swigCPtr);
    return ret;
  }

  public string get_as_text() {
    string ret = GodotEnginePINVOKE.File_get_as_text(swigCPtr);
    return ret;
  }

  public string get_md5(string path) {
    string ret = GodotEnginePINVOKE.File_get_md5(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_sha256(string path) {
    string ret = GodotEnginePINVOKE.File_get_sha256(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool get_endian_swap() {
    bool ret = GodotEnginePINVOKE.File_get_endian_swap(swigCPtr);
    return ret;
  }

  public void set_endian_swap(bool enable) {
    GodotEnginePINVOKE.File_set_endian_swap(swigCPtr, enable);
  }

  public int get_error() {
    int ret = GodotEnginePINVOKE.File_get_error(swigCPtr);
    return ret;
  }

  public void get_var() {
    GodotEnginePINVOKE.File_get_var(swigCPtr);
  }

  public SWIGTYPE_p_StringArray get_csv_line(string delim) {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.File_get_csv_line__SWIG_0(swigCPtr, delim), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_StringArray get_csv_line() {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.File_get_csv_line__SWIG_1(swigCPtr), true);
    return ret;
  }

  public void store_8(int value) {
    GodotEnginePINVOKE.File_store_8(swigCPtr, value);
  }

  public void store_16(int value) {
    GodotEnginePINVOKE.File_store_16(swigCPtr, value);
  }

  public void store_32(int value) {
    GodotEnginePINVOKE.File_store_32(swigCPtr, value);
  }

  public void store_64(int value) {
    GodotEnginePINVOKE.File_store_64(swigCPtr, value);
  }

  public void store_float(float value) {
    GodotEnginePINVOKE.File_store_float(swigCPtr, value);
  }

  public void store_double(float value) {
    GodotEnginePINVOKE.File_store_double(swigCPtr, value);
  }

  public void store_real(float value) {
    GodotEnginePINVOKE.File_store_real(swigCPtr, value);
  }

  public void store_buffer(SWIGTYPE_p_RawArray buffer) {
    GodotEnginePINVOKE.File_store_buffer(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(buffer));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void store_line(string line) {
    GodotEnginePINVOKE.File_store_line(swigCPtr, line);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void store_string(string arg0) {
    GodotEnginePINVOKE.File_store_string(swigCPtr, arg0);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void store_var(Variant value) {
    GodotEnginePINVOKE.File_store_var(swigCPtr, Variant.getCPtr(value));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void store_pascal_string(string arg0) {
    GodotEnginePINVOKE.File_store_pascal_string(swigCPtr, arg0);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_pascal_string() {
    string ret = GodotEnginePINVOKE.File_get_pascal_string(swigCPtr);
    return ret;
  }

  public bool file_exists(string path) {
    bool ret = GodotEnginePINVOKE.File_file_exists(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
