/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Patch9Frame : Control {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Patch9Frame(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Patch9Frame_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Patch9Frame(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Patch9Frame_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Patch9Frame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_texture(Object texture) {
    GodotEnginePINVOKE.Patch9Frame_set_texture(swigCPtr, Object.getCPtr(texture));
  }

  public Object get_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Patch9Frame_get_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
    	return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void set_modulate(SWIGTYPE_p_Color modulate) {
    GodotEnginePINVOKE.Patch9Frame_set_modulate(swigCPtr, SWIGTYPE_p_Color.getCPtr(modulate));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_modulate() {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.Patch9Frame_get_modulate(swigCPtr), true);
    return ret;
  }

  public void set_patch_margin(int margin, int value) {
    GodotEnginePINVOKE.Patch9Frame_set_patch_margin(swigCPtr, margin, value);
  }

  public int get_patch_margin(int margin) {
    int ret = GodotEnginePINVOKE.Patch9Frame_get_patch_margin(swigCPtr, margin);
    return ret;
  }

  public void set_region_rect(SWIGTYPE_p_Rect2 rect) {
    GodotEnginePINVOKE.Patch9Frame_set_region_rect(swigCPtr, SWIGTYPE_p_Rect2.getCPtr(rect));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Rect2 get_region_rect() {
    SWIGTYPE_p_Rect2 ret = new SWIGTYPE_p_Rect2(GodotEnginePINVOKE.Patch9Frame_get_region_rect(swigCPtr), true);
    return ret;
  }

  public void set_draw_center(bool draw_center) {
    GodotEnginePINVOKE.Patch9Frame_set_draw_center(swigCPtr, draw_center);
  }

  public bool get_draw_center() {
    bool ret = GodotEnginePINVOKE.Patch9Frame_get_draw_center(swigCPtr);
    return ret;
  }

  public Patch9Frame() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Patch9Frame());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
