/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class XMLParser : Reference {
  public static readonly int NODE_NONE = 0;
  public static readonly int NODE_ELEMENT = 1;
  public static readonly int NODE_ELEMENT_END = 2;
  public static readonly int NODE_TEXT = 3;
  public static readonly int NODE_COMMENT = 4;
  public static readonly int NODE_CDATA = 5;
  public static readonly int NODE_UNKNOWN = 6;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal XMLParser(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.XMLParser_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected XMLParser(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.XMLParser_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XMLParser obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int read() {
    int ret = GodotEnginePINVOKE.XMLParser_read(swigCPtr);
    return ret;
  }

  public int get_node_type() {
    int ret = GodotEnginePINVOKE.XMLParser_get_node_type(swigCPtr);
    return ret;
  }

  public string get_node_name() {
    string ret = GodotEnginePINVOKE.XMLParser_get_node_name(swigCPtr);
    return ret;
  }

  public string get_node_data() {
    string ret = GodotEnginePINVOKE.XMLParser_get_node_data(swigCPtr);
    return ret;
  }

  public int get_node_offset() {
    int ret = GodotEnginePINVOKE.XMLParser_get_node_offset(swigCPtr);
    return ret;
  }

  public int get_attribute_count() {
    int ret = GodotEnginePINVOKE.XMLParser_get_attribute_count(swigCPtr);
    return ret;
  }

  public string get_attribute_name(int idx) {
    string ret = GodotEnginePINVOKE.XMLParser_get_attribute_name(swigCPtr, idx);
    return ret;
  }

  public string get_attribute_value(int idx) {
    string ret = GodotEnginePINVOKE.XMLParser_get_attribute_value(swigCPtr, idx);
    return ret;
  }

  public bool has_attribute(string name) {
    bool ret = GodotEnginePINVOKE.XMLParser_has_attribute(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_named_attribute_value(string name) {
    string ret = GodotEnginePINVOKE.XMLParser_get_named_attribute_value(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_named_attribute_value_safe(string name) {
    string ret = GodotEnginePINVOKE.XMLParser_get_named_attribute_value_safe(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_empty() {
    bool ret = GodotEnginePINVOKE.XMLParser_is_empty(swigCPtr);
    return ret;
  }

  public int get_current_line() {
    int ret = GodotEnginePINVOKE.XMLParser_get_current_line(swigCPtr);
    return ret;
  }

  public void skip_section() {
    GodotEnginePINVOKE.XMLParser_skip_section(swigCPtr);
  }

  public int seek(int pos) {
    int ret = GodotEnginePINVOKE.XMLParser_seek(swigCPtr, pos);
    return ret;
  }

  public int open(string file) {
    int ret = GodotEnginePINVOKE.XMLParser_open(swigCPtr, file);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int open_buffer(SWIGTYPE_p_RawArray buffer) {
    int ret = GodotEnginePINVOKE.XMLParser_open_buffer(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(buffer));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public XMLParser() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_XMLParser());
    }
  }

}

}
