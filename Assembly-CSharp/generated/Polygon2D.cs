/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Polygon2D : Node2D {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Polygon2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Polygon2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Polygon2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Polygon2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Polygon2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_polygon(SWIGTYPE_p_Vector2Array polygon) {
    GodotEnginePINVOKE.Polygon2D_set_polygon(swigCPtr, SWIGTYPE_p_Vector2Array.getCPtr(polygon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector2Array get_polygon() {
    SWIGTYPE_p_Vector2Array ret = new SWIGTYPE_p_Vector2Array(GodotEnginePINVOKE.Polygon2D_get_polygon(swigCPtr), true);
    return ret;
  }

  public void set_uv(SWIGTYPE_p_Vector2Array uv) {
    GodotEnginePINVOKE.Polygon2D_set_uv(swigCPtr, SWIGTYPE_p_Vector2Array.getCPtr(uv));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector2Array get_uv() {
    SWIGTYPE_p_Vector2Array ret = new SWIGTYPE_p_Vector2Array(GodotEnginePINVOKE.Polygon2D_get_uv(swigCPtr), true);
    return ret;
  }

  public void set_color(SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.Polygon2D_set_color(swigCPtr, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_color() {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.Polygon2D_get_color(swigCPtr), true);
    return ret;
  }

  public void set_vertex_colors(SWIGTYPE_p_ColorArray vertex_colors) {
    GodotEnginePINVOKE.Polygon2D_set_vertex_colors(swigCPtr, SWIGTYPE_p_ColorArray.getCPtr(vertex_colors));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ColorArray get_vertex_colors() {
    SWIGTYPE_p_ColorArray ret = new SWIGTYPE_p_ColorArray(GodotEnginePINVOKE.Polygon2D_get_vertex_colors(swigCPtr), true);
    return ret;
  }

  public void set_texture(Object texture) {
    GodotEnginePINVOKE.Polygon2D_set_texture(swigCPtr, Object.getCPtr(texture));
  }

  public Object get_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Polygon2D_get_texture(swigCPtr);
    Object ret = InternalHelpers.GetManagedObjectFor(cPtr);
    if (ret == null) {
      ret = new Object(cPtr, false);
    }
    return ret;
  }

  public void set_texture_offset(Vector2 texture_offset) {
    GodotEnginePINVOKE.Polygon2D_set_texture_offset(swigCPtr, Vector2.getCPtr(texture_offset));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_texture_offset() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Polygon2D_get_texture_offset(swigCPtr), true);
    return ret;
  }

  public void set_texture_rotation(float texture_rotation) {
    GodotEnginePINVOKE.Polygon2D_set_texture_rotation(swigCPtr, texture_rotation);
  }

  public float get_texture_rotation() {
    float ret = GodotEnginePINVOKE.Polygon2D_get_texture_rotation(swigCPtr);
    return ret;
  }

  public void set_texture_scale(Vector2 texture_scale) {
    GodotEnginePINVOKE.Polygon2D_set_texture_scale(swigCPtr, Vector2.getCPtr(texture_scale));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_texture_scale() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Polygon2D_get_texture_scale(swigCPtr), true);
    return ret;
  }

  public void set_invert(bool invert) {
    GodotEnginePINVOKE.Polygon2D_set_invert(swigCPtr, invert);
  }

  public bool get_invert() {
    bool ret = GodotEnginePINVOKE.Polygon2D_get_invert(swigCPtr);
    return ret;
  }

  public void set_invert_border(float invert_border) {
    GodotEnginePINVOKE.Polygon2D_set_invert_border(swigCPtr, invert_border);
  }

  public float get_invert_border() {
    float ret = GodotEnginePINVOKE.Polygon2D_get_invert_border(swigCPtr);
    return ret;
  }

  public void set_offset(Vector2 offset) {
    GodotEnginePINVOKE.Polygon2D_set_offset(swigCPtr, Vector2.getCPtr(offset));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_offset() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Polygon2D_get_offset(swigCPtr), true);
    return ret;
  }

  public Polygon2D() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Polygon2D());
    }
  }

}

}
