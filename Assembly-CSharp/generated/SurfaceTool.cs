/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class SurfaceTool : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal SurfaceTool(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.SurfaceTool_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected SurfaceTool(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.SurfaceTool_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SurfaceTool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SurfaceTool() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_SurfaceTool(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public SurfaceTool() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_SurfaceTool());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void begin(int primitive) {
    GodotEnginePINVOKE.SurfaceTool_begin(swigCPtr, primitive);
  }

  public void add_vertex(Vector3 vertex) {
    GodotEnginePINVOKE.SurfaceTool_add_vertex(swigCPtr, ref vertex);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_color(SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.SurfaceTool_add_color(swigCPtr, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_normal(Vector3 normal) {
    GodotEnginePINVOKE.SurfaceTool_add_normal(swigCPtr, ref normal);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_tangent(SWIGTYPE_p_Plane tangent) {
    GodotEnginePINVOKE.SurfaceTool_add_tangent(swigCPtr, SWIGTYPE_p_Plane.getCPtr(tangent));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_uv(Vector2 uv) {
    GodotEnginePINVOKE.SurfaceTool_add_uv(swigCPtr, ref uv);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_uv2(Vector2 uv2) {
    GodotEnginePINVOKE.SurfaceTool_add_uv2(swigCPtr, ref uv2);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_bones(SWIGTYPE_p_IntArray bones) {
    GodotEnginePINVOKE.SurfaceTool_add_bones(swigCPtr, SWIGTYPE_p_IntArray.getCPtr(bones));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_weights(SWIGTYPE_p_RealArray weights) {
    GodotEnginePINVOKE.SurfaceTool_add_weights(swigCPtr, SWIGTYPE_p_RealArray.getCPtr(weights));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_smooth_group(bool smooth) {
    GodotEnginePINVOKE.SurfaceTool_add_smooth_group(swigCPtr, smooth);
  }

  public void add_triangle_fan(SWIGTYPE_p_Vector3Array vertexes, SWIGTYPE_p_Vector2Array uvs, SWIGTYPE_p_ColorArray colors, SWIGTYPE_p_Vector2Array uv2s, SWIGTYPE_p_Vector3Array normals, SWIGTYPE_p_Array tangents) {
    GodotEnginePINVOKE.SurfaceTool_add_triangle_fan__SWIG_0(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(vertexes), SWIGTYPE_p_Vector2Array.getCPtr(uvs), SWIGTYPE_p_ColorArray.getCPtr(colors), SWIGTYPE_p_Vector2Array.getCPtr(uv2s), SWIGTYPE_p_Vector3Array.getCPtr(normals), SWIGTYPE_p_Array.getCPtr(tangents));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_triangle_fan(SWIGTYPE_p_Vector3Array vertexes, SWIGTYPE_p_Vector2Array uvs, SWIGTYPE_p_ColorArray colors, SWIGTYPE_p_Vector2Array uv2s, SWIGTYPE_p_Vector3Array normals) {
    GodotEnginePINVOKE.SurfaceTool_add_triangle_fan__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(vertexes), SWIGTYPE_p_Vector2Array.getCPtr(uvs), SWIGTYPE_p_ColorArray.getCPtr(colors), SWIGTYPE_p_Vector2Array.getCPtr(uv2s), SWIGTYPE_p_Vector3Array.getCPtr(normals));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_triangle_fan(SWIGTYPE_p_Vector3Array vertexes, SWIGTYPE_p_Vector2Array uvs, SWIGTYPE_p_ColorArray colors, SWIGTYPE_p_Vector2Array uv2s) {
    GodotEnginePINVOKE.SurfaceTool_add_triangle_fan__SWIG_2(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(vertexes), SWIGTYPE_p_Vector2Array.getCPtr(uvs), SWIGTYPE_p_ColorArray.getCPtr(colors), SWIGTYPE_p_Vector2Array.getCPtr(uv2s));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_triangle_fan(SWIGTYPE_p_Vector3Array vertexes, SWIGTYPE_p_Vector2Array uvs, SWIGTYPE_p_ColorArray colors) {
    GodotEnginePINVOKE.SurfaceTool_add_triangle_fan__SWIG_3(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(vertexes), SWIGTYPE_p_Vector2Array.getCPtr(uvs), SWIGTYPE_p_ColorArray.getCPtr(colors));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_triangle_fan(SWIGTYPE_p_Vector3Array vertexes, SWIGTYPE_p_Vector2Array uvs) {
    GodotEnginePINVOKE.SurfaceTool_add_triangle_fan__SWIG_4(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(vertexes), SWIGTYPE_p_Vector2Array.getCPtr(uvs));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_triangle_fan(SWIGTYPE_p_Vector3Array vertexes) {
    GodotEnginePINVOKE.SurfaceTool_add_triangle_fan__SWIG_5(swigCPtr, SWIGTYPE_p_Vector3Array.getCPtr(vertexes));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_material(Material material) {
    GodotEnginePINVOKE.SurfaceTool_set_material(swigCPtr, Material.getCPtr(material));
  }

  public void index() {
    GodotEnginePINVOKE.SurfaceTool_index(swigCPtr);
  }

  public void deindex() {
    GodotEnginePINVOKE.SurfaceTool_deindex(swigCPtr);
  }

  public void generate_normals() {
    GodotEnginePINVOKE.SurfaceTool_generate_normals(swigCPtr);
  }

  public Mesh commit(Mesh existing) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.SurfaceTool_commit__SWIG_0(swigCPtr, Mesh.getCPtr(existing));
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Mesh ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Mesh;
    return ret;
}

  public Mesh commit() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.SurfaceTool_commit__SWIG_1(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Mesh ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Mesh;
    return ret;
}

  public void clear() {
    GodotEnginePINVOKE.SurfaceTool_clear(swigCPtr);
  }

}

}
