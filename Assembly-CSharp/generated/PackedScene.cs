/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PackedScene : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PackedScene(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PackedScene_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PackedScene(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PackedScene_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PackedScene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PackedScene() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_PackedScene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int pack(Node path) {
    int ret = GodotEnginePINVOKE.PackedScene_pack(swigCPtr, Node.getCPtr(path));
    return ret;
  }

  public Node instance(bool gen_edit_state) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PackedScene_instance__SWIG_0(swigCPtr, gen_edit_state);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Node ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Node;
    return ret;
  }

  public Node instance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PackedScene_instance__SWIG_1(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Node ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Node;
    return ret;
  }

  public bool can_instance() {
    bool ret = GodotEnginePINVOKE.PackedScene_can_instance(swigCPtr);
    return ret;
  }

  public SceneState get_state() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PackedScene_get_state(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    SceneState ret = InternalHelpers.UnmanagedGetManaged(cPtr) as SceneState;
    return ret;
}

  public PackedScene() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_PackedScene());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
