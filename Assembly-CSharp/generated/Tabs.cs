/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Tabs : Control {
  public static readonly int ALIGN_LEFT = 0;
  public static readonly int ALIGN_CENTER = 1;
  public static readonly int ALIGN_RIGHT = 2;
  public static readonly int CLOSE_BUTTON_SHOW_ACTIVE_ONLY = 1;
  public static readonly int CLOSE_BUTTON_SHOW_ALWAYS = 2;
  public static readonly int CLOSE_BUTTON_SHOW_NEVER = 0;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Tabs(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Tabs_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Tabs(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Tabs_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Tabs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int get_tab_count() {
    int ret = GodotEnginePINVOKE.Tabs_get_tab_count(swigCPtr);
    return ret;
  }

  public void set_current_tab(int tab_idx) {
    GodotEnginePINVOKE.Tabs_set_current_tab(swigCPtr, tab_idx);
  }

  public int get_current_tab() {
    int ret = GodotEnginePINVOKE.Tabs_get_current_tab(swigCPtr);
    return ret;
  }

  public void set_tab_title(int tab_idx, string title) {
    GodotEnginePINVOKE.Tabs_set_tab_title(swigCPtr, tab_idx, title);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_tab_title(int tab_idx) {
    string ret = GodotEnginePINVOKE.Tabs_get_tab_title(swigCPtr, tab_idx);
    return ret;
  }

  public void set_tab_icon(int tab_idx, SWIGTYPE_p_RefT_Texture_t icon) {
    GodotEnginePINVOKE.Tabs_set_tab_icon(swigCPtr, tab_idx, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RefT_Texture_t get_tab_icon(int tab_idx) {
    SWIGTYPE_p_RefT_Texture_t ret = new SWIGTYPE_p_RefT_Texture_t(GodotEnginePINVOKE.Tabs_get_tab_icon(swigCPtr, tab_idx), true);
    return ret;
  }

  public void remove_tab(int tab_idx) {
    GodotEnginePINVOKE.Tabs_remove_tab(swigCPtr, tab_idx);
  }

  public void add_tab(string title, SWIGTYPE_p_RefT_Texture_t icon) {
    GodotEnginePINVOKE.Tabs_add_tab(swigCPtr, title, SWIGTYPE_p_RefT_Texture_t.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_tab_align(int align) {
    GodotEnginePINVOKE.Tabs_set_tab_align(swigCPtr, align);
  }

  public int get_tab_align() {
    int ret = GodotEnginePINVOKE.Tabs_get_tab_align(swigCPtr);
    return ret;
  }

  public void ensure_tab_visible(int idx) {
    GodotEnginePINVOKE.Tabs_ensure_tab_visible(swigCPtr, idx);
  }

  public Tabs() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Tabs());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
