/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class MeshLibrary : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal MeshLibrary(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.MeshLibrary_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected MeshLibrary(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.MeshLibrary_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshLibrary obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MeshLibrary() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_MeshLibrary(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void create_item(int id) {
    GodotEnginePINVOKE.MeshLibrary_create_item(swigCPtr, id);
  }

  public void set_item_name(int id, string name) {
    GodotEnginePINVOKE.MeshLibrary_set_item_name(swigCPtr, id, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_item_mesh(int id, Mesh mesh) {
    GodotEnginePINVOKE.MeshLibrary_set_item_mesh(swigCPtr, id, Mesh.getCPtr(mesh));
  }

  public void set_item_navmesh(int id, NavigationMesh navmesh) {
    GodotEnginePINVOKE.MeshLibrary_set_item_navmesh(swigCPtr, id, NavigationMesh.getCPtr(navmesh));
  }

  public void set_item_shape(int id, Shape shape) {
    GodotEnginePINVOKE.MeshLibrary_set_item_shape(swigCPtr, id, Shape.getCPtr(shape));
  }

  public string get_item_name(int id) {
    string ret = GodotEnginePINVOKE.MeshLibrary_get_item_name(swigCPtr, id);
    return ret;
  }

  public Mesh get_item_mesh(int id) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.MeshLibrary_get_item_mesh(swigCPtr, id);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Mesh ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Mesh;
    return ret;
}

  public NavigationMesh get_item_navmesh(int id) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.MeshLibrary_get_item_navmesh(swigCPtr, id);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    NavigationMesh ret = InternalHelpers.UnmanagedGetManaged(cPtr) as NavigationMesh;
    return ret;
}

  public Shape get_item_shape(int id) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.MeshLibrary_get_item_shape(swigCPtr, id);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Shape ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Shape;
    return ret;
}

  public void remove_item(int id) {
    GodotEnginePINVOKE.MeshLibrary_remove_item(swigCPtr, id);
  }

  public void clear() {
    GodotEnginePINVOKE.MeshLibrary_clear(swigCPtr);
  }

  public SWIGTYPE_p_IntArray get_item_list() {
    SWIGTYPE_p_IntArray ret = new SWIGTYPE_p_IntArray(GodotEnginePINVOKE.MeshLibrary_get_item_list(swigCPtr), true);
    return ret;
  }

  public int get_last_unused_item_id() {
    int ret = GodotEnginePINVOKE.MeshLibrary_get_last_unused_item_id(swigCPtr);
    return ret;
  }

  public MeshLibrary() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_MeshLibrary());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
