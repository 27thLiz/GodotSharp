/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PhysicsDirectBodyState : Object {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PhysicsDirectBodyState(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PhysicsDirectBodyState_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PhysicsDirectBodyState(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PhysicsDirectBodyState_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsDirectBodyState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal PhysicsDirectBodyState() {}


  public Vector3 get_total_gravity() {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_total_gravity(swigCPtr);
    return ret;
}

  public float get_total_linear_damp() {
    float ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_total_linear_damp(swigCPtr);
    return ret;
  }

  public float get_total_angular_damp() {
    float ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_total_angular_damp(swigCPtr);
    return ret;
  }

  public float get_inverse_mass() {
    float ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_inverse_mass(swigCPtr);
    return ret;
  }

  public Vector3 get_inverse_inertia() {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_inverse_inertia(swigCPtr);
    return ret;
}

  public void set_linear_velocity(Vector3 velocity) {
    GodotEnginePINVOKE.PhysicsDirectBodyState_set_linear_velocity(swigCPtr, ref velocity);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_linear_velocity() {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_linear_velocity(swigCPtr);
    return ret;
}

  public void set_angular_velocity(Vector3 velocity) {
    GodotEnginePINVOKE.PhysicsDirectBodyState_set_angular_velocity(swigCPtr, ref velocity);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_angular_velocity() {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_angular_velocity(swigCPtr);
    return ret;
}

  public void set_transform(Transform transform) {
    GodotEnginePINVOKE.PhysicsDirectBodyState_set_transform(swigCPtr, ref transform);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Transform get_transform() {
    Transform ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_transform(swigCPtr);
    return ret;
}

  public void add_force(Vector3 force, Vector3 pos) {
    GodotEnginePINVOKE.PhysicsDirectBodyState_add_force(swigCPtr, ref force, ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void apply_impulse(Vector3 pos, Vector3 j) {
    GodotEnginePINVOKE.PhysicsDirectBodyState_apply_impulse(swigCPtr, ref pos, ref j);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_sleep_state(bool enabled) {
    GodotEnginePINVOKE.PhysicsDirectBodyState_set_sleep_state(swigCPtr, enabled);
  }

  public bool is_sleeping() {
    bool ret = GodotEnginePINVOKE.PhysicsDirectBodyState_is_sleeping(swigCPtr);
    return ret;
  }

  public int get_contact_count() {
    int ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_count(swigCPtr);
    return ret;
  }

  public Vector3 get_contact_local_pos(int contact_idx) {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_local_pos(swigCPtr, contact_idx);
    return ret;
}

  public Vector3 get_contact_local_normal(int contact_idx) {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_local_normal(swigCPtr, contact_idx);
    return ret;
}

  public int get_contact_local_shape(int contact_idx) {
    int ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_local_shape(swigCPtr, contact_idx);
    return ret;
  }

  public SWIGTYPE_p_RID get_contact_collider(int contact_idx) {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_collider(swigCPtr, contact_idx), true);
    return ret;
  }

  public Vector3 get_contact_collider_pos(int contact_idx) {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_collider_pos(swigCPtr, contact_idx);
    return ret;
}

  public int get_contact_collider_id(int contact_idx) {
    int ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_collider_id(swigCPtr, contact_idx);
    return ret;
  }

  public Object get_contact_collider_object(int contact_idx) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_collider_object(swigCPtr, contact_idx);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public int get_contact_collider_shape(int contact_idx) {
    int ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_collider_shape(swigCPtr, contact_idx);
    return ret;
  }

  public Vector3 get_contact_collider_velocity_at_pos(int contact_idx) {
    Vector3 ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(swigCPtr, contact_idx);
    return ret;
}

  public float get_step() {
    float ret = GodotEnginePINVOKE.PhysicsDirectBodyState_get_step(swigCPtr);
    return ret;
  }

  public void integrate_forces() {
    GodotEnginePINVOKE.PhysicsDirectBodyState_integrate_forces(swigCPtr);
  }

  public PhysicsDirectSpaceState get_space_state() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.PhysicsDirectBodyState_get_space_state(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    PhysicsDirectSpaceState ret = InternalHelpers.UnmanagedGetManaged(cPtr) as PhysicsDirectSpaceState;
    return ret;
  }

}

}
