/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class GraphNode : Container {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal GraphNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.GraphNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected GraphNode(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.GraphNode_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GraphNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_title(string title) {
    GodotEnginePINVOKE.GraphNode_set_title(swigCPtr, title);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_title() {
    string ret = GodotEnginePINVOKE.GraphNode_get_title(swigCPtr);
    return ret;
  }

  public void set_slot(int idx, bool enable_left, int type_left, SWIGTYPE_p_Color color_left, bool enable_right, int type_right, SWIGTYPE_p_Color color_right) {
    GodotEnginePINVOKE.GraphNode_set_slot(swigCPtr, idx, enable_left, type_left, SWIGTYPE_p_Color.getCPtr(color_left), enable_right, type_right, SWIGTYPE_p_Color.getCPtr(color_right));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear_slot(int idx) {
    GodotEnginePINVOKE.GraphNode_clear_slot(swigCPtr, idx);
  }

  public void clear_all_slots() {
    GodotEnginePINVOKE.GraphNode_clear_all_slots(swigCPtr);
  }

  public bool is_slot_enabled_left(int idx) {
    bool ret = GodotEnginePINVOKE.GraphNode_is_slot_enabled_left(swigCPtr, idx);
    return ret;
  }

  public int get_slot_type_left(int idx) {
    int ret = GodotEnginePINVOKE.GraphNode_get_slot_type_left(swigCPtr, idx);
    return ret;
  }

  public SWIGTYPE_p_Color get_slot_color_left(int idx) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.GraphNode_get_slot_color_left(swigCPtr, idx), true);
    return ret;
  }

  public bool is_slot_enabled_right(int idx) {
    bool ret = GodotEnginePINVOKE.GraphNode_is_slot_enabled_right(swigCPtr, idx);
    return ret;
  }

  public int get_slot_type_right(int idx) {
    int ret = GodotEnginePINVOKE.GraphNode_get_slot_type_right(swigCPtr, idx);
    return ret;
  }

  public SWIGTYPE_p_Color get_slot_color_right(int idx) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.GraphNode_get_slot_color_right(swigCPtr, idx), true);
    return ret;
  }

  public void set_offset(Vector2 offset) {
    GodotEnginePINVOKE.GraphNode_set_offset(swigCPtr, ref offset);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_offset() {
    Vector2 ret = GodotEnginePINVOKE.GraphNode_get_offset(swigCPtr);
    return ret;
}

  public int get_connection_output_count() {
    int ret = GodotEnginePINVOKE.GraphNode_get_connection_output_count(swigCPtr);
    return ret;
  }

  public int get_connection_input_count() {
    int ret = GodotEnginePINVOKE.GraphNode_get_connection_input_count(swigCPtr);
    return ret;
  }

  public Vector2 get_connection_output_pos(int idx) {
    Vector2 ret = GodotEnginePINVOKE.GraphNode_get_connection_output_pos(swigCPtr, idx);
    return ret;
}

  public int get_connection_output_type(int idx) {
    int ret = GodotEnginePINVOKE.GraphNode_get_connection_output_type(swigCPtr, idx);
    return ret;
  }

  public SWIGTYPE_p_Color get_connection_output_color(int idx) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.GraphNode_get_connection_output_color(swigCPtr, idx), true);
    return ret;
  }

  public Vector2 get_connection_input_pos(int idx) {
    Vector2 ret = GodotEnginePINVOKE.GraphNode_get_connection_input_pos(swigCPtr, idx);
    return ret;
}

  public int get_connection_input_type(int idx) {
    int ret = GodotEnginePINVOKE.GraphNode_get_connection_input_type(swigCPtr, idx);
    return ret;
  }

  public SWIGTYPE_p_Color get_connection_input_color(int idx) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.GraphNode_get_connection_input_color(swigCPtr, idx), true);
    return ret;
  }

  public void set_show_close_button(bool show) {
    GodotEnginePINVOKE.GraphNode_set_show_close_button(swigCPtr, show);
  }

  public bool is_close_button_visible() {
    bool ret = GodotEnginePINVOKE.GraphNode_is_close_button_visible(swigCPtr);
    return ret;
  }

  public GraphNode() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_GraphNode());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
