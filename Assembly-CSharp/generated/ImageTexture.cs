/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class ImageTexture : Texture {
  public static readonly int STORAGE_RAW = 0;
  public static readonly int STORAGE_COMPRESS_LOSSY = 1;
  public static readonly int STORAGE_COMPRESS_LOSSLESS = 2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal ImageTexture(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.ImageTexture_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected ImageTexture(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.ImageTexture_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ImageTexture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void create(int width, int height, int format, int flags) {
    GodotEnginePINVOKE.ImageTexture_create__SWIG_0(swigCPtr, width, height, format, flags);
  }

  public void create(int width, int height, int format) {
    GodotEnginePINVOKE.ImageTexture_create__SWIG_1(swigCPtr, width, height, format);
  }

  public void create_from_image(SWIGTYPE_p_Image image, int flags) {
    GodotEnginePINVOKE.ImageTexture_create_from_image__SWIG_0(swigCPtr, SWIGTYPE_p_Image.getCPtr(image), flags);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void create_from_image(SWIGTYPE_p_Image image) {
    GodotEnginePINVOKE.ImageTexture_create_from_image__SWIG_1(swigCPtr, SWIGTYPE_p_Image.getCPtr(image));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int get_format() {
    int ret = GodotEnginePINVOKE.ImageTexture_get_format(swigCPtr);
    return ret;
  }

  public void load(string path) {
    GodotEnginePINVOKE.ImageTexture_load(swigCPtr, path);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_data(SWIGTYPE_p_Image image) {
    GodotEnginePINVOKE.ImageTexture_set_data(swigCPtr, SWIGTYPE_p_Image.getCPtr(image));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Image get_data() {
    SWIGTYPE_p_Image ret = new SWIGTYPE_p_Image(GodotEnginePINVOKE.ImageTexture_get_data(swigCPtr), true);
    return ret;
  }

  public void set_storage(int mode) {
    GodotEnginePINVOKE.ImageTexture_set_storage(swigCPtr, mode);
  }

  public int get_storage() {
    int ret = GodotEnginePINVOKE.ImageTexture_get_storage(swigCPtr);
    return ret;
  }

  public void set_lossy_storage_quality(float quality) {
    GodotEnginePINVOKE.ImageTexture_set_lossy_storage_quality(swigCPtr, quality);
  }

  public float get_lossy_storage_quality() {
    float ret = GodotEnginePINVOKE.ImageTexture_get_lossy_storage_quality(swigCPtr);
    return ret;
  }

  public void fix_alpha_edges() {
    GodotEnginePINVOKE.ImageTexture_fix_alpha_edges(swigCPtr);
  }

  public void premultiply_alpha() {
    GodotEnginePINVOKE.ImageTexture_premultiply_alpha(swigCPtr);
  }

  public void normal_to_xy() {
    GodotEnginePINVOKE.ImageTexture_normal_to_xy(swigCPtr);
  }

  public void shrink_x2_and_keep_size() {
    GodotEnginePINVOKE.ImageTexture_shrink_x2_and_keep_size(swigCPtr);
  }

  public void set_size_override(Vector2 size) {
    GodotEnginePINVOKE.ImageTexture_set_size_override(swigCPtr, Vector2.getCPtr(size));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public ImageTexture() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_ImageTexture());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
