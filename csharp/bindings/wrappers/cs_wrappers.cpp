/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { memdelete(ptr); }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; memdelete(oldptr); ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(memnew(T(t))); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_GodotEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_GodotEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_GodotEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_GodotEngine(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


#include "core/variant.h"

// Built-in Types
#include "core/math/math_2d.h"
#include "core/ustring.h"

// Object Types
#include "core/object.h"
#include "core/path_remap.h"
#include "main/performance.h"
#include "servers/physics_2d_server.h"
#include "servers/physics_2d/body_2d_sw.h"
#include "servers/physics_2d/physics_2d_server_sw.h"
#include "servers/physics_server.h"
#include "servers/physics/body_sw.h"
#include "servers/physics/physics_server_sw.h"
#include "core/reference.h"
#include "drivers/nrex/regex.h"
#include "core/resource.h"
#include "core/io/resource_loader.h"
#include "scene/resources/room.h"
#include "scene/resources/sample.h"
#include "scene/resources/sample_library.h"
#include "scene/resources/packed_scene.h"
#include "core/script_language.h"
#include "scene/resources/shader.h"
#include "scene/resources/shader_graph.h"
#include "scene/resources/shape.h"
#include "scene/resources/shape_2d.h"
#include "scene/3d/spatial.h"
#include "servers/spatial_sound_2d_server.h"
#include "servers/spatial_sound_2d/spatial_sound_2d_server_sw.h"
#include "servers/spatial_sound_server.h"
#include "servers/spatial_sound/spatial_sound_server_sw.h"
#include "scene/resources/sphere_shape.h"
#include "scene/2d/animated_sprite.h"
#include "core/io/stream_peer.h"
#include "core/io/stream_peer_ssl.h"
#include "core/io/stream_peer_tcp.h"
#include "scene/resources/style_box.h"
#include "scene/resources/surface_tool.h"
#include "core/io/tcp_server.h"
#include "scene/resources/texture.h"
#include "scene/resources/theme.h"
#include "scene/resources/tile_set.h"
#include "core/translation.h"
#include "scene/gui/tree.h"
#include "core/undo_redo.h"
#include "scene/resources/video_stream.h"
#include "drivers/theora/video_stream_theora.h"
#include "servers/visual_server.h"
#include "scene/resources/world.h"
#include "scene/resources/world_2d.h"
#include "core/io/xml_parser.h"
#include "core/bind/core_bind.h"
#include "scene/resources/animation.h"
#include "servers/audio_server.h"
#include "servers/audio/audio_server_sw.h"
#include "scene/resources/audio_stream.h"
#include "drivers/mpc/audio_stream_mpc.h"
#include "drivers/vorbis/audio_stream_ogg_vorbis.h"
#include "drivers/opus/audio_stream_opus.h"
#include "drivers/speex/audio_stream_speex.h"
#include "scene/resources/baked_light.h"
#include "scene/resources/bit_mask.h"
#include "scene/resources/box_shape.h"
#include "modules/csharp/csharp_script.h"
#include "scene/2d/canvas_item.h"
#include "scene/resources/capsule_shape.h"
#include "scene/resources/capsule_shape_2d.h"
#include "scene/resources/circle_shape_2d.h"
#include "scene/resources/color_ramp.h"
#include "scene/resources/concave_polygon_shape.h"
#include "scene/resources/concave_polygon_shape_2d.h"
#include "core/io/config_file.h"
#include "scene/resources/convex_polygon_shape.h"
#include "scene/resources/convex_polygon_shape_2d.h"
#include "scene/resources/curve.h"
#include "scene/resources/dynamic_font.h"
#include "tools/editor/editor_import_export.h"
#include "tools/editor/io_plugins/editor_scene_import_plugin.h"
#include "tools/editor/editor_run_script.h"
#include "tools/editor/editor_data.h"
#include "tools/editor/editor_settings.h"
#include "tools/editor/spatial_editor_gizmos.h"
#include "scene/resources/environment.h"
#include "scene/resources/event_stream.h"
#include "drivers/chibi/event_stream_chibi.h"
#include "scene/resources/font.h"
#include "core/func_ref.h"
#include "modules/gdscript/gd_script.h"
#include "core/globals.h"
#include "core/io/http_client.h"
#include "core/io/ip.h"
#include "drivers/unix/ip_unix.h"
#include "core/os/input.h"
#include "main/input_default.h"
#include "core/input_map.h"
#include "scene/resources/shape_line_2d.h"
#include "core/os/main_loop.h"
#include "scene/resources/material.h"
#include "scene/resources/mesh.h"
#include "scene/resources/mesh_data_tool.h"
#include "scene/resources/mesh_library.h"
#include "scene/resources/multimesh.h"
#include "scene/3d/navigation_mesh.h"
#include "scene/2d/navigation_polygon.h"
#include "scene/main/node.h"
#include "scene/2d/light_occluder_2d.h"
#include "tools/pck/pck_packer.h"
#include "core/compressed_translation.h"
#include "core/packed_data_container.h"
#include "core/io/packet_peer.h"
#include "core/io/packet_peer_udp.h"
#include "scene/resources/plane_shape.h"
#include "scene/resources/polygon_path_finder.h"
#include "scene/resources/ray_shape.h"
#include "scene/resources/segment_shape_2d.h"
#include "scene/resources/rectangle_shape_2d.h"
#include "scene/main/viewport.h"
#include "scene/main/resource_preloader.h"
#include "scene/audio/sample_player.h"
#include "scene/main/scene_main_loop.h"
#include "scene/audio/sound_room_params.h"
#include "scene/3d/spatial_player.h"
#include "scene/3d/spatial_sample_player.h"
#include "scene/3d/spatial_stream_player.h"
#include "scene/audio/stream_player.h"
#include "scene/main/timer.h"
#include "scene/animation/tween.h"
#include "scene/3d/vehicle_body.h"
#include "scene/3d/visibility_notifier.h"
#include "scene/3d/visual_instance.h"
#include "scene/3d/scenario_fx.h"
#include "scene/animation/animation_player.h"
#include "scene/animation/animation_tree_player.h"
#include "scene/3d/baked_light_instance.h"
#include "scene/3d/bone_attachment.h"
#include "scene/3d/camera.h"
#include "scene/main/canvas_layer.h"
#include "scene/3d/collision_object.h"
#include "scene/3d/collision_polygon.h"
#include "scene/3d/body_shape.h"
#include "scene/gui/control.h"
#include "tools/editor/editor_plugin.h"
#include "scene/audio/event_player.h"
#include "scene/gui/graph_edit.h"
#include "modules/gridmap/grid_map.h"
#include "scene/main/http_request.h"
#include "scene/3d/immediate_geometry.h"
#include "scene/main/instance_placeholder.h"
#include "scene/3d/interpolated_camera.h"
#include "modules/ik/ik.h"
#include "scene/gui/item_list.h"
#include "scene/3d/physics_joint.h"
#include "scene/gui/label.h"
#include "scene/3d/light.h"
#include "scene/gui/line_edit.h"
#include "scene/3d/mesh_instance.h"
#include "scene/3d/multimesh_instance.h"
#include "scene/3d/navigation.h"
#include "scene/2d/node_2d.h"
#include "scene/gui/panel.h"
#include "scene/2d/parallax_background.h"
#include "scene/2d/parallax_layer.h"
#include "scene/2d/particles_2d.h"
#include "scene/3d/particles.h"
#include "scene/gui/patch_9_frame.h"
#include "scene/3d/path.h"
#include "scene/2d/path_2d.h"
#include "scene/3d/physics_body.h"
#include "scene/2d/polygon_2d.h"
#include "scene/gui/popup.h"
#include "scene/gui/dialogs.h"
#include "scene/gui/popup_menu.h"
#include "scene/3d/portal.h"
#include "scene/2d/position_2d.h"
#include "scene/3d/position_3d.h"
#include "scene/3d/proximity_group.h"
#include "scene/3d/quad.h"
#include "scene/gui/range.h"
#include "scene/3d/ray_cast.h"
#include "scene/2d/ray_cast_2d.h"
#include "scene/gui/reference_frame.h"
#include "scene/2d/remote_transform_2d.h"
#include "scene/gui/rich_text_label.h"
#include "scene/3d/room_instance.h"
#include "scene/gui/scroll_bar.h"
#include "scene/gui/separator.h"
#include "scene/3d/skeleton.h"
#include "scene/gui/slider.h"
#include "scene/2d/sound_player_2d.h"
#include "scene/gui/spin_box.h"
#include "scene/2d/sprite.h"
#include "scene/3d/sprite_3d.h"
#include "scene/gui/tab_container.h"
#include "scene/gui/tabs.h"
#include "scene/3d/test_cube.h"
#include "scene/gui/text_edit.h"
#include "scene/gui/texture_frame.h"
#include "scene/gui/texture_progress.h"
#include "scene/2d/tile_map.h"
#include "scene/2d/screen_button.h"
#include "scene/gui/video_player.h"
#include "scene/2d/visibility_notifier_2d.h"
#include "scene/2d/y_sort.h"
#include "scene/3d/area.h"
#include "scene/2d/back_buffer_copy.h"
#include "scene/gui/base_button.h"
#include "scene/gui/button.h"
#include "scene/gui/button_array.h"
#include "scene/2d/camera_2d.h"
#include "scene/2d/canvas_modulate.h"
#include "scene/gui/check_box.h"
#include "scene/gui/check_button.h"
#include "scene/2d/collision_object_2d.h"
#include "scene/2d/collision_polygon_2d.h"
#include "scene/2d/collision_shape_2d.h"
#include "scene/gui/color_picker.h"
#include "scene/gui/container.h"
#include "tools/editor/editor_file_dialog.h"
#include "scene/gui/file_dialog.h"
#include "scene/gui/graph_node.h"
#include "scene/gui/grid_container.h"
#include "scene/2d/joints_2d.h"
#include "scene/2d/light_2d.h"
#include "scene/gui/link_button.h"
#include "scene/gui/margin_container.h"
#include "scene/gui/menu_button.h"
#include "scene/2d/navigation2d.h"
#include "scene/gui/option_button.h"
#include "scene/gui/panel_container.h"
#include "scene/2d/physics_body_2d.h"
#include "scene/gui/progress_bar.h"
#include "scene/2d/sample_player_2d.h"
#include "scene/gui/scroll_container.h"
#include "scene/gui/split_container.h"
#include "scene/gui/texture_button.h"
#include "scene/gui/tool_button.h"
#include "scene/2d/area_2d.h"
#include "scene/gui/box_container.h"
#include "scene/gui/button_group.h"
#include "scene/gui/center_container.h"

typedef DVector<uint8_t> RawArray;

SWIGINTERN void Object__get(Object *self,String const &property){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_get", property);
    }
SWIGINTERN Array Object__get_property_list(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("_get_property_list");
    }
SWIGINTERN void Object__init(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_init");
    }
SWIGINTERN void Object__notification(Object *self,int what){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_notification", what);
    }
SWIGINTERN void Object__set(Object *self,String const &property,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_set", property, value);
    }
SWIGINTERN void Object_free(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("free");
    }
SWIGINTERN String Object_get_type(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_type");
    }
SWIGINTERN bool Object_is_type(Object *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_type", type);
    }
SWIGINTERN void Object_set(Object *self,String const &property,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set", property, value);
    }
SWIGINTERN void Object_get(Object *self,String const &property){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get", property);
    }
SWIGINTERN Array Object_get_property_list(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_property_list");
    }
SWIGINTERN Array Object_get_method_list(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_method_list");
    }
SWIGINTERN void Object_notification__SWIG_0(Object *self,int what,bool reversed=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("notification", what, reversed);
    }
SWIGINTERN int Object_get_instance_ID(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_instance_ID");
    }
SWIGINTERN void Object_set_script(Object *self,Ref< Script > script){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_script", script);
    }
SWIGINTERN Ref< Script > Object_get_script(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_script").operator Object *()->cast_to<Script>();
    }
SWIGINTERN void Object_set_meta(Object *self,String const &name,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_meta", name, value);
    }
SWIGINTERN void Object_get_meta(Object *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_meta", name);
    }
SWIGINTERN bool Object_has_meta(Object *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_meta", name);
    }
SWIGINTERN StringArray Object_get_meta_list(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_meta_list");
    }
SWIGINTERN void Object_add_user_signal__SWIG_0(Object *self,String const &signal,Array const &arguments_=Array()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_user_signal", signal, arguments_);
    }
SWIGINTERN bool Object_has_user_signal(Object *self,String const &signal){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_user_signal", signal);
    }
SWIGINTERN void Object_emit_signal__SWIG_0(Object *self,String const &signal,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(signal);
Variant arg_1_ = Variant(arg0_);
Variant arg_2_ = Variant(arg1_);
Variant arg_3_ = Variant(arg2_);
Variant arg_4_ = Variant(arg3_);
Variant arg_5_ = Variant(arg4_);
Variant *args_[6] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_ };
self->call("emit_signal", (const Variant **) args_, 6, err);
    }
SWIGINTERN bool Object_has_method(Object *self,String const &method){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_method", method);
    }
SWIGINTERN Array Object_get_signal_list(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_signal_list");
    }
SWIGINTERN Array Object_get_signal_connection_list(Object *self,String const &signal){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_signal_connection_list", signal);
    }
SWIGINTERN int Object_connect__SWIG_0(Object *self,String const &signal,Object *target,String const &method,Array const &binds=Array(),int flags=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect", signal, target, method, binds, flags);
    }
SWIGINTERN void Object_disconnect(Object *self,String const &signal,Object *target,String const &method){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("disconnect", signal, target, method);
    }
SWIGINTERN bool Object_is_connected(Object *self,String const &signal,Object *target,String const &method){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_connected", signal, target, method);
    }
SWIGINTERN void Object_set_block_signals(Object *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_block_signals", enable);
    }
SWIGINTERN bool Object_is_blocking_signals(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_blocking_signals");
    }
SWIGINTERN void Object_set_message_translation(Object *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_message_translation", enable);
    }
SWIGINTERN bool Object_can_translate_messages(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_translate_messages");
    }
SWIGINTERN void Object_property_list_changed_notify(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("property_list_changed_notify");
    }
SWIGINTERN String Object_XL_MESSAGE(Object *self,String const &message){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("XL_MESSAGE", message);
    }
SWIGINTERN String Object_tr(Object *self,String const &message){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tr", message);
    }
SWIGINTERN bool Object_is_queued_for_deletion(Object *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_queued_for_deletion");
    }
SWIGINTERN void PathRemap_add_remap__SWIG_0(PathRemap *self,String const &from,String const &to,String const &locale=""){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_remap", from, to, locale);
    }
SWIGINTERN bool PathRemap_has_remap(PathRemap *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_remap", path);
    }
SWIGINTERN String PathRemap_get_remap(PathRemap *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_remap", path);
    }
SWIGINTERN void PathRemap_erase_remap(PathRemap *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_remap", path);
    }
SWIGINTERN void PathRemap_clear_remaps(PathRemap *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_remaps");
    }
SWIGINTERN PathRemap *PathRemap_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("PathRemap")->cast_to<PathRemap>(); }
SWIGINTERN float Performance_get_monitor(Performance *self,int monitor){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_monitor", monitor);
    }
SWIGINTERN Performance *Performance_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Performance")->cast_to<Performance>(); }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_total_gravity(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_gravity");
    }
SWIGINTERN float Physics2DDirectBodyState_get_total_linear_damp(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_linear_damp");
    }
SWIGINTERN float Physics2DDirectBodyState_get_total_angular_damp(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_angular_damp");
    }
SWIGINTERN float Physics2DDirectBodyState_get_inverse_mass(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_inverse_mass");
    }
SWIGINTERN float Physics2DDirectBodyState_get_inverse_inertia(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_inverse_inertia");
    }
SWIGINTERN void Physics2DDirectBodyState_set_linear_velocity(Physics2DDirectBodyState *self,Vector2 const &velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_velocity", velocity);
    }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_linear_velocity(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_velocity");
    }
SWIGINTERN void Physics2DDirectBodyState_set_angular_velocity(Physics2DDirectBodyState *self,float velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_velocity", velocity);
    }
SWIGINTERN float Physics2DDirectBodyState_get_angular_velocity(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_velocity");
    }
SWIGINTERN void Physics2DDirectBodyState_set_transform(Physics2DDirectBodyState *self,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", transform);
    }
SWIGINTERN Matrix32 Physics2DDirectBodyState_get_transform(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN void Physics2DDirectBodyState_set_sleep_state(Physics2DDirectBodyState *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sleep_state", enabled);
    }
SWIGINTERN bool Physics2DDirectBodyState_is_sleeping(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_sleeping");
    }
SWIGINTERN int Physics2DDirectBodyState_get_contact_count(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_count");
    }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_local_pos(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_local_pos", contact_idx);
    }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_local_normal(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_local_normal", contact_idx);
    }
SWIGINTERN int Physics2DDirectBodyState_get_contact_local_shape(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_local_shape", contact_idx);
    }
SWIGINTERN RID Physics2DDirectBodyState_get_contact_collider(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider", contact_idx);
    }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_collider_pos(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_pos", contact_idx);
    }
SWIGINTERN int Physics2DDirectBodyState_get_contact_collider_id(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_id", contact_idx);
    }
SWIGINTERN Object *Physics2DDirectBodyState_get_contact_collider_object(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_object", contact_idx).operator Object *();
    }
SWIGINTERN int Physics2DDirectBodyState_get_contact_collider_shape(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_shape", contact_idx);
    }
SWIGINTERN Variant Physics2DDirectBodyState_get_contact_collider_shape_metadata(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_shape_metadata", contact_idx);
    }
SWIGINTERN Vector2 Physics2DDirectBodyState_get_contact_collider_velocity_at_pos(Physics2DDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_velocity_at_pos", contact_idx);
    }
SWIGINTERN float Physics2DDirectBodyState_get_step(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_step");
    }
SWIGINTERN void Physics2DDirectBodyState_integrate_forces(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("integrate_forces");
    }
SWIGINTERN Physics2DDirectSpaceState *Physics2DDirectBodyState_get_space_state(Physics2DDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space_state").operator Object *()->cast_to<Physics2DDirectSpaceState>();
    }
SWIGINTERN Array Physics2DDirectSpaceState_intersect_point__SWIG_0(Physics2DDirectSpaceState *self,Vector2 const &point,int max_results=32,Array const &exclude=Array(),int layer_mask=2147483647,int type_mask=15){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("intersect_point", point, max_results, exclude, layer_mask, type_mask);
    }
SWIGINTERN Dictionary Physics2DDirectSpaceState_intersect_ray__SWIG_0(Physics2DDirectSpaceState *self,Vector2 const &from,Vector2 const &to,Array const &exclude=Array(),int layer_mask=2147483647,int type_mask=15){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("intersect_ray", from, to, exclude, layer_mask, type_mask);
    }
SWIGINTERN Array Physics2DDirectSpaceState_intersect_shape__SWIG_0(Physics2DDirectSpaceState *self,Ref< Physics2DShapeQueryParameters > shape,int max_results=32){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("intersect_shape", shape, max_results);
    }
SWIGINTERN Array Physics2DDirectSpaceState_cast_motion(Physics2DDirectSpaceState *self,Ref< Physics2DShapeQueryParameters > shape){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cast_motion", shape);
    }
SWIGINTERN Array Physics2DDirectSpaceState_collide_shape__SWIG_0(Physics2DDirectSpaceState *self,Ref< Physics2DShapeQueryParameters > shape,int max_results=32){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("collide_shape", shape, max_results);
    }
SWIGINTERN Dictionary Physics2DDirectSpaceState_get_rest_info(Physics2DDirectSpaceState *self,Ref< Physics2DShapeQueryParameters > shape){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rest_info", shape);
    }
SWIGINTERN RID Physics2DServer_shape_create(Physics2DServer *self,int type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("shape_create", type);
    }
SWIGINTERN void Physics2DServer_shape_set_data(Physics2DServer *self,RID const &shape,Variant const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("shape_set_data", shape, data);
    }
SWIGINTERN int Physics2DServer_shape_get_type(Physics2DServer *self,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("shape_get_type", shape);
    }
SWIGINTERN void Physics2DServer_shape_get_data(Physics2DServer *self,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("shape_get_data", shape);
    }
SWIGINTERN RID Physics2DServer_space_create(Physics2DServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_create");
    }
SWIGINTERN void Physics2DServer_space_set_active(Physics2DServer *self,RID const &space,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("space_set_active", space, active);
    }
SWIGINTERN bool Physics2DServer_space_is_active(Physics2DServer *self,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_is_active", space);
    }
SWIGINTERN void Physics2DServer_space_set_param(Physics2DServer *self,RID const &space,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("space_set_param", space, param, value);
    }
SWIGINTERN float Physics2DServer_space_get_param(Physics2DServer *self,RID const &space,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_get_param", space, param);
    }
SWIGINTERN Physics2DDirectSpaceState *Physics2DServer_space_get_direct_state(Physics2DServer *self,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_get_direct_state", space).operator Object *()->cast_to<Physics2DDirectSpaceState>();
    }
SWIGINTERN RID Physics2DServer_area_create(Physics2DServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_create");
    }
SWIGINTERN void Physics2DServer_area_set_space(Physics2DServer *self,RID const &area,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_space", area, space);
    }
SWIGINTERN RID Physics2DServer_area_get_space(Physics2DServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_space", area);
    }
SWIGINTERN void Physics2DServer_area_set_space_override_mode(Physics2DServer *self,RID const &area,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_space_override_mode", area, mode);
    }
SWIGINTERN int Physics2DServer_area_get_space_override_mode(Physics2DServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_space_override_mode", area);
    }
SWIGINTERN void Physics2DServer_area_add_shape__SWIG_0(Physics2DServer *self,RID const &area,RID const &shape,Matrix32 const &transform=Matrix32()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_add_shape", area, shape, transform);
    }
SWIGINTERN void Physics2DServer_area_set_shape(Physics2DServer *self,RID const &area,int shape_idx,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_shape", area, shape_idx, shape);
    }
SWIGINTERN void Physics2DServer_area_set_shape_transform(Physics2DServer *self,RID const &area,int shape_idx,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_shape_transform", area, shape_idx, transform);
    }
SWIGINTERN int Physics2DServer_area_get_shape_count(Physics2DServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_shape_count", area);
    }
SWIGINTERN RID Physics2DServer_area_get_shape(Physics2DServer *self,RID const &area,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_shape", area, shape_idx);
    }
SWIGINTERN Matrix32 Physics2DServer_area_get_shape_transform(Physics2DServer *self,RID const &area,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_shape_transform", area, shape_idx);
    }
SWIGINTERN void Physics2DServer_area_remove_shape(Physics2DServer *self,RID const &area,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_remove_shape", area, shape_idx);
    }
SWIGINTERN void Physics2DServer_area_clear_shapes(Physics2DServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_clear_shapes", area);
    }
SWIGINTERN void Physics2DServer_area_set_layer_mask(Physics2DServer *self,RID const &area,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_layer_mask", area, mask);
    }
SWIGINTERN void Physics2DServer_area_set_collision_mask(Physics2DServer *self,RID const &area,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_collision_mask", area, mask);
    }
SWIGINTERN void Physics2DServer_area_set_param(Physics2DServer *self,RID const &area,int param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_param", area, param, value);
    }
SWIGINTERN void Physics2DServer_area_set_transform(Physics2DServer *self,RID const &area,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_transform", area, transform);
    }
SWIGINTERN void Physics2DServer_area_get_param(Physics2DServer *self,RID const &area,int param){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_get_param", area, param);
    }
SWIGINTERN Matrix32 Physics2DServer_area_get_transform(Physics2DServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_transform", area);
    }
SWIGINTERN void Physics2DServer_area_attach_object_instance_ID(Physics2DServer *self,RID const &area,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_attach_object_instance_ID", area, id);
    }
SWIGINTERN int Physics2DServer_area_get_object_instance_ID(Physics2DServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_object_instance_ID", area);
    }
SWIGINTERN void Physics2DServer_area_set_monitor_callback(Physics2DServer *self,RID const &area,Object *receiver,String const &method){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_monitor_callback", area, receiver, method);
    }
SWIGINTERN RID Physics2DServer_body_create__SWIG_0(Physics2DServer *self,int mode=2,bool init_sleeping=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_create", mode, init_sleeping);
    }
SWIGINTERN void Physics2DServer_body_set_space(Physics2DServer *self,RID const &body,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_space", body, space);
    }
SWIGINTERN RID Physics2DServer_body_get_space(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_space", body);
    }
SWIGINTERN void Physics2DServer_body_set_mode(Physics2DServer *self,RID const &body,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_mode", body, mode);
    }
SWIGINTERN int Physics2DServer_body_get_mode(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_mode", body);
    }
SWIGINTERN void Physics2DServer_body_add_shape__SWIG_0(Physics2DServer *self,RID const &body,RID const &shape,Matrix32 const &transform=Matrix32()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_add_shape", body, shape, transform);
    }
SWIGINTERN void Physics2DServer_body_set_shape(Physics2DServer *self,RID const &body,int shape_idx,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_shape", body, shape_idx, shape);
    }
SWIGINTERN void Physics2DServer_body_set_shape_transform(Physics2DServer *self,RID const &body,int shape_idx,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_shape_transform", body, shape_idx, transform);
    }
SWIGINTERN void Physics2DServer_body_set_shape_metadata(Physics2DServer *self,RID const &body,int shape_idx,Variant const &metadata){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_shape_metadata", body, shape_idx, metadata);
    }
SWIGINTERN int Physics2DServer_body_get_shape_count(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_shape_count", body);
    }
SWIGINTERN RID Physics2DServer_body_get_shape(Physics2DServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_shape", body, shape_idx);
    }
SWIGINTERN Matrix32 Physics2DServer_body_get_shape_transform(Physics2DServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_shape_transform", body, shape_idx);
    }
SWIGINTERN void Physics2DServer_body_get_shape_metadata(Physics2DServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_get_shape_metadata", body, shape_idx);
    }
SWIGINTERN void Physics2DServer_body_remove_shape(Physics2DServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_remove_shape", body, shape_idx);
    }
SWIGINTERN void Physics2DServer_body_clear_shapes(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_clear_shapes", body);
    }
SWIGINTERN void Physics2DServer_body_set_shape_as_trigger(Physics2DServer *self,RID const &body,int shape_idx,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_shape_as_trigger", body, shape_idx, enable);
    }
SWIGINTERN bool Physics2DServer_body_is_shape_set_as_trigger(Physics2DServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_is_shape_set_as_trigger", body, shape_idx);
    }
SWIGINTERN void Physics2DServer_body_attach_object_instance_ID(Physics2DServer *self,RID const &body,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_attach_object_instance_ID", body, id);
    }
SWIGINTERN int Physics2DServer_body_get_object_instance_ID(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_object_instance_ID", body);
    }
SWIGINTERN void Physics2DServer_body_set_continuous_collision_detection_mode(Physics2DServer *self,RID const &body,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_continuous_collision_detection_mode", body, mode);
    }
SWIGINTERN int Physics2DServer_body_get_continuous_collision_detection_mode(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_continuous_collision_detection_mode", body);
    }
SWIGINTERN void Physics2DServer_body_set_layer_mask(Physics2DServer *self,RID const &body,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_layer_mask", body, mask);
    }
SWIGINTERN int Physics2DServer_body_get_layer_mask(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_layer_mask", body);
    }
SWIGINTERN void Physics2DServer_body_set_collision_mask(Physics2DServer *self,RID const &body,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_collision_mask", body, mask);
    }
SWIGINTERN int Physics2DServer_body_get_collision_mask(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_collision_mask", body);
    }
SWIGINTERN void Physics2DServer_body_set_param(Physics2DServer *self,RID const &body,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_param", body, param, value);
    }
SWIGINTERN float Physics2DServer_body_get_param(Physics2DServer *self,RID const &body,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_param", body, param);
    }
SWIGINTERN void Physics2DServer_body_set_state(Physics2DServer *self,RID const &body,int state,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_state", body, state, value);
    }
SWIGINTERN void Physics2DServer_body_get_state(Physics2DServer *self,RID const &body,int state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_get_state", body, state);
    }
SWIGINTERN void Physics2DServer_body_apply_impulse(Physics2DServer *self,RID const &body,Vector2 const &pos,Vector2 const &impulse){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_apply_impulse", body, pos, impulse);
    }
SWIGINTERN void Physics2DServer_body_add_force(Physics2DServer *self,RID const &body,Vector2 const &offset,Vector2 const &force){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_add_force", body, offset, force);
    }
SWIGINTERN void Physics2DServer_body_set_axis_velocity(Physics2DServer *self,RID const &body,Vector2 const &axis_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_axis_velocity", body, axis_velocity);
    }
SWIGINTERN void Physics2DServer_body_add_collision_exception(Physics2DServer *self,RID const &body,RID const &excepted_body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_add_collision_exception", body, excepted_body);
    }
SWIGINTERN void Physics2DServer_body_remove_collision_exception(Physics2DServer *self,RID const &body,RID const &excepted_body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_remove_collision_exception", body, excepted_body);
    }
SWIGINTERN void Physics2DServer_body_set_max_contacts_reported(Physics2DServer *self,RID const &body,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_max_contacts_reported", body, amount);
    }
SWIGINTERN int Physics2DServer_body_get_max_contacts_reported(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_max_contacts_reported", body);
    }
SWIGINTERN void Physics2DServer_body_set_one_way_collision_direction(Physics2DServer *self,RID const &body,Vector2 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_one_way_collision_direction", body, normal);
    }
SWIGINTERN Vector2 Physics2DServer_body_get_one_way_collision_direction(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_one_way_collision_direction", body);
    }
SWIGINTERN void Physics2DServer_body_set_one_way_collision_max_depth(Physics2DServer *self,RID const &body,float depth){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_one_way_collision_max_depth", body, depth);
    }
SWIGINTERN float Physics2DServer_body_get_one_way_collision_max_depth(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_one_way_collision_max_depth", body);
    }
SWIGINTERN void Physics2DServer_body_set_omit_force_integration(Physics2DServer *self,RID const &body,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_omit_force_integration", body, enable);
    }
SWIGINTERN bool Physics2DServer_body_is_omitting_force_integration(Physics2DServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_is_omitting_force_integration", body);
    }
SWIGINTERN void Physics2DServer_body_set_force_integration_callback__SWIG_0(Physics2DServer *self,RID const &body,Object *receiver,String const &method,Variant const &userdata=Variant()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_force_integration_callback", body, receiver, method, userdata);
    }
SWIGINTERN bool Physics2DServer_body_test_motion__SWIG_0(Physics2DServer *self,RID const &body,Vector2 const &motion,float margin=0.08,Ref< Physics2DTestMotionResult > result=Ref< Physics2DTestMotionResult >()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_test_motion", body, motion, margin, result);
    }
SWIGINTERN void Physics2DServer_joint_set_param(Physics2DServer *self,RID const &joint,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("joint_set_param", joint, param, value);
    }
SWIGINTERN float Physics2DServer_joint_get_param(Physics2DServer *self,RID const &joint,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_get_param", joint, param);
    }
SWIGINTERN RID Physics2DServer_pin_joint_create__SWIG_0(Physics2DServer *self,Vector2 const &anchor,RID const &body_a,RID const &body_b=RID()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pin_joint_create", anchor, body_a, body_b);
    }
SWIGINTERN RID Physics2DServer_groove_joint_create__SWIG_0(Physics2DServer *self,Vector2 const &groove1_a,Vector2 const &groove2_a,Vector2 const &anchor_b,RID const &body_a=RID(),RID const &body_b=RID()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("groove_joint_create", groove1_a, groove2_a, anchor_b, body_a, body_b);
    }
SWIGINTERN RID Physics2DServer_damped_spring_joint_create__SWIG_0(Physics2DServer *self,Vector2 const &anchor_a,Vector2 const &anchor_b,RID const &body_a,RID const &body_b=RID()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("damped_spring_joint_create", anchor_a, anchor_b, body_a, body_b);
    }
SWIGINTERN void Physics2DServer_damped_string_joint_set_param(Physics2DServer *self,RID const &joint,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("damped_string_joint_set_param", joint, param, value);
    }
SWIGINTERN float Physics2DServer_damped_string_joint_get_param(Physics2DServer *self,RID const &joint,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("damped_string_joint_get_param", joint, param);
    }
SWIGINTERN int Physics2DServer_joint_get_type(Physics2DServer *self,RID const &joint){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_get_type", joint);
    }
SWIGINTERN void Physics2DServer_free_rid(Physics2DServer *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("free_rid", rid);
    }
SWIGINTERN void Physics2DServer_set_active(Physics2DServer *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_active", active);
    }
SWIGINTERN int Physics2DServer_get_process_info(Physics2DServer *self,int process_info){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_process_info", process_info);
    }
SWIGINTERN Physics2DServer *Physics2DServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Physics2DServer")->cast_to<Physics2DServer>(); }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_total_gravity(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_gravity");
    }
SWIGINTERN float PhysicsDirectBodyState_get_total_linear_damp(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_linear_damp");
    }
SWIGINTERN float PhysicsDirectBodyState_get_total_angular_damp(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_angular_damp");
    }
SWIGINTERN float PhysicsDirectBodyState_get_inverse_mass(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_inverse_mass");
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_inverse_inertia(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_inverse_inertia");
    }
SWIGINTERN void PhysicsDirectBodyState_set_linear_velocity(PhysicsDirectBodyState *self,Vector3 const &velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_velocity", velocity);
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_linear_velocity(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_velocity");
    }
SWIGINTERN void PhysicsDirectBodyState_set_angular_velocity(PhysicsDirectBodyState *self,Vector3 const &velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_velocity", velocity);
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_angular_velocity(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_velocity");
    }
SWIGINTERN void PhysicsDirectBodyState_set_transform(PhysicsDirectBodyState *self,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", transform);
    }
SWIGINTERN Transform PhysicsDirectBodyState_get_transform(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN void PhysicsDirectBodyState_add_force(PhysicsDirectBodyState *self,Vector3 const &force,Vector3 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_force", force, pos);
    }
SWIGINTERN void PhysicsDirectBodyState_apply_impulse(PhysicsDirectBodyState *self,Vector3 const &pos,Vector3 const &j){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("apply_impulse", pos, j);
    }
SWIGINTERN void PhysicsDirectBodyState_set_sleep_state(PhysicsDirectBodyState *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sleep_state", enabled);
    }
SWIGINTERN bool PhysicsDirectBodyState_is_sleeping(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_sleeping");
    }
SWIGINTERN int PhysicsDirectBodyState_get_contact_count(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_count");
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_local_pos(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_local_pos", contact_idx);
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_local_normal(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_local_normal", contact_idx);
    }
SWIGINTERN int PhysicsDirectBodyState_get_contact_local_shape(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_local_shape", contact_idx);
    }
SWIGINTERN RID PhysicsDirectBodyState_get_contact_collider(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider", contact_idx);
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_collider_pos(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_pos", contact_idx);
    }
SWIGINTERN int PhysicsDirectBodyState_get_contact_collider_id(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_id", contact_idx);
    }
SWIGINTERN Object *PhysicsDirectBodyState_get_contact_collider_object(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_object", contact_idx).operator Object *();
    }
SWIGINTERN int PhysicsDirectBodyState_get_contact_collider_shape(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_shape", contact_idx);
    }
SWIGINTERN Vector3 PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(PhysicsDirectBodyState *self,int contact_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_contact_collider_velocity_at_pos", contact_idx);
    }
SWIGINTERN float PhysicsDirectBodyState_get_step(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_step");
    }
SWIGINTERN void PhysicsDirectBodyState_integrate_forces(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("integrate_forces");
    }
SWIGINTERN PhysicsDirectSpaceState *PhysicsDirectBodyState_get_space_state(PhysicsDirectBodyState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space_state").operator Object *()->cast_to<PhysicsDirectSpaceState>();
    }
SWIGINTERN Dictionary PhysicsDirectSpaceState_intersect_ray__SWIG_0(PhysicsDirectSpaceState *self,Vector3 const &from,Vector3 const &to,Array const &exclude=Array(),int layer_mask=2147483647,int type_mask=15){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("intersect_ray", from, to, exclude, layer_mask, type_mask);
    }
SWIGINTERN Array PhysicsDirectSpaceState_intersect_shape__SWIG_0(PhysicsDirectSpaceState *self,Ref< PhysicsShapeQueryParameters > shape,int max_results=32){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("intersect_shape", shape, max_results);
    }
SWIGINTERN Array PhysicsDirectSpaceState_cast_motion(PhysicsDirectSpaceState *self,Ref< PhysicsShapeQueryParameters > shape,Vector3 const &motion){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cast_motion", shape, motion);
    }
SWIGINTERN Array PhysicsDirectSpaceState_collide_shape__SWIG_0(PhysicsDirectSpaceState *self,Ref< PhysicsShapeQueryParameters > shape,int max_results=32){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("collide_shape", shape, max_results);
    }
SWIGINTERN Dictionary PhysicsDirectSpaceState_get_rest_info(PhysicsDirectSpaceState *self,Ref< PhysicsShapeQueryParameters > shape){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rest_info", shape);
    }
SWIGINTERN RID PhysicsServer_shape_create(PhysicsServer *self,int type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("shape_create", type);
    }
SWIGINTERN void PhysicsServer_shape_set_data(PhysicsServer *self,RID const &shape,Variant const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("shape_set_data", shape, data);
    }
SWIGINTERN int PhysicsServer_shape_get_type(PhysicsServer *self,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("shape_get_type", shape);
    }
SWIGINTERN void PhysicsServer_shape_get_data(PhysicsServer *self,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("shape_get_data", shape);
    }
SWIGINTERN RID PhysicsServer_space_create(PhysicsServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_create");
    }
SWIGINTERN void PhysicsServer_space_set_active(PhysicsServer *self,RID const &space,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("space_set_active", space, active);
    }
SWIGINTERN bool PhysicsServer_space_is_active(PhysicsServer *self,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_is_active", space);
    }
SWIGINTERN void PhysicsServer_space_set_param(PhysicsServer *self,RID const &space,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("space_set_param", space, param, value);
    }
SWIGINTERN float PhysicsServer_space_get_param(PhysicsServer *self,RID const &space,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_get_param", space, param);
    }
SWIGINTERN PhysicsDirectSpaceState *PhysicsServer_space_get_direct_state(PhysicsServer *self,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("space_get_direct_state", space).operator Object *()->cast_to<PhysicsDirectSpaceState>();
    }
SWIGINTERN RID PhysicsServer_area_create(PhysicsServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_create");
    }
SWIGINTERN void PhysicsServer_area_set_space(PhysicsServer *self,RID const &area,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_space", area, space);
    }
SWIGINTERN RID PhysicsServer_area_get_space(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_space", area);
    }
SWIGINTERN void PhysicsServer_area_set_space_override_mode(PhysicsServer *self,RID const &area,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_space_override_mode", area, mode);
    }
SWIGINTERN int PhysicsServer_area_get_space_override_mode(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_space_override_mode", area);
    }
SWIGINTERN void PhysicsServer_area_add_shape__SWIG_0(PhysicsServer *self,RID const &area,RID const &shape,Transform const &transform=Transform()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_add_shape", area, shape, transform);
    }
SWIGINTERN void PhysicsServer_area_set_shape(PhysicsServer *self,RID const &area,int shape_idx,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_shape", area, shape_idx, shape);
    }
SWIGINTERN void PhysicsServer_area_set_shape_transform(PhysicsServer *self,RID const &area,int shape_idx,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_shape_transform", area, shape_idx, transform);
    }
SWIGINTERN int PhysicsServer_area_get_shape_count(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_shape_count", area);
    }
SWIGINTERN RID PhysicsServer_area_get_shape(PhysicsServer *self,RID const &area,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_shape", area, shape_idx);
    }
SWIGINTERN Transform PhysicsServer_area_get_shape_transform(PhysicsServer *self,RID const &area,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_shape_transform", area, shape_idx);
    }
SWIGINTERN void PhysicsServer_area_remove_shape(PhysicsServer *self,RID const &area,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_remove_shape", area, shape_idx);
    }
SWIGINTERN void PhysicsServer_area_clear_shapes(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_clear_shapes", area);
    }
SWIGINTERN void PhysicsServer_area_set_layer_mask(PhysicsServer *self,RID const &area,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_layer_mask", area, mask);
    }
SWIGINTERN void PhysicsServer_area_set_collision_mask(PhysicsServer *self,RID const &area,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_collision_mask", area, mask);
    }
SWIGINTERN void PhysicsServer_area_set_param(PhysicsServer *self,RID const &area,int param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_param", area, param, value);
    }
SWIGINTERN void PhysicsServer_area_set_transform(PhysicsServer *self,RID const &area,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_transform", area, transform);
    }
SWIGINTERN void PhysicsServer_area_get_param(PhysicsServer *self,RID const &area,int param){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_get_param", area, param);
    }
SWIGINTERN Transform PhysicsServer_area_get_transform(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_transform", area);
    }
SWIGINTERN void PhysicsServer_area_attach_object_instance_ID(PhysicsServer *self,RID const &area,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_attach_object_instance_ID", area, id);
    }
SWIGINTERN int PhysicsServer_area_get_object_instance_ID(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_object_instance_ID", area);
    }
SWIGINTERN void PhysicsServer_area_set_monitor_callback(PhysicsServer *self,RID const &area,Object *receiver,String const &method){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_monitor_callback", area, receiver, method);
    }
SWIGINTERN void PhysicsServer_area_set_ray_pickable(PhysicsServer *self,RID const &area,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_ray_pickable", area, enable);
    }
SWIGINTERN bool PhysicsServer_area_is_ray_pickable(PhysicsServer *self,RID const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_is_ray_pickable", area);
    }
SWIGINTERN RID PhysicsServer_body_create__SWIG_0(PhysicsServer *self,int mode=2,bool init_sleeping=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_create", mode, init_sleeping);
    }
SWIGINTERN void PhysicsServer_body_set_space(PhysicsServer *self,RID const &body,RID const &space){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_space", body, space);
    }
SWIGINTERN RID PhysicsServer_body_get_space(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_space", body);
    }
SWIGINTERN void PhysicsServer_body_set_mode(PhysicsServer *self,RID const &body,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_mode", body, mode);
    }
SWIGINTERN int PhysicsServer_body_get_mode(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_mode", body);
    }
SWIGINTERN void PhysicsServer_body_set_layer_mask(PhysicsServer *self,RID const &body,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_layer_mask", body, mask);
    }
SWIGINTERN int PhysicsServer_body_get_layer_mask(PhysicsServer *self,RID const &body,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_layer_mask", body, arg1_);
    }
SWIGINTERN void PhysicsServer_body_set_collision_mask(PhysicsServer *self,RID const &body,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_collision_mask", body, mask);
    }
SWIGINTERN int PhysicsServer_body_get_collision_mask(PhysicsServer *self,RID const &body,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_collision_mask", body, arg1_);
    }
SWIGINTERN void PhysicsServer_body_add_shape__SWIG_0(PhysicsServer *self,RID const &body,RID const &shape,Transform const &transform=Transform()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_add_shape", body, shape, transform);
    }
SWIGINTERN void PhysicsServer_body_set_shape(PhysicsServer *self,RID const &body,int shape_idx,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_shape", body, shape_idx, shape);
    }
SWIGINTERN void PhysicsServer_body_set_shape_transform(PhysicsServer *self,RID const &body,int shape_idx,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_shape_transform", body, shape_idx, transform);
    }
SWIGINTERN int PhysicsServer_body_get_shape_count(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_shape_count", body);
    }
SWIGINTERN RID PhysicsServer_body_get_shape(PhysicsServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_shape", body, shape_idx);
    }
SWIGINTERN Transform PhysicsServer_body_get_shape_transform(PhysicsServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_shape_transform", body, shape_idx);
    }
SWIGINTERN void PhysicsServer_body_remove_shape(PhysicsServer *self,RID const &body,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_remove_shape", body, shape_idx);
    }
SWIGINTERN void PhysicsServer_body_clear_shapes(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_clear_shapes", body);
    }
SWIGINTERN void PhysicsServer_body_attach_object_instance_ID(PhysicsServer *self,RID const &body,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_attach_object_instance_ID", body, id);
    }
SWIGINTERN int PhysicsServer_body_get_object_instance_ID(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_object_instance_ID", body);
    }
SWIGINTERN void PhysicsServer_body_set_enable_continuous_collision_detection(PhysicsServer *self,RID const &body,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_enable_continuous_collision_detection", body, enable);
    }
SWIGINTERN bool PhysicsServer_body_is_continuous_collision_detection_enabled(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_is_continuous_collision_detection_enabled", body);
    }
SWIGINTERN void PhysicsServer_body_set_param(PhysicsServer *self,RID const &body,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_param", body, param, value);
    }
SWIGINTERN float PhysicsServer_body_get_param(PhysicsServer *self,RID const &body,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_param", body, param);
    }
SWIGINTERN void PhysicsServer_body_set_state(PhysicsServer *self,RID const &body,int state,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_state", body, state, value);
    }
SWIGINTERN void PhysicsServer_body_get_state(PhysicsServer *self,RID const &body,int state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_get_state", body, state);
    }
SWIGINTERN void PhysicsServer_body_apply_impulse(PhysicsServer *self,RID const &body,Vector3 const &pos,Vector3 const &impulse){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_apply_impulse", body, pos, impulse);
    }
SWIGINTERN void PhysicsServer_body_set_axis_velocity(PhysicsServer *self,RID const &body,Vector3 const &axis_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_axis_velocity", body, axis_velocity);
    }
SWIGINTERN void PhysicsServer_body_set_axis_lock(PhysicsServer *self,RID const &body,int axis){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_axis_lock", body, axis);
    }
SWIGINTERN int PhysicsServer_body_get_axis_lock(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_axis_lock", body);
    }
SWIGINTERN void PhysicsServer_body_add_collision_exception(PhysicsServer *self,RID const &body,RID const &excepted_body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_add_collision_exception", body, excepted_body);
    }
SWIGINTERN void PhysicsServer_body_remove_collision_exception(PhysicsServer *self,RID const &body,RID const &excepted_body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_remove_collision_exception", body, excepted_body);
    }
SWIGINTERN void PhysicsServer_body_set_max_contacts_reported(PhysicsServer *self,RID const &body,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_max_contacts_reported", body, amount);
    }
SWIGINTERN int PhysicsServer_body_get_max_contacts_reported(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_get_max_contacts_reported", body);
    }
SWIGINTERN void PhysicsServer_body_set_omit_force_integration(PhysicsServer *self,RID const &body,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_omit_force_integration", body, enable);
    }
SWIGINTERN bool PhysicsServer_body_is_omitting_force_integration(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_is_omitting_force_integration", body);
    }
SWIGINTERN void PhysicsServer_body_set_force_integration_callback__SWIG_0(PhysicsServer *self,RID const &body,Object *receiver,String const &method,Variant const &userdata=Variant()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_force_integration_callback", body, receiver, method, userdata);
    }
SWIGINTERN void PhysicsServer_body_set_ray_pickable(PhysicsServer *self,RID const &body,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("body_set_ray_pickable", body, enable);
    }
SWIGINTERN bool PhysicsServer_body_is_ray_pickable(PhysicsServer *self,RID const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("body_is_ray_pickable", body);
    }
SWIGINTERN RID PhysicsServer_joint_create_pin(PhysicsServer *self,RID const &body_A,Vector3 const &local_A,RID const &body_B,Vector3 const &local_B){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_create_pin", body_A, local_A, body_B, local_B);
    }
SWIGINTERN void PhysicsServer_pin_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("pin_joint_set_param", joint, param, value);
    }
SWIGINTERN float PhysicsServer_pin_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pin_joint_get_param", joint, param);
    }
SWIGINTERN void PhysicsServer_pin_joint_set_local_A(PhysicsServer *self,RID const &joint,Vector3 const &local_A){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("pin_joint_set_local_A", joint, local_A);
    }
SWIGINTERN Vector3 PhysicsServer_pin_joint_get_local_A(PhysicsServer *self,RID const &joint){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pin_joint_get_local_A", joint);
    }
SWIGINTERN void PhysicsServer_pin_joint_set_local_B(PhysicsServer *self,RID const &joint,Vector3 const &local_B){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("pin_joint_set_local_B", joint, local_B);
    }
SWIGINTERN Vector3 PhysicsServer_pin_joint_get_local_B(PhysicsServer *self,RID const &joint){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pin_joint_get_local_B", joint);
    }
SWIGINTERN RID PhysicsServer_joint_create_hinge(PhysicsServer *self,RID const &body_A,Transform const &hinge_A,RID const &body_B,Transform const &hinge_B){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_create_hinge", body_A, hinge_A, body_B, hinge_B);
    }
SWIGINTERN void PhysicsServer_hinge_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("hinge_joint_set_param", joint, param, value);
    }
SWIGINTERN float PhysicsServer_hinge_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("hinge_joint_get_param", joint, param);
    }
SWIGINTERN void PhysicsServer_hinge_joint_set_flag(PhysicsServer *self,RID const &joint,int flag,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("hinge_joint_set_flag", joint, flag, enabled);
    }
SWIGINTERN bool PhysicsServer_hinge_joint_get_flag(PhysicsServer *self,RID const &joint,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("hinge_joint_get_flag", joint, flag);
    }
SWIGINTERN RID PhysicsServer_joint_create_slider(PhysicsServer *self,RID const &body_A,Transform const &local_ref_A,RID const &body_B,Transform const &local_ref_B){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_create_slider", body_A, local_ref_A, body_B, local_ref_B);
    }
SWIGINTERN void PhysicsServer_slider_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("slider_joint_set_param", joint, param, value);
    }
SWIGINTERN float PhysicsServer_slider_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("slider_joint_get_param", joint, param);
    }
SWIGINTERN RID PhysicsServer_joint_create_cone_twist(PhysicsServer *self,RID const &body_A,Transform const &local_ref_A,RID const &body_B,Transform const &local_ref_B){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_create_cone_twist", body_A, local_ref_A, body_B, local_ref_B);
    }
SWIGINTERN void PhysicsServer_cone_twist_joint_set_param(PhysicsServer *self,RID const &joint,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cone_twist_joint_set_param", joint, param, value);
    }
SWIGINTERN float PhysicsServer_cone_twist_joint_get_param(PhysicsServer *self,RID const &joint,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cone_twist_joint_get_param", joint, param);
    }
SWIGINTERN int PhysicsServer_joint_get_type(PhysicsServer *self,RID const &joint){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_get_type", joint);
    }
SWIGINTERN void PhysicsServer_joint_set_solver_priority(PhysicsServer *self,RID const &joint,int priority){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("joint_set_solver_priority", joint, priority);
    }
SWIGINTERN int PhysicsServer_joint_get_solver_priority(PhysicsServer *self,RID const &joint){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_get_solver_priority", joint);
    }
SWIGINTERN RID PhysicsServer_joint_create_generic_6dof(PhysicsServer *self,RID const &body_A,Transform const &local_ref_A,RID const &body_B,Transform const &local_ref_B){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("joint_create_generic_6dof", body_A, local_ref_A, body_B, local_ref_B);
    }
SWIGINTERN void PhysicsServer_generic_6dof_joint_set_param(PhysicsServer *self,RID const &joint,int axis,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("generic_6dof_joint_set_param", joint, axis, param, value);
    }
SWIGINTERN float PhysicsServer_generic_6dof_joint_get_param(PhysicsServer *self,RID const &joint,int axis,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("generic_6dof_joint_get_param", joint, axis, param);
    }
SWIGINTERN void PhysicsServer_generic_6dof_joint_set_flag(PhysicsServer *self,RID const &joint,int axis,int flag,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("generic_6dof_joint_set_flag", joint, axis, flag, enable);
    }
SWIGINTERN bool PhysicsServer_generic_6dof_joint_get_flag(PhysicsServer *self,RID const &joint,int axis,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("generic_6dof_joint_get_flag", joint, axis, flag);
    }
SWIGINTERN void PhysicsServer_free_rid(PhysicsServer *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("free_rid", rid);
    }
SWIGINTERN void PhysicsServer_set_active(PhysicsServer *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_active", active);
    }
SWIGINTERN int PhysicsServer_get_process_info(PhysicsServer *self,int process_info){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_process_info", process_info);
    }
SWIGINTERN PhysicsServer *PhysicsServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("PhysicsServer")->cast_to<PhysicsServer>(); }
SWIGINTERN bool Reference_init_ref(Reference *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("init_ref");
    }
SWIGINTERN void Reference_reference(Reference *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("reference");
    }
SWIGINTERN bool Reference_unreference(Reference *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("unreference");
    }
SWIGINTERN int RegEx_compile__SWIG_0(RegEx *self,String const &pattern,int capture=9){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("compile", pattern, capture);
    }
SWIGINTERN int RegEx_find__SWIG_0(RegEx *self,String const &text,int start=0,int end=-1){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find", text, start, end);
    }
SWIGINTERN void RegEx_clear(RegEx *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN bool RegEx_is_valid(RegEx *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_valid");
    }
SWIGINTERN int RegEx_get_capture_count(RegEx *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_capture_count");
    }
SWIGINTERN String RegEx_get_capture(RegEx *self,int capture){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_capture", capture);
    }
SWIGINTERN int RegEx_get_capture_start(RegEx *self,int capture){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_capture_start", capture);
    }
SWIGINTERN StringArray RegEx_get_captures(RegEx *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_captures");
    }
SWIGINTERN void Resource_set_path(Resource *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_path", path);
    }
SWIGINTERN void Resource_take_over_path(Resource *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("take_over_path", path);
    }
SWIGINTERN String Resource_get_path(Resource *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_path");
    }
SWIGINTERN void Resource_set_name(Resource *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_name", name);
    }
SWIGINTERN String Resource_get_name(Resource *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_name");
    }
SWIGINTERN RID Resource_get_rid(Resource *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rid");
    }
SWIGINTERN void Resource_set_import_metadata(Resource *self,Object *metadata){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_import_metadata", metadata);
    }
SWIGINTERN Object *Resource_get_import_metadata(Resource *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_import_metadata").operator Object *();
    }
SWIGINTERN Object *Resource_duplicate__SWIG_0(Resource *self,bool subresources=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("duplicate", subresources).operator Object *();
    }
SWIGINTERN void ResourceImportMetadata_set_editor(ResourceImportMetadata *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_editor", name);
    }
SWIGINTERN String ResourceImportMetadata_get_editor(ResourceImportMetadata *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_editor");
    }
SWIGINTERN void ResourceImportMetadata_add_source__SWIG_0(ResourceImportMetadata *self,String const &path,String const &md5=""){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_source", path, md5);
    }
SWIGINTERN String ResourceImportMetadata_get_source_path(ResourceImportMetadata *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_source_path", idx);
    }
SWIGINTERN String ResourceImportMetadata_get_source_md5(ResourceImportMetadata *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_source_md5", idx);
    }
SWIGINTERN void ResourceImportMetadata_remove_source(ResourceImportMetadata *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_source", idx);
    }
SWIGINTERN int ResourceImportMetadata_get_source_count(ResourceImportMetadata *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_source_count");
    }
SWIGINTERN void ResourceImportMetadata_set_option(ResourceImportMetadata *self,String const &key,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_option", key, value);
    }
SWIGINTERN void ResourceImportMetadata_get_option(ResourceImportMetadata *self,String const &key){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_option", key);
    }
SWIGINTERN StringArray ResourceImportMetadata_get_options(ResourceImportMetadata *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_options");
    }
SWIGINTERN Object *ResourceInteractiveLoader_get_resource(ResourceInteractiveLoader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_resource").operator Object *();
    }
SWIGINTERN int ResourceInteractiveLoader_poll(ResourceInteractiveLoader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("poll");
    }
SWIGINTERN int ResourceInteractiveLoader_wait(ResourceInteractiveLoader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("wait");
    }
SWIGINTERN int ResourceInteractiveLoader_get_stage(ResourceInteractiveLoader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stage");
    }
SWIGINTERN int ResourceInteractiveLoader_get_stage_count(ResourceInteractiveLoader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stage_count");
    }
SWIGINTERN void RoomBounds_set_bounds(RoomBounds *self,Dictionary const &bsp_tree){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bounds", bsp_tree);
    }
SWIGINTERN Dictionary RoomBounds_get_bounds(RoomBounds *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounds");
    }
SWIGINTERN void RoomBounds_set_geometry_hint(RoomBounds *self,Vector3Array const &triangles){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_geometry_hint", triangles);
    }
SWIGINTERN Vector3Array RoomBounds_get_geometry_hint(RoomBounds *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_geometry_hint");
    }
SWIGINTERN void RoomBounds_regenerate_bsp(RoomBounds *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("regenerate_bsp");
    }
SWIGINTERN void RoomBounds_regenerate_bsp_cubic(RoomBounds *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("regenerate_bsp_cubic");
    }
SWIGINTERN void Sample_create(Sample *self,int format,bool stereo,int length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create", format, stereo, length);
    }
SWIGINTERN int Sample_get_format(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_format");
    }
SWIGINTERN bool Sample_is_stereo(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_stereo");
    }
SWIGINTERN int Sample_get_length(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void Sample_set_data(Sample *self,RawArray const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_data", data);
    }
SWIGINTERN RawArray Sample_get_data(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_data");
    }
SWIGINTERN void Sample_set_mix_rate(Sample *self,int hz){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mix_rate", hz);
    }
SWIGINTERN int Sample_get_mix_rate(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mix_rate");
    }
SWIGINTERN void Sample_set_loop_format(Sample *self,int format){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop_format", format);
    }
SWIGINTERN int Sample_get_loop_format(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_format");
    }
SWIGINTERN void Sample_set_loop_begin(Sample *self,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop_begin", pos);
    }
SWIGINTERN int Sample_get_loop_begin(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_begin");
    }
SWIGINTERN void Sample_set_loop_end(Sample *self,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop_end", pos);
    }
SWIGINTERN int Sample_get_loop_end(Sample *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_end");
    }
SWIGINTERN void SampleLibrary_add_sample(SampleLibrary *self,String const &name,Ref< Sample > sample){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_sample", name, sample);
    }
SWIGINTERN Ref< Sample > SampleLibrary_get_sample(SampleLibrary *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sample", name).operator Object *()->cast_to<Sample>();
    }
SWIGINTERN bool SampleLibrary_has_sample(SampleLibrary *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_sample", name);
    }
SWIGINTERN void SampleLibrary_remove_sample(SampleLibrary *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_sample", name);
    }
SWIGINTERN void SampleLibrary_sample_set_volume_db(SampleLibrary *self,String const &name,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_volume_db", name, db);
    }
SWIGINTERN float SampleLibrary_sample_get_volume_db(SampleLibrary *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_volume_db", name);
    }
SWIGINTERN void SampleLibrary_sample_set_pitch_scale(SampleLibrary *self,String const &name,float pitch){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_pitch_scale", name, pitch);
    }
SWIGINTERN float SampleLibrary_sample_get_pitch_scale(SampleLibrary *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_pitch_scale", name);
    }
SWIGINTERN int SceneState_get_node_count(SceneState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_count");
    }
SWIGINTERN String SceneState_get_node_type(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_type", idx);
    }
SWIGINTERN String SceneState_get_node_name(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_name", idx);
    }
SWIGINTERN NodePath SceneState_get_node_path__SWIG_0(SceneState *self,int idx,bool for_parent=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_path", idx, for_parent);
    }
SWIGINTERN NodePath SceneState_get_node_owner_path(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_owner_path", idx);
    }
SWIGINTERN bool SceneState_is_node_instance_placeholder(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_node_instance_placeholder", idx);
    }
SWIGINTERN String SceneState_get_node_instance_placeholder(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_instance_placeholder", idx);
    }
SWIGINTERN Ref< PackedScene > SceneState_get_node_instance(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_instance", idx).operator Object *()->cast_to<PackedScene>();
    }
SWIGINTERN StringArray SceneState_get_node_groups(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_groups", idx);
    }
SWIGINTERN int SceneState_get_node_property_count(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_property_count", idx);
    }
SWIGINTERN String SceneState_get_node_property_name(SceneState *self,int idx,int prop_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_property_name", idx, prop_idx);
    }
SWIGINTERN void SceneState_get_node_property_value(SceneState *self,int idx,int prop_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_node_property_value", idx, prop_idx);
    }
SWIGINTERN int SceneState_get_connection_count(SceneState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_count");
    }
SWIGINTERN NodePath SceneState_get_connection_source(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_source", idx);
    }
SWIGINTERN String SceneState_get_connection_signal(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_signal", idx);
    }
SWIGINTERN NodePath SceneState_get_connection_target(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_target", idx);
    }
SWIGINTERN String SceneState_get_connection_method(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_method", idx);
    }
SWIGINTERN int SceneState_get_connection_flags(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_flags", idx);
    }
SWIGINTERN Array SceneState_get_connection_binds(SceneState *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_binds", idx);
    }
SWIGINTERN bool Script_can_instance(Script *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_instance");
    }
SWIGINTERN bool Script_instance_has(Script *self,Object *base_object){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_has", base_object);
    }
SWIGINTERN bool Script_has_source_code(Script *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_source_code");
    }
SWIGINTERN String Script_get_source_code(Script *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_source_code");
    }
SWIGINTERN void Script_set_source_code(Script *self,String const &source){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_source_code", source);
    }
SWIGINTERN int Script_reload(Script *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("reload");
    }
SWIGINTERN int Shader_get_mode(Shader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN void Shader_set_code__SWIG_0(Shader *self,String const &vcode,String const &fcode,String const &lcode,int fofs=0,int lofs=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_code", vcode, fcode, lcode, fofs, lofs);
    }
SWIGINTERN String Shader_get_vertex_code(Shader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_code");
    }
SWIGINTERN String Shader_get_fragment_code(Shader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fragment_code");
    }
SWIGINTERN String Shader_get_light_code(Shader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_light_code");
    }
SWIGINTERN void Shader_set_default_texture_param(Shader *self,String const &param,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_texture_param", param, texture);
    }
SWIGINTERN Ref< Texture > Shader_get_default_texture_param(Shader *self,String const &param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_texture_param", param).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN bool Shader_has_param(Shader *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_param", name);
    }
SWIGINTERN void ShaderGraph_node_add(ShaderGraph *self,int shader_type,int node_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("node_add", shader_type, node_type, id);
    }
SWIGINTERN void ShaderGraph_node_remove(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("node_remove", shader_type, id);
    }
SWIGINTERN void ShaderGraph_node_set_pos(ShaderGraph *self,int shader_type,int id,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("node_set_pos", shader_type, id, pos);
    }
SWIGINTERN Vector2 ShaderGraph_node_get_pos(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_pos", shader_type, id);
    }
SWIGINTERN int ShaderGraph_node_get_type(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_type", shader_type, id);
    }
SWIGINTERN Array ShaderGraph_get_node_list(ShaderGraph *self,int shader_type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_list", shader_type);
    }
SWIGINTERN void ShaderGraph_default_set_value(ShaderGraph *self,int shader_type,int id,int param_id,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("default_set_value", shader_type, id, param_id, value);
    }
SWIGINTERN void ShaderGraph_default_get_value(ShaderGraph *self,int shader_type,int id,int param_id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("default_get_value", shader_type, id, param_id);
    }
SWIGINTERN void ShaderGraph_scalar_const_node_set_value(ShaderGraph *self,int shader_type,int id,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scalar_const_node_set_value", shader_type, id, value);
    }
SWIGINTERN float ShaderGraph_scalar_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("scalar_const_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_vec_const_node_set_value(ShaderGraph *self,int shader_type,int id,Vector3 const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("vec_const_node_set_value", shader_type, id, value);
    }
SWIGINTERN Vector3 ShaderGraph_vec_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("vec_const_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_rgb_const_node_set_value(ShaderGraph *self,int shader_type,int id,Color const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rgb_const_node_set_value", shader_type, id, value);
    }
SWIGINTERN Color ShaderGraph_rgb_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("rgb_const_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_xform_const_node_set_value(ShaderGraph *self,int shader_type,int id,Transform const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("xform_const_node_set_value", shader_type, id, value);
    }
SWIGINTERN Transform ShaderGraph_xform_const_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("xform_const_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_texture_node_set_filter_size(ShaderGraph *self,int shader_type,int id,int filter_size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("texture_node_set_filter_size", shader_type, id, filter_size);
    }
SWIGINTERN int ShaderGraph_texture_node_get_filter_size(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_node_get_filter_size", shader_type, id);
    }
SWIGINTERN void ShaderGraph_texture_node_set_filter_strength(ShaderGraph *self,int shader_type,float id,float filter_strength){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("texture_node_set_filter_strength", shader_type, id, filter_strength);
    }
SWIGINTERN float ShaderGraph_texture_node_get_filter_strength(ShaderGraph *self,int shader_type,float id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_node_get_filter_strength", shader_type, id);
    }
SWIGINTERN void ShaderGraph_scalar_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scalar_op_node_set_op", shader_type, id, op);
    }
SWIGINTERN int ShaderGraph_scalar_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("scalar_op_node_get_op", shader_type, id);
    }
SWIGINTERN void ShaderGraph_vec_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("vec_op_node_set_op", shader_type, id, op);
    }
SWIGINTERN int ShaderGraph_vec_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("vec_op_node_get_op", shader_type, id);
    }
SWIGINTERN void ShaderGraph_vec_scalar_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("vec_scalar_op_node_set_op", shader_type, id, op);
    }
SWIGINTERN int ShaderGraph_vec_scalar_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("vec_scalar_op_node_get_op", shader_type, id);
    }
SWIGINTERN void ShaderGraph_rgb_op_node_set_op(ShaderGraph *self,int shader_type,float id,int op){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rgb_op_node_set_op", shader_type, id, op);
    }
SWIGINTERN int ShaderGraph_rgb_op_node_get_op(ShaderGraph *self,int shader_type,float id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("rgb_op_node_get_op", shader_type, id);
    }
SWIGINTERN void ShaderGraph_xform_vec_mult_node_set_no_translation(ShaderGraph *self,int shader_type,int id,bool disable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("xform_vec_mult_node_set_no_translation", shader_type, id, disable);
    }
SWIGINTERN bool ShaderGraph_xform_vec_mult_node_get_no_translation(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("xform_vec_mult_node_get_no_translation", shader_type, id);
    }
SWIGINTERN void ShaderGraph_scalar_func_node_set_function(ShaderGraph *self,int shader_type,int id,int func){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scalar_func_node_set_function", shader_type, id, func);
    }
SWIGINTERN int ShaderGraph_scalar_func_node_get_function(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("scalar_func_node_get_function", shader_type, id);
    }
SWIGINTERN void ShaderGraph_vec_func_node_set_function(ShaderGraph *self,int shader_type,int id,int func){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("vec_func_node_set_function", shader_type, id, func);
    }
SWIGINTERN int ShaderGraph_vec_func_node_get_function(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("vec_func_node_get_function", shader_type, id);
    }
SWIGINTERN void ShaderGraph_input_node_set_name(ShaderGraph *self,int shader_type,int id,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("input_node_set_name", shader_type, id, name);
    }
SWIGINTERN String ShaderGraph_input_node_get_name(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("input_node_get_name", shader_type, id);
    }
SWIGINTERN void ShaderGraph_scalar_input_node_set_value(ShaderGraph *self,int shader_type,int id,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scalar_input_node_set_value", shader_type, id, value);
    }
SWIGINTERN float ShaderGraph_scalar_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("scalar_input_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_vec_input_node_set_value(ShaderGraph *self,int shader_type,int id,Vector3 const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("vec_input_node_set_value", shader_type, id, value);
    }
SWIGINTERN Vector3 ShaderGraph_vec_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("vec_input_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_rgb_input_node_set_value(ShaderGraph *self,int shader_type,int id,Color const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rgb_input_node_set_value", shader_type, id, value);
    }
SWIGINTERN Color ShaderGraph_rgb_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("rgb_input_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_xform_input_node_set_value(ShaderGraph *self,int shader_type,int id,Transform const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("xform_input_node_set_value", shader_type, id, value);
    }
SWIGINTERN Transform ShaderGraph_xform_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("xform_input_node_get_value", shader_type, id);
    }
SWIGINTERN void ShaderGraph_texture_input_node_set_value(ShaderGraph *self,int shader_type,int id,Ref< Texture > value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("texture_input_node_set_value", shader_type, id, value);
    }
SWIGINTERN Ref< Texture > ShaderGraph_texture_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_input_node_get_value", shader_type, id).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void ShaderGraph_cubemap_input_node_set_value(ShaderGraph *self,int shader_type,int id,Ref< CubeMap > value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cubemap_input_node_set_value", shader_type, id, value);
    }
SWIGINTERN Ref< CubeMap > ShaderGraph_cubemap_input_node_get_value(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cubemap_input_node_get_value", shader_type, id).operator Object *()->cast_to<CubeMap>();
    }
SWIGINTERN void ShaderGraph_comment_node_set_text(ShaderGraph *self,int shader_type,int id,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("comment_node_set_text", shader_type, id, text);
    }
SWIGINTERN String ShaderGraph_comment_node_get_text(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("comment_node_get_text", shader_type, id);
    }
SWIGINTERN void ShaderGraph_color_ramp_node_set_ramp(ShaderGraph *self,int shader_type,int id,ColorArray const &colors,RealArray const &offsets){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("color_ramp_node_set_ramp", shader_type, id, colors, offsets);
    }
SWIGINTERN ColorArray ShaderGraph_color_ramp_node_get_colors(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("color_ramp_node_get_colors", shader_type, id);
    }
SWIGINTERN RealArray ShaderGraph_color_ramp_node_get_offsets(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("color_ramp_node_get_offsets", shader_type, id);
    }
SWIGINTERN void ShaderGraph_curve_map_node_set_points(ShaderGraph *self,int shader_type,int id,Vector2Array const &points){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("curve_map_node_set_points", shader_type, id, points);
    }
SWIGINTERN Vector2Array ShaderGraph_curve_map_node_get_points(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("curve_map_node_get_points", shader_type, id);
    }
SWIGINTERN int ShaderGraph_connect_node(ShaderGraph *self,int shader_type,int src_id,int src_slot,int dst_id,int dst_slot){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect_node", shader_type, src_id, src_slot, dst_id, dst_slot);
    }
SWIGINTERN bool ShaderGraph_is_node_connected(ShaderGraph *self,int shader_type,int src_id,int src_slot,int dst_id,int dst_slot){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_node_connected", shader_type, src_id, src_slot, dst_id, dst_slot);
    }
SWIGINTERN void ShaderGraph_disconnect_node(ShaderGraph *self,int shader_type,int src_id,int src_slot,int dst_id,int dst_slot){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("disconnect_node", shader_type, src_id, src_slot, dst_id, dst_slot);
    }
SWIGINTERN Array ShaderGraph_get_node_connections(ShaderGraph *self,int shader_type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_connections", shader_type);
    }
SWIGINTERN void ShaderGraph_clear(ShaderGraph *self,int shader_type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear", shader_type);
    }
SWIGINTERN void ShaderGraph_node_set_state(ShaderGraph *self,int shader_type,int id,Variant const &state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("node_set_state", shader_type, id, state);
    }
SWIGINTERN Variant ShaderGraph_node_get_state(ShaderGraph *self,int shader_type,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_state", shader_type, id);
    }
SWIGINTERN void Shape2D_set_custom_solver_bias(Shape2D *self,float bias){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_solver_bias", bias);
    }
SWIGINTERN float Shape2D_get_custom_solver_bias(Shape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_solver_bias");
    }
SWIGINTERN bool Shape2D_collide(Shape2D *self,Matrix32 const &local_xform,Ref< Shape2D > with_shape,Matrix32 const &shape_xform){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("collide", local_xform, with_shape, shape_xform);
    }
SWIGINTERN bool Shape2D_collide_with_motion(Shape2D *self,Matrix32 const &local_xform,Vector2 const &local_motion,Ref< Shape2D > with_shape,Matrix32 const &shape_xform,Vector2 const &shape_motion){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("collide_with_motion", local_xform, local_motion, with_shape, shape_xform, shape_motion);
    }
SWIGINTERN Variant Shape2D_collide_and_get_contacts(Shape2D *self,Matrix32 const &local_xform,Ref< Shape2D > with_shape,Matrix32 const &shape_xform){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("collide_and_get_contacts", local_xform, with_shape, shape_xform);
    }
SWIGINTERN Variant Shape2D_collide_with_motion_and_get_contacts(Shape2D *self,Matrix32 const &local_xform,Vector2 const &local_motion,Ref< Shape2D > with_shape,Matrix32 const &shape_xform,Vector2 const &shape_motion){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("collide_with_motion_and_get_contacts", local_xform, local_motion, with_shape, shape_xform, shape_motion);
    }
SWIGINTERN SpatialSound2DServer *SpatialSound2DServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("SpatialSound2DServer")->cast_to<SpatialSound2DServer>(); }
SWIGINTERN SpatialSoundServer *SpatialSoundServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("SpatialSoundServer")->cast_to<SpatialSoundServer>(); }
SWIGINTERN void SphereShape_set_radius(SphereShape *self,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radius", radius);
    }
SWIGINTERN float SphereShape_get_radius(SphereShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radius");
    }
SWIGINTERN void SpriteFrames_add_animation(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_animation", anim);
    }
SWIGINTERN bool SpriteFrames_has_animation(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_animation", anim);
    }
SWIGINTERN void SpriteFrames_remove_animation(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_animation", anim);
    }
SWIGINTERN void SpriteFrames_rename_animation(SpriteFrames *self,String const &anim,String const &newname){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rename_animation", anim, newname);
    }
SWIGINTERN void SpriteFrames_set_animation_speed(SpriteFrames *self,String const &anim,float speed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_animation_speed", anim, speed);
    }
SWIGINTERN float SpriteFrames_get_animation_speed(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation_speed", anim);
    }
SWIGINTERN void SpriteFrames_set_animation_loop(SpriteFrames *self,String const &anim,bool loop){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_animation_loop", anim, loop);
    }
SWIGINTERN bool SpriteFrames_get_animation_loop(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation_loop", anim);
    }
SWIGINTERN void SpriteFrames_add_frame__SWIG_0(SpriteFrames *self,String const &anim,Object *frame,int atpos=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_frame", anim, frame, atpos);
    }
SWIGINTERN int SpriteFrames_get_frame_count(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame_count", anim);
    }
SWIGINTERN Object *SpriteFrames_get_frame(SpriteFrames *self,String const &anim,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame", anim, idx).operator Object *();
    }
SWIGINTERN void SpriteFrames_set_frame(SpriteFrames *self,String const &anim,int idx,Object *txt){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_frame", anim, idx, txt);
    }
SWIGINTERN void SpriteFrames_remove_frame(SpriteFrames *self,String const &anim,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_frame", anim, idx);
    }
SWIGINTERN void SpriteFrames_clear(SpriteFrames *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear", anim);
    }
SWIGINTERN void SpriteFrames_clear_all(SpriteFrames *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_all");
    }
SWIGINTERN int StreamPeer_put_data(StreamPeer *self,RawArray const &data){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("put_data", data);
    }
SWIGINTERN Array StreamPeer_put_partial_data(StreamPeer *self,RawArray const &data){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("put_partial_data", data);
    }
SWIGINTERN Array StreamPeer_get_data(StreamPeer *self,int bytes){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_data", bytes);
    }
SWIGINTERN Array StreamPeer_get_partial_data(StreamPeer *self,int bytes){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_partial_data", bytes);
    }
SWIGINTERN int StreamPeer_get_available_bytes(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_available_bytes");
    }
SWIGINTERN void StreamPeer_set_big_endian(StreamPeer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_big_endian", enable);
    }
SWIGINTERN bool StreamPeer_is_big_endian_enabled(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_big_endian_enabled");
    }
SWIGINTERN void StreamPeer_put_8(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_8", val);
    }
SWIGINTERN void StreamPeer_put_u8(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_u8", val);
    }
SWIGINTERN void StreamPeer_put_16(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_16", val);
    }
SWIGINTERN void StreamPeer_put_u16(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_u16", val);
    }
SWIGINTERN void StreamPeer_put_32(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_32", val);
    }
SWIGINTERN void StreamPeer_put_u32(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_u32", val);
    }
SWIGINTERN void StreamPeer_put_64(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_64", val);
    }
SWIGINTERN void StreamPeer_put_u64(StreamPeer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_u64", val);
    }
SWIGINTERN void StreamPeer_put_float(StreamPeer *self,float val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_float", val);
    }
SWIGINTERN void StreamPeer_put_double(StreamPeer *self,float val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_double", val);
    }
SWIGINTERN void StreamPeer_put_utf8_string(StreamPeer *self,String const &val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_utf8_string", val);
    }
SWIGINTERN void StreamPeer_put_var(StreamPeer *self,Variant const &val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("put_var", val);
    }
SWIGINTERN int StreamPeer_get_8(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_8");
    }
SWIGINTERN int StreamPeer_get_u8(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_u8");
    }
SWIGINTERN int StreamPeer_get_16(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_16");
    }
SWIGINTERN int StreamPeer_get_u16(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_u16");
    }
SWIGINTERN int StreamPeer_get_32(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_32");
    }
SWIGINTERN int StreamPeer_get_u32(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_u32");
    }
SWIGINTERN int StreamPeer_get_64(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_64");
    }
SWIGINTERN int StreamPeer_get_u64(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_u64");
    }
SWIGINTERN float StreamPeer_get_float(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_float");
    }
SWIGINTERN float StreamPeer_get_double(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_double");
    }
SWIGINTERN String StreamPeer_get_string(StreamPeer *self,int bytes){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_string", bytes);
    }
SWIGINTERN String StreamPeer_get_utf8_string(StreamPeer *self,int bytes){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_utf8_string", bytes);
    }
SWIGINTERN Variant StreamPeer_get_var(StreamPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_var");
    }
SWIGINTERN int StreamPeerSSL_accept(StreamPeerSSL *self,Ref< StreamPeer > stream){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("accept", stream);
    }
SWIGINTERN int StreamPeerSSL_connect__SWIG_0(StreamPeerSSL *self,Ref< StreamPeer > stream,bool validate_certs=false,String const &for_hostname=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect", stream, validate_certs, for_hostname);
    }
SWIGINTERN int StreamPeerSSL_get_status(StreamPeerSSL *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_status");
    }
SWIGINTERN void StreamPeerSSL_disconnect(StreamPeerSSL *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("disconnect");
    }
SWIGINTERN StreamPeerSSL *new_StreamPeerSSL(){ return StreamPeerSSL::create(); }
SWIGINTERN int StreamPeerTCP_connect(StreamPeerTCP *self,String const &host,int port){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect", host, port);
    }
SWIGINTERN bool StreamPeerTCP_is_connected(StreamPeerTCP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_connected");
    }
SWIGINTERN int StreamPeerTCP_get_status(StreamPeerTCP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_status");
    }
SWIGINTERN String StreamPeerTCP_get_connected_host(StreamPeerTCP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connected_host");
    }
SWIGINTERN int StreamPeerTCP_get_connected_port(StreamPeerTCP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connected_port");
    }
SWIGINTERN void StreamPeerTCP_disconnect(StreamPeerTCP *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("disconnect");
    }
SWIGINTERN StreamPeerTCP *new_StreamPeerTCP(){ return StreamPeerTCP::create(); }
SWIGINTERN bool StyleBox_test_mask(StyleBox *self,Vector2 const &point,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("test_mask", point, rect);
    }
SWIGINTERN void StyleBox_set_default_margin(StyleBox *self,int margin,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_margin", margin, offset);
    }
SWIGINTERN float StyleBox_get_default_margin(StyleBox *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_margin", margin);
    }
SWIGINTERN float StyleBox_get_margin(StyleBox *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_margin", margin);
    }
SWIGINTERN Vector2 StyleBox_get_minimum_size(StyleBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_minimum_size");
    }
SWIGINTERN Vector2 StyleBox_get_center_size(StyleBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_center_size");
    }
SWIGINTERN Vector2 StyleBox_get_offset(StyleBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void StyleBox_draw(StyleBox *self,RID const &canvas_item,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw", canvas_item, rect);
    }
SWIGINTERN void StyleBoxFlat_set_bg_color(StyleBoxFlat *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bg_color", color);
    }
SWIGINTERN Color StyleBoxFlat_get_bg_color(StyleBoxFlat *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bg_color");
    }
SWIGINTERN void StyleBoxFlat_set_light_color(StyleBoxFlat *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_light_color", color);
    }
SWIGINTERN Color StyleBoxFlat_get_light_color(StyleBoxFlat *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_light_color");
    }
SWIGINTERN void StyleBoxFlat_set_dark_color(StyleBoxFlat *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_dark_color", color);
    }
SWIGINTERN Color StyleBoxFlat_get_dark_color(StyleBoxFlat *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_dark_color");
    }
SWIGINTERN void StyleBoxFlat_set_border_size(StyleBoxFlat *self,int size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_border_size", size);
    }
SWIGINTERN int StyleBoxFlat_get_border_size(StyleBoxFlat *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_border_size");
    }
SWIGINTERN void StyleBoxFlat_set_border_blend(StyleBoxFlat *self,bool blend){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_border_blend", blend);
    }
SWIGINTERN bool StyleBoxFlat_get_border_blend(StyleBoxFlat *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_border_blend");
    }
SWIGINTERN void StyleBoxFlat_set_draw_center(StyleBoxFlat *self,bool size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_center", size);
    }
SWIGINTERN bool StyleBoxFlat_get_draw_center(StyleBoxFlat *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_center");
    }
SWIGINTERN void StyleBoxImageMask_set_image(StyleBoxImageMask *self,Image const &image){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_image", image);
    }
SWIGINTERN Image StyleBoxImageMask_get_image(StyleBoxImageMask *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_image");
    }
SWIGINTERN void StyleBoxImageMask_set_expand(StyleBoxImageMask *self,bool expand){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_expand", expand);
    }
SWIGINTERN bool StyleBoxImageMask_get_expand(StyleBoxImageMask *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_expand");
    }
SWIGINTERN void StyleBoxImageMask_set_expand_margin_size(StyleBoxImageMask *self,int margin,float size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_expand_margin_size", margin, size);
    }
SWIGINTERN float StyleBoxImageMask_get_expand_margin_size(StyleBoxImageMask *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_expand_margin_size", margin);
    }
SWIGINTERN void StyleBoxTexture_set_texture(StyleBoxTexture *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Ref< Texture > StyleBoxTexture_get_texture(StyleBoxTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void StyleBoxTexture_set_margin_size(StyleBoxTexture *self,int margin,float size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_margin_size", margin, size);
    }
SWIGINTERN float StyleBoxTexture_get_margin_size(StyleBoxTexture *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_margin_size", margin);
    }
SWIGINTERN void StyleBoxTexture_set_expand_margin_size(StyleBoxTexture *self,int margin,float size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_expand_margin_size", margin, size);
    }
SWIGINTERN float StyleBoxTexture_get_expand_margin_size(StyleBoxTexture *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_expand_margin_size", margin);
    }
SWIGINTERN void StyleBoxTexture_set_draw_center(StyleBoxTexture *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_center", enable);
    }
SWIGINTERN bool StyleBoxTexture_get_draw_center(StyleBoxTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_center");
    }
SWIGINTERN void SurfaceTool_begin(SurfaceTool *self,int primitive){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("begin", primitive);
    }
SWIGINTERN void SurfaceTool_add_vertex(SurfaceTool *self,Vector3 const &vertex){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_vertex", vertex);
    }
SWIGINTERN void SurfaceTool_add_color(SurfaceTool *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_color", color);
    }
SWIGINTERN void SurfaceTool_add_normal(SurfaceTool *self,Vector3 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_normal", normal);
    }
SWIGINTERN void SurfaceTool_add_tangent(SurfaceTool *self,Plane const &tangent){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_tangent", tangent);
    }
SWIGINTERN void SurfaceTool_add_uv(SurfaceTool *self,Vector2 const &uv){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_uv", uv);
    }
SWIGINTERN void SurfaceTool_add_uv2(SurfaceTool *self,Vector2 const &uv2){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_uv2", uv2);
    }
SWIGINTERN void SurfaceTool_add_bones(SurfaceTool *self,IntArray const &bones){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_bones", bones);
    }
SWIGINTERN void SurfaceTool_add_weights(SurfaceTool *self,RealArray const &weights){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_weights", weights);
    }
SWIGINTERN void SurfaceTool_add_smooth_group(SurfaceTool *self,bool smooth){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_smooth_group", smooth);
    }
SWIGINTERN void SurfaceTool_add_triangle_fan__SWIG_0(SurfaceTool *self,Vector3Array const &vertexes,Vector2Array const &uvs=Vector2Array(),ColorArray const &colors=ColorArray(),Vector2Array const &uv2s=Vector2Array(),Vector3Array const &normals=Vector3Array(),Array const &tangents=Array()){
  Variant::CallError err;
Variant arg_0_ = Variant(vertexes);
Variant arg_1_ = Variant(uvs);
Variant arg_2_ = Variant(colors);
Variant arg_3_ = Variant(uv2s);
Variant arg_4_ = Variant(normals);
Variant arg_5_ = Variant(tangents);
Variant *args_[6] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_ };
self->call("add_triangle_fan", (const Variant **) args_, 6, err);
    }
SWIGINTERN void SurfaceTool_set_material(SurfaceTool *self,Ref< Material > material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_material", material);
    }
SWIGINTERN void SurfaceTool_index(SurfaceTool *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("index");
    }
SWIGINTERN void SurfaceTool_deindex(SurfaceTool *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("deindex");
    }
SWIGINTERN void SurfaceTool_generate_normals(SurfaceTool *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("generate_normals");
    }
SWIGINTERN Ref< Mesh > SurfaceTool_commit__SWIG_0(SurfaceTool *self,Ref< Mesh > existing=Ref< Mesh >()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("commit", existing).operator Object *()->cast_to<Mesh>();
    }
SWIGINTERN void SurfaceTool_clear(SurfaceTool *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN int TCP_Server_listen__SWIG_0(TCP_Server *self,int port,StringArray const &accepted_hosts=StringArray()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("listen", port, accepted_hosts);
    }
SWIGINTERN bool TCP_Server_is_connection_available(TCP_Server *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_connection_available");
    }
SWIGINTERN Object *TCP_Server_take_connection(TCP_Server *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("take_connection").operator Object *();
    }
SWIGINTERN void TCP_Server_stop(TCP_Server *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN TCP_Server *new_TCP_Server(){ return TCP_Server::create(); }
SWIGINTERN int Texture_get_width(Texture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_width");
    }
SWIGINTERN int Texture_get_height(Texture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_height");
    }
SWIGINTERN Vector2 Texture_get_size(Texture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size");
    }
SWIGINTERN RID Texture_get_rid(Texture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rid");
    }
SWIGINTERN bool Texture_has_alpha(Texture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_alpha");
    }
SWIGINTERN void Texture_set_flags(Texture *self,int flags){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flags", flags);
    }
SWIGINTERN int Texture_get_flags(Texture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flags");
    }
SWIGINTERN void Texture_draw__SWIG_0(Texture *self,RID const &canvas_item,Vector2 const &pos,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw", canvas_item, pos, modulate, transpose);
    }
SWIGINTERN void Texture_draw_rect__SWIG_0(Texture *self,RID const &canvas_item,Rect2 const &rect,bool tile,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_rect", canvas_item, rect, tile, modulate, transpose);
    }
SWIGINTERN void Texture_draw_rect_region__SWIG_0(Texture *self,RID const &canvas_item,Rect2 const &rect,Rect2 const &src_rect,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_rect_region", canvas_item, rect, src_rect, modulate, transpose);
    }
SWIGINTERN void Theme_set_icon(Theme *self,String const &name,String const &type,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon", name, type, texture);
    }
SWIGINTERN Ref< Texture > Theme_get_icon(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon", name, type).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN bool Theme_has_icon(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_icon", name, type);
    }
SWIGINTERN void Theme_clear_icon(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_icon", name, type);
    }
SWIGINTERN StringArray Theme_get_icon_list(Theme *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon_list", type);
    }
SWIGINTERN void Theme_set_stylebox(Theme *self,String const &name,String const &type,Ref< StyleBox > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stylebox", name, type, texture);
    }
SWIGINTERN Ref< StyleBox > Theme_get_stylebox(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stylebox", name, type).operator Object *()->cast_to<StyleBox>();
    }
SWIGINTERN bool Theme_has_stylebox(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_stylebox", name, type);
    }
SWIGINTERN void Theme_clear_stylebox(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_stylebox", name, type);
    }
SWIGINTERN StringArray Theme_get_stylebox_list(Theme *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stylebox_list", type);
    }
SWIGINTERN StringArray Theme_get_stylebox_types(Theme *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stylebox_types");
    }
SWIGINTERN void Theme_set_font(Theme *self,String const &name,String const &type,Ref< Font > font){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_font", name, type, font);
    }
SWIGINTERN Ref< Font > Theme_get_font(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_font", name, type).operator Object *()->cast_to<Font>();
    }
SWIGINTERN bool Theme_has_font(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_font", name, type);
    }
SWIGINTERN void Theme_clear_font(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_font", name, type);
    }
SWIGINTERN StringArray Theme_get_font_list(Theme *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_font_list", type);
    }
SWIGINTERN void Theme_set_color(Theme *self,String const &name,String const &type,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", name, type, color);
    }
SWIGINTERN Color Theme_get_color(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color", name, type);
    }
SWIGINTERN bool Theme_has_color(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_color", name, type);
    }
SWIGINTERN void Theme_clear_color(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_color", name, type);
    }
SWIGINTERN StringArray Theme_get_color_list(Theme *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_list", type);
    }
SWIGINTERN void Theme_set_constant(Theme *self,String const &name,String const &type,int constant){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_constant", name, type, constant);
    }
SWIGINTERN int Theme_get_constant(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant", name, type);
    }
SWIGINTERN bool Theme_has_constant(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_constant", name, type);
    }
SWIGINTERN void Theme_clear_constant(Theme *self,String const &name,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_constant", name, type);
    }
SWIGINTERN StringArray Theme_get_constant_list(Theme *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant_list", type);
    }
SWIGINTERN void Theme_set_default_font(Theme *self,Object *font){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_font", font);
    }
SWIGINTERN Object *Theme_get_default_font(Theme *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_font").operator Object *();
    }
SWIGINTERN StringArray Theme_get_type_list(Theme *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_type_list", type);
    }
SWIGINTERN void Theme_copy_default_theme(Theme *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("copy_default_theme");
    }
SWIGINTERN void TileSet_create_tile(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_tile", id);
    }
SWIGINTERN void TileSet_tile_set_name(TileSet *self,int id,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_name", id, name);
    }
SWIGINTERN String TileSet_tile_get_name(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_name", id);
    }
SWIGINTERN void TileSet_tile_set_texture(TileSet *self,int id,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_texture", id, texture);
    }
SWIGINTERN Ref< Texture > TileSet_tile_get_texture(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_texture", id).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void TileSet_tile_set_material(TileSet *self,int id,Ref< CanvasItemMaterial > material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_material", id, material);
    }
SWIGINTERN Ref< CanvasItemMaterial > TileSet_tile_get_material(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_material", id).operator Object *()->cast_to<CanvasItemMaterial>();
    }
SWIGINTERN void TileSet_tile_set_texture_offset(TileSet *self,int id,Vector2 const &texture_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_texture_offset", id, texture_offset);
    }
SWIGINTERN Vector2 TileSet_tile_get_texture_offset(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_texture_offset", id);
    }
SWIGINTERN void TileSet_tile_set_shape_offset(TileSet *self,int id,Vector2 const &shape_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_shape_offset", id, shape_offset);
    }
SWIGINTERN Vector2 TileSet_tile_get_shape_offset(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_shape_offset", id);
    }
SWIGINTERN void TileSet_tile_set_region(TileSet *self,int id,Rect2 const &region){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_region", id, region);
    }
SWIGINTERN Rect2 TileSet_tile_get_region(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_region", id);
    }
SWIGINTERN void TileSet_tile_set_shape(TileSet *self,int id,Ref< Shape2D > shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_shape", id, shape);
    }
SWIGINTERN Ref< Shape2D > TileSet_tile_get_shape(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_shape", id).operator Object *()->cast_to<Shape2D>();
    }
SWIGINTERN void TileSet_tile_set_shapes(TileSet *self,int id,Array const &shapes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_shapes", id, shapes);
    }
SWIGINTERN Array TileSet_tile_get_shapes(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_shapes", id);
    }
SWIGINTERN void TileSet_tile_set_navigation_polygon(TileSet *self,int id,Ref< NavigationPolygon > navigation_polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_navigation_polygon", id, navigation_polygon);
    }
SWIGINTERN Ref< NavigationPolygon > TileSet_tile_get_navigation_polygon(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_navigation_polygon", id).operator Object *()->cast_to<NavigationPolygon>();
    }
SWIGINTERN void TileSet_tile_set_navigation_polygon_offset(TileSet *self,int id,Vector2 const &navigation_polygon_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_navigation_polygon_offset", id, navigation_polygon_offset);
    }
SWIGINTERN Vector2 TileSet_tile_get_navigation_polygon_offset(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_navigation_polygon_offset", id);
    }
SWIGINTERN void TileSet_tile_set_light_occluder(TileSet *self,int id,Ref< OccluderPolygon2D > light_occluder){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_light_occluder", id, light_occluder);
    }
SWIGINTERN Ref< OccluderPolygon2D > TileSet_tile_get_light_occluder(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_light_occluder", id).operator Object *()->cast_to<OccluderPolygon2D>();
    }
SWIGINTERN void TileSet_tile_set_occluder_offset(TileSet *self,int id,Vector2 const &occluder_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("tile_set_occluder_offset", id, occluder_offset);
    }
SWIGINTERN Vector2 TileSet_tile_get_occluder_offset(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tile_get_occluder_offset", id);
    }
SWIGINTERN void TileSet_remove_tile(TileSet *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_tile", id);
    }
SWIGINTERN void TileSet_clear(TileSet *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN int TileSet_get_last_unused_tile_id(TileSet *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_last_unused_tile_id");
    }
SWIGINTERN int TileSet_find_tile_by_name(TileSet *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_tile_by_name", name);
    }
SWIGINTERN Array TileSet_get_tiles_ids(TileSet *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tiles_ids");
    }
SWIGINTERN void Translation_set_locale(Translation *self,String const &locale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_locale", locale);
    }
SWIGINTERN String Translation_get_locale(Translation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_locale");
    }
SWIGINTERN void Translation_add_message(Translation *self,String const &src_message,String const &xlated_message){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_message", src_message, xlated_message);
    }
SWIGINTERN String Translation_get_message(Translation *self,String const &src_message){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_message", src_message);
    }
SWIGINTERN void Translation_erase_message(Translation *self,String const &src_message){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_message", src_message);
    }
SWIGINTERN StringArray Translation_get_message_list(Translation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_message_list");
    }
SWIGINTERN int Translation_get_message_count(Translation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_message_count");
    }
SWIGINTERN void TranslationServer_set_locale(TranslationServer *self,String const &locale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_locale", locale);
    }
SWIGINTERN String TranslationServer_get_locale(TranslationServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_locale");
    }
SWIGINTERN String TranslationServer_translate(TranslationServer *self,String const &message){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("translate", message);
    }
SWIGINTERN void TranslationServer_add_translation(TranslationServer *self,Ref< Translation > translation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_translation", translation);
    }
SWIGINTERN void TranslationServer_remove_translation(TranslationServer *self,Ref< Translation > translation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_translation", translation);
    }
SWIGINTERN void TranslationServer_clear(TranslationServer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN TranslationServer *TranslationServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("TranslationServer")->cast_to<TranslationServer>(); }
SWIGINTERN void TreeItem_set_cell_mode(TreeItem *self,int column,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cell_mode", column, mode);
    }
SWIGINTERN int TreeItem_get_cell_mode(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_mode", column);
    }
SWIGINTERN void TreeItem_set_checked(TreeItem *self,int column,bool checked){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_checked", column, checked);
    }
SWIGINTERN bool TreeItem_is_checked(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_checked", column);
    }
SWIGINTERN void TreeItem_set_text(TreeItem *self,int column,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", column, text);
    }
SWIGINTERN String TreeItem_get_text(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text", column);
    }
SWIGINTERN void TreeItem_set_icon(TreeItem *self,int column,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon", column, texture);
    }
SWIGINTERN Ref< Texture > TreeItem_get_icon(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon", column).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void TreeItem_set_icon_region(TreeItem *self,int column,Rect2 const &region){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon_region", column, region);
    }
SWIGINTERN Rect2 TreeItem_get_icon_region(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon_region", column);
    }
SWIGINTERN void TreeItem_set_icon_max_width(TreeItem *self,int column,int width){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon_max_width", column, width);
    }
SWIGINTERN int TreeItem_get_icon_max_width(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon_max_width", column);
    }
SWIGINTERN void TreeItem_set_range(TreeItem *self,int column,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_range", column, value);
    }
SWIGINTERN float TreeItem_get_range(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_range", column);
    }
SWIGINTERN void TreeItem_set_range_config__SWIG_0(TreeItem *self,int column,float min,float max,float step,bool expr=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_range_config", column, min, max, step, expr);
    }
SWIGINTERN Dictionary TreeItem_get_range_config(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_range_config", column);
    }
SWIGINTERN void TreeItem_set_metadata(TreeItem *self,int column,Variant const &meta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_metadata", column, meta);
    }
SWIGINTERN void TreeItem_get_metadata(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_metadata", column);
    }
SWIGINTERN void TreeItem_set_custom_draw(TreeItem *self,int column,Object *object,String const &callback){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_draw", column, object, callback);
    }
SWIGINTERN void TreeItem_set_collapsed(TreeItem *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collapsed", enable);
    }
SWIGINTERN bool TreeItem_is_collapsed(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_collapsed");
    }
SWIGINTERN TreeItem *TreeItem_get_next(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_next").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *TreeItem_get_prev(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_prev").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *TreeItem_get_parent(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_parent").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *TreeItem_get_children(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_children").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *TreeItem_get_next_visible(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_next_visible").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *TreeItem_get_prev_visible(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_prev_visible").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *TreeItem_remove_child(TreeItem *self,Object *child){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("remove_child", child).operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN void TreeItem_set_selectable(TreeItem *self,int column,bool selectable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_selectable", column, selectable);
    }
SWIGINTERN bool TreeItem_is_selectable(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_selectable", column);
    }
SWIGINTERN bool TreeItem_is_selected(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_selected", column);
    }
SWIGINTERN void TreeItem_select(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select", column);
    }
SWIGINTERN void TreeItem_deselect(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("deselect", column);
    }
SWIGINTERN void TreeItem_set_editable(TreeItem *self,int column,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_editable", column, enabled);
    }
SWIGINTERN bool TreeItem_is_editable(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editable", column);
    }
SWIGINTERN void TreeItem_set_custom_color(TreeItem *self,int column,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_color", column, color);
    }
SWIGINTERN void TreeItem_clear_custom_color(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_custom_color", column);
    }
SWIGINTERN void TreeItem_set_custom_bg_color__SWIG_0(TreeItem *self,int column,Color const &color,bool just_outline=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_bg_color", column, color, just_outline);
    }
SWIGINTERN void TreeItem_clear_custom_bg_color(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_custom_bg_color", column);
    }
SWIGINTERN Color TreeItem_get_custom_bg_color(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_bg_color", column);
    }
SWIGINTERN void TreeItem_add_button__SWIG_0(TreeItem *self,int column,Ref< Texture > button,int button_idx=-1,bool disabled=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_button", column, button, button_idx, disabled);
    }
SWIGINTERN int TreeItem_get_button_count(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button_count", column);
    }
SWIGINTERN Ref< Texture > TreeItem_get_button(TreeItem *self,int column,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button", column, button_idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void TreeItem_erase_button(TreeItem *self,int column,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_button", column, button_idx);
    }
SWIGINTERN bool TreeItem_is_button_disabled(TreeItem *self,int column,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_button_disabled", column, button_idx);
    }
SWIGINTERN void TreeItem_set_tooltip(TreeItem *self,int column,String const &tooltip){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tooltip", column, tooltip);
    }
SWIGINTERN String TreeItem_get_tooltip(TreeItem *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tooltip", column);
    }
SWIGINTERN void TreeItem_move_to_top(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("move_to_top");
    }
SWIGINTERN void TreeItem_move_to_bottom(TreeItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("move_to_bottom");
    }
SWIGINTERN void UndoRedo_create_action__SWIG_0(UndoRedo *self,String const &name,bool mergeable=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_action", name, mergeable);
    }
SWIGINTERN void UndoRedo_commit_action(UndoRedo *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("commit_action");
    }
SWIGINTERN void UndoRedo_add_do_method__SWIG_0(UndoRedo *self,Object *object,String const &method,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(method);
Variant arg_2_ = Variant(arg0_);
Variant arg_3_ = Variant(arg1_);
Variant arg_4_ = Variant(arg2_);
Variant arg_5_ = Variant(arg3_);
Variant arg_6_ = Variant(arg4_);
Variant *args_[7] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_ };
self->call("add_do_method", (const Variant **) args_, 7, err);
    }
SWIGINTERN void UndoRedo_add_undo_method__SWIG_0(UndoRedo *self,Object *object,String const &method,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(method);
Variant arg_2_ = Variant(arg0_);
Variant arg_3_ = Variant(arg1_);
Variant arg_4_ = Variant(arg2_);
Variant arg_5_ = Variant(arg3_);
Variant arg_6_ = Variant(arg4_);
Variant *args_[7] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_ };
self->call("add_undo_method", (const Variant **) args_, 7, err);
    }
SWIGINTERN void UndoRedo_add_do_property(UndoRedo *self,Object *object,String const &property,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_do_property", object, property, value);
    }
SWIGINTERN void UndoRedo_add_undo_property(UndoRedo *self,Object *object,String const &property,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_undo_property", object, property, value);
    }
SWIGINTERN void UndoRedo_add_do_reference(UndoRedo *self,Object *object){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_do_reference", object);
    }
SWIGINTERN void UndoRedo_add_undo_reference(UndoRedo *self,Object *object){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_undo_reference", object);
    }
SWIGINTERN void UndoRedo_clear_history(UndoRedo *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_history");
    }
SWIGINTERN String UndoRedo_get_current_action_name(UndoRedo *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_action_name");
    }
SWIGINTERN int UndoRedo_get_version(UndoRedo *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_version");
    }
SWIGINTERN RID VisualServer_texture_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_create");
    }
SWIGINTERN RID VisualServer_texture_create_from_image__SWIG_0(VisualServer *self,Image const &arg0_,int arg1_=7){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_create_from_image", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_texture_set_flags(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("texture_set_flags", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_texture_get_flags(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_get_flags", arg0_);
    }
SWIGINTERN int VisualServer_texture_get_width(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_get_width", arg0_);
    }
SWIGINTERN int VisualServer_texture_get_height(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("texture_get_height", arg0_);
    }
SWIGINTERN void VisualServer_texture_set_shrink_all_x2_on_set_data(VisualServer *self,bool shrink){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("texture_set_shrink_all_x2_on_set_data", shrink);
    }
SWIGINTERN RID VisualServer_shader_create__SWIG_0(VisualServer *self,int mode=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("shader_create", mode);
    }
SWIGINTERN void VisualServer_shader_set_mode(VisualServer *self,RID const &shader,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("shader_set_mode", shader, mode);
    }
SWIGINTERN RID VisualServer_material_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("material_create");
    }
SWIGINTERN void VisualServer_material_set_shader(VisualServer *self,RID const &shader,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("material_set_shader", shader, arg1_);
    }
SWIGINTERN RID VisualServer_material_get_shader(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("material_get_shader", arg0_);
    }
SWIGINTERN void VisualServer_material_set_param(VisualServer *self,RID const &arg0_,String const &arg1_,Variant const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("material_set_param", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_material_get_param(VisualServer *self,RID const &arg0_,String const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("material_get_param", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_material_set_flag(VisualServer *self,RID const &arg0_,int arg1_,bool arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("material_set_flag", arg0_, arg1_, arg2_);
    }
SWIGINTERN bool VisualServer_material_get_flag(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("material_get_flag", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_material_set_blend_mode(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("material_set_blend_mode", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_material_get_blend_mode(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("material_get_blend_mode", arg0_);
    }
SWIGINTERN void VisualServer_material_set_line_width(VisualServer *self,RID const &arg0_,float arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("material_set_line_width", arg0_, arg1_);
    }
SWIGINTERN float VisualServer_material_get_line_width(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("material_get_line_width", arg0_);
    }
SWIGINTERN RID VisualServer_mesh_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_create");
    }
SWIGINTERN void VisualServer_mesh_add_surface__SWIG_0(VisualServer *self,RID const &arg0_,int arg1_,Array const &arg2_,Array const &arg3_,bool arg4_=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("mesh_add_surface", arg0_, arg1_, arg2_, arg3_, arg4_);
    }
SWIGINTERN void VisualServer_mesh_surface_set_material__SWIG_0(VisualServer *self,RID const &arg0_,int arg1_,RID const &arg2_,bool arg3_=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("mesh_surface_set_material", arg0_, arg1_, arg2_, arg3_);
    }
SWIGINTERN RID VisualServer_mesh_surface_get_material(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_surface_get_material", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_mesh_surface_get_array_len(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_surface_get_array_len", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_mesh_surface_get_array_index_len(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_surface_get_array_index_len", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_mesh_surface_get_format(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_surface_get_format", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_mesh_surface_get_primitive_type(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_surface_get_primitive_type", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_mesh_remove_surface(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("mesh_remove_surface", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_mesh_get_surface_count(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mesh_get_surface_count", arg0_);
    }
SWIGINTERN RID VisualServer_multimesh_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("multimesh_create");
    }
SWIGINTERN void VisualServer_multimesh_set_mesh(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("multimesh_set_mesh", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_multimesh_set_aabb(VisualServer *self,RID const &arg0_,AABB const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("multimesh_set_aabb", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_multimesh_instance_set_transform(VisualServer *self,RID const &arg0_,int arg1_,Transform const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("multimesh_instance_set_transform", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_multimesh_instance_set_color(VisualServer *self,RID const &arg0_,int arg1_,Color const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("multimesh_instance_set_color", arg0_, arg1_, arg2_);
    }
SWIGINTERN RID VisualServer_multimesh_get_mesh(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("multimesh_get_mesh", arg0_);
    }
SWIGINTERN AABB VisualServer_multimesh_get_aabb(VisualServer *self,RID const &arg0_,AABB const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("multimesh_get_aabb", arg0_, arg1_);
    }
SWIGINTERN Transform VisualServer_multimesh_instance_get_transform(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("multimesh_instance_get_transform", arg0_, arg1_);
    }
SWIGINTERN Color VisualServer_multimesh_instance_get_color(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("multimesh_instance_get_color", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_particles_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_create");
    }
SWIGINTERN void VisualServer_particles_set_amount(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_amount", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_particles_get_amount(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_amount", arg0_);
    }
SWIGINTERN void VisualServer_particles_set_emitting(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_emitting", arg0_, arg1_);
    }
SWIGINTERN bool VisualServer_particles_is_emitting(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_is_emitting", arg0_);
    }
SWIGINTERN void VisualServer_particles_set_visibility_aabb(VisualServer *self,RID const &arg0_,AABB const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_visibility_aabb", arg0_, arg1_);
    }
SWIGINTERN AABB VisualServer_particles_get_visibility_aabb(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_visibility_aabb", arg0_);
    }
SWIGINTERN void VisualServer_particles_set_variable(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_variable", arg0_, arg1_, arg2_);
    }
SWIGINTERN float VisualServer_particles_get_variable(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_variable", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_particles_set_randomness(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_randomness", arg0_, arg1_, arg2_);
    }
SWIGINTERN float VisualServer_particles_get_randomness(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_randomness", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_particles_set_color_phases(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_color_phases", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_particles_get_color_phases(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_color_phases", arg0_);
    }
SWIGINTERN void VisualServer_particles_set_color_phase_pos(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_color_phase_pos", arg0_, arg1_, arg2_);
    }
SWIGINTERN float VisualServer_particles_get_color_phase_pos(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_color_phase_pos", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_particles_set_color_phase_color(VisualServer *self,RID const &arg0_,int arg1_,Color const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_color_phase_color", arg0_, arg1_, arg2_);
    }
SWIGINTERN Color VisualServer_particles_get_color_phase_color(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_color_phase_color", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_particles_set_attractors(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_attractors", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_particles_get_attractors(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_attractors", arg0_);
    }
SWIGINTERN void VisualServer_particles_set_attractor_pos(VisualServer *self,RID const &arg0_,int arg1_,Vector3 const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_attractor_pos", arg0_, arg1_, arg2_);
    }
SWIGINTERN Vector3 VisualServer_particles_get_attractor_pos(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_attractor_pos", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_particles_set_attractor_strength(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_attractor_strength", arg0_, arg1_, arg2_);
    }
SWIGINTERN float VisualServer_particles_get_attractor_strength(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_get_attractor_strength", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_particles_set_material__SWIG_0(VisualServer *self,RID const &arg0_,RID const &arg1_,bool arg2_=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_material", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_particles_set_height_from_velocity(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("particles_set_height_from_velocity", arg0_, arg1_);
    }
SWIGINTERN bool VisualServer_particles_has_height_from_velocity(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("particles_has_height_from_velocity", arg0_);
    }
SWIGINTERN RID VisualServer_light_create(VisualServer *self,int arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_create", arg0_);
    }
SWIGINTERN int VisualServer_light_get_type(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_get_type", arg0_);
    }
SWIGINTERN void VisualServer_light_set_color(VisualServer *self,RID const &arg0_,int arg1_,Color const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("light_set_color", arg0_, arg1_, arg2_);
    }
SWIGINTERN Color VisualServer_light_get_color(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_get_color", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_light_set_shadow(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("light_set_shadow", arg0_, arg1_);
    }
SWIGINTERN bool VisualServer_light_has_shadow(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_has_shadow", arg0_);
    }
SWIGINTERN void VisualServer_light_set_volumetric(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("light_set_volumetric", arg0_, arg1_);
    }
SWIGINTERN bool VisualServer_light_is_volumetric(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_is_volumetric", arg0_);
    }
SWIGINTERN void VisualServer_light_set_projector(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("light_set_projector", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_light_get_projector(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_get_projector", arg0_);
    }
SWIGINTERN void VisualServer_light_set_var(VisualServer *self,RID const &arg0_,int arg1_,float arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("light_set_var", arg0_, arg1_, arg2_);
    }
SWIGINTERN float VisualServer_light_get_var(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("light_get_var", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_skeleton_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("skeleton_create");
    }
SWIGINTERN void VisualServer_skeleton_resize(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("skeleton_resize", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_skeleton_get_bone_count(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("skeleton_get_bone_count", arg0_);
    }
SWIGINTERN void VisualServer_skeleton_bone_set_transform(VisualServer *self,RID const &arg0_,int arg1_,Transform const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("skeleton_bone_set_transform", arg0_, arg1_, arg2_);
    }
SWIGINTERN Transform VisualServer_skeleton_bone_get_transform(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("skeleton_bone_get_transform", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_room_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("room_create");
    }
SWIGINTERN void VisualServer_room_set_bounds(VisualServer *self,RID const &arg0_,Dictionary const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("room_set_bounds", arg0_, arg1_);
    }
SWIGINTERN Dictionary VisualServer_room_get_bounds(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("room_get_bounds", arg0_);
    }
SWIGINTERN RID VisualServer_portal_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("portal_create");
    }
SWIGINTERN void VisualServer_portal_set_shape(VisualServer *self,RID const &arg0_,Vector2Array const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("portal_set_shape", arg0_, arg1_);
    }
SWIGINTERN Vector2Array VisualServer_portal_get_shape(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("portal_get_shape", arg0_);
    }
SWIGINTERN void VisualServer_portal_set_enabled(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("portal_set_enabled", arg0_, arg1_);
    }
SWIGINTERN bool VisualServer_portal_is_enabled(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("portal_is_enabled", arg0_);
    }
SWIGINTERN void VisualServer_portal_set_disable_distance(VisualServer *self,RID const &arg0_,float arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("portal_set_disable_distance", arg0_, arg1_);
    }
SWIGINTERN float VisualServer_portal_get_disable_distance(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("portal_get_disable_distance", arg0_);
    }
SWIGINTERN void VisualServer_portal_set_disabled_color(VisualServer *self,RID const &arg0_,Color const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("portal_set_disabled_color", arg0_, arg1_);
    }
SWIGINTERN Color VisualServer_portal_get_disabled_color(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("portal_get_disabled_color", arg0_);
    }
SWIGINTERN RID VisualServer_camera_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("camera_create");
    }
SWIGINTERN void VisualServer_camera_set_perspective(VisualServer *self,RID const &arg0_,float arg1_,float arg2_,float arg3_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("camera_set_perspective", arg0_, arg1_, arg2_, arg3_);
    }
SWIGINTERN void VisualServer_camera_set_orthogonal(VisualServer *self,RID const &arg0_,float arg1_,float arg2_,float arg3_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("camera_set_orthogonal", arg0_, arg1_, arg2_, arg3_);
    }
SWIGINTERN void VisualServer_camera_set_transform(VisualServer *self,RID const &arg0_,Transform const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("camera_set_transform", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_viewport_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("viewport_create");
    }
SWIGINTERN void VisualServer_viewport_set_rect(VisualServer *self,RID const &arg0_,Rect2 const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("viewport_set_rect", arg0_, arg1_);
    }
SWIGINTERN Rect2 VisualServer_viewport_get_rect(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("viewport_get_rect", arg0_);
    }
SWIGINTERN void VisualServer_viewport_attach_camera__SWIG_0(VisualServer *self,RID const &arg0_,RID const &arg1_=RID()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("viewport_attach_camera", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_viewport_get_attached_camera(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("viewport_get_attached_camera", arg0_);
    }
SWIGINTERN RID VisualServer_viewport_get_scenario(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("viewport_get_scenario", arg0_);
    }
SWIGINTERN void VisualServer_viewport_attach_canvas(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("viewport_attach_canvas", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_viewport_remove_canvas(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("viewport_remove_canvas", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_viewport_set_global_canvas_transform(VisualServer *self,RID const &arg0_,Matrix32 const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("viewport_set_global_canvas_transform", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_scenario_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("scenario_create");
    }
SWIGINTERN void VisualServer_scenario_set_debug(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scenario_set_debug", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_instance_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_create");
    }
SWIGINTERN RID VisualServer_instance_get_base(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_get_base", arg0_);
    }
SWIGINTERN RID VisualServer_instance_get_base_aabb(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_get_base_aabb", arg0_);
    }
SWIGINTERN void VisualServer_instance_set_transform(VisualServer *self,RID const &arg0_,Transform const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("instance_set_transform", arg0_, arg1_);
    }
SWIGINTERN Transform VisualServer_instance_get_transform(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_get_transform", arg0_);
    }
SWIGINTERN void VisualServer_instance_attach_object_instance_ID(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("instance_attach_object_instance_ID", arg0_, arg1_);
    }
SWIGINTERN int VisualServer_instance_get_object_instance_ID(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_get_object_instance_ID", arg0_);
    }
SWIGINTERN void VisualServer_instance_attach_skeleton(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("instance_attach_skeleton", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_instance_get_skeleton(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_get_skeleton", arg0_);
    }
SWIGINTERN void VisualServer_instance_set_room(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("instance_set_room", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_instance_get_room(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_get_room", arg0_);
    }
SWIGINTERN void VisualServer_instance_set_exterior(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("instance_set_exterior", arg0_, arg1_);
    }
SWIGINTERN bool VisualServer_instance_is_exterior(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_is_exterior", arg0_);
    }
SWIGINTERN Array VisualServer_instances_cull_aabb(VisualServer *self,AABB const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instances_cull_aabb", arg0_, arg1_);
    }
SWIGINTERN Array VisualServer_instances_cull_ray(VisualServer *self,Vector3 const &arg0_,Vector3 const &arg1_,RID const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instances_cull_ray", arg0_, arg1_, arg2_);
    }
SWIGINTERN Array VisualServer_instances_cull_convex(VisualServer *self,Array const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instances_cull_convex", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_instance_geometry_override_material_param(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_geometry_override_material_param", arg0_);
    }
SWIGINTERN RID VisualServer_instance_geometry_get_material_param(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance_geometry_get_material_param", arg0_);
    }
SWIGINTERN RID VisualServer_get_test_cube(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_test_cube");
    }
SWIGINTERN RID VisualServer_canvas_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("canvas_create");
    }
SWIGINTERN RID VisualServer_canvas_item_create(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("canvas_item_create");
    }
SWIGINTERN void VisualServer_canvas_item_set_parent(VisualServer *self,RID const &arg0_,RID const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_parent", arg0_, arg1_);
    }
SWIGINTERN RID VisualServer_canvas_item_get_parent(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("canvas_item_get_parent", arg0_);
    }
SWIGINTERN void VisualServer_canvas_item_set_transform(VisualServer *self,RID const &arg0_,Matrix32 const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_transform", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_canvas_item_set_custom_rect(VisualServer *self,RID const &arg0_,bool arg1_,Rect2 const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_custom_rect", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_canvas_item_set_clip(VisualServer *self,RID const &arg0_,bool arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_clip", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_canvas_item_set_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_opacity", arg0_, arg1_);
    }
SWIGINTERN float VisualServer_canvas_item_get_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("canvas_item_get_opacity", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_canvas_item_set_self_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_self_opacity", arg0_, arg1_);
    }
SWIGINTERN float VisualServer_canvas_item_get_self_opacity(VisualServer *self,RID const &arg0_,float arg1_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("canvas_item_get_self_opacity", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_canvas_item_set_z(VisualServer *self,RID const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_set_z", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_canvas_item_add_line__SWIG_0(VisualServer *self,RID const &arg0_,Vector2 const &arg1_,Vector2 const &arg2_,Color const &arg3_,float arg4_=1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_add_line", arg0_, arg1_, arg2_, arg3_, arg4_);
    }
SWIGINTERN void VisualServer_canvas_item_add_rect(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,Color const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_add_rect", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_canvas_item_add_texture_rect__SWIG_0(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,RID const &arg2_,bool arg3_,Color const &arg4_=Color(1,1,1,1),bool arg5_=false){
  Variant::CallError err;
Variant arg_0_ = Variant(arg0_);
Variant arg_1_ = Variant(arg1_);
Variant arg_2_ = Variant(arg2_);
Variant arg_3_ = Variant(arg3_);
Variant arg_4_ = Variant(arg4_);
Variant arg_5_ = Variant(arg5_);
Variant *args_[6] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_ };
self->call("canvas_item_add_texture_rect", (const Variant **) args_, 6, err);
    }
SWIGINTERN void VisualServer_canvas_item_add_texture_rect_region__SWIG_0(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,RID const &arg2_,Rect2 const &arg3_,Color const &arg4_=Color(1,1,1,1),bool arg5_=false){
  Variant::CallError err;
Variant arg_0_ = Variant(arg0_);
Variant arg_1_ = Variant(arg1_);
Variant arg_2_ = Variant(arg2_);
Variant arg_3_ = Variant(arg3_);
Variant arg_4_ = Variant(arg4_);
Variant arg_5_ = Variant(arg5_);
Variant *args_[6] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_ };
self->call("canvas_item_add_texture_rect_region", (const Variant **) args_, 6, err);
    }
SWIGINTERN void VisualServer_canvas_item_add_style_box__SWIG_0(VisualServer *self,RID const &arg0_,Rect2 const &arg1_,RID const &arg2_,RealArray const &arg3_,Color const &arg4_=Color(1,1,1,1)){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_add_style_box", arg0_, arg1_, arg2_, arg3_, arg4_);
    }
SWIGINTERN void VisualServer_canvas_item_add_circle(VisualServer *self,RID const &arg0_,Vector2 const &arg1_,float arg2_,Color const &arg3_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_add_circle", arg0_, arg1_, arg2_, arg3_);
    }
SWIGINTERN void VisualServer_viewport_set_canvas_transform(VisualServer *self,RID const &arg0_,RID const &arg1_,Matrix32 const &arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("viewport_set_canvas_transform", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_canvas_item_clear(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_clear", arg0_);
    }
SWIGINTERN void VisualServer_canvas_item_raise(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("canvas_item_raise", arg0_);
    }
SWIGINTERN void VisualServer_cursor_set_rotation(VisualServer *self,float arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_rotation", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_cursor_set_texture(VisualServer *self,RID const &arg0_,Vector2 const &arg1_,int arg2_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_texture", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_cursor_set_visible(VisualServer *self,bool arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_visible", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_cursor_set_pos(VisualServer *self,Vector2 const &arg0_,int arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_pos", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_black_bars_set_margins(VisualServer *self,int left,int top,int right,int bottom){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("black_bars_set_margins", left, top, right, bottom);
    }
SWIGINTERN void VisualServer_black_bars_set_images(VisualServer *self,RID const &left,RID const &top,RID const &right,RID const &bottom){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("black_bars_set_images", left, top, right, bottom);
    }
SWIGINTERN RID VisualServer_make_sphere_mesh(VisualServer *self,int arg0_,int arg1_,float arg2_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("make_sphere_mesh", arg0_, arg1_, arg2_);
    }
SWIGINTERN void VisualServer_mesh_add_surface_from_planes(VisualServer *self,RID const &arg0_,Array const &arg1_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("mesh_add_surface_from_planes", arg0_, arg1_);
    }
SWIGINTERN void VisualServer_draw(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw");
    }
SWIGINTERN void VisualServer_sync(VisualServer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sync");
    }
SWIGINTERN void VisualServer_free(VisualServer *self,RID const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("free", arg0_);
    }
SWIGINTERN void VisualServer_set_default_clear_color(VisualServer *self,Color const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_clear_color", arg0_);
    }
SWIGINTERN int VisualServer_get_render_info(VisualServer *self,int arg0_){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_info", arg0_);
    }
SWIGINTERN VisualServer *VisualServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("VisualServer")->cast_to<VisualServer>(); }
SWIGINTERN Object *WeakRef_get_ref(WeakRef *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ref").operator Object *();
    }
SWIGINTERN RID World_get_space(World *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space");
    }
SWIGINTERN RID World_get_scenario(World *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scenario");
    }
SWIGINTERN RID World_get_sound_space(World *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sound_space");
    }
SWIGINTERN void World_set_environment(World *self,Ref< Environment > env){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_environment", env);
    }
SWIGINTERN Ref< Environment > World_get_environment(World *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_environment").operator Object *()->cast_to<Environment>();
    }
SWIGINTERN PhysicsDirectSpaceState *World_get_direct_space_state(World *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_direct_space_state").operator Object *()->cast_to<PhysicsDirectSpaceState>();
    }
SWIGINTERN RID World2D_get_canvas(World2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_canvas");
    }
SWIGINTERN RID World2D_get_space(World2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space");
    }
SWIGINTERN RID World2D_get_sound_space(World2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sound_space");
    }
SWIGINTERN Physics2DDirectSpaceState *World2D_get_direct_space_state(World2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_direct_space_state").operator Object *()->cast_to<Physics2DDirectSpaceState>();
    }
SWIGINTERN int XMLParser_read(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("read");
    }
SWIGINTERN int XMLParser_get_node_type(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_type");
    }
SWIGINTERN String XMLParser_get_node_name(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_name");
    }
SWIGINTERN String XMLParser_get_node_data(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_data");
    }
SWIGINTERN int XMLParser_get_node_offset(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_offset");
    }
SWIGINTERN int XMLParser_get_attribute_count(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_attribute_count");
    }
SWIGINTERN String XMLParser_get_attribute_name(XMLParser *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_attribute_name", idx);
    }
SWIGINTERN String XMLParser_get_attribute_value(XMLParser *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_attribute_value", idx);
    }
SWIGINTERN bool XMLParser_has_attribute(XMLParser *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_attribute", name);
    }
SWIGINTERN String XMLParser_get_named_attribute_value(XMLParser *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_named_attribute_value", name);
    }
SWIGINTERN String XMLParser_get_named_attribute_value_safe(XMLParser *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_named_attribute_value_safe", name);
    }
SWIGINTERN bool XMLParser_is_empty(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_empty");
    }
SWIGINTERN int XMLParser_get_current_line(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_line");
    }
SWIGINTERN void XMLParser_skip_section(XMLParser *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("skip_section");
    }
SWIGINTERN int XMLParser_seek(XMLParser *self,int pos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("seek", pos);
    }
SWIGINTERN int XMLParser_open(XMLParser *self,String const &file){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("open", file);
    }
SWIGINTERN int XMLParser_open_buffer(XMLParser *self,RawArray const &buffer){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("open_buffer", buffer);
    }
SWIGINTERN int _Directory_open(_Directory *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("open", path);
    }
SWIGINTERN bool _Directory_list_dir_begin(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("list_dir_begin");
    }
SWIGINTERN String _Directory_get_next(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_next");
    }
SWIGINTERN bool _Directory_current_is_dir(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("current_is_dir");
    }
SWIGINTERN void _Directory_list_dir_end(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("list_dir_end");
    }
SWIGINTERN int _Directory_get_drive_count(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_drive_count");
    }
SWIGINTERN String _Directory_get_drive(_Directory *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_drive", idx);
    }
SWIGINTERN int _Directory_change_dir(_Directory *self,String const &todir){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("change_dir", todir);
    }
SWIGINTERN String _Directory_get_current_dir(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_dir");
    }
SWIGINTERN int _Directory_make_dir(_Directory *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("make_dir", path);
    }
SWIGINTERN int _Directory_make_dir_recursive(_Directory *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("make_dir_recursive", path);
    }
SWIGINTERN bool _Directory_file_exists(_Directory *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("file_exists", path);
    }
SWIGINTERN bool _Directory_dir_exists(_Directory *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("dir_exists", path);
    }
SWIGINTERN int _Directory_get_space_left(_Directory *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space_left");
    }
SWIGINTERN int _Directory_copy(_Directory *self,String const &from,String const &to){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("copy", from, to);
    }
SWIGINTERN int _Directory_rename(_Directory *self,String const &from,String const &to){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("rename", from, to);
    }
SWIGINTERN int _Directory_remove(_Directory *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("remove", path);
    }
SWIGINTERN int _File_open_encrypted(_File *self,String const &path,int mode_flags,RawArray const &key){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("open_encrypted", path, mode_flags, key);
    }
SWIGINTERN int _File_open_encrypted_with_pass(_File *self,String const &path,int mode_flags,String const &pass){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("open_encrypted_with_pass", path, mode_flags, pass);
    }
SWIGINTERN int _File_open(_File *self,String const &path,int flags){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("open", path, flags);
    }
SWIGINTERN void _File_close(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("close");
    }
SWIGINTERN bool _File_is_open(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_open");
    }
SWIGINTERN void _File_seek(_File *self,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek", pos);
    }
SWIGINTERN void _File_seek_end__SWIG_0(_File *self,int pos=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek_end", pos);
    }
SWIGINTERN int _File_get_pos(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN int _File_get_len(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_len");
    }
SWIGINTERN bool _File_eof_reached(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("eof_reached");
    }
SWIGINTERN int _File_get_8(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_8");
    }
SWIGINTERN int _File_get_16(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_16");
    }
SWIGINTERN int _File_get_32(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_32");
    }
SWIGINTERN int _File_get_64(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_64");
    }
SWIGINTERN float _File_get_float(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_float");
    }
SWIGINTERN float _File_get_double(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_double");
    }
SWIGINTERN float _File_get_real(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_real");
    }
SWIGINTERN RawArray _File_get_buffer(_File *self,int len){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_buffer", len);
    }
SWIGINTERN String _File_get_line(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line");
    }
SWIGINTERN String _File_get_as_text(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_as_text");
    }
SWIGINTERN String _File_get_md5(_File *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_md5", path);
    }
SWIGINTERN bool _File_get_endian_swap(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_endian_swap");
    }
SWIGINTERN void _File_set_endian_swap(_File *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_endian_swap", enable);
    }
SWIGINTERN int _File_get_error(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_error");
    }
SWIGINTERN void _File_get_var(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_var");
    }
SWIGINTERN StringArray _File_get_csv_line__SWIG_0(_File *self,String const &delim=","){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_csv_line", delim);
    }
SWIGINTERN void _File_store_8(_File *self,int value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_8", value);
    }
SWIGINTERN void _File_store_16(_File *self,int value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_16", value);
    }
SWIGINTERN void _File_store_32(_File *self,int value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_32", value);
    }
SWIGINTERN void _File_store_64(_File *self,int value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_64", value);
    }
SWIGINTERN void _File_store_float(_File *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_float", value);
    }
SWIGINTERN void _File_store_double(_File *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_double", value);
    }
SWIGINTERN void _File_store_real(_File *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_real", value);
    }
SWIGINTERN void _File_store_buffer(_File *self,RawArray const &buffer){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_buffer", buffer);
    }
SWIGINTERN void _File_store_line(_File *self,String const &line){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_line", line);
    }
SWIGINTERN void _File_store_string(_File *self,String const &string){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_string", string);
    }
SWIGINTERN void _File_store_var(_File *self,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_var", value);
    }
SWIGINTERN void _File_store_pascal_string(_File *self,String const &string){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("store_pascal_string", string);
    }
SWIGINTERN String _File_get_pascal_string(_File *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pascal_string");
    }
SWIGINTERN bool _File_file_exists(_File *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("file_exists", path);
    }
SWIGINTERN Array _Geometry_build_box_planes(_Geometry *self,Vector3 const &extents){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("build_box_planes", extents);
    }
SWIGINTERN Array _Geometry_build_cylinder_planes__SWIG_0(_Geometry *self,float radius,float height,int sides,int axis=2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("build_cylinder_planes", radius, height, sides, axis);
    }
SWIGINTERN Array _Geometry_build_capsule_planes__SWIG_0(_Geometry *self,float radius,float height,int sides,int lats,int axis=2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("build_capsule_planes", radius, height, sides, lats, axis);
    }
SWIGINTERN float _Geometry_segment_intersects_circle(_Geometry *self,Vector2 const &segment_from,Vector2 const &segment_to,Vector2 const &circle_pos,float circle_radius){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("segment_intersects_circle", segment_from, segment_to, circle_pos, circle_radius);
    }
SWIGINTERN void _Geometry_segment_intersects_segment_2d(_Geometry *self,Vector2 const &from_a,Vector2 const &to_a,Vector2 const &from_b,Vector2 const &to_b){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("segment_intersects_segment_2d", from_a, to_a, from_b, to_b);
    }
SWIGINTERN Vector2Array _Geometry_get_closest_points_between_segments_2d(_Geometry *self,Vector2 const &p1,Vector2 const &q1,Vector2 const &p2,Vector2 const &q2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_points_between_segments_2d", p1, q1, p2, q2);
    }
SWIGINTERN Vector3Array _Geometry_get_closest_points_between_segments(_Geometry *self,Vector3 const &p1,Vector3 const &p2,Vector3 const &q1,Vector3 const &q2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_points_between_segments", p1, p2, q1, q2);
    }
SWIGINTERN Vector3 _Geometry_get_closest_point_to_segment(_Geometry *self,Vector3 const &point,Vector3 const &s1,Vector3 const &s2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point_to_segment", point, s1, s2);
    }
SWIGINTERN int _Geometry_get_uv84_normal_bit(_Geometry *self,Vector3 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_uv84_normal_bit", normal);
    }
SWIGINTERN void _Geometry_ray_intersects_triangle(_Geometry *self,Vector3 const &from,Vector3 const &dir,Vector3 const &a,Vector3 const &b,Vector3 const &c){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("ray_intersects_triangle", from, dir, a, b, c);
    }
SWIGINTERN void _Geometry_segment_intersects_triangle(_Geometry *self,Vector3 const &from,Vector3 const &to,Vector3 const &a,Vector3 const &b,Vector3 const &c){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("segment_intersects_triangle", from, to, a, b, c);
    }
SWIGINTERN Vector3Array _Geometry_segment_intersects_sphere(_Geometry *self,Vector3 const &from,Vector3 const &to,Vector3 const &spos,float sradius){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("segment_intersects_sphere", from, to, spos, sradius);
    }
SWIGINTERN Vector3Array _Geometry_segment_intersects_cylinder(_Geometry *self,Vector3 const &from,Vector3 const &to,float height,float radius){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("segment_intersects_cylinder", from, to, height, radius);
    }
SWIGINTERN Vector3Array _Geometry_segment_intersects_convex(_Geometry *self,Vector3 const &from,Vector3 const &to,Array const &planes){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("segment_intersects_convex", from, to, planes);
    }
SWIGINTERN bool _Geometry_point_is_inside_triangle(_Geometry *self,Vector2 const &point,Vector2 const &a,Vector2 const &b,Vector2 const &c){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("point_is_inside_triangle", point, a, b, c);
    }
SWIGINTERN IntArray _Geometry_triangulate_polygon(_Geometry *self,Vector2Array const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("triangulate_polygon", polygon);
    }
SWIGINTERN Dictionary _Geometry_make_atlas(_Geometry *self,Vector2Array const &sizes){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("make_atlas", sizes);
    }
SWIGINTERN String _Marshalls_variant_to_base64(_Marshalls *self,Variant const &variant){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("variant_to_base64", variant);
    }
SWIGINTERN Variant _Marshalls_base64_to_variant(_Marshalls *self,String const &base64_str){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("base64_to_variant", base64_str);
    }
SWIGINTERN String _Marshalls_raw_to_base64(_Marshalls *self,RawArray const &array){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("raw_to_base64", array);
    }
SWIGINTERN RawArray _Marshalls_base64_to_raw(_Marshalls *self,String const &base64_str){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("base64_to_raw", base64_str);
    }
SWIGINTERN String _Marshalls_utf8_to_base64(_Marshalls *self,String const &utf8_str){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("utf8_to_base64", utf8_str);
    }
SWIGINTERN String _Marshalls_base64_to_utf8(_Marshalls *self,String const &base64_str){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("base64_to_utf8", base64_str);
    }
SWIGINTERN void _Mutex_lock(_Mutex *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("lock");
    }
SWIGINTERN int _Mutex_try_lock(_Mutex *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("try_lock");
    }
SWIGINTERN void _Mutex_unlock(_Mutex *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("unlock");
    }
SWIGINTERN void _OS_set_clipboard(_OS *self,String const &clipboard){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_clipboard", clipboard);
    }
SWIGINTERN String _OS_get_clipboard(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_clipboard");
    }
SWIGINTERN void _OS_set_video_mode__SWIG_0(_OS *self,Vector2 const &size,bool fullscreen,bool resizable,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_video_mode", size, fullscreen, resizable, screen);
    }
SWIGINTERN Vector2 _OS_get_video_mode_size__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_video_mode_size", screen);
    }
SWIGINTERN bool _OS_is_video_mode_fullscreen__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_video_mode_fullscreen", screen);
    }
SWIGINTERN bool _OS_is_video_mode_resizable__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_video_mode_resizable", screen);
    }
SWIGINTERN Array _OS_get_fullscreen_mode_list__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fullscreen_mode_list", screen);
    }
SWIGINTERN int _OS_get_screen_count(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_screen_count");
    }
SWIGINTERN int _OS_get_current_screen(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_screen");
    }
SWIGINTERN void _OS_set_current_screen(_OS *self,int screen){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_screen", screen);
    }
SWIGINTERN Vector2 _OS_get_screen_position__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_screen_position", screen);
    }
SWIGINTERN Vector2 _OS_get_screen_size__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_screen_size", screen);
    }
SWIGINTERN int _OS_get_screen_dpi__SWIG_0(_OS *self,int screen=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_screen_dpi", screen);
    }
SWIGINTERN Vector2 _OS_get_window_position(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_window_position");
    }
SWIGINTERN void _OS_set_window_position(_OS *self,Vector2 const &position){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_position", position);
    }
SWIGINTERN Vector2 _OS_get_window_size(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_window_size");
    }
SWIGINTERN void _OS_set_window_size(_OS *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_size", size);
    }
SWIGINTERN void _OS_set_window_fullscreen(_OS *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_fullscreen", enabled);
    }
SWIGINTERN bool _OS_is_window_fullscreen(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_window_fullscreen");
    }
SWIGINTERN void _OS_set_window_resizable(_OS *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_resizable", enabled);
    }
SWIGINTERN bool _OS_is_window_resizable(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_window_resizable");
    }
SWIGINTERN void _OS_set_window_minimized(_OS *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_minimized", enabled);
    }
SWIGINTERN bool _OS_is_window_minimized(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_window_minimized");
    }
SWIGINTERN void _OS_set_window_maximized(_OS *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_maximized", enabled);
    }
SWIGINTERN bool _OS_is_window_maximized(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_window_maximized");
    }
SWIGINTERN void _OS_set_borderless_window(_OS *self,bool borderless){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_borderless_window", borderless);
    }
SWIGINTERN bool _OS_get_borderless_window(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_borderless_window");
    }
SWIGINTERN void _OS_set_screen_orientation(_OS *self,int orientation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_screen_orientation", orientation);
    }
SWIGINTERN int _OS_get_screen_orientation(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_screen_orientation");
    }
SWIGINTERN void _OS_set_keep_screen_on(_OS *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_keep_screen_on", enabled);
    }
SWIGINTERN bool _OS_is_keep_screen_on(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_keep_screen_on");
    }
SWIGINTERN void _OS_set_iterations_per_second(_OS *self,int iterations_per_second){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_iterations_per_second", iterations_per_second);
    }
SWIGINTERN int _OS_get_iterations_per_second(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_iterations_per_second");
    }
SWIGINTERN void _OS_set_target_fps(_OS *self,int target_fps){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_target_fps", target_fps);
    }
SWIGINTERN float _OS_get_target_fps(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_target_fps");
    }
SWIGINTERN void _OS_set_time_scale(_OS *self,float time_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_time_scale", time_scale);
    }
SWIGINTERN float _OS_get_time_scale(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_time_scale");
    }
SWIGINTERN bool _OS_has_touchscreen_ui_hint(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_touchscreen_ui_hint");
    }
SWIGINTERN void _OS_set_window_title(_OS *self,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_window_title", title);
    }
SWIGINTERN void _OS_set_low_processor_usage_mode(_OS *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_low_processor_usage_mode", enable);
    }
SWIGINTERN bool _OS_is_in_low_processor_usage_mode(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_in_low_processor_usage_mode");
    }
SWIGINTERN int _OS_get_processor_count(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_processor_count");
    }
SWIGINTERN String _OS_get_executable_path(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_executable_path");
    }
SWIGINTERN int _OS_execute__SWIG_0(_OS *self,String const &path,StringArray const &arguments_,bool blocking,Array const &output=Array()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("execute", path, arguments_, blocking, output);
    }
SWIGINTERN int _OS_kill(_OS *self,int pid){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("kill", pid);
    }
SWIGINTERN int _OS_shell_open(_OS *self,String const &uri){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("shell_open", uri);
    }
SWIGINTERN int _OS_get_process_ID(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_process_ID");
    }
SWIGINTERN String _OS_get_environment(_OS *self,String const &environment){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_environment", environment);
    }
SWIGINTERN bool _OS_has_environment(_OS *self,String const &environment){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_environment", environment);
    }
SWIGINTERN String _OS_get_name(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_name");
    }
SWIGINTERN StringArray _OS_get_cmdline_args(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cmdline_args");
    }
SWIGINTERN Object *_OS_get_main_loop(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_main_loop").operator Object *();
    }
SWIGINTERN Dictionary _OS_get_datetime__SWIG_0(_OS *self,bool utc=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_datetime", utc);
    }
SWIGINTERN Dictionary _OS_get_date__SWIG_0(_OS *self,bool utc=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_date", utc);
    }
SWIGINTERN Dictionary _OS_get_time__SWIG_0(_OS *self,bool utc=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_time", utc);
    }
SWIGINTERN Dictionary _OS_get_time_zone_info(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_time_zone_info");
    }
SWIGINTERN int _OS_get_unix_time(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unix_time");
    }
SWIGINTERN Dictionary _OS_get_datetime_from_unix_time(_OS *self,int unix_time_val){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_datetime_from_unix_time", unix_time_val);
    }
SWIGINTERN int _OS_get_unix_time_from_datetime(_OS *self,Dictionary const &datetime){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unix_time_from_datetime", datetime);
    }
SWIGINTERN int _OS_get_system_time_secs(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_system_time_secs");
    }
SWIGINTERN void _OS_set_icon(_OS *self,Image const &icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon", icon);
    }
SWIGINTERN void _OS_delay_usec(_OS *self,int usec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("delay_usec", usec);
    }
SWIGINTERN void _OS_delay_msec(_OS *self,int msec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("delay_msec", msec);
    }
SWIGINTERN int _OS_get_ticks_msec(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ticks_msec");
    }
SWIGINTERN int _OS_get_splash_tick_msec(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_splash_tick_msec");
    }
SWIGINTERN String _OS_get_locale(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_locale");
    }
SWIGINTERN String _OS_get_model_name(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_model_name");
    }
SWIGINTERN String _OS_get_custom_level(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_level");
    }
SWIGINTERN bool _OS_can_draw(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_draw");
    }
SWIGINTERN int _OS_get_frames_drawn(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frames_drawn");
    }
SWIGINTERN bool _OS_is_stdout_verbose(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_stdout_verbose");
    }
SWIGINTERN bool _OS_can_use_threads(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_use_threads");
    }
SWIGINTERN bool _OS_is_debug_build(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_debug_build");
    }
SWIGINTERN void _OS_dump_memory_to_file(_OS *self,String const &file){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("dump_memory_to_file", file);
    }
SWIGINTERN void _OS_dump_resources_to_file(_OS *self,String const &file){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("dump_resources_to_file", file);
    }
SWIGINTERN void _OS_print_resources_in_use__SWIG_0(_OS *self,bool short_=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("print_resources_in_use", short_);
    }
SWIGINTERN void _OS_print_all_resources__SWIG_0(_OS *self,String const &tofile=""){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("print_all_resources", tofile);
    }
SWIGINTERN int _OS_get_static_memory_usage(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_static_memory_usage");
    }
SWIGINTERN int _OS_get_static_memory_peak_usage(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_static_memory_peak_usage");
    }
SWIGINTERN int _OS_get_dynamic_memory_usage(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_dynamic_memory_usage");
    }
SWIGINTERN String _OS_get_data_dir(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_data_dir");
    }
SWIGINTERN String _OS_get_system_dir(_OS *self,int dir){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_system_dir", dir);
    }
SWIGINTERN String _OS_get_unique_ID(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unique_ID");
    }
SWIGINTERN bool _OS_is_ok_left_and_cancel_right(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_ok_left_and_cancel_right");
    }
SWIGINTERN float _OS_get_frames_per_second(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frames_per_second");
    }
SWIGINTERN void _OS_print_all_textures_by_size(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("print_all_textures_by_size");
    }
SWIGINTERN void _OS_print_resources_by_type(_OS *self,StringArray const &types){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("print_resources_by_type", types);
    }
SWIGINTERN int _OS_native_video_play(_OS *self,String const &path,float volume,String const &audio_track,String const &subtitle_track){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("native_video_play", path, volume, audio_track, subtitle_track);
    }
SWIGINTERN bool _OS_native_video_is_playing(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("native_video_is_playing");
    }
SWIGINTERN void _OS_native_video_stop(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("native_video_stop");
    }
SWIGINTERN void _OS_native_video_pause(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("native_video_pause");
    }
SWIGINTERN void _OS_native_video_unpause(_OS *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("native_video_unpause");
    }
SWIGINTERN String _OS_get_scancode_string(_OS *self,int code){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scancode_string", code);
    }
SWIGINTERN bool _OS_is_scancode_unicode(_OS *self,int code){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_scancode_unicode", code);
    }
SWIGINTERN int _OS_find_scancode_from_string(_OS *self,String const &string){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_scancode_from_string", string);
    }
SWIGINTERN void _OS_set_use_file_access_save_and_swap(_OS *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_file_access_save_and_swap", enabled);
    }
SWIGINTERN void _OS_alert__SWIG_0(_OS *self,String const &text,String const &title="Alert!"){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("alert", text, title);
    }
SWIGINTERN int _OS_set_thread_name(_OS *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("set_thread_name", name);
    }
SWIGINTERN Ref< ResourceInteractiveLoader > _ResourceLoader_load_interactive__SWIG_0(_ResourceLoader *self,String const &path,String const &type_hint=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("load_interactive", path, type_hint).operator Object *()->cast_to<ResourceInteractiveLoader>();
    }
SWIGINTERN Ref< Resource > _ResourceLoader_load__SWIG_0(_ResourceLoader *self,String const &path,String const &type_hint="",bool p_no_cache=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("load", path, type_hint, p_no_cache).operator Object *()->cast_to<Resource>();
    }
SWIGINTERN Ref< ResourceImportMetadata > _ResourceLoader_load_import_metadata(_ResourceLoader *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("load_import_metadata", path).operator Object *()->cast_to<ResourceImportMetadata>();
    }
SWIGINTERN StringArray _ResourceLoader_get_recognized_extensions_for_type(_ResourceLoader *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_recognized_extensions_for_type", type);
    }
SWIGINTERN void _ResourceLoader_set_abort_on_missing_resources(_ResourceLoader *self,bool abort){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_abort_on_missing_resources", abort);
    }
SWIGINTERN StringArray _ResourceLoader_get_dependencies(_ResourceLoader *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_dependencies", path);
    }
SWIGINTERN bool _ResourceLoader_has(_ResourceLoader *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has", path);
    }
SWIGINTERN int _ResourceSaver_save__SWIG_0(_ResourceSaver *self,String const &path,Ref< Resource > resource,int flags=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("save", path, resource, flags);
    }
SWIGINTERN StringArray _ResourceSaver_get_recognized_extensions(_ResourceSaver *self,Object *type){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_recognized_extensions", type);
    }
SWIGINTERN int _Semaphore_wait(_Semaphore *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("wait");
    }
SWIGINTERN int _Semaphore_post(_Semaphore *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("post");
    }
SWIGINTERN int _Thread_start__SWIG_0(_Thread *self,Object *instance,String const &method,Variant const &userdata=Variant(),int priority=1){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("start", instance, method, userdata, priority);
    }
SWIGINTERN String _Thread_get_id(_Thread *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_id");
    }
SWIGINTERN bool _Thread_is_active(_Thread *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_active");
    }
SWIGINTERN Variant _Thread_wait_to_finish(_Thread *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("wait_to_finish");
    }
SWIGINTERN int Animation_add_track__SWIG_0(Animation *self,int type,int at_pos=-1){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("add_track", type, at_pos);
    }
SWIGINTERN void Animation_remove_track(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_track", idx);
    }
SWIGINTERN int Animation_get_track_count(Animation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_track_count");
    }
SWIGINTERN int Animation_track_get_type(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_get_type", idx);
    }
SWIGINTERN NodePath Animation_track_get_path(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_get_path", idx);
    }
SWIGINTERN void Animation_track_set_path(Animation *self,int idx,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_set_path", idx, path);
    }
SWIGINTERN int Animation_find_track(Animation *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_track", path);
    }
SWIGINTERN void Animation_track_move_up(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_move_up", idx);
    }
SWIGINTERN void Animation_track_move_down(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_move_down", idx);
    }
SWIGINTERN int Animation_transform_track_insert_key(Animation *self,int idx,float time,Vector3 const &loc,Quat const &rot,Vector3 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("transform_track_insert_key", idx, time, loc, rot, scale);
    }
SWIGINTERN void Animation_track_insert_key__SWIG_0(Animation *self,int idx,float time,Variant const &key,float transition=1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_insert_key", idx, time, key, transition);
    }
SWIGINTERN void Animation_track_remove_key(Animation *self,int idx,int key_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_remove_key", idx, key_idx);
    }
SWIGINTERN void Animation_track_remove_key_at_pos(Animation *self,int idx,float pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_remove_key_at_pos", idx, pos);
    }
SWIGINTERN void Animation_track_set_key_value(Animation *self,int idx,int key,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_set_key_value", idx, key, value);
    }
SWIGINTERN void Animation_track_set_key_transition(Animation *self,int idx,int key_idx,float transition){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_set_key_transition", idx, key_idx, transition);
    }
SWIGINTERN float Animation_track_get_key_transition(Animation *self,int idx,int key_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_get_key_transition", idx, key_idx);
    }
SWIGINTERN int Animation_track_get_key_count(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_get_key_count", idx);
    }
SWIGINTERN void Animation_track_get_key_value(Animation *self,int idx,int key_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_get_key_value", idx, key_idx);
    }
SWIGINTERN float Animation_track_get_key_time(Animation *self,int idx,int key_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_get_key_time", idx, key_idx);
    }
SWIGINTERN int Animation_track_find_key__SWIG_0(Animation *self,int idx,float time,bool exact=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_find_key", idx, time, exact);
    }
SWIGINTERN void Animation_track_set_interpolation_type(Animation *self,int idx,int interpolation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("track_set_interpolation_type", idx, interpolation);
    }
SWIGINTERN int Animation_track_get_interpolation_type(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("track_get_interpolation_type", idx);
    }
SWIGINTERN Array Animation_transform_track_interpolate(Animation *self,int idx,float time_sec){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("transform_track_interpolate", idx, time_sec);
    }
SWIGINTERN void Animation_value_track_set_continuous(Animation *self,int idx,bool continuous){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("value_track_set_continuous", idx, continuous);
    }
SWIGINTERN bool Animation_value_track_is_continuous(Animation *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("value_track_is_continuous", idx);
    }
SWIGINTERN IntArray Animation_value_track_get_key_indices(Animation *self,int idx,float time_sec,float delta){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("value_track_get_key_indices", idx, time_sec, delta);
    }
SWIGINTERN IntArray Animation_method_track_get_key_indices(Animation *self,int idx,float time_sec,float delta){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("method_track_get_key_indices", idx, time_sec, delta);
    }
SWIGINTERN String Animation_method_track_get_name(Animation *self,int idx,int key_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("method_track_get_name", idx, key_idx);
    }
SWIGINTERN Array Animation_method_track_get_params(Animation *self,int idx,int key_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("method_track_get_params", idx, key_idx);
    }
SWIGINTERN void Animation_set_length(Animation *self,float time_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_length", time_sec);
    }
SWIGINTERN float Animation_get_length(Animation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void Animation_set_loop(Animation *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", enabled);
    }
SWIGINTERN bool Animation_has_loop(Animation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN void Animation_set_step(Animation *self,float size_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_step", size_sec);
    }
SWIGINTERN float Animation_get_step(Animation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_step");
    }
SWIGINTERN void Animation_clear(Animation *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void AtlasTexture_set_atlas(AtlasTexture *self,Ref< Texture > atlas){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_atlas", atlas);
    }
SWIGINTERN Ref< Texture > AtlasTexture_get_atlas(AtlasTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_atlas").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void AtlasTexture_set_region(AtlasTexture *self,Rect2 const &region){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_region", region);
    }
SWIGINTERN Rect2 AtlasTexture_get_region(AtlasTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_region");
    }
SWIGINTERN void AtlasTexture_set_margin(AtlasTexture *self,Rect2 const &margin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_margin", margin);
    }
SWIGINTERN Rect2 AtlasTexture_get_margin(AtlasTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_margin");
    }
SWIGINTERN RID AudioServer_sample_create(AudioServer *self,int format,bool stereo,int length){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_create", format, stereo, length);
    }
SWIGINTERN void AudioServer_sample_set_description(AudioServer *self,RID const &sample,String const &description){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_description", sample, description);
    }
SWIGINTERN String AudioServer_sample_get_description(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_description", sample);
    }
SWIGINTERN int AudioServer_sample_get_format(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_format", sample);
    }
SWIGINTERN bool AudioServer_sample_is_stereo(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_is_stereo", sample);
    }
SWIGINTERN int AudioServer_sample_get_length(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_length", sample);
    }
SWIGINTERN void AudioServer_sample_set_signed_data(AudioServer *self,RID const &sample,RealArray const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_signed_data", sample, data);
    }
SWIGINTERN void AudioServer_sample_set_data(AudioServer *self,RID const &sample,RawArray const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_data", sample, data);
    }
SWIGINTERN RawArray AudioServer_sample_get_data(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_data", sample);
    }
SWIGINTERN void AudioServer_sample_set_mix_rate(AudioServer *self,RID const &sample,int mix_rate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_mix_rate", sample, mix_rate);
    }
SWIGINTERN int AudioServer_sample_get_mix_rate(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_mix_rate", sample);
    }
SWIGINTERN void AudioServer_sample_set_loop_format(AudioServer *self,RID const &sample,int loop_format){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_loop_format", sample, loop_format);
    }
SWIGINTERN int AudioServer_sample_get_loop_format(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_loop_format", sample);
    }
SWIGINTERN void AudioServer_sample_set_loop_begin(AudioServer *self,RID const &sample,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_loop_begin", sample, pos);
    }
SWIGINTERN int AudioServer_sample_get_loop_begin(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_loop_begin", sample);
    }
SWIGINTERN void AudioServer_sample_set_loop_end(AudioServer *self,RID const &sample,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sample_set_loop_end", sample, pos);
    }
SWIGINTERN int AudioServer_sample_get_loop_end(AudioServer *self,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("sample_get_loop_end", sample);
    }
SWIGINTERN RID AudioServer_voice_create(AudioServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_create");
    }
SWIGINTERN void AudioServer_voice_play(AudioServer *self,RID const &voice,RID const &sample){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_play", voice, sample);
    }
SWIGINTERN void AudioServer_voice_set_volume(AudioServer *self,RID const &voice,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_volume", voice, volume);
    }
SWIGINTERN void AudioServer_voice_set_pan__SWIG_0(AudioServer *self,RID const &voice,float pan,float depth=0,float height=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_pan", voice, pan, depth, height);
    }
SWIGINTERN void AudioServer_voice_set_filter__SWIG_0(AudioServer *self,RID const &voice,int type,float cutoff,float resonance,float gain=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_filter", voice, type, cutoff, resonance, gain);
    }
SWIGINTERN void AudioServer_voice_set_chorus(AudioServer *self,RID const &voice,float chorus){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_chorus", voice, chorus);
    }
SWIGINTERN void AudioServer_voice_set_reverb(AudioServer *self,RID const &voice,int room,float reverb){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_reverb", voice, room, reverb);
    }
SWIGINTERN void AudioServer_voice_set_mix_rate(AudioServer *self,RID const &voice,int rate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_mix_rate", voice, rate);
    }
SWIGINTERN void AudioServer_voice_set_positional(AudioServer *self,RID const &voice,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_positional", voice, enabled);
    }
SWIGINTERN float AudioServer_voice_get_volume(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_volume", voice);
    }
SWIGINTERN float AudioServer_voice_get_pan(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_pan", voice);
    }
SWIGINTERN float AudioServer_voice_get_pan_height(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_pan_height", voice);
    }
SWIGINTERN float AudioServer_voice_get_pan_depth(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_pan_depth", voice);
    }
SWIGINTERN int AudioServer_voice_get_filter_type(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_filter_type", voice);
    }
SWIGINTERN float AudioServer_voice_get_filter_cutoff(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_filter_cutoff", voice);
    }
SWIGINTERN float AudioServer_voice_get_filter_resonance(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_filter_resonance", voice);
    }
SWIGINTERN float AudioServer_voice_get_chorus(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_chorus", voice);
    }
SWIGINTERN int AudioServer_voice_get_reverb_type(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_reverb_type", voice);
    }
SWIGINTERN float AudioServer_voice_get_reverb(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_reverb", voice);
    }
SWIGINTERN int AudioServer_voice_get_mix_rate(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_get_mix_rate", voice);
    }
SWIGINTERN bool AudioServer_voice_is_positional(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("voice_is_positional", voice);
    }
SWIGINTERN void AudioServer_voice_stop(AudioServer *self,RID const &voice){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_stop", voice);
    }
SWIGINTERN void AudioServer_free_rid(AudioServer *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("free_rid", rid);
    }
SWIGINTERN void AudioServer_set_stream_global_volume_scale(AudioServer *self,float scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stream_global_volume_scale", scale);
    }
SWIGINTERN float AudioServer_get_stream_global_volume_scale(AudioServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream_global_volume_scale");
    }
SWIGINTERN void AudioServer_set_fx_global_volume_scale(AudioServer *self,float scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fx_global_volume_scale", scale);
    }
SWIGINTERN float AudioServer_get_fx_global_volume_scale(AudioServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fx_global_volume_scale");
    }
SWIGINTERN void AudioServer_set_event_voice_global_volume_scale(AudioServer *self,float scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_event_voice_global_volume_scale", scale);
    }
SWIGINTERN float AudioServer_get_event_voice_global_volume_scale(AudioServer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_event_voice_global_volume_scale");
    }
SWIGINTERN AudioServer *AudioServer_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("AudioServer")->cast_to<AudioServer>(); }
SWIGINTERN void AudioStreamPlayback_play__SWIG_0(AudioStreamPlayback *self,float from_pos_sec=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play", from_pos_sec);
    }
SWIGINTERN void AudioStreamPlayback_stop(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN bool AudioStreamPlayback_is_playing(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void AudioStreamPlayback_set_loop(AudioStreamPlayback *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", enabled);
    }
SWIGINTERN bool AudioStreamPlayback_has_loop(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN int AudioStreamPlayback_get_loop_count(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_count");
    }
SWIGINTERN void AudioStreamPlayback_seek_pos(AudioStreamPlayback *self,float pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek_pos", pos);
    }
SWIGINTERN float AudioStreamPlayback_get_pos(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN float AudioStreamPlayback_get_length(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN int AudioStreamPlayback_get_channels(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_channels");
    }
SWIGINTERN int AudioStreamPlayback_get_mix_rate(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mix_rate");
    }
SWIGINTERN int AudioStreamPlayback_get_minimum_buffer_size(AudioStreamPlayback *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_minimum_buffer_size");
    }
SWIGINTERN void BakedLight_set_mode(BakedLight *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int BakedLight_get_mode(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN void BakedLight_set_octree(BakedLight *self,RawArray const &octree){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_octree", octree);
    }
SWIGINTERN RawArray BakedLight_get_octree(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_octree");
    }
SWIGINTERN void BakedLight_set_light(BakedLight *self,RawArray const &light){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_light", light);
    }
SWIGINTERN RawArray BakedLight_get_light(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_light");
    }
SWIGINTERN void BakedLight_set_sampler_octree(BakedLight *self,IntArray const &sampler_octree){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sampler_octree", sampler_octree);
    }
SWIGINTERN IntArray BakedLight_get_sampler_octree(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sampler_octree");
    }
SWIGINTERN void BakedLight_add_lightmap(BakedLight *self,Ref< Texture > texture,Vector2 const &gen_size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_lightmap", texture, gen_size);
    }
SWIGINTERN void BakedLight_erase_lightmap(BakedLight *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_lightmap", id);
    }
SWIGINTERN void BakedLight_clear_lightmaps(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_lightmaps");
    }
SWIGINTERN void BakedLight_set_cell_subdivision(BakedLight *self,int cell_subdivision){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cell_subdivision", cell_subdivision);
    }
SWIGINTERN int BakedLight_get_cell_subdivision(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_subdivision");
    }
SWIGINTERN void BakedLight_set_initial_lattice_subdiv(BakedLight *self,int cell_subdivision){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_initial_lattice_subdiv", cell_subdivision);
    }
SWIGINTERN int BakedLight_get_initial_lattice_subdiv(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_initial_lattice_subdiv");
    }
SWIGINTERN void BakedLight_set_plot_size(BakedLight *self,float plot_size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_plot_size", plot_size);
    }
SWIGINTERN float BakedLight_get_plot_size(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_plot_size");
    }
SWIGINTERN void BakedLight_set_bounces(BakedLight *self,int bounces){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bounces", bounces);
    }
SWIGINTERN int BakedLight_get_bounces(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounces");
    }
SWIGINTERN void BakedLight_set_cell_extra_margin(BakedLight *self,float cell_extra_margin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cell_extra_margin", cell_extra_margin);
    }
SWIGINTERN float BakedLight_get_cell_extra_margin(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_extra_margin");
    }
SWIGINTERN void BakedLight_set_edge_damp(BakedLight *self,float edge_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_edge_damp", edge_damp);
    }
SWIGINTERN float BakedLight_get_edge_damp(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edge_damp");
    }
SWIGINTERN void BakedLight_set_normal_damp(BakedLight *self,float normal_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_normal_damp", normal_damp);
    }
SWIGINTERN float BakedLight_get_normal_damp(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_normal_damp");
    }
SWIGINTERN void BakedLight_set_tint(BakedLight *self,float tint){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tint", tint);
    }
SWIGINTERN float BakedLight_get_tint(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tint");
    }
SWIGINTERN void BakedLight_set_saturation(BakedLight *self,float saturation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_saturation", saturation);
    }
SWIGINTERN float BakedLight_get_saturation(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_saturation");
    }
SWIGINTERN void BakedLight_set_ao_radius(BakedLight *self,float ao_radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ao_radius", ao_radius);
    }
SWIGINTERN float BakedLight_get_ao_radius(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ao_radius");
    }
SWIGINTERN void BakedLight_set_ao_strength(BakedLight *self,float ao_strength){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ao_strength", ao_strength);
    }
SWIGINTERN float BakedLight_get_ao_strength(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ao_strength");
    }
SWIGINTERN void BakedLight_set_realtime_color_enabled(BakedLight *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_realtime_color_enabled", enabled);
    }
SWIGINTERN bool BakedLight_get_realtime_color_enabled(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_realtime_color_enabled");
    }
SWIGINTERN void BakedLight_set_realtime_color(BakedLight *self,Color const &tint){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_realtime_color", tint);
    }
SWIGINTERN Color BakedLight_get_realtime_color(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_realtime_color");
    }
SWIGINTERN void BakedLight_set_realtime_energy(BakedLight *self,float energy){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_realtime_energy", energy);
    }
SWIGINTERN float BakedLight_get_realtime_energy(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_realtime_energy");
    }
SWIGINTERN void BakedLight_set_format(BakedLight *self,int format){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_format", format);
    }
SWIGINTERN int BakedLight_get_format(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_format");
    }
SWIGINTERN void BakedLight_set_transfer_lightmaps_only_to_uv2(BakedLight *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transfer_lightmaps_only_to_uv2", enable);
    }
SWIGINTERN bool BakedLight_get_transfer_lightmaps_only_to_uv2(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transfer_lightmaps_only_to_uv2");
    }
SWIGINTERN void BakedLight_set_energy_multiplier(BakedLight *self,float energy_multiplier){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_energy_multiplier", energy_multiplier);
    }
SWIGINTERN float BakedLight_get_energy_multiplier(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_energy_multiplier");
    }
SWIGINTERN void BakedLight_set_gamma_adjust(BakedLight *self,float gamma_adjust){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gamma_adjust", gamma_adjust);
    }
SWIGINTERN float BakedLight_get_gamma_adjust(BakedLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gamma_adjust");
    }
SWIGINTERN void BakedLight_set_bake_flag(BakedLight *self,int flag,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bake_flag", flag, enabled);
    }
SWIGINTERN bool BakedLight_get_bake_flag(BakedLight *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bake_flag", flag);
    }
SWIGINTERN void BitMap_create(BitMap *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create", size);
    }
SWIGINTERN void BitMap_create_from_image_alpha(BitMap *self,Image const &image){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_from_image_alpha", image);
    }
SWIGINTERN void BitMap_set_bit(BitMap *self,Vector2 const &pos,bool bit){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bit", pos, bit);
    }
SWIGINTERN bool BitMap_get_bit(BitMap *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bit", pos);
    }
SWIGINTERN void BitMap_set_bit_rect(BitMap *self,Rect2 const &p_rect,bool bit){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bit_rect", p_rect, bit);
    }
SWIGINTERN int BitMap_get_true_bit_count(BitMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_true_bit_count");
    }
SWIGINTERN Vector2 BitMap_get_size(BitMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size");
    }
SWIGINTERN void BoxShape_set_extents(BoxShape *self,Vector3 const &extents){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_extents", extents);
    }
SWIGINTERN Vector3 BoxShape_get_extents(BoxShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_extents");
    }
SWIGINTERN void CanvasItemMaterial_set_shader(CanvasItemMaterial *self,Ref< Shader > shader){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shader", shader);
    }
SWIGINTERN Ref< Shader > CanvasItemMaterial_get_shader(CanvasItemMaterial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shader").operator Object *()->cast_to<Shader>();
    }
SWIGINTERN void CanvasItemMaterial_set_shader_param(CanvasItemMaterial *self,String const &param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shader_param", param, value);
    }
SWIGINTERN void CanvasItemMaterial_get_shader_param(CanvasItemMaterial *self,String const &param){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_shader_param", param);
    }
SWIGINTERN void CanvasItemMaterial_set_shading_mode(CanvasItemMaterial *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shading_mode", mode);
    }
SWIGINTERN int CanvasItemMaterial_get_shading_mode(CanvasItemMaterial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shading_mode");
    }
SWIGINTERN void CapsuleShape_set_radius(CapsuleShape *self,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radius", radius);
    }
SWIGINTERN float CapsuleShape_get_radius(CapsuleShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radius");
    }
SWIGINTERN void CapsuleShape_set_height(CapsuleShape *self,float height){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_height", height);
    }
SWIGINTERN float CapsuleShape_get_height(CapsuleShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_height");
    }
SWIGINTERN void CapsuleShape2D_set_radius(CapsuleShape2D *self,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radius", radius);
    }
SWIGINTERN float CapsuleShape2D_get_radius(CapsuleShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radius");
    }
SWIGINTERN void CapsuleShape2D_set_height(CapsuleShape2D *self,float height){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_height", height);
    }
SWIGINTERN float CapsuleShape2D_get_height(CapsuleShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_height");
    }
SWIGINTERN void CircleShape2D_set_radius(CircleShape2D *self,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radius", radius);
    }
SWIGINTERN float CircleShape2D_get_radius(CircleShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radius");
    }
SWIGINTERN void ColorRamp_add_point(ColorRamp *self,float offset,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_point", offset, color);
    }
SWIGINTERN void ColorRamp_remove_point(ColorRamp *self,int offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_point", offset);
    }
SWIGINTERN void ColorRamp_set_offset(ColorRamp *self,int point,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", point, offset);
    }
SWIGINTERN float ColorRamp_get_offset(ColorRamp *self,int point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset", point);
    }
SWIGINTERN void ColorRamp_set_color(ColorRamp *self,int point,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", point, color);
    }
SWIGINTERN Color ColorRamp_get_color(ColorRamp *self,int point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color", point);
    }
SWIGINTERN Color ColorRamp_interpolate(ColorRamp *self,float offset){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolate", offset);
    }
SWIGINTERN int ColorRamp_get_point_count(ColorRamp *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_count");
    }
SWIGINTERN void ColorRamp_set_offsets(ColorRamp *self,RealArray const &offsets){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offsets", offsets);
    }
SWIGINTERN RealArray ColorRamp_get_offsets(ColorRamp *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offsets");
    }
SWIGINTERN void ColorRamp_set_colors(ColorRamp *self,ColorArray const &colors){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_colors", colors);
    }
SWIGINTERN ColorArray ColorRamp_get_colors(ColorRamp *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_colors");
    }
SWIGINTERN void ConcavePolygonShape_set_faces(ConcavePolygonShape *self,Vector3Array const &faces){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_faces", faces);
    }
SWIGINTERN Vector3Array ConcavePolygonShape_get_faces(ConcavePolygonShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_faces");
    }
SWIGINTERN void ConcavePolygonShape2D_set_segments(ConcavePolygonShape2D *self,Vector2Array const &segments){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_segments", segments);
    }
SWIGINTERN Vector2Array ConcavePolygonShape2D_get_segments(ConcavePolygonShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_segments");
    }
SWIGINTERN void ConfigFile_set_value(ConfigFile *self,String const &section,String const &key,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_value", section, key, value);
    }
SWIGINTERN Variant ConfigFile_get_value__SWIG_0(ConfigFile *self,String const &section,String const &key,Variant const &default_=Variant()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_value", section, key, default_);
    }
SWIGINTERN bool ConfigFile_has_section(ConfigFile *self,String const &section){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_section", section);
    }
SWIGINTERN bool ConfigFile_has_section_key(ConfigFile *self,String const &section,String const &key){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_section_key", section, key);
    }
SWIGINTERN StringArray ConfigFile_get_sections(ConfigFile *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sections");
    }
SWIGINTERN StringArray ConfigFile_get_section_keys(ConfigFile *self,String const &section){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_section_keys", section);
    }
SWIGINTERN int ConfigFile_load(ConfigFile *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("load", path);
    }
SWIGINTERN int ConfigFile_save(ConfigFile *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("save", path);
    }
SWIGINTERN void ConvexPolygonShape_set_points(ConvexPolygonShape *self,Vector3Array const &points){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_points", points);
    }
SWIGINTERN Vector3Array ConvexPolygonShape_get_points(ConvexPolygonShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_points");
    }
SWIGINTERN void ConvexPolygonShape2D_set_point_cloud(ConvexPolygonShape2D *self,Vector2Array const &point_cloud){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_cloud", point_cloud);
    }
SWIGINTERN void ConvexPolygonShape2D_set_points(ConvexPolygonShape2D *self,Vector2Array const &points){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_points", points);
    }
SWIGINTERN Vector2Array ConvexPolygonShape2D_get_points(ConvexPolygonShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_points");
    }
SWIGINTERN int CubeMap_get_width(CubeMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_width");
    }
SWIGINTERN int CubeMap_get_height(CubeMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_height");
    }
SWIGINTERN RID CubeMap_get_rid(CubeMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rid");
    }
SWIGINTERN void CubeMap_set_flags(CubeMap *self,int flags){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flags", flags);
    }
SWIGINTERN int CubeMap_get_flags(CubeMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flags");
    }
SWIGINTERN void CubeMap_set_side(CubeMap *self,int side,Image const &image){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_side", side, image);
    }
SWIGINTERN Image CubeMap_get_side(CubeMap *self,int side){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_side", side);
    }
SWIGINTERN void CubeMap_set_storage(CubeMap *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_storage", mode);
    }
SWIGINTERN int CubeMap_get_storage(CubeMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_storage");
    }
SWIGINTERN void CubeMap_set_lossy_storage_quality(CubeMap *self,float quality){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_lossy_storage_quality", quality);
    }
SWIGINTERN float CubeMap_get_lossy_storage_quality(CubeMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_lossy_storage_quality");
    }
SWIGINTERN int Curve2D_get_point_count(Curve2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_count");
    }
SWIGINTERN void Curve2D_add_point__SWIG_0(Curve2D *self,Vector2 const &pos,Vector2 const &in=Vector2(0,0),Vector2 const &out=Vector2(0,0),int atpos=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_point", pos, in, out, atpos);
    }
SWIGINTERN void Curve2D_set_point_pos(Curve2D *self,int idx,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_pos", idx, pos);
    }
SWIGINTERN Vector2 Curve2D_get_point_pos(Curve2D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_pos", idx);
    }
SWIGINTERN void Curve2D_set_point_in(Curve2D *self,int idx,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_in", idx, pos);
    }
SWIGINTERN Vector2 Curve2D_get_point_in(Curve2D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_in", idx);
    }
SWIGINTERN void Curve2D_set_point_out(Curve2D *self,int idx,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_out", idx, pos);
    }
SWIGINTERN Vector2 Curve2D_get_point_out(Curve2D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_out", idx);
    }
SWIGINTERN void Curve2D_remove_point(Curve2D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_point", idx);
    }
SWIGINTERN Vector2 Curve2D_interpolate(Curve2D *self,int idx,float t){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolate", idx, t);
    }
SWIGINTERN Vector2 Curve2D_interpolatef(Curve2D *self,float fofs){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolatef", fofs);
    }
SWIGINTERN void Curve2D_set_bake_interval(Curve2D *self,float distance){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bake_interval", distance);
    }
SWIGINTERN float Curve2D_get_bake_interval(Curve2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bake_interval");
    }
SWIGINTERN float Curve2D_get_baked_length(Curve2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_length");
    }
SWIGINTERN Vector2 Curve2D_interpolate_baked__SWIG_0(Curve2D *self,float offset,bool cubic=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolate_baked", offset, cubic);
    }
SWIGINTERN Vector2Array Curve2D_get_baked_points(Curve2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_points");
    }
SWIGINTERN Vector2Array Curve2D_tesselate__SWIG_0(Curve2D *self,int max_stages=5,float tolerance_degrees=4){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tesselate", max_stages, tolerance_degrees);
    }
SWIGINTERN int Curve3D_get_point_count(Curve3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_count");
    }
SWIGINTERN void Curve3D_add_point__SWIG_0(Curve3D *self,Vector3 const &pos,Vector3 const &in=Vector3(0, 0, 0),Vector3 const &out=Vector3(0, 0, 0),int atpos=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_point", pos, in, out, atpos);
    }
SWIGINTERN void Curve3D_set_point_pos(Curve3D *self,int idx,Vector3 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_pos", idx, pos);
    }
SWIGINTERN Vector3 Curve3D_get_point_pos(Curve3D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_pos", idx);
    }
SWIGINTERN void Curve3D_set_point_tilt(Curve3D *self,int idx,float tilt){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_tilt", idx, tilt);
    }
SWIGINTERN float Curve3D_get_point_tilt(Curve3D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_tilt", idx);
    }
SWIGINTERN void Curve3D_set_point_in(Curve3D *self,int idx,Vector3 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_in", idx, pos);
    }
SWIGINTERN Vector3 Curve3D_get_point_in(Curve3D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_in", idx);
    }
SWIGINTERN void Curve3D_set_point_out(Curve3D *self,int idx,Vector3 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_out", idx, pos);
    }
SWIGINTERN Vector3 Curve3D_get_point_out(Curve3D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_out", idx);
    }
SWIGINTERN void Curve3D_remove_point(Curve3D *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_point", idx);
    }
SWIGINTERN Vector3 Curve3D_interpolate(Curve3D *self,int idx,float t){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolate", idx, t);
    }
SWIGINTERN Vector3 Curve3D_interpolatef(Curve3D *self,float fofs){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolatef", fofs);
    }
SWIGINTERN void Curve3D_set_bake_interval(Curve3D *self,float distance){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bake_interval", distance);
    }
SWIGINTERN float Curve3D_get_bake_interval(Curve3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bake_interval");
    }
SWIGINTERN float Curve3D_get_baked_length(Curve3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_length");
    }
SWIGINTERN Vector3 Curve3D_interpolate_baked__SWIG_0(Curve3D *self,float offset,bool cubic=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("interpolate_baked", offset, cubic);
    }
SWIGINTERN Vector3Array Curve3D_get_baked_points(Curve3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_points");
    }
SWIGINTERN RealArray Curve3D_get_baked_tilts(Curve3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_tilts");
    }
SWIGINTERN Vector3Array Curve3D_tesselate__SWIG_0(Curve3D *self,int max_stages=5,float tolerance_degrees=4){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tesselate", max_stages, tolerance_degrees);
    }
SWIGINTERN Variant EditorExportPlugin_custom_export(EditorExportPlugin *self,String const &name,EditorExportPlatform *platform){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("custom_export", name, platform);
    }
SWIGINTERN bool EditorImportPlugin_can_reimport_multiple_files(EditorImportPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_reimport_multiple_files");
    }
SWIGINTERN RawArray EditorImportPlugin_custom_export(EditorImportPlugin *self,String const &path,EditorExportPlatform *platform){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("custom_export", path, platform);
    }
SWIGINTERN String EditorImportPlugin_get_name(EditorImportPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_name");
    }
SWIGINTERN String EditorImportPlugin_get_visible_name(EditorImportPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visible_name");
    }
SWIGINTERN int EditorImportPlugin_import(EditorImportPlugin *self,String const &path,Ref< ResourceImportMetadata > from){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("import", path, from);
    }
SWIGINTERN void EditorImportPlugin_import_dialog(EditorImportPlugin *self,String const &from){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("import_dialog", from);
    }
SWIGINTERN void EditorImportPlugin_import_from_drop(EditorImportPlugin *self,StringArray const &files,String const &dest_path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("import_from_drop", files, dest_path);
    }
SWIGINTERN void EditorImportPlugin_reimport_multiple_files(EditorImportPlugin *self,StringArray const &files){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("reimport_multiple_files", files);
    }
SWIGINTERN String EditorImportPlugin_validate_source_path(EditorImportPlugin *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("validate_source_path", path);
    }
SWIGINTERN String EditorImportPlugin_expand_source_path(EditorImportPlugin *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("expand_source_path", path);
    }
SWIGINTERN void EditorScenePostImport_post_import(EditorScenePostImport *self,Object *scene){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("post_import", scene);
    }
SWIGINTERN void EditorScript__run(EditorScript *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_run");
    }
SWIGINTERN void EditorScript_add_root_node(EditorScript *self,Object *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_root_node", node);
    }
SWIGINTERN Object *EditorScript_get_scene(EditorScript *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scene").operator Object *();
    }
SWIGINTERN void EditorSelection_clear(EditorSelection *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void EditorSelection_add_node(EditorSelection *self,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_node", node);
    }
SWIGINTERN void EditorSelection_remove_node(EditorSelection *self,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_node", node);
    }
SWIGINTERN Array EditorSelection_get_selected_nodes(EditorSelection *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selected_nodes");
    }
SWIGINTERN void EditorSettings_erase(EditorSettings *self,String const &property){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase", property);
    }
SWIGINTERN String EditorSettings_get_settings_path(EditorSettings *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_settings_path");
    }
SWIGINTERN String EditorSettings_get_project_settings_path(EditorSettings *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_project_settings_path");
    }
SWIGINTERN void EditorSettings_set_favorite_dirs(EditorSettings *self,StringArray const &dirs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_favorite_dirs", dirs);
    }
SWIGINTERN StringArray EditorSettings_get_favorite_dirs(EditorSettings *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_favorite_dirs");
    }
SWIGINTERN void EditorSettings_set_recent_dirs(EditorSettings *self,StringArray const &dirs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_recent_dirs", dirs);
    }
SWIGINTERN StringArray EditorSettings_get_recent_dirs(EditorSettings *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_recent_dirs");
    }
SWIGINTERN void EditorSpatialGizmo_commit_handle(EditorSpatialGizmo *self,int index,Variant const &restore,bool cancel){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("commit_handle", index, restore, cancel);
    }
SWIGINTERN String EditorSpatialGizmo_get_handle_name(EditorSpatialGizmo *self,int index){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_handle_name", index);
    }
SWIGINTERN Variant EditorSpatialGizmo_get_handle_value(EditorSpatialGizmo *self,int index){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_handle_value", index);
    }
SWIGINTERN void EditorSpatialGizmo_redraw(EditorSpatialGizmo *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("redraw");
    }
SWIGINTERN void EditorSpatialGizmo_set_handle(EditorSpatialGizmo *self,int index,Camera *camera,Vector2 const &point){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_handle", index, camera, point);
    }
SWIGINTERN void EditorSpatialGizmo_add_lines__SWIG_0(EditorSpatialGizmo *self,Vector3Array const &lines,Ref< Material > material,bool billboard=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_lines", lines, material, billboard);
    }
SWIGINTERN void EditorSpatialGizmo_add_mesh__SWIG_0(EditorSpatialGizmo *self,Ref< Mesh > mesh,bool billboard=false,RID const &skeleton=RID()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_mesh", mesh, billboard, skeleton);
    }
SWIGINTERN void EditorSpatialGizmo_add_collision_segments(EditorSpatialGizmo *self,Vector3Array const &segments){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_collision_segments", segments);
    }
SWIGINTERN void EditorSpatialGizmo_add_collision_triangles(EditorSpatialGizmo *self,TriangleMesh *triangles){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_collision_triangles", triangles);
    }
SWIGINTERN void EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(EditorSpatialGizmo *self,Ref< Material > material,float default_scale=1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_unscaled_billboard", material, default_scale);
    }
SWIGINTERN void EditorSpatialGizmo_add_handles__SWIG_0(EditorSpatialGizmo *self,Vector3Array const &handles,bool billboard=false,bool secondary=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_handles", handles, billboard, secondary);
    }
SWIGINTERN void EditorSpatialGizmo_set_spatial_node(EditorSpatialGizmo *self,Spatial *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_spatial_node", node);
    }
SWIGINTERN void Environment_set_background(Environment *self,int bgmode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_background", bgmode);
    }
SWIGINTERN int Environment_get_background(Environment *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_background");
    }
SWIGINTERN void Environment_set_background_param(Environment *self,int param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_background_param", param, value);
    }
SWIGINTERN void Environment_get_background_param(Environment *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_background_param", param);
    }
SWIGINTERN void Environment_set_enable_fx(Environment *self,int effect,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enable_fx", effect, enabled);
    }
SWIGINTERN bool Environment_is_fx_enabled(Environment *self,int effect){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_fx_enabled", effect);
    }
SWIGINTERN void Environment_fx_set_param(Environment *self,int param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("fx_set_param", param, value);
    }
SWIGINTERN void Environment_fx_get_param(Environment *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("fx_get_param", param);
    }
SWIGINTERN void Font_draw__SWIG_0(Font *self,RID const &canvas_item,Vector2 const &pos,String const &string,Color const &modulate=Color(1,1,1,1),int clip_w=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw", canvas_item, pos, string, modulate, clip_w);
    }
SWIGINTERN float Font_get_ascent(Font *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ascent");
    }
SWIGINTERN float Font_get_descent(Font *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_descent");
    }
SWIGINTERN float Font_get_height(Font *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_height");
    }
SWIGINTERN bool Font_is_distance_field_hint(Font *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_distance_field_hint");
    }
SWIGINTERN Vector2 Font_get_string_size(Font *self,String const &string){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_string_size", string);
    }
SWIGINTERN float Font_draw_char__SWIG_0(Font *self,RID const &canvas_item,Vector2 const &pos,int char_,int next=-1,Color const &modulate=Color(1,1,1,1)){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("draw_char", canvas_item, pos, char_, next, modulate);
    }
SWIGINTERN void FuncRef_call_func__SWIG_0(FuncRef *self,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant(),Variant const &arg5_=Variant(),Variant const &arg6_=Variant(),Variant const &arg7_=Variant(),Variant const &arg8_=Variant(),Variant const &arg9_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(arg0_);
Variant arg_1_ = Variant(arg1_);
Variant arg_2_ = Variant(arg2_);
Variant arg_3_ = Variant(arg3_);
Variant arg_4_ = Variant(arg4_);
Variant arg_5_ = Variant(arg5_);
Variant arg_6_ = Variant(arg6_);
Variant arg_7_ = Variant(arg7_);
Variant arg_8_ = Variant(arg8_);
Variant arg_9_ = Variant(arg9_);
Variant *args_[10] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_, &arg_8_, &arg_9_ };
self->call("call_func", (const Variant **) args_, 10, err);
    }
SWIGINTERN void FuncRef_set_instance(FuncRef *self,Object *instance){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_instance", instance);
    }
SWIGINTERN void FuncRef_set_function(FuncRef *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_function", name);
    }
SWIGINTERN Variant GDFunctionState_resume__SWIG_0(GDFunctionState *self,Variant const &arg_=Variant()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("resume", arg_);
    }
SWIGINTERN bool GDFunctionState_is_valid(GDFunctionState *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_valid");
    }
SWIGINTERN void GDScript_new(GDScript *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("new");
    }
SWIGINTERN RawArray GDScript_get_as_byte_code(GDScript *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_as_byte_code");
    }
SWIGINTERN bool Globals_has(Globals *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has", name);
    }
SWIGINTERN void Globals_set_order(Globals *self,String const &name,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_order", name, pos);
    }
SWIGINTERN int Globals_get_order(Globals *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_order", name);
    }
SWIGINTERN void Globals_set_persisting(Globals *self,String const &name,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_persisting", name, enable);
    }
SWIGINTERN bool Globals_is_persisting(Globals *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_persisting", name);
    }
SWIGINTERN void Globals_clear(Globals *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear", name);
    }
SWIGINTERN String Globals_localize_path(Globals *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("localize_path", path);
    }
SWIGINTERN String Globals_globalize_path(Globals *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("globalize_path", path);
    }
SWIGINTERN int Globals_save(Globals *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("save");
    }
SWIGINTERN bool Globals_has_singleton(Globals *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_singleton", name);
    }
SWIGINTERN Object *Globals_get_singleton(Globals *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_singleton", name).operator Object *();
    }
SWIGINTERN bool Globals_load_resource_pack(Globals *self,String const &pack){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("load_resource_pack", pack);
    }
SWIGINTERN int Globals_save_custom(Globals *self,String const &file){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("save_custom", file);
    }
SWIGINTERN Globals *Globals_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Globals")->cast_to<Globals>(); }
SWIGINTERN int HTTPClient_connect__SWIG_0(HTTPClient *self,String const &host,int port,bool use_ssl=false,bool verify_host=true){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect", host, port, use_ssl, verify_host);
    }
SWIGINTERN void HTTPClient_set_connection(HTTPClient *self,Ref< StreamPeer > connection){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_connection", connection);
    }
SWIGINTERN Ref< StreamPeer > HTTPClient_get_connection(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection").operator Object *()->cast_to<StreamPeer>();
    }
SWIGINTERN int HTTPClient_request_raw(HTTPClient *self,int method,String const &url,StringArray const &headers,RawArray const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("request_raw", method, url, headers, body);
    }
SWIGINTERN int HTTPClient_request__SWIG_0(HTTPClient *self,int method,String const &url,StringArray const &headers,String const &body=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("request", method, url, headers, body);
    }
SWIGINTERN int HTTPClient_send_body_text(HTTPClient *self,String const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("send_body_text", body);
    }
SWIGINTERN int HTTPClient_send_body_data(HTTPClient *self,RawArray const &body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("send_body_data", body);
    }
SWIGINTERN void HTTPClient_close(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("close");
    }
SWIGINTERN bool HTTPClient_has_response(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_response");
    }
SWIGINTERN bool HTTPClient_is_response_chunked(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_response_chunked");
    }
SWIGINTERN int HTTPClient_get_response_code(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_response_code");
    }
SWIGINTERN StringArray HTTPClient_get_response_headers(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_response_headers");
    }
SWIGINTERN Dictionary HTTPClient_get_response_headers_as_dictionary(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_response_headers_as_dictionary");
    }
SWIGINTERN int HTTPClient_get_response_body_length(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_response_body_length");
    }
SWIGINTERN RawArray HTTPClient_read_response_body_chunk(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("read_response_body_chunk");
    }
SWIGINTERN void HTTPClient_set_read_chunk_size(HTTPClient *self,int bytes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_read_chunk_size", bytes);
    }
SWIGINTERN void HTTPClient_set_blocking_mode(HTTPClient *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_blocking_mode", enabled);
    }
SWIGINTERN bool HTTPClient_is_blocking_mode_enabled(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_blocking_mode_enabled");
    }
SWIGINTERN int HTTPClient_get_status(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_status");
    }
SWIGINTERN int HTTPClient_poll(HTTPClient *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("poll");
    }
SWIGINTERN String HTTPClient_query_string_from_dict(HTTPClient *self,Dictionary const &fields){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("query_string_from_dict", fields);
    }
SWIGINTERN String IP_resolve_hostname(IP *self,String const &host){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("resolve_hostname", host);
    }
SWIGINTERN int IP_resolve_hostname_queue_item(IP *self,String const &host){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("resolve_hostname_queue_item", host);
    }
SWIGINTERN int IP_get_resolve_item_status(IP *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_resolve_item_status", id);
    }
SWIGINTERN String IP_get_resolve_item_address(IP *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_resolve_item_address", id);
    }
SWIGINTERN void IP_erase_resolve_item(IP *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_resolve_item", id);
    }
SWIGINTERN Array IP_get_local_addresses(IP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_local_addresses");
    }
SWIGINTERN IP *IP_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("IP")->cast_to<IP>(); }
SWIGINTERN void ImageTexture_create__SWIG_0(ImageTexture *self,int width,int height,int format,int flags=7){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create", width, height, format, flags);
    }
SWIGINTERN void ImageTexture_create_from_image__SWIG_0(ImageTexture *self,Image const &image,int flags=7){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_from_image", image, flags);
    }
SWIGINTERN int ImageTexture_get_format(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_format");
    }
SWIGINTERN void ImageTexture_load(ImageTexture *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("load", path);
    }
SWIGINTERN void ImageTexture_set_data(ImageTexture *self,Image const &image){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_data", image);
    }
SWIGINTERN Image ImageTexture_get_data(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_data");
    }
SWIGINTERN void ImageTexture_set_storage(ImageTexture *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_storage", mode);
    }
SWIGINTERN int ImageTexture_get_storage(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_storage");
    }
SWIGINTERN void ImageTexture_set_lossy_storage_quality(ImageTexture *self,float quality){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_lossy_storage_quality", quality);
    }
SWIGINTERN float ImageTexture_get_lossy_storage_quality(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_lossy_storage_quality");
    }
SWIGINTERN void ImageTexture_fix_alpha_edges(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("fix_alpha_edges");
    }
SWIGINTERN void ImageTexture_premultiply_alpha(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("premultiply_alpha");
    }
SWIGINTERN void ImageTexture_normal_to_xy(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("normal_to_xy");
    }
SWIGINTERN void ImageTexture_shrink_x2_and_keep_size(ImageTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("shrink_x2_and_keep_size");
    }
SWIGINTERN void ImageTexture_set_size_override(ImageTexture *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size_override", size);
    }
SWIGINTERN bool Input_is_key_pressed(Input *self,int scancode){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_key_pressed", scancode);
    }
SWIGINTERN bool Input_is_mouse_button_pressed(Input *self,int button){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_mouse_button_pressed", button);
    }
SWIGINTERN bool Input_is_joy_button_pressed(Input *self,int device,int button){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_joy_button_pressed", device, button);
    }
SWIGINTERN bool Input_is_action_pressed(Input *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_action_pressed", action);
    }
SWIGINTERN void Input_add_joy_mapping__SWIG_0(Input *self,String const &mapping,bool update_existing=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_joy_mapping", mapping, update_existing);
    }
SWIGINTERN void Input_remove_joy_mapping(Input *self,String const &guid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_joy_mapping", guid);
    }
SWIGINTERN bool Input_is_joy_known(Input *self,int device){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_joy_known", device);
    }
SWIGINTERN float Input_get_joy_axis(Input *self,int device,int axis){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_joy_axis", device, axis);
    }
SWIGINTERN String Input_get_joy_name(Input *self,int device){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_joy_name", device);
    }
SWIGINTERN String Input_get_joy_guid(Input *self,int device){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_joy_guid", device);
    }
SWIGINTERN Vector3 Input_get_accelerometer(Input *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_accelerometer");
    }
SWIGINTERN Vector3 Input_get_magnetometer(Input *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_magnetometer");
    }
SWIGINTERN Vector2 Input_get_mouse_speed(Input *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mouse_speed");
    }
SWIGINTERN int Input_get_mouse_button_mask(Input *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mouse_button_mask");
    }
SWIGINTERN void Input_set_mouse_mode(Input *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mouse_mode", mode);
    }
SWIGINTERN int Input_get_mouse_mode(Input *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mouse_mode");
    }
SWIGINTERN void Input_warp_mouse_pos(Input *self,Vector2 const &to){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("warp_mouse_pos", to);
    }
SWIGINTERN void Input_action_press(Input *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("action_press", action);
    }
SWIGINTERN void Input_action_release(Input *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("action_release", action);
    }
SWIGINTERN void Input_set_custom_mouse_cursor__SWIG_0(Input *self,Ref< Texture > image,Vector2 const &hotspot=Vector2(0,0)){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_mouse_cursor", image, hotspot);
    }
SWIGINTERN Input *Input_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("Input")->cast_to<Input>(); }
SWIGINTERN bool InputMap_has_action(InputMap *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_action", action);
    }
SWIGINTERN int InputMap_get_action_id(InputMap *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_action_id", action);
    }
SWIGINTERN String InputMap_get_action_from_id(InputMap *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_action_from_id", id);
    }
SWIGINTERN void InputMap_add_action(InputMap *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_action", action);
    }
SWIGINTERN void InputMap_erase_action(InputMap *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_action", action);
    }
SWIGINTERN void InputMap_action_add_event(InputMap *self,String const &action,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("action_add_event", action, event);
    }
SWIGINTERN bool InputMap_action_has_event(InputMap *self,String const &action,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("action_has_event", action, event);
    }
SWIGINTERN void InputMap_action_erase_event(InputMap *self,String const &action,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("action_erase_event", action, event);
    }
SWIGINTERN Array InputMap_get_action_list(InputMap *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_action_list", action);
    }
SWIGINTERN bool InputMap_event_is_action(InputMap *self,InputEvent const &event,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("event_is_action", event, action);
    }
SWIGINTERN void InputMap_load_from_globals(InputMap *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("load_from_globals");
    }
SWIGINTERN InputMap *InputMap_SingletonGetInstance(){ return Globals::get_singleton()->get_singleton_object("InputMap")->cast_to<InputMap>(); }
SWIGINTERN int LargeTexture_add_piece(LargeTexture *self,Vector2 const &ofs,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("add_piece", ofs, texture);
    }
SWIGINTERN void LargeTexture_set_piece_offset(LargeTexture *self,int idx,Vector2 const &ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_piece_offset", idx, ofs);
    }
SWIGINTERN void LargeTexture_set_piece_texture(LargeTexture *self,int idx,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_piece_texture", idx, texture);
    }
SWIGINTERN void LargeTexture_set_size(LargeTexture *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size", size);
    }
SWIGINTERN void LargeTexture_clear(LargeTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN int LargeTexture_get_piece_count(LargeTexture *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_piece_count");
    }
SWIGINTERN Vector2 LargeTexture_get_piece_offset(LargeTexture *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_piece_offset", idx);
    }
SWIGINTERN Ref< Texture > LargeTexture_get_piece_texture(LargeTexture *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_piece_texture", idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void LineShape2D_set_normal(LineShape2D *self,Vector2 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_normal", normal);
    }
SWIGINTERN Vector2 LineShape2D_get_normal(LineShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_normal");
    }
SWIGINTERN void LineShape2D_set_d(LineShape2D *self,float d){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_d", d);
    }
SWIGINTERN float LineShape2D_get_d(LineShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_d");
    }
SWIGINTERN void MainLoop__drop_files(MainLoop *self,StringArray const &files,int screen){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_drop_files", files, screen);
    }
SWIGINTERN void MainLoop__finalize(MainLoop *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_finalize");
    }
SWIGINTERN void MainLoop__idle(MainLoop *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_idle", delta);
    }
SWIGINTERN void MainLoop__initialize(MainLoop *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_initialize");
    }
SWIGINTERN void MainLoop__input_event(MainLoop *self,InputEvent const &ev){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_input_event", ev);
    }
SWIGINTERN void MainLoop__input_text(MainLoop *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_input_text", text);
    }
SWIGINTERN void MainLoop__iteration(MainLoop *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_iteration", delta);
    }
SWIGINTERN void MainLoop_input_event(MainLoop *self,InputEvent const &ev){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("input_event", ev);
    }
SWIGINTERN void MainLoop_input_text(MainLoop *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("input_text", text);
    }
SWIGINTERN void MainLoop_init(MainLoop *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("init");
    }
SWIGINTERN bool MainLoop_iteration(MainLoop *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("iteration", delta);
    }
SWIGINTERN bool MainLoop_idle(MainLoop *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("idle", delta);
    }
SWIGINTERN void MainLoop_finish(MainLoop *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("finish");
    }
SWIGINTERN void Material_set_flag(Material *self,int flag,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flag", flag, enable);
    }
SWIGINTERN bool Material_get_flag(Material *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flag", flag);
    }
SWIGINTERN void Material_set_blend_mode(Material *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_blend_mode", mode);
    }
SWIGINTERN int Material_get_blend_mode(Material *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_blend_mode");
    }
SWIGINTERN void Material_set_line_width(Material *self,float width){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_line_width", width);
    }
SWIGINTERN float Material_get_line_width(Material *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line_width");
    }
SWIGINTERN void Material_set_depth_draw_mode(Material *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_depth_draw_mode", mode);
    }
SWIGINTERN int Material_get_depth_draw_mode(Material *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_depth_draw_mode");
    }
SWIGINTERN void Mesh_add_morph_target(Mesh *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_morph_target", name);
    }
SWIGINTERN int Mesh_get_morph_target_count(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_morph_target_count");
    }
SWIGINTERN String Mesh_get_morph_target_name(Mesh *self,int index){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_morph_target_name", index);
    }
SWIGINTERN void Mesh_clear_morph_targets(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_morph_targets");
    }
SWIGINTERN void Mesh_set_morph_target_mode(Mesh *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_morph_target_mode", mode);
    }
SWIGINTERN int Mesh_get_morph_target_mode(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_morph_target_mode");
    }
SWIGINTERN void Mesh_add_surface__SWIG_0(Mesh *self,int primitive,Array const &arrays,Array const &morph_arrays=Array(),bool alphasort=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_surface", primitive, arrays, morph_arrays, alphasort);
    }
SWIGINTERN int Mesh_get_surface_count(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_surface_count");
    }
SWIGINTERN void Mesh_surface_remove(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("surface_remove", surf_idx);
    }
SWIGINTERN int Mesh_surface_get_array_len(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("surface_get_array_len", surf_idx);
    }
SWIGINTERN int Mesh_surface_get_array_index_len(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("surface_get_array_index_len", surf_idx);
    }
SWIGINTERN int Mesh_surface_get_format(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("surface_get_format", surf_idx);
    }
SWIGINTERN int Mesh_surface_get_primitive_type(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("surface_get_primitive_type", surf_idx);
    }
SWIGINTERN void Mesh_surface_set_material(Mesh *self,int surf_idx,Ref< Material > material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("surface_set_material", surf_idx, material);
    }
SWIGINTERN Ref< Material > Mesh_surface_get_material(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("surface_get_material", surf_idx).operator Object *()->cast_to<Material>();
    }
SWIGINTERN void Mesh_surface_set_name(Mesh *self,int surf_idx,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("surface_set_name", surf_idx, name);
    }
SWIGINTERN String Mesh_surface_get_name(Mesh *self,int surf_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("surface_get_name", surf_idx);
    }
SWIGINTERN void Mesh_center_geometry(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("center_geometry");
    }
SWIGINTERN void Mesh_regen_normalmaps(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("regen_normalmaps");
    }
SWIGINTERN void Mesh_set_custom_aabb(Mesh *self,AABB const &aabb){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_aabb", aabb);
    }
SWIGINTERN AABB Mesh_get_custom_aabb(Mesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_aabb");
    }
SWIGINTERN void MeshDataTool_clear(MeshDataTool *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN int MeshDataTool_create_from_surface(MeshDataTool *self,Object *mesh,int surface){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("create_from_surface", mesh, surface);
    }
SWIGINTERN int MeshDataTool_commit_to_surface(MeshDataTool *self,Object *mesh){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("commit_to_surface", mesh);
    }
SWIGINTERN int MeshDataTool_get_format(MeshDataTool *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_format");
    }
SWIGINTERN int MeshDataTool_get_vertex_count(MeshDataTool *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_count");
    }
SWIGINTERN int MeshDataTool_get_edge_count(MeshDataTool *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edge_count");
    }
SWIGINTERN int MeshDataTool_get_face_count(MeshDataTool *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_face_count");
    }
SWIGINTERN void MeshDataTool_set_vertex(MeshDataTool *self,int idx,Vector3 const &vertex){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex", idx, vertex);
    }
SWIGINTERN Vector3 MeshDataTool_get_vertex(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_normal(MeshDataTool *self,int idx,Vector3 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_normal", idx, normal);
    }
SWIGINTERN Vector3 MeshDataTool_get_vertex_normal(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_normal", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_tangent(MeshDataTool *self,int idx,Plane const &tangent){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_tangent", idx, tangent);
    }
SWIGINTERN Plane MeshDataTool_get_vertex_tangent(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_tangent", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_uv(MeshDataTool *self,int idx,Vector2 const &uv){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_uv", idx, uv);
    }
SWIGINTERN Vector2 MeshDataTool_get_vertex_uv(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_uv", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_uv2(MeshDataTool *self,int idx,Vector2 const &uv2){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_uv2", idx, uv2);
    }
SWIGINTERN Vector2 MeshDataTool_get_vertex_uv2(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_uv2", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_color(MeshDataTool *self,int idx,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_color", idx, color);
    }
SWIGINTERN Color MeshDataTool_get_vertex_color(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_color", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_bones(MeshDataTool *self,int idx,IntArray const &bones){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_bones", idx, bones);
    }
SWIGINTERN IntArray MeshDataTool_get_vertex_bones(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_bones", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_weights(MeshDataTool *self,int idx,RealArray const &weights){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_weights", idx, weights);
    }
SWIGINTERN RealArray MeshDataTool_get_vertex_weights(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_weights", idx);
    }
SWIGINTERN void MeshDataTool_set_vertex_meta(MeshDataTool *self,int idx,Variant const &meta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_meta", idx, meta);
    }
SWIGINTERN void MeshDataTool_get_vertex_meta(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_vertex_meta", idx);
    }
SWIGINTERN IntArray MeshDataTool_get_vertex_edges(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_edges", idx);
    }
SWIGINTERN IntArray MeshDataTool_get_vertex_faces(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_faces", idx);
    }
SWIGINTERN int MeshDataTool_get_edge_vertex(MeshDataTool *self,int idx,int vertex){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edge_vertex", idx, vertex);
    }
SWIGINTERN IntArray MeshDataTool_get_edge_faces(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edge_faces", idx);
    }
SWIGINTERN void MeshDataTool_set_edge_meta(MeshDataTool *self,int idx,Variant const &meta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_edge_meta", idx, meta);
    }
SWIGINTERN void MeshDataTool_get_edge_meta(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_edge_meta", idx);
    }
SWIGINTERN int MeshDataTool_get_face_vertex(MeshDataTool *self,int idx,int vertex){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_face_vertex", idx, vertex);
    }
SWIGINTERN int MeshDataTool_get_face_edge(MeshDataTool *self,int idx,int edge){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_face_edge", idx, edge);
    }
SWIGINTERN void MeshDataTool_set_face_meta(MeshDataTool *self,int idx,Variant const &meta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_face_meta", idx, meta);
    }
SWIGINTERN void MeshDataTool_get_face_meta(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_face_meta", idx);
    }
SWIGINTERN Vector3 MeshDataTool_get_face_normal(MeshDataTool *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_face_normal", idx);
    }
SWIGINTERN void MeshDataTool_set_material(MeshDataTool *self,Ref< Material > material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_material", material);
    }
SWIGINTERN Object *MeshDataTool_get_material(MeshDataTool *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_material").operator Object *();
    }
SWIGINTERN void MeshLibrary_create_item(MeshLibrary *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_item", id);
    }
SWIGINTERN void MeshLibrary_set_item_name(MeshLibrary *self,int id,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_name", id, name);
    }
SWIGINTERN void MeshLibrary_set_item_mesh(MeshLibrary *self,int id,Ref< Mesh > mesh){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_mesh", id, mesh);
    }
SWIGINTERN void MeshLibrary_set_item_navmesh(MeshLibrary *self,int id,Ref< NavigationMesh > navmesh){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_navmesh", id, navmesh);
    }
SWIGINTERN void MeshLibrary_set_item_shape(MeshLibrary *self,int id,Ref< Shape > shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_shape", id, shape);
    }
SWIGINTERN String MeshLibrary_get_item_name(MeshLibrary *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_name", id);
    }
SWIGINTERN Ref< Mesh > MeshLibrary_get_item_mesh(MeshLibrary *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_mesh", id).operator Object *()->cast_to<Mesh>();
    }
SWIGINTERN Ref< NavigationMesh > MeshLibrary_get_item_navmesh(MeshLibrary *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_navmesh", id).operator Object *()->cast_to<NavigationMesh>();
    }
SWIGINTERN Ref< Shape > MeshLibrary_get_item_shape(MeshLibrary *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_shape", id).operator Object *()->cast_to<Shape>();
    }
SWIGINTERN void MeshLibrary_remove_item(MeshLibrary *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_item", id);
    }
SWIGINTERN void MeshLibrary_clear(MeshLibrary *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN IntArray MeshLibrary_get_item_list(MeshLibrary *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_list");
    }
SWIGINTERN int MeshLibrary_get_last_unused_item_id(MeshLibrary *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_last_unused_item_id");
    }
SWIGINTERN void MultiMesh_set_mesh(MultiMesh *self,Ref< Mesh > mesh){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mesh", mesh);
    }
SWIGINTERN Ref< Mesh > MultiMesh_get_mesh(MultiMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mesh").operator Object *()->cast_to<Mesh>();
    }
SWIGINTERN void MultiMesh_set_instance_count(MultiMesh *self,int count){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_instance_count", count);
    }
SWIGINTERN int MultiMesh_get_instance_count(MultiMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_instance_count");
    }
SWIGINTERN void MultiMesh_set_instance_transform(MultiMesh *self,int instance,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_instance_transform", instance, transform);
    }
SWIGINTERN Transform MultiMesh_get_instance_transform(MultiMesh *self,int instance){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_instance_transform", instance);
    }
SWIGINTERN void MultiMesh_set_instance_color(MultiMesh *self,int instance,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_instance_color", instance, color);
    }
SWIGINTERN Color MultiMesh_get_instance_color(MultiMesh *self,int instance){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_instance_color", instance);
    }
SWIGINTERN void MultiMesh_set_aabb(MultiMesh *self,AABB const &visibility_aabb){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_aabb", visibility_aabb);
    }
SWIGINTERN AABB MultiMesh_get_aabb(MultiMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_aabb");
    }
SWIGINTERN void MultiMesh_generate_aabb(MultiMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("generate_aabb");
    }
SWIGINTERN void NavigationMesh_set_vertices(NavigationMesh *self,Vector3Array const &vertices){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertices", vertices);
    }
SWIGINTERN Vector3Array NavigationMesh_get_vertices(NavigationMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertices");
    }
SWIGINTERN void NavigationMesh_add_polygon(NavigationMesh *self,IntArray const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_polygon", polygon);
    }
SWIGINTERN int NavigationMesh_get_polygon_count(NavigationMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon_count");
    }
SWIGINTERN IntArray NavigationMesh_get_polygon(NavigationMesh *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon", idx);
    }
SWIGINTERN void NavigationMesh_clear_polygons(NavigationMesh *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_polygons");
    }
SWIGINTERN void NavigationPolygon_set_vertices(NavigationPolygon *self,Vector2Array const &vertices){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertices", vertices);
    }
SWIGINTERN Vector2Array NavigationPolygon_get_vertices(NavigationPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertices");
    }
SWIGINTERN void NavigationPolygon_add_polygon(NavigationPolygon *self,IntArray const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_polygon", polygon);
    }
SWIGINTERN int NavigationPolygon_get_polygon_count(NavigationPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon_count");
    }
SWIGINTERN IntArray NavigationPolygon_get_polygon(NavigationPolygon *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon", idx);
    }
SWIGINTERN void NavigationPolygon_clear_polygons(NavigationPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_polygons");
    }
SWIGINTERN void NavigationPolygon_add_outline(NavigationPolygon *self,Vector2Array const &outline){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_outline", outline);
    }
SWIGINTERN void NavigationPolygon_add_outline_at_index(NavigationPolygon *self,Vector2Array const &outline,int index){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_outline_at_index", outline, index);
    }
SWIGINTERN int NavigationPolygon_get_outline_count(NavigationPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_outline_count");
    }
SWIGINTERN void NavigationPolygon_set_outline(NavigationPolygon *self,int idx,Vector2Array const &outline){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_outline", idx, outline);
    }
SWIGINTERN Vector2Array NavigationPolygon_get_outline(NavigationPolygon *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_outline", idx);
    }
SWIGINTERN void NavigationPolygon_remove_outline(NavigationPolygon *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_outline", idx);
    }
SWIGINTERN void NavigationPolygon_clear_outlines(NavigationPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_outlines");
    }
SWIGINTERN void NavigationPolygon_make_polygons_from_outlines(NavigationPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("make_polygons_from_outlines");
    }
SWIGINTERN void Node__enter_tree(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_enter_tree");
    }
SWIGINTERN void Node__exit_tree(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_exit_tree");
    }
SWIGINTERN void Node__fixed_process(Node *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_fixed_process", delta);
    }
SWIGINTERN void Node__input(Node *self,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_input", event);
    }
SWIGINTERN void Node__process(Node *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_process", delta);
    }
SWIGINTERN void Node__ready(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_ready");
    }
SWIGINTERN void Node__unhandled_input(Node *self,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_unhandled_input", event);
    }
SWIGINTERN void Node__unhandled_key_input(Node *self,InputEvent const &key_event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_unhandled_key_input", key_event);
    }
SWIGINTERN void Node_set_name(Node *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_name", name);
    }
SWIGINTERN String Node_get_name(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_name");
    }
SWIGINTERN void Node_add_child__SWIG_0(Node *self,Node *node,bool legible_unique_name=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_child", node, legible_unique_name);
    }
SWIGINTERN void Node_remove_child(Node *self,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_child", node);
    }
SWIGINTERN int Node_get_child_count(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_child_count");
    }
SWIGINTERN Array Node_get_children(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_children");
    }
SWIGINTERN Node *Node_get_child(Node *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_child", idx).operator Object *()->cast_to<Node>();
    }
SWIGINTERN bool Node_has_node(Node *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_node", path);
    }
SWIGINTERN Node *Node_get_node(Node *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node", path).operator Object *()->cast_to<Node>();
    }
SWIGINTERN Node *Node_get_parent(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_parent").operator Object *()->cast_to<Node>();
    }
SWIGINTERN Node *Node_find_node__SWIG_0(Node *self,String const &mask,bool recursive=true,bool owned=true){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_node", mask, recursive, owned).operator Object *()->cast_to<Node>();
    }
SWIGINTERN bool Node_has_node_and_resource(Node *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_node_and_resource", path);
    }
SWIGINTERN Array Node_get_node_and_resource(Node *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_and_resource", path);
    }
SWIGINTERN bool Node_is_inside_tree(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_inside_tree");
    }
SWIGINTERN bool Node_is_a_parent_of(Node *self,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_a_parent_of", node);
    }
SWIGINTERN bool Node_is_greater_than(Node *self,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_greater_than", node);
    }
SWIGINTERN NodePath Node_get_path(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_path");
    }
SWIGINTERN NodePath Node_get_path_to(Node *self,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_path_to", node);
    }
SWIGINTERN void Node_add_to_group__SWIG_0(Node *self,String const &group,bool persistent=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_to_group", group, persistent);
    }
SWIGINTERN void Node_remove_from_group(Node *self,String const &group){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_from_group", group);
    }
SWIGINTERN bool Node_is_in_group(Node *self,String const &group){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_in_group", group);
    }
SWIGINTERN void Node_move_child(Node *self,Node *child_node,int to_pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("move_child", child_node, to_pos);
    }
SWIGINTERN Array Node_get_groups(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_groups");
    }
SWIGINTERN void Node_raise(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("raise");
    }
SWIGINTERN void Node_set_owner(Node *self,Node *owner){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_owner", owner);
    }
SWIGINTERN Node *Node_get_owner(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_owner").operator Object *()->cast_to<Node>();
    }
SWIGINTERN void Node_remove_and_skip(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_and_skip");
    }
SWIGINTERN int Node_get_index(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_index");
    }
SWIGINTERN void Node_print_tree(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("print_tree");
    }
SWIGINTERN void Node_set_filename(Node *self,String const &filename){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_filename", filename);
    }
SWIGINTERN String Node_get_filename(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_filename");
    }
SWIGINTERN void Node_propagate_notification(Node *self,int what){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("propagate_notification", what);
    }
SWIGINTERN void Node_set_fixed_process(Node *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fixed_process", enable);
    }
SWIGINTERN float Node_get_fixed_process_delta_time(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fixed_process_delta_time");
    }
SWIGINTERN bool Node_is_fixed_processing(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_fixed_processing");
    }
SWIGINTERN void Node_set_process(Node *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_process", enable);
    }
SWIGINTERN float Node_get_process_delta_time(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_process_delta_time");
    }
SWIGINTERN bool Node_is_processing(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_processing");
    }
SWIGINTERN void Node_set_process_input(Node *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_process_input", enable);
    }
SWIGINTERN bool Node_is_processing_input(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_processing_input");
    }
SWIGINTERN void Node_set_process_unhandled_input(Node *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_process_unhandled_input", enable);
    }
SWIGINTERN bool Node_is_processing_unhandled_input(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_processing_unhandled_input");
    }
SWIGINTERN void Node_set_process_unhandled_key_input(Node *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_process_unhandled_key_input", enable);
    }
SWIGINTERN bool Node_is_processing_unhandled_key_input(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_processing_unhandled_key_input");
    }
SWIGINTERN void Node_set_pause_mode(Node *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pause_mode", mode);
    }
SWIGINTERN int Node_get_pause_mode(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pause_mode");
    }
SWIGINTERN bool Node_can_process(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_process");
    }
SWIGINTERN void Node_print_stray_nodes(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("print_stray_nodes");
    }
SWIGINTERN int Node_get_position_in_parent(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_position_in_parent");
    }
SWIGINTERN SceneTree *Node_get_tree(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tree").operator Object *()->cast_to<SceneTree>();
    }
SWIGINTERN Node *Node_duplicate__SWIG_0(Node *self,bool use_instancing=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("duplicate", use_instancing).operator Object *()->cast_to<Node>();
    }
SWIGINTERN void Node_replace_by__SWIG_0(Node *self,Node *node,bool keep_data=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("replace_by", node, keep_data);
    }
SWIGINTERN void Node_set_scene_instance_load_placeholder(Node *self,bool load_placeholder){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scene_instance_load_placeholder", load_placeholder);
    }
SWIGINTERN bool Node_get_scene_instance_load_placeholder(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scene_instance_load_placeholder");
    }
SWIGINTERN Object *Node_get_viewport(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_viewport").operator Object *();
    }
SWIGINTERN void Node_queue_free(Node *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("queue_free");
    }
SWIGINTERN void OccluderPolygon2D_set_closed(OccluderPolygon2D *self,bool closed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_closed", closed);
    }
SWIGINTERN bool OccluderPolygon2D_is_closed(OccluderPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_closed");
    }
SWIGINTERN void OccluderPolygon2D_set_cull_mode(OccluderPolygon2D *self,int cull_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cull_mode", cull_mode);
    }
SWIGINTERN int OccluderPolygon2D_get_cull_mode(OccluderPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cull_mode");
    }
SWIGINTERN void OccluderPolygon2D_set_polygon(OccluderPolygon2D *self,Vector2Array const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polygon", polygon);
    }
SWIGINTERN Vector2Array OccluderPolygon2D_get_polygon(OccluderPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon");
    }
SWIGINTERN int PCKPacker_pck_start(PCKPacker *self,String const &pck_name,int alignment){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pck_start", pck_name, alignment);
    }
SWIGINTERN int PCKPacker_add_file(PCKPacker *self,String const &pck_path,String const &source_path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("add_file", pck_path, source_path);
    }
SWIGINTERN int PCKPacker_flush(PCKPacker *self,bool verbose){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("flush", verbose);
    }
SWIGINTERN void PHashTranslation_generate(PHashTranslation *self,Ref< Translation > from){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("generate", from);
    }
SWIGINTERN int PackedDataContainer_pack(PackedDataContainer *self,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pack", value);
    }
SWIGINTERN int PackedDataContainer_size(PackedDataContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("size");
    }
SWIGINTERN int PackedDataContainerRef_size(PackedDataContainerRef *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("size");
    }
SWIGINTERN int PackedScene_pack(PackedScene *self,Node *path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("pack", path);
    }
SWIGINTERN Node *PackedScene_instance__SWIG_0(PackedScene *self,bool gen_edit_state=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("instance", gen_edit_state).operator Object *()->cast_to<Node>();
    }
SWIGINTERN bool PackedScene_can_instance(PackedScene *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_instance");
    }
SWIGINTERN Ref< SceneState > PackedScene_get_state(PackedScene *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_state").operator Object *()->cast_to<SceneState>();
    }
SWIGINTERN void PacketPeer_get_var(PacketPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_var");
    }
SWIGINTERN int PacketPeer_put_var(PacketPeer *self,Variant const &var){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("put_var", var);
    }
SWIGINTERN RawArray PacketPeer_get_packet(PacketPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_packet");
    }
SWIGINTERN int PacketPeer_put_packet(PacketPeer *self,RawArray const &buffer){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("put_packet", buffer);
    }
SWIGINTERN int PacketPeer_get_packet_error(PacketPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_packet_error");
    }
SWIGINTERN int PacketPeer_get_available_packet_count(PacketPeer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_available_packet_count");
    }
SWIGINTERN void PacketPeerStream_set_stream_peer(PacketPeerStream *self,Ref< StreamPeer > peer){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stream_peer", peer);
    }
SWIGINTERN int PacketPeerUDP_listen__SWIG_0(PacketPeerUDP *self,int port,int recv_buf_size=65536){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("listen", port, recv_buf_size);
    }
SWIGINTERN void PacketPeerUDP_close(PacketPeerUDP *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("close");
    }
SWIGINTERN int PacketPeerUDP_wait(PacketPeerUDP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("wait");
    }
SWIGINTERN bool PacketPeerUDP_is_listening(PacketPeerUDP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_listening");
    }
SWIGINTERN String PacketPeerUDP_get_packet_ip(PacketPeerUDP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_packet_ip");
    }
SWIGINTERN int PacketPeerUDP_get_packet_address(PacketPeerUDP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_packet_address");
    }
SWIGINTERN int PacketPeerUDP_get_packet_port(PacketPeerUDP *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_packet_port");
    }
SWIGINTERN int PacketPeerUDP_set_send_address(PacketPeerUDP *self,String const &host,int port){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("set_send_address", host, port);
    }
SWIGINTERN PacketPeerUDP *new_PacketPeerUDP(){ return PacketPeerUDP::create(); }
SWIGINTERN void Physics2DShapeQueryParameters_set_shape(Physics2DShapeQueryParameters *self,Ref< Shape2D > shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", shape);
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_shape_rid(Physics2DShapeQueryParameters *self,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape_rid", shape);
    }
SWIGINTERN RID Physics2DShapeQueryParameters_get_shape_rid(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape_rid");
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_transform(Physics2DShapeQueryParameters *self,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", transform);
    }
SWIGINTERN Matrix32 Physics2DShapeQueryParameters_get_transform(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_motion(Physics2DShapeQueryParameters *self,Vector2 const &motion){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_motion", motion);
    }
SWIGINTERN Vector2 Physics2DShapeQueryParameters_get_motion(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_motion");
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_margin(Physics2DShapeQueryParameters *self,float margin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_margin", margin);
    }
SWIGINTERN float Physics2DShapeQueryParameters_get_margin(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_margin");
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_layer_mask(Physics2DShapeQueryParameters *self,int layer_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", layer_mask);
    }
SWIGINTERN int Physics2DShapeQueryParameters_get_layer_mask(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_object_type_mask(Physics2DShapeQueryParameters *self,int object_type_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_object_type_mask", object_type_mask);
    }
SWIGINTERN int Physics2DShapeQueryParameters_get_object_type_mask(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_object_type_mask");
    }
SWIGINTERN void Physics2DShapeQueryParameters_set_exclude(Physics2DShapeQueryParameters *self,Array const &exclude){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_exclude", exclude);
    }
SWIGINTERN Array Physics2DShapeQueryParameters_get_exclude(Physics2DShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_exclude");
    }
SWIGINTERN int Physics2DShapeQueryResult_get_result_count(Physics2DShapeQueryResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_count");
    }
SWIGINTERN RID Physics2DShapeQueryResult_get_result_rid(Physics2DShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_rid", idx);
    }
SWIGINTERN int Physics2DShapeQueryResult_get_result_object_id(Physics2DShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_object_id", idx);
    }
SWIGINTERN Object *Physics2DShapeQueryResult_get_result_object(Physics2DShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_object", idx).operator Object *();
    }
SWIGINTERN int Physics2DShapeQueryResult_get_result_object_shape(Physics2DShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_object_shape", idx);
    }
SWIGINTERN Vector2 Physics2DTestMotionResult_get_motion(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_motion");
    }
SWIGINTERN Vector2 Physics2DTestMotionResult_get_motion_remainder(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_motion_remainder");
    }
SWIGINTERN Vector2 Physics2DTestMotionResult_get_collision_point(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_point");
    }
SWIGINTERN Vector2 Physics2DTestMotionResult_get_collision_normal(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_normal");
    }
SWIGINTERN Vector2 Physics2DTestMotionResult_get_collider_velocity(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_velocity");
    }
SWIGINTERN int Physics2DTestMotionResult_get_collider_id(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_id");
    }
SWIGINTERN RID Physics2DTestMotionResult_get_collider_rid(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_rid");
    }
SWIGINTERN Object *Physics2DTestMotionResult_get_collider(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider").operator Object *();
    }
SWIGINTERN int Physics2DTestMotionResult_get_collider_shape(Physics2DTestMotionResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_shape");
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_shape(PhysicsShapeQueryParameters *self,Ref< Shape > shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", shape);
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_shape_rid(PhysicsShapeQueryParameters *self,RID const &shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape_rid", shape);
    }
SWIGINTERN RID PhysicsShapeQueryParameters_get_shape_rid(PhysicsShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape_rid");
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_transform(PhysicsShapeQueryParameters *self,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", transform);
    }
SWIGINTERN Transform PhysicsShapeQueryParameters_get_transform(PhysicsShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_margin(PhysicsShapeQueryParameters *self,float margin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_margin", margin);
    }
SWIGINTERN float PhysicsShapeQueryParameters_get_margin(PhysicsShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_margin");
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_layer_mask(PhysicsShapeQueryParameters *self,int layer_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", layer_mask);
    }
SWIGINTERN int PhysicsShapeQueryParameters_get_layer_mask(PhysicsShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_object_type_mask(PhysicsShapeQueryParameters *self,int object_type_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_object_type_mask", object_type_mask);
    }
SWIGINTERN int PhysicsShapeQueryParameters_get_object_type_mask(PhysicsShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_object_type_mask");
    }
SWIGINTERN void PhysicsShapeQueryParameters_set_exclude(PhysicsShapeQueryParameters *self,Array const &exclude){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_exclude", exclude);
    }
SWIGINTERN Array PhysicsShapeQueryParameters_get_exclude(PhysicsShapeQueryParameters *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_exclude");
    }
SWIGINTERN int PhysicsShapeQueryResult_get_result_count(PhysicsShapeQueryResult *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_count");
    }
SWIGINTERN RID PhysicsShapeQueryResult_get_result_rid(PhysicsShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_rid", idx);
    }
SWIGINTERN int PhysicsShapeQueryResult_get_result_object_id(PhysicsShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_object_id", idx);
    }
SWIGINTERN Object *PhysicsShapeQueryResult_get_result_object(PhysicsShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_object", idx).operator Object *();
    }
SWIGINTERN int PhysicsShapeQueryResult_get_result_object_shape(PhysicsShapeQueryResult *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_result_object_shape", idx);
    }
SWIGINTERN void PlaneShape_set_plane(PlaneShape *self,Plane const &plane){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_plane", plane);
    }
SWIGINTERN Plane PlaneShape_get_plane(PlaneShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_plane");
    }
SWIGINTERN void PolygonPathFinder_setup(PolygonPathFinder *self,Vector2Array const &points,IntArray const &connections){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("setup", points, connections);
    }
SWIGINTERN Vector2Array PolygonPathFinder_find_path(PolygonPathFinder *self,Vector2 const &from,Vector2 const &to){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_path", from, to);
    }
SWIGINTERN Vector2Array PolygonPathFinder_get_intersections(PolygonPathFinder *self,Vector2 const &from,Vector2 const &to){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_intersections", from, to);
    }
SWIGINTERN Vector2 PolygonPathFinder_get_closest_point(PolygonPathFinder *self,Vector2 const &point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point", point);
    }
SWIGINTERN bool PolygonPathFinder_is_point_inside(PolygonPathFinder *self,Vector2 const &point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_point_inside", point);
    }
SWIGINTERN void PolygonPathFinder_set_point_penalty(PolygonPathFinder *self,int idx,float penalty){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_penalty", idx, penalty);
    }
SWIGINTERN float PolygonPathFinder_get_point_penalty(PolygonPathFinder *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_penalty", idx);
    }
SWIGINTERN Rect2 PolygonPathFinder_get_bounds(PolygonPathFinder *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounds");
    }
SWIGINTERN void RayShape_set_length(RayShape *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_length", length);
    }
SWIGINTERN float RayShape_get_length(RayShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void RayShape2D_set_length(RayShape2D *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_length", length);
    }
SWIGINTERN float RayShape2D_get_length(RayShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void RectangleShape2D_set_extents(RectangleShape2D *self,Vector2 const &extents){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_extents", extents);
    }
SWIGINTERN Vector2 RectangleShape2D_get_extents(RectangleShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_extents");
    }
SWIGINTERN void ResourcePreloader_add_resource(ResourcePreloader *self,String const &name,Object *resource){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_resource", name, resource);
    }
SWIGINTERN void ResourcePreloader_remove_resource(ResourcePreloader *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_resource", name);
    }
SWIGINTERN void ResourcePreloader_rename_resource(ResourcePreloader *self,String const &name,String const &newname){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rename_resource", name, newname);
    }
SWIGINTERN bool ResourcePreloader_has_resource(ResourcePreloader *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_resource", name);
    }
SWIGINTERN Object *ResourcePreloader_get_resource(ResourcePreloader *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_resource", name).operator Object *();
    }
SWIGINTERN StringArray ResourcePreloader_get_resource_list(ResourcePreloader *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_resource_list");
    }
SWIGINTERN void SamplePlayer_set_sample_library(SamplePlayer *self,Ref< SampleLibrary > library){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sample_library", library);
    }
SWIGINTERN Ref< SampleLibrary > SamplePlayer_get_sample_library(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sample_library").operator Object *()->cast_to<SampleLibrary>();
    }
SWIGINTERN void SamplePlayer_set_polyphony(SamplePlayer *self,int max_voices){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polyphony", max_voices);
    }
SWIGINTERN int SamplePlayer_get_polyphony(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polyphony");
    }
SWIGINTERN int SamplePlayer_play__SWIG_0(SamplePlayer *self,String const &name,bool unique=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("play", name, unique);
    }
SWIGINTERN void SamplePlayer_stop(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop", voice);
    }
SWIGINTERN void SamplePlayer_stop_all(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop_all");
    }
SWIGINTERN void SamplePlayer_set_mix_rate(SamplePlayer *self,int voice,int hz){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mix_rate", voice, hz);
    }
SWIGINTERN void SamplePlayer_set_pitch_scale(SamplePlayer *self,int voice,float ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pitch_scale", voice, ratio);
    }
SWIGINTERN void SamplePlayer_set_volume(SamplePlayer *self,int voice,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume", voice, volume);
    }
SWIGINTERN void SamplePlayer_set_volume_db(SamplePlayer *self,int voice,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume_db", voice, db);
    }
SWIGINTERN void SamplePlayer_set_pan__SWIG_0(SamplePlayer *self,int voice,float pan,float depth=0,float height=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pan", voice, pan, depth, height);
    }
SWIGINTERN void SamplePlayer_set_filter__SWIG_0(SamplePlayer *self,int voice,int type,float cutoff_hz,float resonance,float gain=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_filter", voice, type, cutoff_hz, resonance, gain);
    }
SWIGINTERN void SamplePlayer_set_chorus(SamplePlayer *self,int voice,float send){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_chorus", voice, send);
    }
SWIGINTERN void SamplePlayer_set_reverb(SamplePlayer *self,int voice,int room_type,float send){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_reverb", voice, room_type, send);
    }
SWIGINTERN int SamplePlayer_get_mix_rate(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mix_rate", voice);
    }
SWIGINTERN float SamplePlayer_get_pitch_scale(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pitch_scale", voice);
    }
SWIGINTERN float SamplePlayer_get_volume(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume", voice);
    }
SWIGINTERN float SamplePlayer_get_volume_db(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume_db", voice);
    }
SWIGINTERN float SamplePlayer_get_pan(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pan", voice);
    }
SWIGINTERN float SamplePlayer_get_pan_depth(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pan_depth", voice);
    }
SWIGINTERN float SamplePlayer_get_pan_height(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pan_height", voice);
    }
SWIGINTERN int SamplePlayer_get_filter_type(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_filter_type", voice);
    }
SWIGINTERN float SamplePlayer_get_filter_cutoff(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_filter_cutoff", voice);
    }
SWIGINTERN float SamplePlayer_get_filter_resonance(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_filter_resonance", voice);
    }
SWIGINTERN float SamplePlayer_get_filter_gain(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_filter_gain", voice);
    }
SWIGINTERN float SamplePlayer_get_chorus(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_chorus", voice);
    }
SWIGINTERN int SamplePlayer_get_reverb_room(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_reverb_room", voice);
    }
SWIGINTERN float SamplePlayer_get_reverb(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_reverb", voice);
    }
SWIGINTERN void SamplePlayer_set_default_pitch_scale(SamplePlayer *self,float ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_pitch_scale", ratio);
    }
SWIGINTERN void SamplePlayer_set_default_volume(SamplePlayer *self,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_volume", volume);
    }
SWIGINTERN void SamplePlayer_set_default_volume_db(SamplePlayer *self,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_volume_db", db);
    }
SWIGINTERN void SamplePlayer_set_default_pan__SWIG_0(SamplePlayer *self,float pan,float depth=0,float height=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_pan", pan, depth, height);
    }
SWIGINTERN void SamplePlayer_set_default_filter__SWIG_0(SamplePlayer *self,int type,float cutoff_hz,float resonance,float gain=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_filter", type, cutoff_hz, resonance, gain);
    }
SWIGINTERN void SamplePlayer_set_default_chorus(SamplePlayer *self,float send){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_chorus", send);
    }
SWIGINTERN void SamplePlayer_set_default_reverb(SamplePlayer *self,int room_type,float send){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_reverb", room_type, send);
    }
SWIGINTERN float SamplePlayer_get_default_pitch_scale(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_pitch_scale");
    }
SWIGINTERN float SamplePlayer_get_default_volume(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_volume");
    }
SWIGINTERN float SamplePlayer_get_default_volume_db(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_volume_db");
    }
SWIGINTERN float SamplePlayer_get_default_pan(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_pan");
    }
SWIGINTERN float SamplePlayer_get_default_pan_depth(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_pan_depth");
    }
SWIGINTERN float SamplePlayer_get_default_pan_height(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_pan_height");
    }
SWIGINTERN int SamplePlayer_get_default_filter_type(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_filter_type");
    }
SWIGINTERN float SamplePlayer_get_default_filter_cutoff(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_filter_cutoff");
    }
SWIGINTERN float SamplePlayer_get_default_filter_resonance(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_filter_resonance");
    }
SWIGINTERN float SamplePlayer_get_default_filter_gain(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_filter_gain");
    }
SWIGINTERN float SamplePlayer_get_default_chorus(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_chorus");
    }
SWIGINTERN int SamplePlayer_get_default_reverb_room(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_reverb_room");
    }
SWIGINTERN float SamplePlayer_get_default_reverb(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_reverb");
    }
SWIGINTERN bool SamplePlayer_is_active(SamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_active");
    }
SWIGINTERN bool SamplePlayer_is_voice_active(SamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_voice_active", voice);
    }
SWIGINTERN void SceneTree_notify_group(SceneTree *self,int call_flags,String const &group,int notification){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("notify_group", call_flags, group, notification);
    }
SWIGINTERN void SceneTree_set_group(SceneTree *self,int call_flags,String const &group,String const &property,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_group", call_flags, group, property, value);
    }
SWIGINTERN Array SceneTree_get_nodes_in_group(SceneTree *self,String const &group){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_nodes_in_group", group);
    }
SWIGINTERN Viewport *SceneTree_get_root(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_root").operator Object *()->cast_to<Viewport>();
    }
SWIGINTERN bool SceneTree_has_group(SceneTree *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_group", name);
    }
SWIGINTERN void SceneTree_set_auto_accept_quit(SceneTree *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_auto_accept_quit", enabled);
    }
SWIGINTERN void SceneTree_set_editor_hint(SceneTree *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_editor_hint", enable);
    }
SWIGINTERN bool SceneTree_is_editor_hint(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editor_hint");
    }
SWIGINTERN void SceneTree_set_debug_collisions_hint(SceneTree *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_debug_collisions_hint", enable);
    }
SWIGINTERN bool SceneTree_is_debugging_collisions_hint(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_debugging_collisions_hint");
    }
SWIGINTERN void SceneTree_set_debug_navigation_hint(SceneTree *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_debug_navigation_hint", enable);
    }
SWIGINTERN bool SceneTree_is_debugging_navigation_hint(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_debugging_navigation_hint");
    }
SWIGINTERN void SceneTree_set_edited_scene_root(SceneTree *self,Object *scene){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_edited_scene_root", scene);
    }
SWIGINTERN Object *SceneTree_get_edited_scene_root(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edited_scene_root").operator Object *();
    }
SWIGINTERN void SceneTree_set_pause(SceneTree *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pause", enable);
    }
SWIGINTERN bool SceneTree_is_paused(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_paused");
    }
SWIGINTERN void SceneTree_set_input_as_handled(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_input_as_handled");
    }
SWIGINTERN int SceneTree_get_node_count(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_count");
    }
SWIGINTERN int SceneTree_get_frame(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame");
    }
SWIGINTERN void SceneTree_quit(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("quit");
    }
SWIGINTERN void SceneTree_set_screen_stretch(SceneTree *self,int mode,int aspect,Vector2 const &minsize){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_screen_stretch", mode, aspect, minsize);
    }
SWIGINTERN void SceneTree_queue_delete(SceneTree *self,Object *obj){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("queue_delete", obj);
    }
SWIGINTERN void SceneTree_call_group__SWIG_0(SceneTree *self,int flags,String const &group,String const &method,Variant const &arg0_=Variant(),Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(flags);
Variant arg_1_ = Variant(group);
Variant arg_2_ = Variant(method);
Variant arg_3_ = Variant(arg0_);
Variant arg_4_ = Variant(arg1_);
Variant arg_5_ = Variant(arg2_);
Variant arg_6_ = Variant(arg3_);
Variant arg_7_ = Variant(arg4_);
Variant *args_[8] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_ };
self->call("call_group", (const Variant **) args_, 8, err);
    }
SWIGINTERN void SceneTree_set_current_scene(SceneTree *self,Node *child_node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_scene", child_node);
    }
SWIGINTERN Node *SceneTree_get_current_scene(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_scene").operator Object *()->cast_to<Node>();
    }
SWIGINTERN int SceneTree_change_scene(SceneTree *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("change_scene", path);
    }
SWIGINTERN int SceneTree_change_scene_to(SceneTree *self,Ref< PackedScene > packed_scene){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("change_scene_to", packed_scene);
    }
SWIGINTERN int SceneTree_reload_current_scene(SceneTree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("reload_current_scene");
    }
SWIGINTERN void SegmentShape2D_set_a(SegmentShape2D *self,Vector2 const &a){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_a", a);
    }
SWIGINTERN Vector2 SegmentShape2D_get_a(SegmentShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_a");
    }
SWIGINTERN void SegmentShape2D_set_b(SegmentShape2D *self,Vector2 const &b){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_b", b);
    }
SWIGINTERN Vector2 SegmentShape2D_get_b(SegmentShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_b");
    }
SWIGINTERN void ShaderMaterial_set_shader(ShaderMaterial *self,Ref< Shader > shader){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shader", shader);
    }
SWIGINTERN Ref< Shader > ShaderMaterial_get_shader(ShaderMaterial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shader").operator Object *()->cast_to<Shader>();
    }
SWIGINTERN void ShaderMaterial_set_shader_param(ShaderMaterial *self,String const &param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shader_param", param, value);
    }
SWIGINTERN Variant ShaderMaterial_get_shader_param(ShaderMaterial *self,String const &param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shader_param", param);
    }
SWIGINTERN void SoundRoomParams_set_param(SoundRoomParams *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float SoundRoomParams_get_param(SoundRoomParams *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void SoundRoomParams_set_reverb_mode(SoundRoomParams *self,int reverb_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_reverb_mode", reverb_mode);
    }
SWIGINTERN int SoundRoomParams_get_reverb_mode(SoundRoomParams *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_reverb_mode");
    }
SWIGINTERN void SoundRoomParams_set_force_params_to_all_sources(SoundRoomParams *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_force_params_to_all_sources", enabled);
    }
SWIGINTERN bool SoundRoomParams_is_forcing_params_to_all_sources(SoundRoomParams *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_forcing_params_to_all_sources");
    }
SWIGINTERN void Spatial_set_transform(Spatial *self,Transform const &local){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", local);
    }
SWIGINTERN Transform Spatial_get_transform(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN void Spatial_set_translation(Spatial *self,Vector3 const &translation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_translation", translation);
    }
SWIGINTERN Vector3 Spatial_get_translation(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_translation");
    }
SWIGINTERN void Spatial_set_rotation(Spatial *self,Vector3 const &rotation_rad){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotation", rotation_rad);
    }
SWIGINTERN Vector3 Spatial_get_rotation(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotation");
    }
SWIGINTERN void Spatial_set_rotation_deg(Spatial *self,Vector3 const &rotation_deg){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotation_deg", rotation_deg);
    }
SWIGINTERN Vector3 Spatial_get_rotation_deg(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotation_deg");
    }
SWIGINTERN void Spatial_set_scale(Spatial *self,Vector3 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scale", scale);
    }
SWIGINTERN Vector3 Spatial_get_scale(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scale");
    }
SWIGINTERN void Spatial_set_global_transform(Spatial *self,Transform const &global){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_global_transform", global);
    }
SWIGINTERN Transform Spatial_get_global_transform(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_transform");
    }
SWIGINTERN Object *Spatial_get_parent_spatial(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_parent_spatial").operator Object *();
    }
SWIGINTERN void Spatial_set_ignore_transform_notification(Spatial *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ignore_transform_notification", enabled);
    }
SWIGINTERN void Spatial_set_as_toplevel(Spatial *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_as_toplevel", enable);
    }
SWIGINTERN bool Spatial_is_set_as_toplevel(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_set_as_toplevel");
    }
SWIGINTERN Ref< World > Spatial_get_world(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_world").operator Object *()->cast_to<World>();
    }
SWIGINTERN void Spatial_update_gizmo(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("update_gizmo");
    }
SWIGINTERN void Spatial_set_gizmo(Spatial *self,Ref< SpatialGizmo > gizmo){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gizmo", gizmo);
    }
SWIGINTERN Ref< SpatialGizmo > Spatial_get_gizmo(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gizmo").operator Object *()->cast_to<SpatialGizmo>();
    }
SWIGINTERN void Spatial_show(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("show");
    }
SWIGINTERN void Spatial_hide(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("hide");
    }
SWIGINTERN bool Spatial_is_visible(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_visible");
    }
SWIGINTERN bool Spatial_is_hidden(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_hidden");
    }
SWIGINTERN void Spatial_set_hidden(Spatial *self,bool hidden){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hidden", hidden);
    }
SWIGINTERN void Spatial_set_notify_local_transform(Spatial *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_notify_local_transform", enable);
    }
SWIGINTERN bool Spatial_is_local_transform_notification_enabled(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_local_transform_notification_enabled");
    }
SWIGINTERN void Spatial_rotate(Spatial *self,Vector3 const &normal,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rotate", normal, radians);
    }
SWIGINTERN void Spatial_global_rotate(Spatial *self,Vector3 const &normal,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("global_rotate", normal, radians);
    }
SWIGINTERN void Spatial_rotate_x(Spatial *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rotate_x", radians);
    }
SWIGINTERN void Spatial_rotate_y(Spatial *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rotate_y", radians);
    }
SWIGINTERN void Spatial_rotate_z(Spatial *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rotate_z", radians);
    }
SWIGINTERN void Spatial_translate(Spatial *self,Vector3 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("translate", offset);
    }
SWIGINTERN void Spatial_global_translate(Spatial *self,Vector3 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("global_translate", offset);
    }
SWIGINTERN void Spatial_orthonormalize(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("orthonormalize");
    }
SWIGINTERN void Spatial_set_identity(Spatial *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_identity");
    }
SWIGINTERN void Spatial_look_at(Spatial *self,Vector3 const &target,Vector3 const &up){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("look_at", target, up);
    }
SWIGINTERN void Spatial_look_at_from_pos(Spatial *self,Vector3 const &pos,Vector3 const &target,Vector3 const &up){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("look_at_from_pos", pos, target, up);
    }
SWIGINTERN void SpatialPlayer_set_param(SpatialPlayer *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float SpatialPlayer_get_param(SpatialPlayer *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void SpatialSamplePlayer_set_sample_library(SpatialSamplePlayer *self,Ref< SampleLibrary > library){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sample_library", library);
    }
SWIGINTERN Ref< SampleLibrary > SpatialSamplePlayer_get_sample_library(SpatialSamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sample_library").operator Object *()->cast_to<SampleLibrary>();
    }
SWIGINTERN void SpatialSamplePlayer_set_polyphony(SpatialSamplePlayer *self,int voices){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polyphony", voices);
    }
SWIGINTERN int SpatialSamplePlayer_get_polyphony(SpatialSamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polyphony");
    }
SWIGINTERN int SpatialSamplePlayer_play__SWIG_0(SpatialSamplePlayer *self,String const &sample,int voice=-2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("play", sample, voice);
    }
SWIGINTERN void SpatialSamplePlayer_voice_set_pitch_scale(SpatialSamplePlayer *self,int voice,float ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_pitch_scale", voice, ratio);
    }
SWIGINTERN void SpatialSamplePlayer_voice_set_volume_scale_db(SpatialSamplePlayer *self,int voice,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_volume_scale_db", voice, db);
    }
SWIGINTERN bool SpatialSamplePlayer_is_voice_active(SpatialSamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_voice_active", voice);
    }
SWIGINTERN void SpatialSamplePlayer_stop_voice(SpatialSamplePlayer *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop_voice", voice);
    }
SWIGINTERN void SpatialSamplePlayer_stop_all(SpatialSamplePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop_all");
    }
SWIGINTERN void SpatialStreamPlayer_set_stream(SpatialStreamPlayer *self,Ref< AudioStream > stream){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stream", stream);
    }
SWIGINTERN Ref< AudioStream > SpatialStreamPlayer_get_stream(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream").operator Object *()->cast_to<AudioStream>();
    }
SWIGINTERN void SpatialStreamPlayer_play__SWIG_0(SpatialStreamPlayer *self,float offset=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play", offset);
    }
SWIGINTERN void SpatialStreamPlayer_stop(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN bool SpatialStreamPlayer_is_playing(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void SpatialStreamPlayer_set_paused(SpatialStreamPlayer *self,bool paused){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_paused", paused);
    }
SWIGINTERN bool SpatialStreamPlayer_is_paused(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_paused");
    }
SWIGINTERN void SpatialStreamPlayer_set_loop(SpatialStreamPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", enabled);
    }
SWIGINTERN bool SpatialStreamPlayer_has_loop(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN void SpatialStreamPlayer_set_volume(SpatialStreamPlayer *self,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume", volume);
    }
SWIGINTERN float SpatialStreamPlayer_get_volume(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume");
    }
SWIGINTERN void SpatialStreamPlayer_set_volume_db(SpatialStreamPlayer *self,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume_db", db);
    }
SWIGINTERN float SpatialStreamPlayer_get_volume_db(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume_db");
    }
SWIGINTERN void SpatialStreamPlayer_set_buffering_msec(SpatialStreamPlayer *self,int msec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_buffering_msec", msec);
    }
SWIGINTERN int SpatialStreamPlayer_get_buffering_msec(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_buffering_msec");
    }
SWIGINTERN void SpatialStreamPlayer_set_loop_restart_time(SpatialStreamPlayer *self,float secs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop_restart_time", secs);
    }
SWIGINTERN float SpatialStreamPlayer_get_loop_restart_time(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_restart_time");
    }
SWIGINTERN String SpatialStreamPlayer_get_stream_name(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream_name");
    }
SWIGINTERN int SpatialStreamPlayer_get_loop_count(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_count");
    }
SWIGINTERN float SpatialStreamPlayer_get_pos(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN void SpatialStreamPlayer_seek_pos(SpatialStreamPlayer *self,float time){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek_pos", time);
    }
SWIGINTERN void SpatialStreamPlayer_set_autoplay(SpatialStreamPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autoplay", enabled);
    }
SWIGINTERN bool SpatialStreamPlayer_has_autoplay(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_autoplay");
    }
SWIGINTERN float SpatialStreamPlayer_get_length(SpatialStreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void StreamPlayer_set_stream(StreamPlayer *self,Ref< AudioStream > stream){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stream", stream);
    }
SWIGINTERN Ref< AudioStream > StreamPlayer_get_stream(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream").operator Object *()->cast_to<AudioStream>();
    }
SWIGINTERN void StreamPlayer_play__SWIG_0(StreamPlayer *self,float offset=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play", offset);
    }
SWIGINTERN void StreamPlayer_stop(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN bool StreamPlayer_is_playing(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void StreamPlayer_set_paused(StreamPlayer *self,bool paused){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_paused", paused);
    }
SWIGINTERN bool StreamPlayer_is_paused(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_paused");
    }
SWIGINTERN void StreamPlayer_set_loop(StreamPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", enabled);
    }
SWIGINTERN bool StreamPlayer_has_loop(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN void StreamPlayer_set_volume(StreamPlayer *self,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume", volume);
    }
SWIGINTERN float StreamPlayer_get_volume(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume");
    }
SWIGINTERN void StreamPlayer_set_volume_db(StreamPlayer *self,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume_db", db);
    }
SWIGINTERN float StreamPlayer_get_volume_db(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume_db");
    }
SWIGINTERN void StreamPlayer_set_buffering_msec(StreamPlayer *self,int msec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_buffering_msec", msec);
    }
SWIGINTERN int StreamPlayer_get_buffering_msec(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_buffering_msec");
    }
SWIGINTERN void StreamPlayer_set_loop_restart_time(StreamPlayer *self,float secs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop_restart_time", secs);
    }
SWIGINTERN float StreamPlayer_get_loop_restart_time(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_restart_time");
    }
SWIGINTERN String StreamPlayer_get_stream_name(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream_name");
    }
SWIGINTERN int StreamPlayer_get_loop_count(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_count");
    }
SWIGINTERN float StreamPlayer_get_pos(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN void StreamPlayer_seek_pos(StreamPlayer *self,float time){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek_pos", time);
    }
SWIGINTERN void StreamPlayer_set_autoplay(StreamPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autoplay", enabled);
    }
SWIGINTERN bool StreamPlayer_has_autoplay(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_autoplay");
    }
SWIGINTERN float StreamPlayer_get_length(StreamPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void Timer_set_wait_time(Timer *self,float time_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_wait_time", time_sec);
    }
SWIGINTERN float Timer_get_wait_time(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_wait_time");
    }
SWIGINTERN void Timer_set_one_shot(Timer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_one_shot", enable);
    }
SWIGINTERN bool Timer_is_one_shot(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_one_shot");
    }
SWIGINTERN void Timer_set_autostart(Timer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autostart", enable);
    }
SWIGINTERN bool Timer_has_autostart(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_autostart");
    }
SWIGINTERN void Timer_start(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("start");
    }
SWIGINTERN void Timer_stop(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN void Timer_set_active(Timer *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_active", active);
    }
SWIGINTERN bool Timer_is_active(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_active");
    }
SWIGINTERN float Timer_get_time_left(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_time_left");
    }
SWIGINTERN void Timer_set_timer_process_mode(Timer *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_timer_process_mode", mode);
    }
SWIGINTERN int Timer_get_timer_process_mode(Timer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_timer_process_mode");
    }
SWIGINTERN bool Tween_is_active(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_active");
    }
SWIGINTERN void Tween_set_active(Tween *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_active", active);
    }
SWIGINTERN bool Tween_is_repeat(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_repeat");
    }
SWIGINTERN void Tween_set_repeat(Tween *self,bool repeat){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_repeat", repeat);
    }
SWIGINTERN void Tween_set_speed(Tween *self,float speed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_speed", speed);
    }
SWIGINTERN float Tween_get_speed(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_speed");
    }
SWIGINTERN void Tween_set_tween_process_mode(Tween *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tween_process_mode", mode);
    }
SWIGINTERN int Tween_get_tween_process_mode(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tween_process_mode");
    }
SWIGINTERN bool Tween_start(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("start");
    }
SWIGINTERN bool Tween_reset(Tween *self,Object *object,String const &key){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("reset", object, key);
    }
SWIGINTERN bool Tween_reset_all(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("reset_all");
    }
SWIGINTERN bool Tween_stop(Tween *self,Object *object,String const &key){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("stop", object, key);
    }
SWIGINTERN bool Tween_stop_all(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("stop_all");
    }
SWIGINTERN bool Tween_resume(Tween *self,Object *object,String const &key){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("resume", object, key);
    }
SWIGINTERN bool Tween_resume_all(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("resume_all");
    }
SWIGINTERN bool Tween_remove(Tween *self,Object *object,String const &key){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("remove", object, key);
    }
SWIGINTERN bool Tween_remove_all(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("remove_all");
    }
SWIGINTERN bool Tween_seek(Tween *self,float time){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("seek", time);
    }
SWIGINTERN float Tween_tell(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("tell");
    }
SWIGINTERN float Tween_get_runtime(Tween *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_runtime");
    }
SWIGINTERN bool Tween_interpolate_property__SWIG_0(Tween *self,Object *object,String const &property,Variant const &initial_val,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(property);
Variant arg_2_ = Variant(initial_val);
Variant arg_3_ = Variant(final_val);
Variant arg_4_ = Variant(times_in_sec);
Variant arg_5_ = Variant(trans_type);
Variant arg_6_ = Variant(ease_type);
Variant arg_7_ = Variant(delay);
Variant *args_[8] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_ };
return self->call("interpolate_property", (const Variant **) args_, 8, err);
    }
SWIGINTERN bool Tween_interpolate_method__SWIG_0(Tween *self,Object *object,String const &method,Variant const &initial_val,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(method);
Variant arg_2_ = Variant(initial_val);
Variant arg_3_ = Variant(final_val);
Variant arg_4_ = Variant(times_in_sec);
Variant arg_5_ = Variant(trans_type);
Variant arg_6_ = Variant(ease_type);
Variant arg_7_ = Variant(delay);
Variant *args_[8] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_ };
return self->call("interpolate_method", (const Variant **) args_, 8, err);
    }
SWIGINTERN bool Tween_interpolate_callback__SWIG_0(Tween *self,Object *object,float times_in_sec,String const &callback,Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant(),Variant const &arg5_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(times_in_sec);
Variant arg_2_ = Variant(callback);
Variant arg_3_ = Variant(arg1_);
Variant arg_4_ = Variant(arg2_);
Variant arg_5_ = Variant(arg3_);
Variant arg_6_ = Variant(arg4_);
Variant arg_7_ = Variant(arg5_);
Variant *args_[8] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_ };
return self->call("interpolate_callback", (const Variant **) args_, 8, err);
    }
SWIGINTERN bool Tween_interpolate_deferred_callback__SWIG_0(Tween *self,Object *object,float times_in_sec,String const &callback,Variant const &arg1_=Variant(),Variant const &arg2_=Variant(),Variant const &arg3_=Variant(),Variant const &arg4_=Variant(),Variant const &arg5_=Variant()){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(times_in_sec);
Variant arg_2_ = Variant(callback);
Variant arg_3_ = Variant(arg1_);
Variant arg_4_ = Variant(arg2_);
Variant arg_5_ = Variant(arg3_);
Variant arg_6_ = Variant(arg4_);
Variant arg_7_ = Variant(arg5_);
Variant *args_[8] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_ };
return self->call("interpolate_deferred_callback", (const Variant **) args_, 8, err);
    }
SWIGINTERN bool Tween_follow_property__SWIG_0(Tween *self,Object *object,String const &property,Variant const &initial_val,Object *target,String const &target_property,float times_in_sec,int trans_type,int ease_type,float delay=0){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(property);
Variant arg_2_ = Variant(initial_val);
Variant arg_3_ = Variant(target);
Variant arg_4_ = Variant(target_property);
Variant arg_5_ = Variant(times_in_sec);
Variant arg_6_ = Variant(trans_type);
Variant arg_7_ = Variant(ease_type);
Variant arg_8_ = Variant(delay);
Variant *args_[9] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_, &arg_8_ };
return self->call("follow_property", (const Variant **) args_, 9, err);
    }
SWIGINTERN bool Tween_follow_method__SWIG_0(Tween *self,Object *object,String const &method,Variant const &initial_val,Object *target,String const &target_method,float times_in_sec,int trans_type,int ease_type,float delay=0){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(method);
Variant arg_2_ = Variant(initial_val);
Variant arg_3_ = Variant(target);
Variant arg_4_ = Variant(target_method);
Variant arg_5_ = Variant(times_in_sec);
Variant arg_6_ = Variant(trans_type);
Variant arg_7_ = Variant(ease_type);
Variant arg_8_ = Variant(delay);
Variant *args_[9] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_, &arg_8_ };
return self->call("follow_method", (const Variant **) args_, 9, err);
    }
SWIGINTERN bool Tween_targeting_property__SWIG_0(Tween *self,Object *object,String const &property,Object *initial,String const &initial_val,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(property);
Variant arg_2_ = Variant(initial);
Variant arg_3_ = Variant(initial_val);
Variant arg_4_ = Variant(final_val);
Variant arg_5_ = Variant(times_in_sec);
Variant arg_6_ = Variant(trans_type);
Variant arg_7_ = Variant(ease_type);
Variant arg_8_ = Variant(delay);
Variant *args_[9] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_, &arg_8_ };
return self->call("targeting_property", (const Variant **) args_, 9, err);
    }
SWIGINTERN bool Tween_targeting_method__SWIG_0(Tween *self,Object *object,String const &method,Object *initial,String const &initial_method,Variant const &final_val,float times_in_sec,int trans_type,int ease_type,float delay=0){
  Variant::CallError err;
Variant arg_0_ = Variant(object);
Variant arg_1_ = Variant(method);
Variant arg_2_ = Variant(initial);
Variant arg_3_ = Variant(initial_method);
Variant arg_4_ = Variant(final_val);
Variant arg_5_ = Variant(times_in_sec);
Variant arg_6_ = Variant(trans_type);
Variant arg_7_ = Variant(ease_type);
Variant arg_8_ = Variant(delay);
Variant *args_[9] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_, &arg_7_, &arg_8_ };
return self->call("targeting_method", (const Variant **) args_, 9, err);
    }
SWIGINTERN void VehicleWheel_set_radius(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radius", length);
    }
SWIGINTERN float VehicleWheel_get_radius(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radius");
    }
SWIGINTERN void VehicleWheel_set_suspension_rest_length(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_suspension_rest_length", length);
    }
SWIGINTERN float VehicleWheel_get_suspension_rest_length(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_suspension_rest_length");
    }
SWIGINTERN void VehicleWheel_set_suspension_travel(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_suspension_travel", length);
    }
SWIGINTERN float VehicleWheel_get_suspension_travel(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_suspension_travel");
    }
SWIGINTERN void VehicleWheel_set_suspension_stiffness(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_suspension_stiffness", length);
    }
SWIGINTERN float VehicleWheel_get_suspension_stiffness(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_suspension_stiffness");
    }
SWIGINTERN void VehicleWheel_set_suspension_max_force(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_suspension_max_force", length);
    }
SWIGINTERN float VehicleWheel_get_suspension_max_force(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_suspension_max_force");
    }
SWIGINTERN void VehicleWheel_set_damping_compression(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_damping_compression", length);
    }
SWIGINTERN float VehicleWheel_get_damping_compression(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_damping_compression");
    }
SWIGINTERN void VehicleWheel_set_damping_relaxation(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_damping_relaxation", length);
    }
SWIGINTERN float VehicleWheel_get_damping_relaxation(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_damping_relaxation");
    }
SWIGINTERN void VehicleWheel_set_use_as_traction(VehicleWheel *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_as_traction", enable);
    }
SWIGINTERN bool VehicleWheel_is_used_as_traction(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_used_as_traction");
    }
SWIGINTERN void VehicleWheel_set_use_as_steering(VehicleWheel *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_as_steering", enable);
    }
SWIGINTERN bool VehicleWheel_is_used_as_steering(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_used_as_steering");
    }
SWIGINTERN void VehicleWheel_set_friction_slip(VehicleWheel *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_friction_slip", length);
    }
SWIGINTERN float VehicleWheel_get_friction_slip(VehicleWheel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_friction_slip");
    }
SWIGINTERN void Viewport_set_rect(Viewport *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rect", rect);
    }
SWIGINTERN Rect2 Viewport_get_rect(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rect");
    }
SWIGINTERN Ref< World2D > Viewport_find_world_2d(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_world_2d").operator Object *()->cast_to<World2D>();
    }
SWIGINTERN void Viewport_set_world(Viewport *self,Ref< World > world){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_world", world);
    }
SWIGINTERN Ref< World > Viewport_get_world(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_world").operator Object *()->cast_to<World>();
    }
SWIGINTERN Ref< World > Viewport_find_world(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_world").operator Object *()->cast_to<World>();
    }
SWIGINTERN void Viewport_set_canvas_transform(Viewport *self,Matrix32 const &xform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_canvas_transform", xform);
    }
SWIGINTERN Matrix32 Viewport_get_canvas_transform(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_canvas_transform");
    }
SWIGINTERN void Viewport_set_global_canvas_transform(Viewport *self,Matrix32 const &xform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_global_canvas_transform", xform);
    }
SWIGINTERN Matrix32 Viewport_get_global_canvas_transform(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_canvas_transform");
    }
SWIGINTERN Matrix32 Viewport_get_final_transform(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_final_transform");
    }
SWIGINTERN Rect2 Viewport_get_visible_rect(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visible_rect");
    }
SWIGINTERN void Viewport_set_transparent_background(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transparent_background", enable);
    }
SWIGINTERN bool Viewport_has_transparent_background(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_transparent_background");
    }
SWIGINTERN void Viewport_set_size_override__SWIG_0(Viewport *self,bool enable,Vector2 const &size=Vector2(-1,-1),Vector2 const &margin=Vector2(0,0)){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size_override", enable, size, margin);
    }
SWIGINTERN Vector2 Viewport_get_size_override(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size_override");
    }
SWIGINTERN bool Viewport_is_size_override_enabled(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_size_override_enabled");
    }
SWIGINTERN void Viewport_set_size_override_stretch(Viewport *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size_override_stretch", enabled);
    }
SWIGINTERN bool Viewport_is_size_override_stretch_enabled(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_size_override_stretch_enabled");
    }
SWIGINTERN void Viewport_queue_screen_capture(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("queue_screen_capture");
    }
SWIGINTERN Image Viewport_get_screen_capture(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_screen_capture");
    }
SWIGINTERN void Viewport_set_as_render_target(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_as_render_target", enable);
    }
SWIGINTERN bool Viewport_is_set_as_render_target(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_set_as_render_target");
    }
SWIGINTERN void Viewport_set_render_target_vflip(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_render_target_vflip", enable);
    }
SWIGINTERN bool Viewport_get_render_target_vflip(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_target_vflip");
    }
SWIGINTERN void Viewport_set_render_target_clear_on_new_frame(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_render_target_clear_on_new_frame", enable);
    }
SWIGINTERN bool Viewport_get_render_target_clear_on_new_frame(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_target_clear_on_new_frame");
    }
SWIGINTERN void Viewport_render_target_clear(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("render_target_clear");
    }
SWIGINTERN void Viewport_set_render_target_filter(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_render_target_filter", enable);
    }
SWIGINTERN bool Viewport_get_render_target_filter(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_target_filter");
    }
SWIGINTERN void Viewport_set_render_target_gen_mipmaps(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_render_target_gen_mipmaps", enable);
    }
SWIGINTERN bool Viewport_get_render_target_gen_mipmaps(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_target_gen_mipmaps");
    }
SWIGINTERN void Viewport_set_render_target_update_mode(Viewport *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_render_target_update_mode", mode);
    }
SWIGINTERN int Viewport_get_render_target_update_mode(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_target_update_mode");
    }
SWIGINTERN Ref< RenderTargetTexture > Viewport_get_render_target_texture(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_render_target_texture").operator Object *()->cast_to<RenderTargetTexture>();
    }
SWIGINTERN void Viewport_set_physics_object_picking(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_physics_object_picking", enable);
    }
SWIGINTERN bool Viewport_get_physics_object_picking(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_physics_object_picking");
    }
SWIGINTERN RID Viewport_get_viewport(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_viewport");
    }
SWIGINTERN void Viewport_input(Viewport *self,InputEvent const &local_event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("input", local_event);
    }
SWIGINTERN void Viewport_unhandled_input(Viewport *self,InputEvent const &local_event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("unhandled_input", local_event);
    }
SWIGINTERN void Viewport_update_worlds(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("update_worlds");
    }
SWIGINTERN void Viewport_set_use_own_world(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_own_world", enable);
    }
SWIGINTERN bool Viewport_is_using_own_world(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_own_world");
    }
SWIGINTERN Camera *Viewport_get_camera(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_camera").operator Object *()->cast_to<Camera>();
    }
SWIGINTERN void Viewport_set_as_audio_listener(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_as_audio_listener", enable);
    }
SWIGINTERN bool Viewport_is_audio_listener(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_audio_listener");
    }
SWIGINTERN void Viewport_set_as_audio_listener_2d(Viewport *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_as_audio_listener_2d", enable);
    }
SWIGINTERN bool Viewport_is_audio_listener_2d(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_audio_listener_2d");
    }
SWIGINTERN void Viewport_set_render_target_to_screen_rect(Viewport *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_render_target_to_screen_rect", rect);
    }
SWIGINTERN Vector2 Viewport_get_mouse_pos(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mouse_pos");
    }
SWIGINTERN void Viewport_warp_mouse(Viewport *self,Vector2 const &to_pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("warp_mouse", to_pos);
    }
SWIGINTERN bool Viewport_gui_has_modal_stack(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("gui_has_modal_stack");
    }
SWIGINTERN Variant Viewport_gui_get_drag_data(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("gui_get_drag_data");
    }
SWIGINTERN void Viewport_set_disable_input(Viewport *self,bool disable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_disable_input", disable);
    }
SWIGINTERN bool Viewport_is_input_disabled(Viewport *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_input_disabled");
    }
SWIGINTERN void VisibilityNotifier_set_aabb(VisibilityNotifier *self,AABB const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_aabb", rect);
    }
SWIGINTERN AABB VisibilityNotifier_get_aabb(VisibilityNotifier *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_aabb");
    }
SWIGINTERN bool VisibilityNotifier_is_on_screen(VisibilityNotifier *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_on_screen");
    }
SWIGINTERN void VisualInstance_set_base(VisualInstance *self,RID const &base){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_base", base);
    }
SWIGINTERN void VisualInstance_set_layer_mask(VisualInstance *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", mask);
    }
SWIGINTERN int VisualInstance_get_layer_mask(VisualInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void WorldEnvironment_set_environment(WorldEnvironment *self,Ref< Environment > env){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_environment", env);
    }
SWIGINTERN Ref< Environment > WorldEnvironment_get_environment(WorldEnvironment *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_environment").operator Object *()->cast_to<Environment>();
    }
SWIGINTERN int AnimationPlayer_add_animation(AnimationPlayer *self,String const &name,Ref< Animation > animation){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("add_animation", name, animation);
    }
SWIGINTERN void AnimationPlayer_remove_animation(AnimationPlayer *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_animation", name);
    }
SWIGINTERN void AnimationPlayer_rename_animation(AnimationPlayer *self,String const &name,String const &newname){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rename_animation", name, newname);
    }
SWIGINTERN bool AnimationPlayer_has_animation(AnimationPlayer *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_animation", name);
    }
SWIGINTERN Ref< Animation > AnimationPlayer_get_animation(AnimationPlayer *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation", name).operator Object *()->cast_to<Animation>();
    }
SWIGINTERN StringArray AnimationPlayer_get_animation_list(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation_list");
    }
SWIGINTERN void AnimationPlayer_animation_set_next(AnimationPlayer *self,String const &anim_from,String const &anim_to){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("animation_set_next", anim_from, anim_to);
    }
SWIGINTERN String AnimationPlayer_animation_get_next(AnimationPlayer *self,String const &anim_from){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("animation_get_next", anim_from);
    }
SWIGINTERN void AnimationPlayer_set_blend_time(AnimationPlayer *self,String const &anim_from,String const &anim_to,float sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_blend_time", anim_from, anim_to, sec);
    }
SWIGINTERN float AnimationPlayer_get_blend_time(AnimationPlayer *self,String const &anim_from,String const &anim_to){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_blend_time", anim_from, anim_to);
    }
SWIGINTERN void AnimationPlayer_set_default_blend_time(AnimationPlayer *self,float sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_blend_time", sec);
    }
SWIGINTERN float AnimationPlayer_get_default_blend_time(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_blend_time");
    }
SWIGINTERN void AnimationPlayer_play__SWIG_0(AnimationPlayer *self,String const &name="",float custom_blend=-1,float custom_speed=1,bool from_end=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play", name, custom_blend, custom_speed, from_end);
    }
SWIGINTERN void AnimationPlayer_play_backwards__SWIG_0(AnimationPlayer *self,String const &name="",float custom_blend=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play_backwards", name, custom_blend);
    }
SWIGINTERN void AnimationPlayer_stop__SWIG_0(AnimationPlayer *self,bool reset=true){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop", reset);
    }
SWIGINTERN void AnimationPlayer_stop_all(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop_all");
    }
SWIGINTERN bool AnimationPlayer_is_playing(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void AnimationPlayer_set_current_animation(AnimationPlayer *self,String const &anim){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_animation", anim);
    }
SWIGINTERN String AnimationPlayer_get_current_animation(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_animation");
    }
SWIGINTERN void AnimationPlayer_queue(AnimationPlayer *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("queue", name);
    }
SWIGINTERN void AnimationPlayer_clear_queue(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_queue");
    }
SWIGINTERN void AnimationPlayer_set_active(AnimationPlayer *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_active", active);
    }
SWIGINTERN bool AnimationPlayer_is_active(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_active");
    }
SWIGINTERN void AnimationPlayer_set_speed(AnimationPlayer *self,float speed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_speed", speed);
    }
SWIGINTERN float AnimationPlayer_get_speed(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_speed");
    }
SWIGINTERN void AnimationPlayer_set_autoplay(AnimationPlayer *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autoplay", name);
    }
SWIGINTERN String AnimationPlayer_get_autoplay(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_autoplay");
    }
SWIGINTERN void AnimationPlayer_set_root(AnimationPlayer *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_root", path);
    }
SWIGINTERN NodePath AnimationPlayer_get_root(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_root");
    }
SWIGINTERN void AnimationPlayer_seek__SWIG_0(AnimationPlayer *self,float pos_sec,bool update=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek", pos_sec, update);
    }
SWIGINTERN float AnimationPlayer_get_pos(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN String AnimationPlayer_find_animation(AnimationPlayer *self,Ref< Animation > animation){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_animation", animation);
    }
SWIGINTERN void AnimationPlayer_clear_caches(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_caches");
    }
SWIGINTERN void AnimationPlayer_set_animation_process_mode(AnimationPlayer *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_animation_process_mode", mode);
    }
SWIGINTERN int AnimationPlayer_get_animation_process_mode(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation_process_mode");
    }
SWIGINTERN float AnimationPlayer_get_current_animation_pos(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_animation_pos");
    }
SWIGINTERN float AnimationPlayer_get_current_animation_length(AnimationPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_animation_length");
    }
SWIGINTERN void AnimationPlayer_advance(AnimationPlayer *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("advance", delta);
    }
SWIGINTERN void AnimationTreePlayer_add_node(AnimationTreePlayer *self,int type,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_node", type, id);
    }
SWIGINTERN bool AnimationTreePlayer_node_exists(AnimationTreePlayer *self,String const &node){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_exists", node);
    }
SWIGINTERN int AnimationTreePlayer_node_rename(AnimationTreePlayer *self,String const &node,String const &new_name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_rename", node, new_name);
    }
SWIGINTERN int AnimationTreePlayer_node_get_type(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_type", id);
    }
SWIGINTERN int AnimationTreePlayer_node_get_input_count(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_input_count", id);
    }
SWIGINTERN String AnimationTreePlayer_node_get_input_source(AnimationTreePlayer *self,String const &id,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_input_source", id, idx);
    }
SWIGINTERN void AnimationTreePlayer_animation_node_set_animation(AnimationTreePlayer *self,String const &id,Ref< Animation > animation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("animation_node_set_animation", id, animation);
    }
SWIGINTERN Ref< Animation > AnimationTreePlayer_animation_node_get_animation(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("animation_node_get_animation", id).operator Object *()->cast_to<Animation>();
    }
SWIGINTERN void AnimationTreePlayer_animation_node_set_master_animation(AnimationTreePlayer *self,String const &id,String const &source){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("animation_node_set_master_animation", id, source);
    }
SWIGINTERN String AnimationTreePlayer_animation_node_get_master_animation(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("animation_node_get_master_animation", id);
    }
SWIGINTERN void AnimationTreePlayer_animation_node_set_filter_path(AnimationTreePlayer *self,String const &id,NodePath const &path,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("animation_node_set_filter_path", id, path, enable);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_fadein_time(AnimationTreePlayer *self,String const &id,float time_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_set_fadein_time", id, time_sec);
    }
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_fadein_time(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("oneshot_node_get_fadein_time", id);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_fadeout_time(AnimationTreePlayer *self,String const &id,float time_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_set_fadeout_time", id, time_sec);
    }
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_fadeout_time(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("oneshot_node_get_fadeout_time", id);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_autorestart(AnimationTreePlayer *self,String const &id,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_set_autorestart", id, enable);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_autorestart_delay(AnimationTreePlayer *self,String const &id,float delay_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_set_autorestart_delay", id, delay_sec);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(AnimationTreePlayer *self,String const &id,float rand_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_set_autorestart_random_delay", id, rand_sec);
    }
SWIGINTERN bool AnimationTreePlayer_oneshot_node_has_autorestart(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("oneshot_node_has_autorestart", id);
    }
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_autorestart_delay(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("oneshot_node_get_autorestart_delay", id);
    }
SWIGINTERN float AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("oneshot_node_get_autorestart_random_delay", id);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_start(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_start", id);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_stop(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_stop", id);
    }
SWIGINTERN bool AnimationTreePlayer_oneshot_node_is_active(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("oneshot_node_is_active", id);
    }
SWIGINTERN void AnimationTreePlayer_oneshot_node_set_filter_path(AnimationTreePlayer *self,String const &id,NodePath const &path,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("oneshot_node_set_filter_path", id, path, enable);
    }
SWIGINTERN void AnimationTreePlayer_mix_node_set_amount(AnimationTreePlayer *self,String const &id,float ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("mix_node_set_amount", id, ratio);
    }
SWIGINTERN float AnimationTreePlayer_mix_node_get_amount(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("mix_node_get_amount", id);
    }
SWIGINTERN void AnimationTreePlayer_blend2_node_set_amount(AnimationTreePlayer *self,String const &id,float blend){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("blend2_node_set_amount", id, blend);
    }
SWIGINTERN float AnimationTreePlayer_blend2_node_get_amount(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("blend2_node_get_amount", id);
    }
SWIGINTERN void AnimationTreePlayer_blend2_node_set_filter_path(AnimationTreePlayer *self,String const &id,NodePath const &path,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("blend2_node_set_filter_path", id, path, enable);
    }
SWIGINTERN void AnimationTreePlayer_blend3_node_set_amount(AnimationTreePlayer *self,String const &id,float blend){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("blend3_node_set_amount", id, blend);
    }
SWIGINTERN float AnimationTreePlayer_blend3_node_get_amount(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("blend3_node_get_amount", id);
    }
SWIGINTERN void AnimationTreePlayer_blend4_node_set_amount(AnimationTreePlayer *self,String const &id,Vector2 const &blend){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("blend4_node_set_amount", id, blend);
    }
SWIGINTERN Vector2 AnimationTreePlayer_blend4_node_get_amount(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("blend4_node_get_amount", id);
    }
SWIGINTERN void AnimationTreePlayer_timescale_node_set_scale(AnimationTreePlayer *self,String const &id,float scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("timescale_node_set_scale", id, scale);
    }
SWIGINTERN float AnimationTreePlayer_timescale_node_get_scale(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("timescale_node_get_scale", id);
    }
SWIGINTERN void AnimationTreePlayer_timeseek_node_seek(AnimationTreePlayer *self,String const &id,float pos_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("timeseek_node_seek", id, pos_sec);
    }
SWIGINTERN void AnimationTreePlayer_transition_node_set_input_count(AnimationTreePlayer *self,String const &id,int count){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("transition_node_set_input_count", id, count);
    }
SWIGINTERN int AnimationTreePlayer_transition_node_get_input_count(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("transition_node_get_input_count", id);
    }
SWIGINTERN void AnimationTreePlayer_transition_node_delete_input(AnimationTreePlayer *self,String const &id,int input_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("transition_node_delete_input", id, input_idx);
    }
SWIGINTERN void AnimationTreePlayer_transition_node_set_input_auto_advance(AnimationTreePlayer *self,String const &id,int input_idx,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("transition_node_set_input_auto_advance", id, input_idx, enable);
    }
SWIGINTERN bool AnimationTreePlayer_transition_node_has_input_auto_advance(AnimationTreePlayer *self,String const &id,int input_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("transition_node_has_input_auto_advance", id, input_idx);
    }
SWIGINTERN void AnimationTreePlayer_transition_node_set_xfade_time(AnimationTreePlayer *self,String const &id,float time_sec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("transition_node_set_xfade_time", id, time_sec);
    }
SWIGINTERN float AnimationTreePlayer_transition_node_get_xfade_time(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("transition_node_get_xfade_time", id);
    }
SWIGINTERN void AnimationTreePlayer_transition_node_set_current(AnimationTreePlayer *self,String const &id,int input_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("transition_node_set_current", id, input_idx);
    }
SWIGINTERN int AnimationTreePlayer_transition_node_get_current(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("transition_node_get_current", id);
    }
SWIGINTERN void AnimationTreePlayer_node_set_pos(AnimationTreePlayer *self,String const &id,Vector2 const &screen_pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("node_set_pos", id, screen_pos);
    }
SWIGINTERN Vector2 AnimationTreePlayer_node_get_pos(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("node_get_pos", id);
    }
SWIGINTERN void AnimationTreePlayer_remove_node(AnimationTreePlayer *self,String const &id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_node", id);
    }
SWIGINTERN int AnimationTreePlayer_connect(AnimationTreePlayer *self,String const &id,String const &dst_id,int dst_input_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect", id, dst_id, dst_input_idx);
    }
SWIGINTERN bool AnimationTreePlayer_is_connected(AnimationTreePlayer *self,String const &id,String const &dst_id,int dst_input_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_connected", id, dst_id, dst_input_idx);
    }
SWIGINTERN void AnimationTreePlayer_disconnect(AnimationTreePlayer *self,String const &id,int dst_input_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("disconnect", id, dst_input_idx);
    }
SWIGINTERN void AnimationTreePlayer_set_active(AnimationTreePlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_active", enabled);
    }
SWIGINTERN bool AnimationTreePlayer_is_active(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_active");
    }
SWIGINTERN void AnimationTreePlayer_set_base_path(AnimationTreePlayer *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_base_path", path);
    }
SWIGINTERN NodePath AnimationTreePlayer_get_base_path(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_base_path");
    }
SWIGINTERN void AnimationTreePlayer_set_master_player(AnimationTreePlayer *self,NodePath const &nodepath){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_master_player", nodepath);
    }
SWIGINTERN NodePath AnimationTreePlayer_get_master_player(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_master_player");
    }
SWIGINTERN StringArray AnimationTreePlayer_get_node_list(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_list");
    }
SWIGINTERN void AnimationTreePlayer_set_animation_process_mode(AnimationTreePlayer *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_animation_process_mode", mode);
    }
SWIGINTERN int AnimationTreePlayer_get_animation_process_mode(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation_process_mode");
    }
SWIGINTERN void AnimationTreePlayer_advance(AnimationTreePlayer *self,float delta){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("advance", delta);
    }
SWIGINTERN void AnimationTreePlayer_reset(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("reset");
    }
SWIGINTERN void AnimationTreePlayer_recompute_caches(AnimationTreePlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("recompute_caches");
    }
SWIGINTERN void BakedLightInstance_set_baked_light(BakedLightInstance *self,Object *baked_light){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_baked_light", baked_light);
    }
SWIGINTERN Object *BakedLightInstance_get_baked_light(BakedLightInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_light").operator Object *();
    }
SWIGINTERN RID BakedLightInstance_get_baked_light_instance(BakedLightInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_light_instance");
    }
SWIGINTERN void BakedLightSampler_set_param(BakedLightSampler *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float BakedLightSampler_get_param(BakedLightSampler *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void BakedLightSampler_set_resolution(BakedLightSampler *self,int resolution){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_resolution", resolution);
    }
SWIGINTERN int BakedLightSampler_get_resolution(BakedLightSampler *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_resolution");
    }
SWIGINTERN int BitmapFont_create_from_fnt(BitmapFont *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("create_from_fnt", path);
    }
SWIGINTERN void BitmapFont_set_height(BitmapFont *self,float px){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_height", px);
    }
SWIGINTERN void BitmapFont_set_ascent(BitmapFont *self,float px){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ascent", px);
    }
SWIGINTERN void BitmapFont_add_kerning_pair(BitmapFont *self,int char_a,int char_b,int kerning){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_kerning_pair", char_a, char_b, kerning);
    }
SWIGINTERN int BitmapFont_get_kerning_pair(BitmapFont *self,int char_a,int char_b){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_kerning_pair", char_a, char_b);
    }
SWIGINTERN void BitmapFont_add_texture(BitmapFont *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_texture", texture);
    }
SWIGINTERN void BitmapFont_add_char__SWIG_0(BitmapFont *self,int character,int texture,Rect2 const &rect,Vector2 const &align=Vector2(0,0),float advance=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_char", character, texture, rect, align, advance);
    }
SWIGINTERN int BitmapFont_get_texture_count(BitmapFont *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_count");
    }
SWIGINTERN Ref< Texture > BitmapFont_get_texture(BitmapFont *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture", idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Vector2 BitmapFont_get_char_size__SWIG_0(BitmapFont *self,int char_,int next=0){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_char_size", char_, next);
    }
SWIGINTERN void BitmapFont_set_distance_field_hint(BitmapFont *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_distance_field_hint", enable);
    }
SWIGINTERN void BitmapFont_clear(BitmapFont *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void BitmapFont_set_fallback(BitmapFont *self,Object *fallback){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fallback", fallback);
    }
SWIGINTERN Object *BitmapFont_get_fallback(BitmapFont *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fallback").operator Object *();
    }
SWIGINTERN Vector3 Camera_project_ray_normal(Camera *self,Vector2 const &screen_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("project_ray_normal", screen_point);
    }
SWIGINTERN Vector3 Camera_project_local_ray_normal(Camera *self,Vector2 const &screen_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("project_local_ray_normal", screen_point);
    }
SWIGINTERN Vector3 Camera_project_ray_origin(Camera *self,Vector2 const &screen_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("project_ray_origin", screen_point);
    }
SWIGINTERN Vector2 Camera_unproject_position(Camera *self,Vector3 const &world_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("unproject_position", world_point);
    }
SWIGINTERN bool Camera_is_position_behind(Camera *self,Vector3 const &world_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_position_behind", world_point);
    }
SWIGINTERN Vector3 Camera_project_position(Camera *self,Vector2 const &screen_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("project_position", screen_point);
    }
SWIGINTERN void Camera_set_perspective(Camera *self,float fov,float z_near,float z_far){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_perspective", fov, z_near, z_far);
    }
SWIGINTERN void Camera_set_orthogonal(Camera *self,float size,float z_near,float z_far){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_orthogonal", size, z_near, z_far);
    }
SWIGINTERN void Camera_make_current(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("make_current");
    }
SWIGINTERN void Camera_clear_current(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_current");
    }
SWIGINTERN bool Camera_is_current(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_current");
    }
SWIGINTERN Transform Camera_get_camera_transform(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_camera_transform");
    }
SWIGINTERN float Camera_get_fov(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fov");
    }
SWIGINTERN float Camera_get_size(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size");
    }
SWIGINTERN float Camera_get_zfar(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_zfar");
    }
SWIGINTERN float Camera_get_znear(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_znear");
    }
SWIGINTERN int Camera_get_projection(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_projection");
    }
SWIGINTERN void Camera_set_visible_layers(Camera *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_visible_layers", mask);
    }
SWIGINTERN int Camera_get_visible_layers(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visible_layers");
    }
SWIGINTERN void Camera_set_environment(Camera *self,Ref< Environment > env){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_environment", env);
    }
SWIGINTERN Ref< Environment > Camera_get_environment(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_environment").operator Object *()->cast_to<Environment>();
    }
SWIGINTERN void Camera_set_keep_aspect_mode(Camera *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_keep_aspect_mode", mode);
    }
SWIGINTERN int Camera_get_keep_aspect_mode(Camera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_keep_aspect_mode");
    }
SWIGINTERN void CanvasItem__draw(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_draw");
    }
SWIGINTERN void CanvasItem_edit_set_state(CanvasItem *self,Variant const &state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("edit_set_state", state);
    }
SWIGINTERN void CanvasItem_edit_get(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("edit_get");
    }
SWIGINTERN void CanvasItem_edit_set_rect(CanvasItem *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("edit_set_rect", rect);
    }
SWIGINTERN void CanvasItem_edit_rotate(CanvasItem *self,float degrees){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("edit_rotate", degrees);
    }
SWIGINTERN Rect2 CanvasItem_get_item_rect(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_rect");
    }
SWIGINTERN RID CanvasItem_get_canvas_item(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_canvas_item");
    }
SWIGINTERN bool CanvasItem_is_visible(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_visible");
    }
SWIGINTERN bool CanvasItem_is_hidden(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_hidden");
    }
SWIGINTERN void CanvasItem_show(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("show");
    }
SWIGINTERN void CanvasItem_hide(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("hide");
    }
SWIGINTERN void CanvasItem_set_hidden(CanvasItem *self,bool hidden){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hidden", hidden);
    }
SWIGINTERN void CanvasItem_update(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("update");
    }
SWIGINTERN void CanvasItem_set_as_toplevel(CanvasItem *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_as_toplevel", enable);
    }
SWIGINTERN bool CanvasItem_is_set_as_toplevel(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_set_as_toplevel");
    }
SWIGINTERN void CanvasItem_set_blend_mode(CanvasItem *self,int blend_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_blend_mode", blend_mode);
    }
SWIGINTERN int CanvasItem_get_blend_mode(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_blend_mode");
    }
SWIGINTERN void CanvasItem_set_light_mask(CanvasItem *self,int light_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_light_mask", light_mask);
    }
SWIGINTERN int CanvasItem_get_light_mask(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_light_mask");
    }
SWIGINTERN void CanvasItem_set_opacity(CanvasItem *self,float opacity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_opacity", opacity);
    }
SWIGINTERN float CanvasItem_get_opacity(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_opacity");
    }
SWIGINTERN void CanvasItem_set_self_opacity(CanvasItem *self,float self_opacity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_self_opacity", self_opacity);
    }
SWIGINTERN float CanvasItem_get_self_opacity(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_self_opacity");
    }
SWIGINTERN void CanvasItem_set_draw_behind_parent(CanvasItem *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_behind_parent", enable);
    }
SWIGINTERN bool CanvasItem_is_draw_behind_parent_enabled(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_draw_behind_parent_enabled");
    }
SWIGINTERN void CanvasItem_draw_line__SWIG_0(CanvasItem *self,Vector2 const &from,Vector2 const &to,Color const &color,float width=1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_line", from, to, color, width);
    }
SWIGINTERN void CanvasItem_draw_rect(CanvasItem *self,Rect2 const &rect,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_rect", rect, color);
    }
SWIGINTERN void CanvasItem_draw_circle(CanvasItem *self,Vector2 const &pos,float radius,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_circle", pos, radius, color);
    }
SWIGINTERN void CanvasItem_draw_texture__SWIG_0(CanvasItem *self,Ref< Texture > texture,Vector2 const &pos,Color const &modulate=Color(1,1,1,1)){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_texture", texture, pos, modulate);
    }
SWIGINTERN void CanvasItem_draw_texture_rect__SWIG_0(CanvasItem *self,Ref< Texture > texture,Rect2 const &rect,bool tile,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_texture_rect", texture, rect, tile, modulate, transpose);
    }
SWIGINTERN void CanvasItem_draw_texture_rect_region__SWIG_0(CanvasItem *self,Ref< Texture > texture,Rect2 const &rect,Rect2 const &src_rect,Color const &modulate=Color(1,1,1,1),bool transpose=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_texture_rect_region", texture, rect, src_rect, modulate, transpose);
    }
SWIGINTERN void CanvasItem_draw_style_box(CanvasItem *self,Ref< StyleBox > style_box,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_style_box", style_box, rect);
    }
SWIGINTERN void CanvasItem_draw_primitive__SWIG_0(CanvasItem *self,Vector2Array const &points,ColorArray const &colors,Vector2Array const &uvs,Ref< Texture > texture=Ref< Texture >(),float width=1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_primitive", points, colors, uvs, texture, width);
    }
SWIGINTERN void CanvasItem_draw_polygon__SWIG_0(CanvasItem *self,Vector2Array const &points,ColorArray const &colors,Vector2Array const &uvs=Vector2Array(),Ref< Texture > texture=Ref< Texture >()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_polygon", points, colors, uvs, texture);
    }
SWIGINTERN void CanvasItem_draw_colored_polygon__SWIG_0(CanvasItem *self,Vector2Array const &points,Color const &color,Vector2Array const &uvs=Vector2Array(),Ref< Texture > texture=Ref< Texture >()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_colored_polygon", points, color, uvs, texture);
    }
SWIGINTERN void CanvasItem_draw_string__SWIG_0(CanvasItem *self,Ref< Font > font,Vector2 const &pos,String const &text,Color const &modulate=Color(1,1,1,1),int clip_w=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_string", font, pos, text, modulate, clip_w);
    }
SWIGINTERN float CanvasItem_draw_char__SWIG_0(CanvasItem *self,Ref< Font > font,Vector2 const &pos,String const &char_,String const &next,Color const &modulate=Color(1,1,1,1)){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("draw_char", font, pos, char_, next, modulate);
    }
SWIGINTERN void CanvasItem_draw_set_transform(CanvasItem *self,Vector2 const &pos,float rot,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("draw_set_transform", pos, rot, scale);
    }
SWIGINTERN Matrix32 CanvasItem_get_transform(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN Matrix32 CanvasItem_get_global_transform(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_transform");
    }
SWIGINTERN Matrix32 CanvasItem_get_global_transform_with_canvas(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_transform_with_canvas");
    }
SWIGINTERN Matrix32 CanvasItem_get_viewport_transform(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_viewport_transform");
    }
SWIGINTERN Rect2 CanvasItem_get_viewport_rect(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_viewport_rect");
    }
SWIGINTERN Matrix32 CanvasItem_get_canvas_transform(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_canvas_transform");
    }
SWIGINTERN Vector2 CanvasItem_get_local_mouse_pos(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_local_mouse_pos");
    }
SWIGINTERN Vector2 CanvasItem_get_global_mouse_pos(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_mouse_pos");
    }
SWIGINTERN RID CanvasItem_get_canvas(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_canvas");
    }
SWIGINTERN Object *CanvasItem_get_world_2d(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_world_2d").operator Object *();
    }
SWIGINTERN void CanvasItem_set_material(CanvasItem *self,Ref< CanvasItemMaterial > material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_material", material);
    }
SWIGINTERN Ref< CanvasItemMaterial > CanvasItem_get_material(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_material").operator Object *()->cast_to<CanvasItemMaterial>();
    }
SWIGINTERN void CanvasItem_set_use_parent_material(CanvasItem *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_parent_material", enable);
    }
SWIGINTERN bool CanvasItem_get_use_parent_material(CanvasItem *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_use_parent_material");
    }
SWIGINTERN InputEvent CanvasItem_make_input_local(CanvasItem *self,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("make_input_local", event);
    }
SWIGINTERN void CanvasLayer_set_layer(CanvasLayer *self,int layer){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer", layer);
    }
SWIGINTERN int CanvasLayer_get_layer(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer");
    }
SWIGINTERN void CanvasLayer_set_transform(CanvasLayer *self,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", transform);
    }
SWIGINTERN Matrix32 CanvasLayer_get_transform(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_transform");
    }
SWIGINTERN void CanvasLayer_set_offset(CanvasLayer *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 CanvasLayer_get_offset(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void CanvasLayer_set_rotation(CanvasLayer *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotation", radians);
    }
SWIGINTERN float CanvasLayer_get_rotation(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotation");
    }
SWIGINTERN void CanvasLayer_set_rotationd(CanvasLayer *self,float degrees){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotationd", degrees);
    }
SWIGINTERN float CanvasLayer_get_rotationd(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotationd");
    }
SWIGINTERN void CanvasLayer_set_scale(CanvasLayer *self,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scale", scale);
    }
SWIGINTERN Vector2 CanvasLayer_get_scale(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scale");
    }
SWIGINTERN Ref< World2D > CanvasLayer_get_world_2d(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_world_2d").operator Object *()->cast_to<World2D>();
    }
SWIGINTERN RID CanvasLayer_get_viewport(CanvasLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_viewport");
    }
SWIGINTERN void CollisionObject__input_event(CollisionObject *self,Object *camera,InputEvent const &event,Vector3 const &click_pos,Vector3 const &click_normal,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_input_event", camera, event, click_pos, click_normal, shape_idx);
    }
SWIGINTERN void CollisionObject_add_shape__SWIG_0(CollisionObject *self,Ref< Shape > shape,Transform const &transform=Transform()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_shape", shape, transform);
    }
SWIGINTERN int CollisionObject_get_shape_count(CollisionObject *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape_count");
    }
SWIGINTERN void CollisionObject_set_shape(CollisionObject *self,int shape_idx,Ref< Shape > shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", shape_idx, shape);
    }
SWIGINTERN void CollisionObject_set_shape_transform(CollisionObject *self,int shape_idx,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape_transform", shape_idx, transform);
    }
SWIGINTERN void CollisionObject_set_shape_as_trigger(CollisionObject *self,int shape_idx,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape_as_trigger", shape_idx, enable);
    }
SWIGINTERN bool CollisionObject_is_shape_set_as_trigger(CollisionObject *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_shape_set_as_trigger", shape_idx);
    }
SWIGINTERN Ref< Shape > CollisionObject_get_shape(CollisionObject *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape", shape_idx).operator Object *()->cast_to<Shape>();
    }
SWIGINTERN Transform CollisionObject_get_shape_transform(CollisionObject *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape_transform", shape_idx);
    }
SWIGINTERN void CollisionObject_remove_shape(CollisionObject *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_shape", shape_idx);
    }
SWIGINTERN void CollisionObject_clear_shapes(CollisionObject *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_shapes");
    }
SWIGINTERN void CollisionObject_set_ray_pickable(CollisionObject *self,bool ray_pickable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ray_pickable", ray_pickable);
    }
SWIGINTERN bool CollisionObject_is_ray_pickable(CollisionObject *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_ray_pickable");
    }
SWIGINTERN void CollisionObject_set_capture_input_on_drag(CollisionObject *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_capture_input_on_drag", enable);
    }
SWIGINTERN bool CollisionObject_get_capture_input_on_drag(CollisionObject *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_capture_input_on_drag");
    }
SWIGINTERN RID CollisionObject_get_rid(CollisionObject *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rid");
    }
SWIGINTERN void CollisionPolygon_set_build_mode(CollisionPolygon *self,int build_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_build_mode", build_mode);
    }
SWIGINTERN int CollisionPolygon_get_build_mode(CollisionPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_build_mode");
    }
SWIGINTERN void CollisionPolygon_set_depth(CollisionPolygon *self,float depth){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_depth", depth);
    }
SWIGINTERN float CollisionPolygon_get_depth(CollisionPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_depth");
    }
SWIGINTERN void CollisionPolygon_set_polygon(CollisionPolygon *self,Vector2Array const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polygon", polygon);
    }
SWIGINTERN Vector2Array CollisionPolygon_get_polygon(CollisionPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon");
    }
SWIGINTERN int CollisionPolygon_get_collision_object_first_shape(CollisionPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_object_first_shape");
    }
SWIGINTERN int CollisionPolygon_get_collision_object_last_shape(CollisionPolygon *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_object_last_shape");
    }
SWIGINTERN void CollisionShape_resource_changed(CollisionShape *self,Object *resource){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("resource_changed", resource);
    }
SWIGINTERN void CollisionShape_set_shape(CollisionShape *self,Object *shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", shape);
    }
SWIGINTERN Object *CollisionShape_get_shape(CollisionShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape").operator Object *();
    }
SWIGINTERN void CollisionShape_set_trigger(CollisionShape *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_trigger", enable);
    }
SWIGINTERN bool CollisionShape_is_trigger(CollisionShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_trigger");
    }
SWIGINTERN void CollisionShape_make_convex_from_brothers(CollisionShape *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("make_convex_from_brothers");
    }
SWIGINTERN int CollisionShape_get_collision_object_shape_index(CollisionShape *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_object_shape_index");
    }
SWIGINTERN void Control__input_event(Control *self,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_input_event", event);
    }
SWIGINTERN bool Control_can_drop_data(Control *self,Vector2 const &pos,Variant const &data){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_drop_data", pos, data);
    }
SWIGINTERN void Control_drop_data(Control *self,Vector2 const &pos,Variant const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("drop_data", pos, data);
    }
SWIGINTERN Object *Control_get_drag_data(Control *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_drag_data", pos).operator Object *();
    }
SWIGINTERN Vector2 Control_get_minimum_size(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_minimum_size");
    }
SWIGINTERN void Control_accept_event(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("accept_event");
    }
SWIGINTERN Vector2 Control_get_combined_minimum_size(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_combined_minimum_size");
    }
SWIGINTERN void Control_set_anchor__SWIG_0(Control *self,int margin,int anchor_mode,bool keep_margin=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_anchor", margin, anchor_mode, keep_margin);
    }
SWIGINTERN int Control_get_anchor(Control *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_anchor", margin);
    }
SWIGINTERN void Control_set_margin(Control *self,int margin,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_margin", margin, offset);
    }
SWIGINTERN void Control_set_anchor_and_margin(Control *self,int margin,int anchor_mode,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_anchor_and_margin", margin, anchor_mode, offset);
    }
SWIGINTERN void Control_set_begin(Control *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_begin", pos);
    }
SWIGINTERN void Control_set_end(Control *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_end", pos);
    }
SWIGINTERN void Control_set_pos(Control *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pos", pos);
    }
SWIGINTERN void Control_set_size(Control *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size", size);
    }
SWIGINTERN void Control_set_custom_minimum_size(Control *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_minimum_size", size);
    }
SWIGINTERN void Control_set_global_pos(Control *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_global_pos", pos);
    }
SWIGINTERN void Control_set_rotation(Control *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotation", radians);
    }
SWIGINTERN void Control_set_rotation_deg(Control *self,float degrees){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotation_deg", degrees);
    }
SWIGINTERN void Control_set_scale(Control *self,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scale", scale);
    }
SWIGINTERN float Control_get_margin(Control *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_margin", margin);
    }
SWIGINTERN Vector2 Control_get_begin(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_begin");
    }
SWIGINTERN Vector2 Control_get_end(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_end");
    }
SWIGINTERN Vector2 Control_get_pos(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN Vector2 Control_get_size(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size");
    }
SWIGINTERN float Control_get_rotation(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotation");
    }
SWIGINTERN float Control_get_rotation_deg(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotation_deg");
    }
SWIGINTERN Vector2 Control_get_scale(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scale");
    }
SWIGINTERN Vector2 Control_get_custom_minimum_size(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_minimum_size");
    }
SWIGINTERN Vector2 Control_get_parent_area_size(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_parent_area_size");
    }
SWIGINTERN Vector2 Control_get_global_pos(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_pos");
    }
SWIGINTERN Rect2 Control_get_rect(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rect");
    }
SWIGINTERN Rect2 Control_get_global_rect(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_rect");
    }
SWIGINTERN void Control_set_area_as_parent_rect__SWIG_0(Control *self,int margin=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_area_as_parent_rect", margin);
    }
SWIGINTERN void Control_show_modal__SWIG_0(Control *self,bool exclusive=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("show_modal", exclusive);
    }
SWIGINTERN void Control_set_focus_mode(Control *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_focus_mode", mode);
    }
SWIGINTERN bool Control_has_focus(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_focus");
    }
SWIGINTERN void Control_grab_focus(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("grab_focus");
    }
SWIGINTERN void Control_release_focus(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("release_focus");
    }
SWIGINTERN Control *Control_get_focus_owner(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_focus_owner").operator Object *()->cast_to<Control>();
    }
SWIGINTERN void Control_set_h_size_flags(Control *self,int flags){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_size_flags", flags);
    }
SWIGINTERN int Control_get_h_size_flags(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_h_size_flags");
    }
SWIGINTERN void Control_set_stretch_ratio(Control *self,float ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stretch_ratio", ratio);
    }
SWIGINTERN float Control_get_stretch_ratio(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stretch_ratio");
    }
SWIGINTERN void Control_set_v_size_flags(Control *self,int flags){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_size_flags", flags);
    }
SWIGINTERN int Control_get_v_size_flags(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_size_flags");
    }
SWIGINTERN void Control_set_theme(Control *self,Ref< Theme > theme){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_theme", theme);
    }
SWIGINTERN Ref< Theme > Control_get_theme(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_theme").operator Object *()->cast_to<Theme>();
    }
SWIGINTERN void Control_add_icon_override(Control *self,String const &name,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_icon_override", name, texture);
    }
SWIGINTERN void Control_add_shader_override(Control *self,String const &name,Ref< Shader > shader){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_shader_override", name, shader);
    }
SWIGINTERN void Control_add_style_override(Control *self,String const &name,Ref< StyleBox > stylebox){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_style_override", name, stylebox);
    }
SWIGINTERN void Control_add_font_override(Control *self,String const &name,Ref< Font > font){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_font_override", name, font);
    }
SWIGINTERN void Control_add_color_override(Control *self,String const &name,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_color_override", name, color);
    }
SWIGINTERN void Control_add_constant_override(Control *self,String const &name,int constant){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_constant_override", name, constant);
    }
SWIGINTERN Ref< Texture > Control_get_icon__SWIG_0(Control *self,String const &name,String const &type=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon", name, type).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< StyleBox > Control_get_stylebox__SWIG_0(Control *self,String const &name,String const &type=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stylebox", name, type).operator Object *()->cast_to<StyleBox>();
    }
SWIGINTERN Ref< Font > Control_get_font__SWIG_0(Control *self,String const &name,String const &type=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_font", name, type).operator Object *()->cast_to<Font>();
    }
SWIGINTERN Color Control_get_color__SWIG_0(Control *self,String const &name,String const &type=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color", name, type);
    }
SWIGINTERN int Control_get_constant__SWIG_0(Control *self,String const &name,String const &type=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant", name, type);
    }
SWIGINTERN Control *Control_get_parent_control(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_parent_control").operator Object *()->cast_to<Control>();
    }
SWIGINTERN void Control_set_tooltip(Control *self,String const &tooltip){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tooltip", tooltip);
    }
SWIGINTERN String Control_get_tooltip__SWIG_0(Control *self,Vector2 const &atpos=Vector2(0,0)){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tooltip", atpos);
    }
SWIGINTERN void Control_set_default_cursor_shape(Control *self,int shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_default_cursor_shape", shape);
    }
SWIGINTERN int Control_get_default_cursor_shape(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_default_cursor_shape");
    }
SWIGINTERN int Control_get_cursor_shape__SWIG_0(Control *self,Vector2 const &pos=Vector2(0,0)){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cursor_shape", pos);
    }
SWIGINTERN void Control_set_focus_neighbour(Control *self,int margin,NodePath const &neighbour){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_focus_neighbour", margin, neighbour);
    }
SWIGINTERN NodePath Control_get_focus_neighbour(Control *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_focus_neighbour", margin);
    }
SWIGINTERN void Control_set_ignore_mouse(Control *self,bool ignore){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ignore_mouse", ignore);
    }
SWIGINTERN bool Control_is_ignoring_mouse(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_ignoring_mouse");
    }
SWIGINTERN void Control_force_drag(Control *self,Variant const &data,Object *preview){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("force_drag", data, preview);
    }
SWIGINTERN void Control_set_stop_mouse(Control *self,bool stop){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stop_mouse", stop);
    }
SWIGINTERN bool Control_is_stopping_mouse(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_stopping_mouse");
    }
SWIGINTERN void Control_grab_click_focus(Control *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("grab_click_focus");
    }
SWIGINTERN void Control_set_drag_forwarding(Control *self,Control *target){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_drag_forwarding", target);
    }
SWIGINTERN void Control_set_drag_preview(Control *self,Control *control){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_drag_preview", control);
    }
SWIGINTERN void Control_warp_mouse(Control *self,Vector2 const &to_pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("warp_mouse", to_pos);
    }
SWIGINTERN void DynamicFont_set_font_data(DynamicFont *self,Ref< DynamicFontData > data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_font_data", data);
    }
SWIGINTERN Ref< DynamicFontData > DynamicFont_get_font_data(DynamicFont *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_font_data").operator Object *()->cast_to<DynamicFontData>();
    }
SWIGINTERN void DynamicFont_set_size(DynamicFont *self,int data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size", data);
    }
SWIGINTERN int DynamicFont_get_size(DynamicFont *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size");
    }
SWIGINTERN void DynamicFont_add_fallback(DynamicFont *self,Ref< DynamicFontData > data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_fallback", data);
    }
SWIGINTERN void DynamicFont_set_fallback(DynamicFont *self,int idx,Ref< DynamicFontData > data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fallback", idx, data);
    }
SWIGINTERN Ref< DynamicFontData > DynamicFont_get_fallback(DynamicFont *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fallback", idx).operator Object *()->cast_to<DynamicFontData>();
    }
SWIGINTERN void DynamicFont_remove_fallback(DynamicFont *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_fallback", idx);
    }
SWIGINTERN int DynamicFont_get_fallback_count(DynamicFont *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fallback_count");
    }
SWIGINTERN void EditorPlugin_apply_changes(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("apply_changes");
    }
SWIGINTERN void EditorPlugin_clear(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN Ref< EditorSpatialGizmo > EditorPlugin_create_spatial_gizmo(EditorPlugin *self,Spatial *for_spatial){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("create_spatial_gizmo", for_spatial).operator Object *()->cast_to<EditorSpatialGizmo>();
    }
SWIGINTERN void EditorPlugin_edit(EditorPlugin *self,Object *object){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("edit", object);
    }
SWIGINTERN bool EditorPlugin_forward_input_event(EditorPlugin *self,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("forward_input_event", event);
    }
SWIGINTERN bool EditorPlugin_forward_spatial_input_event(EditorPlugin *self,Camera *camera,InputEvent const &event){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("forward_spatial_input_event", camera, event);
    }
SWIGINTERN StringArray EditorPlugin_get_breakpoints(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_breakpoints");
    }
SWIGINTERN String EditorPlugin_get_name(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_name");
    }
SWIGINTERN Dictionary EditorPlugin_get_state(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_state");
    }
SWIGINTERN bool EditorPlugin_handles(EditorPlugin *self,Object *object){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("handles", object);
    }
SWIGINTERN bool EditorPlugin_has_main_screen(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_main_screen");
    }
SWIGINTERN void EditorPlugin_make_visible(EditorPlugin *self,bool visible){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("make_visible", visible);
    }
SWIGINTERN void EditorPlugin_set_state(EditorPlugin *self,Dictionary const &state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_state", state);
    }
SWIGINTERN void EditorPlugin_add_control_to_container(EditorPlugin *self,int container,Control *control){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_control_to_container", container, control);
    }
SWIGINTERN void EditorPlugin_add_control_to_bottom_panel(EditorPlugin *self,Control *control,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_control_to_bottom_panel", control, title);
    }
SWIGINTERN void EditorPlugin_add_control_to_dock(EditorPlugin *self,int slot,Control *control){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_control_to_dock", slot, control);
    }
SWIGINTERN void EditorPlugin_remove_control_from_docks(EditorPlugin *self,Control *control){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_control_from_docks", control);
    }
SWIGINTERN void EditorPlugin_remove_control_from_bottom_panel(EditorPlugin *self,Control *control){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_control_from_bottom_panel", control);
    }
SWIGINTERN void EditorPlugin_add_custom_type(EditorPlugin *self,String const &type,String const &base,Ref< Script > script,Ref< Texture > icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_custom_type", type, base, script, icon);
    }
SWIGINTERN void EditorPlugin_remove_custom_type(EditorPlugin *self,String const &type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_custom_type", type);
    }
SWIGINTERN void EditorPlugin_add_import_plugin(EditorPlugin *self,Ref< EditorImportPlugin > plugin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_import_plugin", plugin);
    }
SWIGINTERN void EditorPlugin_remove_import_plugin(EditorPlugin *self,Ref< EditorImportPlugin > plugin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_import_plugin", plugin);
    }
SWIGINTERN void EditorPlugin_add_export_plugin(EditorPlugin *self,Ref< EditorExportPlugin > plugin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_export_plugin", plugin);
    }
SWIGINTERN void EditorPlugin_remove_export_plugin(EditorPlugin *self,Ref< EditorExportPlugin > plugin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_export_plugin", plugin);
    }
SWIGINTERN Control *EditorPlugin_get_base_control(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_base_control").operator Object *()->cast_to<Control>();
    }
SWIGINTERN UndoRedo *EditorPlugin_get_undo_redo(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_undo_redo").operator Object *()->cast_to<UndoRedo>();
    }
SWIGINTERN EditorSelection *EditorPlugin_get_selection(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selection").operator Object *()->cast_to<EditorSelection>();
    }
SWIGINTERN Ref< EditorSettings > EditorPlugin_get_editor_settings(EditorPlugin *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_editor_settings").operator Object *()->cast_to<EditorSettings>();
    }
SWIGINTERN void EventPlayer_set_stream(EventPlayer *self,Ref< EventStream > stream){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stream", stream);
    }
SWIGINTERN Ref< EventStream > EventPlayer_get_stream(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream").operator Object *()->cast_to<EventStream>();
    }
SWIGINTERN void EventPlayer_play(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play");
    }
SWIGINTERN void EventPlayer_stop(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN bool EventPlayer_is_playing(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void EventPlayer_set_paused(EventPlayer *self,bool paused){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_paused", paused);
    }
SWIGINTERN bool EventPlayer_is_paused(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_paused");
    }
SWIGINTERN void EventPlayer_set_loop(EventPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", enabled);
    }
SWIGINTERN bool EventPlayer_has_loop(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN void EventPlayer_set_volume(EventPlayer *self,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume", volume);
    }
SWIGINTERN float EventPlayer_get_volume(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume");
    }
SWIGINTERN void EventPlayer_set_pitch_scale(EventPlayer *self,float pitch_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pitch_scale", pitch_scale);
    }
SWIGINTERN float EventPlayer_get_pitch_scale(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pitch_scale");
    }
SWIGINTERN void EventPlayer_set_tempo_scale(EventPlayer *self,float tempo_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tempo_scale", tempo_scale);
    }
SWIGINTERN float EventPlayer_get_tempo_scale(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tempo_scale");
    }
SWIGINTERN void EventPlayer_set_volume_db(EventPlayer *self,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume_db", db);
    }
SWIGINTERN float EventPlayer_get_volume_db(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume_db");
    }
SWIGINTERN String EventPlayer_get_stream_name(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream_name");
    }
SWIGINTERN int EventPlayer_get_loop_count(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_loop_count");
    }
SWIGINTERN float EventPlayer_get_pos(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN void EventPlayer_seek_pos(EventPlayer *self,float time){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("seek_pos", time);
    }
SWIGINTERN float EventPlayer_get_length(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void EventPlayer_set_autoplay(EventPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autoplay", enabled);
    }
SWIGINTERN bool EventPlayer_has_autoplay(EventPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_autoplay");
    }
SWIGINTERN void EventPlayer_set_channel_volume(EventPlayer *self,int channel,float channel_volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_channel_volume", channel, channel_volume);
    }
SWIGINTERN float EventPlayer_get_channel_volume(EventPlayer *self,int channel){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_channel_volume", channel);
    }
SWIGINTERN float EventPlayer_get_channel_last_note_time(EventPlayer *self,int channel){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_channel_last_note_time", channel);
    }
SWIGINTERN void FixedMaterial_set_parameter(FixedMaterial *self,int param,Variant const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_parameter", param, value);
    }
SWIGINTERN void FixedMaterial_get_parameter(FixedMaterial *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_parameter", param);
    }
SWIGINTERN void FixedMaterial_set_texture(FixedMaterial *self,int param,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", param, texture);
    }
SWIGINTERN Ref< Texture > FixedMaterial_get_texture(FixedMaterial *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture", param).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void FixedMaterial_set_texcoord_mode(FixedMaterial *self,int param,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texcoord_mode", param, mode);
    }
SWIGINTERN int FixedMaterial_get_texcoord_mode(FixedMaterial *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texcoord_mode", param);
    }
SWIGINTERN void FixedMaterial_set_fixed_flag(FixedMaterial *self,int flag,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fixed_flag", flag, value);
    }
SWIGINTERN bool FixedMaterial_get_fixed_flag(FixedMaterial *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fixed_flag", flag);
    }
SWIGINTERN void FixedMaterial_set_uv_transform(FixedMaterial *self,Transform const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_uv_transform", transform);
    }
SWIGINTERN Transform FixedMaterial_get_uv_transform(FixedMaterial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_uv_transform");
    }
SWIGINTERN void FixedMaterial_set_light_shader(FixedMaterial *self,int shader){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_light_shader", shader);
    }
SWIGINTERN int FixedMaterial_get_light_shader(FixedMaterial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_light_shader");
    }
SWIGINTERN void FixedMaterial_set_point_size(FixedMaterial *self,float size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_point_size", size);
    }
SWIGINTERN float FixedMaterial_get_point_size(FixedMaterial *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_point_size");
    }
SWIGINTERN void GeometryInstance_set_material_override(GeometryInstance *self,Object *material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_material_override", material);
    }
SWIGINTERN Object *GeometryInstance_get_material_override(GeometryInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_material_override").operator Object *();
    }
SWIGINTERN void GeometryInstance_set_flag(GeometryInstance *self,int flag,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flag", flag, value);
    }
SWIGINTERN bool GeometryInstance_get_flag(GeometryInstance *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flag", flag);
    }
SWIGINTERN void GeometryInstance_set_cast_shadows_setting(GeometryInstance *self,int shadow_casting_setting){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cast_shadows_setting", shadow_casting_setting);
    }
SWIGINTERN int GeometryInstance_get_cast_shadows_setting(GeometryInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cast_shadows_setting");
    }
SWIGINTERN void GeometryInstance_set_draw_range_begin(GeometryInstance *self,float mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_range_begin", mode);
    }
SWIGINTERN float GeometryInstance_get_draw_range_begin(GeometryInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_range_begin");
    }
SWIGINTERN void GeometryInstance_set_draw_range_end(GeometryInstance *self,float mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_range_end", mode);
    }
SWIGINTERN float GeometryInstance_get_draw_range_end(GeometryInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_range_end");
    }
SWIGINTERN void GeometryInstance_set_baked_light_texture_id(GeometryInstance *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_baked_light_texture_id", id);
    }
SWIGINTERN int GeometryInstance_get_baked_light_texture_id(GeometryInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_baked_light_texture_id");
    }
SWIGINTERN void GeometryInstance_set_extra_cull_margin(GeometryInstance *self,float margin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_extra_cull_margin", margin);
    }
SWIGINTERN float GeometryInstance_get_extra_cull_margin(GeometryInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_extra_cull_margin");
    }
SWIGINTERN int GraphEdit_connect_node(GraphEdit *self,String const &from,int from_port,String const &to,int to_port){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("connect_node", from, from_port, to, to_port);
    }
SWIGINTERN bool GraphEdit_is_node_connected(GraphEdit *self,String const &from,int from_port,String const &to,int to_port){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_node_connected", from, from_port, to, to_port);
    }
SWIGINTERN void GraphEdit_disconnect_node(GraphEdit *self,String const &from,int from_port,String const &to,int to_port){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("disconnect_node", from, from_port, to, to_port);
    }
SWIGINTERN Array GraphEdit_get_connection_list(GraphEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_list");
    }
SWIGINTERN Vector2 GraphEdit_get_scroll_ofs(GraphEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scroll_ofs");
    }
SWIGINTERN void GraphEdit_set_zoom(GraphEdit *self,float p_zoom){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_zoom", p_zoom);
    }
SWIGINTERN float GraphEdit_get_zoom(GraphEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_zoom");
    }
SWIGINTERN void GraphEdit_set_right_disconnects(GraphEdit *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_right_disconnects", enable);
    }
SWIGINTERN bool GraphEdit_is_right_disconnects_enabled(GraphEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_right_disconnects_enabled");
    }
SWIGINTERN void GridMap_set_theme(GridMap *self,Ref< MeshLibrary > theme){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_theme", theme);
    }
SWIGINTERN Ref< MeshLibrary > GridMap_get_theme(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_theme").operator Object *()->cast_to<MeshLibrary>();
    }
SWIGINTERN void GridMap_set_bake(GridMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bake", enable);
    }
SWIGINTERN bool GridMap_is_baking_enabled(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_baking_enabled");
    }
SWIGINTERN void GridMap_set_cell_size(GridMap *self,float size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cell_size", size);
    }
SWIGINTERN float GridMap_get_cell_size(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_size");
    }
SWIGINTERN void GridMap_set_octant_size(GridMap *self,int size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_octant_size", size);
    }
SWIGINTERN int GridMap_get_octant_size(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_octant_size");
    }
SWIGINTERN void GridMap_set_cell_item__SWIG_0(GridMap *self,int x,int y,int z,int item,int orientation=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cell_item", x, y, z, item, orientation);
    }
SWIGINTERN int GridMap_get_cell_item(GridMap *self,int x,int y,int z){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_item", x, y, z);
    }
SWIGINTERN int GridMap_get_cell_item_orientation(GridMap *self,int x,int y,int z){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_item_orientation", x, y, z);
    }
SWIGINTERN void GridMap_resource_changed(GridMap *self,Object *resource){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("resource_changed", resource);
    }
SWIGINTERN void GridMap_set_center_x(GridMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_center_x", enable);
    }
SWIGINTERN bool GridMap_get_center_x(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_center_x");
    }
SWIGINTERN void GridMap_set_center_y(GridMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_center_y", enable);
    }
SWIGINTERN bool GridMap_get_center_y(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_center_y");
    }
SWIGINTERN void GridMap_set_center_z(GridMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_center_z", enable);
    }
SWIGINTERN bool GridMap_get_center_z(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_center_z");
    }
SWIGINTERN void GridMap_set_clip__SWIG_0(GridMap *self,bool enabled,bool clipabove=true,int floor=0,int axis=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_clip", enabled, clipabove, floor, axis);
    }
SWIGINTERN int GridMap_create_area(GridMap *self,int id,AABB const &area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("create_area", id, area);
    }
SWIGINTERN AABB GridMap_area_get_bounds(GridMap *self,int area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_bounds", area);
    }
SWIGINTERN void GridMap_area_set_exterior_portal(GridMap *self,int area,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_exterior_portal", area, enable);
    }
SWIGINTERN void GridMap_area_set_name(GridMap *self,int area,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_name", area, name);
    }
SWIGINTERN String GridMap_area_get_name(GridMap *self,int area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_name", area);
    }
SWIGINTERN bool GridMap_area_is_exterior_portal(GridMap *self,int area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_is_exterior_portal", area);
    }
SWIGINTERN void GridMap_area_set_portal_disable_distance(GridMap *self,int area,float distance){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_portal_disable_distance", area, distance);
    }
SWIGINTERN float GridMap_area_get_portal_disable_distance(GridMap *self,int area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_portal_disable_distance", area);
    }
SWIGINTERN void GridMap_area_set_portal_disable_color(GridMap *self,int area,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("area_set_portal_disable_color", area, color);
    }
SWIGINTERN Color GridMap_area_get_portal_disable_color(GridMap *self,int area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("area_get_portal_disable_color", area);
    }
SWIGINTERN void GridMap_erase_area(GridMap *self,int area){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_area", area);
    }
SWIGINTERN int GridMap_get_unused_area_id(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unused_area_id");
    }
SWIGINTERN void GridMap_bake_geometry(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("bake_geometry");
    }
SWIGINTERN void GridMap_set_use_baked_light(GridMap *self,bool use){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_baked_light", use);
    }
SWIGINTERN bool GridMap_is_using_baked_light(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_baked_light");
    }
SWIGINTERN void GridMap_clear(GridMap *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN int HTTPRequest_request__SWIG_0(HTTPRequest *self,String const &url,StringArray const &custom_headers=StringArray(),bool ssl_validate_domain=true){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("request", url, custom_headers, ssl_validate_domain);
    }
SWIGINTERN void HTTPRequest_cancel_request(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cancel_request");
    }
SWIGINTERN int HTTPRequest_get_http_client_status(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_http_client_status");
    }
SWIGINTERN void HTTPRequest_set_use_threads(HTTPRequest *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_threads", enable);
    }
SWIGINTERN bool HTTPRequest_is_using_threads(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_threads");
    }
SWIGINTERN void HTTPRequest_set_body_size_limit(HTTPRequest *self,int bytes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_body_size_limit", bytes);
    }
SWIGINTERN int HTTPRequest_get_body_size_limit(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_body_size_limit");
    }
SWIGINTERN void HTTPRequest_set_max_redirects(HTTPRequest *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_redirects", amount);
    }
SWIGINTERN int HTTPRequest_get_max_redirects(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_redirects");
    }
SWIGINTERN void HTTPRequest_set_download_file(HTTPRequest *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_download_file", path);
    }
SWIGINTERN String HTTPRequest_get_download_file(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_download_file");
    }
SWIGINTERN int HTTPRequest_get_downloaded_bytes(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_downloaded_bytes");
    }
SWIGINTERN int HTTPRequest_get_body_size(HTTPRequest *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_body_size");
    }
SWIGINTERN void ImmediateGeometry_begin(ImmediateGeometry *self,int primitive,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("begin", primitive, texture);
    }
SWIGINTERN void ImmediateGeometry_set_normal(ImmediateGeometry *self,Vector3 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_normal", normal);
    }
SWIGINTERN void ImmediateGeometry_set_tangent(ImmediateGeometry *self,Plane const &tangent){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tangent", tangent);
    }
SWIGINTERN void ImmediateGeometry_set_color(ImmediateGeometry *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN void ImmediateGeometry_set_uv(ImmediateGeometry *self,Vector2 const &uv){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_uv", uv);
    }
SWIGINTERN void ImmediateGeometry_set_uv2(ImmediateGeometry *self,Vector2 const &uv){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_uv2", uv);
    }
SWIGINTERN void ImmediateGeometry_add_vertex(ImmediateGeometry *self,Vector3 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_vertex", pos);
    }
SWIGINTERN void ImmediateGeometry_add_sphere(ImmediateGeometry *self,int lats,int lons,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_sphere", lats, lons, radius);
    }
SWIGINTERN void ImmediateGeometry_end(ImmediateGeometry *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("end");
    }
SWIGINTERN void ImmediateGeometry_clear(ImmediateGeometry *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void InstancePlaceholder_replace_by_instance__SWIG_0(InstancePlaceholder *self,Ref< PackedScene > custom_scene=Ref< PackedScene >()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("replace_by_instance", custom_scene);
    }
SWIGINTERN String InstancePlaceholder_get_instance_path(InstancePlaceholder *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_instance_path");
    }
SWIGINTERN void InterpolatedCamera_set_target_path(InterpolatedCamera *self,NodePath const &target_path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_target_path", target_path);
    }
SWIGINTERN NodePath InterpolatedCamera_get_target_path(InterpolatedCamera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_target_path");
    }
SWIGINTERN void InterpolatedCamera_set_target(InterpolatedCamera *self,Camera *target){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_target", target);
    }
SWIGINTERN void InterpolatedCamera_set_speed(InterpolatedCamera *self,float speed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_speed", speed);
    }
SWIGINTERN float InterpolatedCamera_get_speed(InterpolatedCamera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_speed");
    }
SWIGINTERN void InterpolatedCamera_set_interpolation_enabled(InterpolatedCamera *self,bool target_path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_interpolation_enabled", target_path);
    }
SWIGINTERN bool InterpolatedCamera_is_interpolation_enabled(InterpolatedCamera *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_interpolation_enabled");
    }
SWIGINTERN void InverseKinematics_set_bone_name(InverseKinematics *self,String const &ik_bone){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_name", ik_bone);
    }
SWIGINTERN String InverseKinematics_get_bone_name(InverseKinematics *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_name");
    }
SWIGINTERN void InverseKinematics_set_iterations(InverseKinematics *self,int iterations){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_iterations", iterations);
    }
SWIGINTERN int InverseKinematics_get_iterations(InverseKinematics *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_iterations");
    }
SWIGINTERN void InverseKinematics_set_chain_size(InverseKinematics *self,int chain_size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_chain_size", chain_size);
    }
SWIGINTERN int InverseKinematics_get_chain_size(InverseKinematics *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_chain_size");
    }
SWIGINTERN void InverseKinematics_set_precision(InverseKinematics *self,float precision){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_precision", precision);
    }
SWIGINTERN float InverseKinematics_get_precision(InverseKinematics *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_precision");
    }
SWIGINTERN void InverseKinematics_set_speed(InverseKinematics *self,float speed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_speed", speed);
    }
SWIGINTERN float InverseKinematics_get_speed(InverseKinematics *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_speed");
    }
SWIGINTERN void ItemList_add_item__SWIG_0(ItemList *self,String const &text,Ref< Texture > icon=Ref< Texture >(),bool selectable=true){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_item", text, icon, selectable);
    }
SWIGINTERN void ItemList_add_icon_item__SWIG_0(ItemList *self,Ref< Texture > icon,bool selectable=true){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_icon_item", icon, selectable);
    }
SWIGINTERN void ItemList_set_item_text(ItemList *self,int idx,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_text", idx, text);
    }
SWIGINTERN String ItemList_get_item_text(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_text", idx);
    }
SWIGINTERN void ItemList_set_item_icon(ItemList *self,int idx,Ref< Texture > icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_icon", idx, icon);
    }
SWIGINTERN Ref< Texture > ItemList_get_item_icon(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_icon", idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void ItemList_set_item_icon_region(ItemList *self,int idx,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_icon_region", idx, rect);
    }
SWIGINTERN Rect2 ItemList_get_item_icon_region(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_icon_region", idx);
    }
SWIGINTERN void ItemList_set_item_selectable(ItemList *self,int idx,bool selectable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_selectable", idx, selectable);
    }
SWIGINTERN bool ItemList_is_item_selectable(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_selectable", idx);
    }
SWIGINTERN void ItemList_set_item_disabled(ItemList *self,int idx,bool disabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_disabled", idx, disabled);
    }
SWIGINTERN bool ItemList_is_item_disabled(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_disabled", idx);
    }
SWIGINTERN void ItemList_set_item_metadata(ItemList *self,int idx,Variant const &metadata){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_metadata", idx, metadata);
    }
SWIGINTERN void ItemList_get_item_metadata(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_item_metadata", idx);
    }
SWIGINTERN void ItemList_set_item_custom_bg_color(ItemList *self,int idx,Color const &custom_bg_color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_custom_bg_color", idx, custom_bg_color);
    }
SWIGINTERN Color ItemList_get_item_custom_bg_color(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_custom_bg_color", idx);
    }
SWIGINTERN void ItemList_set_item_tooltip(ItemList *self,int idx,String const &tooltip){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_tooltip", idx, tooltip);
    }
SWIGINTERN String ItemList_get_item_tooltip(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_tooltip", idx);
    }
SWIGINTERN void ItemList_select__SWIG_0(ItemList *self,int idx,bool single=true){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select", idx, single);
    }
SWIGINTERN void ItemList_unselect(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("unselect", idx);
    }
SWIGINTERN bool ItemList_is_selected(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_selected", idx);
    }
SWIGINTERN int ItemList_get_item_count(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_count");
    }
SWIGINTERN void ItemList_remove_item(ItemList *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_item", idx);
    }
SWIGINTERN void ItemList_clear(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void ItemList_sort_items_by_text(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("sort_items_by_text");
    }
SWIGINTERN void ItemList_set_fixed_column_width(ItemList *self,int width){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fixed_column_width", width);
    }
SWIGINTERN int ItemList_get_fixed_column_width(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fixed_column_width");
    }
SWIGINTERN void ItemList_set_same_column_width(ItemList *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_same_column_width", enable);
    }
SWIGINTERN int ItemList_is_same_column_width(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_same_column_width");
    }
SWIGINTERN void ItemList_set_max_text_lines(ItemList *self,int lines){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_text_lines", lines);
    }
SWIGINTERN int ItemList_get_max_text_lines(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_text_lines");
    }
SWIGINTERN void ItemList_set_max_columns(ItemList *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_columns", amount);
    }
SWIGINTERN int ItemList_get_max_columns(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_columns");
    }
SWIGINTERN void ItemList_set_select_mode(ItemList *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_select_mode", mode);
    }
SWIGINTERN int ItemList_get_select_mode(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_select_mode");
    }
SWIGINTERN void ItemList_set_icon_mode(ItemList *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon_mode", mode);
    }
SWIGINTERN int ItemList_get_icon_mode(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon_mode");
    }
SWIGINTERN void ItemList_set_min_icon_size(ItemList *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_min_icon_size", size);
    }
SWIGINTERN Vector2 ItemList_get_min_icon_size(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_min_icon_size");
    }
SWIGINTERN void ItemList_set_max_icon_size(ItemList *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_icon_size", size);
    }
SWIGINTERN Vector2 ItemList_get_max_icon_size(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_icon_size");
    }
SWIGINTERN void ItemList_set_icon_scale(ItemList *self,float scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_icon_scale", scale);
    }
SWIGINTERN float ItemList_get_icon_scale(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_icon_scale");
    }
SWIGINTERN void ItemList_set_allow_rmb_select(ItemList *self,bool allow){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_allow_rmb_select", allow);
    }
SWIGINTERN bool ItemList_get_allow_rmb_select(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_allow_rmb_select");
    }
SWIGINTERN int ItemList_get_item_at_pos__SWIG_0(ItemList *self,Vector2 const &pos,bool exact=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_at_pos", pos, exact);
    }
SWIGINTERN void ItemList_ensure_current_is_visible(ItemList *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("ensure_current_is_visible");
    }
SWIGINTERN void Joint_set_node_a(Joint *self,NodePath const &node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_node_a", node);
    }
SWIGINTERN NodePath Joint_get_node_a(Joint *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_a");
    }
SWIGINTERN void Joint_set_node_b(Joint *self,NodePath const &node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_node_b", node);
    }
SWIGINTERN NodePath Joint_get_node_b(Joint *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_b");
    }
SWIGINTERN void Joint_set_solver_priority(Joint *self,int priority){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_solver_priority", priority);
    }
SWIGINTERN int Joint_get_solver_priority(Joint *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_solver_priority");
    }
SWIGINTERN void Joint_set_exclude_nodes_from_collision(Joint *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_exclude_nodes_from_collision", enable);
    }
SWIGINTERN bool Joint_get_exclude_nodes_from_collision(Joint *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_exclude_nodes_from_collision");
    }
SWIGINTERN void Label_set_align(Label *self,int align){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_align", align);
    }
SWIGINTERN int Label_get_align(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_align");
    }
SWIGINTERN void Label_set_valign(Label *self,int valign){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_valign", valign);
    }
SWIGINTERN int Label_get_valign(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_valign");
    }
SWIGINTERN void Label_set_text(Label *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", text);
    }
SWIGINTERN String Label_get_text(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text");
    }
SWIGINTERN void Label_set_autowrap(Label *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autowrap", enable);
    }
SWIGINTERN bool Label_has_autowrap(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_autowrap");
    }
SWIGINTERN void Label_set_clip_text(Label *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_clip_text", enable);
    }
SWIGINTERN bool Label_is_clipping_text(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_clipping_text");
    }
SWIGINTERN void Label_set_uppercase(Label *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_uppercase", enable);
    }
SWIGINTERN bool Label_is_uppercase(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_uppercase");
    }
SWIGINTERN int Label_get_line_height(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line_height");
    }
SWIGINTERN int Label_get_line_count(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line_count");
    }
SWIGINTERN int Label_get_total_character_count(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_character_count");
    }
SWIGINTERN void Label_set_visible_characters(Label *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_visible_characters", amount);
    }
SWIGINTERN int Label_get_visible_characters(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visible_characters");
    }
SWIGINTERN void Label_set_percent_visible(Label *self,float percent_visible){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_percent_visible", percent_visible);
    }
SWIGINTERN float Label_get_percent_visible(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_percent_visible");
    }
SWIGINTERN void Label_set_lines_skipped(Label *self,int lines_skipped){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_lines_skipped", lines_skipped);
    }
SWIGINTERN int Label_get_lines_skipped(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_lines_skipped");
    }
SWIGINTERN void Label_set_max_lines_visible(Label *self,int lines_visible){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_lines_visible", lines_visible);
    }
SWIGINTERN int Label_get_max_lines_visible(Label *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_lines_visible");
    }
SWIGINTERN void Light_set_parameter(Light *self,int variable,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_parameter", variable, value);
    }
SWIGINTERN float Light_get_parameter(Light *self,int variable){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_parameter", variable);
    }
SWIGINTERN void Light_set_color(Light *self,int color,Color const &value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color, value);
    }
SWIGINTERN Color Light_get_color(Light *self,int color){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color", color);
    }
SWIGINTERN void Light_set_project_shadows(Light *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_project_shadows", enable);
    }
SWIGINTERN bool Light_has_project_shadows(Light *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_project_shadows");
    }
SWIGINTERN void Light_set_projector(Light *self,Ref< Texture > projector){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_projector", projector);
    }
SWIGINTERN Ref< Texture > Light_get_projector(Light *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_projector").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void Light_set_operator(Light *self,int operator_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_operator", operator_);
    }
SWIGINTERN int Light_get_operator(Light *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_operator");
    }
SWIGINTERN void Light_set_bake_mode(Light *self,int bake_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bake_mode", bake_mode);
    }
SWIGINTERN int Light_get_bake_mode(Light *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bake_mode");
    }
SWIGINTERN void Light_set_enabled(Light *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool Light_is_enabled(Light *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void Light_set_editor_only(Light *self,bool editor_only){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_editor_only", editor_only);
    }
SWIGINTERN bool Light_is_editor_only(Light *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editor_only");
    }
SWIGINTERN void LineEdit_set_align(LineEdit *self,int align){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_align", align);
    }
SWIGINTERN int LineEdit_get_align(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_align");
    }
SWIGINTERN void LineEdit_clear(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void LineEdit_select_all(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select_all");
    }
SWIGINTERN void LineEdit_set_text(LineEdit *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", text);
    }
SWIGINTERN String LineEdit_get_text(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text");
    }
SWIGINTERN void LineEdit_set_cursor_pos(LineEdit *self,int pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cursor_pos", pos);
    }
SWIGINTERN int LineEdit_get_cursor_pos(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cursor_pos");
    }
SWIGINTERN void LineEdit_set_max_length(LineEdit *self,int chars){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_length", chars);
    }
SWIGINTERN int LineEdit_get_max_length(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_length");
    }
SWIGINTERN void LineEdit_append_at_cursor(LineEdit *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("append_at_cursor", text);
    }
SWIGINTERN void LineEdit_set_editable(LineEdit *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_editable", enabled);
    }
SWIGINTERN bool LineEdit_is_editable(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editable");
    }
SWIGINTERN void LineEdit_set_secret(LineEdit *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_secret", enabled);
    }
SWIGINTERN bool LineEdit_is_secret(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_secret");
    }
SWIGINTERN void LineEdit_select__SWIG_0(LineEdit *self,int from=0,int to=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select", from, to);
    }
SWIGINTERN void LineEdit_menu_option(LineEdit *self,int option){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("menu_option", option);
    }
SWIGINTERN PopupMenu *LineEdit_get_menu(LineEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_menu").operator Object *()->cast_to<PopupMenu>();
    }
SWIGINTERN void MeshInstance_set_mesh(MeshInstance *self,Ref< Mesh > mesh){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mesh", mesh);
    }
SWIGINTERN Ref< Mesh > MeshInstance_get_mesh(MeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mesh").operator Object *()->cast_to<Mesh>();
    }
SWIGINTERN void MeshInstance_set_skeleton_path(MeshInstance *self,NodePath const &skeleton_path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_skeleton_path", skeleton_path);
    }
SWIGINTERN NodePath MeshInstance_get_skeleton_path(MeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_skeleton_path");
    }
SWIGINTERN AABB MeshInstance_get_aabb(MeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_aabb");
    }
SWIGINTERN void MeshInstance_create_trimesh_collision(MeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_trimesh_collision");
    }
SWIGINTERN void MeshInstance_create_convex_collision(MeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("create_convex_collision");
    }
SWIGINTERN void MultiMeshInstance_set_multimesh(MultiMeshInstance *self,Object *multimesh){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_multimesh", multimesh);
    }
SWIGINTERN Object *MultiMeshInstance_get_multimesh(MultiMeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_multimesh").operator Object *();
    }
SWIGINTERN int Navigation_navmesh_create__SWIG_0(Navigation *self,Ref< NavigationMesh > mesh,Transform const &xform,Object *owner=NULL){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("navmesh_create", mesh, xform, owner);
    }
SWIGINTERN void Navigation_navmesh_set_transform(Navigation *self,int id,Transform const &xform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("navmesh_set_transform", id, xform);
    }
SWIGINTERN void Navigation_navmesh_remove(Navigation *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("navmesh_remove", id);
    }
SWIGINTERN Vector3Array Navigation_get_simple_path__SWIG_0(Navigation *self,Vector3 const &start,Vector3 const &end,bool optimize=true){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_simple_path", start, end, optimize);
    }
SWIGINTERN Vector3 Navigation_get_closest_point_to_segment__SWIG_0(Navigation *self,Vector3 const &start,Vector3 const &end,bool use_collision=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point_to_segment", start, end, use_collision);
    }
SWIGINTERN Vector3 Navigation_get_closest_point(Navigation *self,Vector3 const &to_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point", to_point);
    }
SWIGINTERN Vector3 Navigation_get_closest_point_normal(Navigation *self,Vector3 const &to_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point_normal", to_point);
    }
SWIGINTERN Object *Navigation_get_closest_point_owner(Navigation *self,Vector3 const &to_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point_owner", to_point).operator Object *();
    }
SWIGINTERN void Navigation_set_up_vector(Navigation *self,Vector3 const &up){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_up_vector", up);
    }
SWIGINTERN Vector3 Navigation_get_up_vector(Navigation *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_up_vector");
    }
SWIGINTERN void NavigationMeshInstance_set_navigation_mesh(NavigationMeshInstance *self,Object *navmesh){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_navigation_mesh", navmesh);
    }
SWIGINTERN Object *NavigationMeshInstance_get_navigation_mesh(NavigationMeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_navigation_mesh").operator Object *();
    }
SWIGINTERN void NavigationMeshInstance_set_enabled(NavigationMeshInstance *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool NavigationMeshInstance_is_enabled(NavigationMeshInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void Node2D_set_pos(Node2D *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pos", pos);
    }
SWIGINTERN void Node2D_set_rot(Node2D *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rot", radians);
    }
SWIGINTERN void Node2D_set_rotd(Node2D *self,float degrees){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotd", degrees);
    }
SWIGINTERN void Node2D_set_scale(Node2D *self,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scale", scale);
    }
SWIGINTERN Vector2 Node2D_get_pos(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pos");
    }
SWIGINTERN float Node2D_get_rot(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rot");
    }
SWIGINTERN float Node2D_get_rotd(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotd");
    }
SWIGINTERN Vector2 Node2D_get_scale(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scale");
    }
SWIGINTERN void Node2D_rotate(Node2D *self,float radians){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("rotate", radians);
    }
SWIGINTERN void Node2D_move_local_x__SWIG_0(Node2D *self,float delta,bool scaled=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("move_local_x", delta, scaled);
    }
SWIGINTERN void Node2D_move_local_y__SWIG_0(Node2D *self,float delta,bool scaled=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("move_local_y", delta, scaled);
    }
SWIGINTERN void Node2D_translate(Node2D *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("translate", offset);
    }
SWIGINTERN void Node2D_global_translate(Node2D *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("global_translate", offset);
    }
SWIGINTERN void Node2D_scale(Node2D *self,Vector2 const &ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scale", ratio);
    }
SWIGINTERN void Node2D_set_global_pos(Node2D *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_global_pos", pos);
    }
SWIGINTERN Vector2 Node2D_get_global_pos(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_global_pos");
    }
SWIGINTERN void Node2D_set_transform(Node2D *self,Matrix32 const &xform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_transform", xform);
    }
SWIGINTERN void Node2D_set_global_transform(Node2D *self,Matrix32 const &xform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_global_transform", xform);
    }
SWIGINTERN void Node2D_look_at(Node2D *self,Vector2 const &point){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("look_at", point);
    }
SWIGINTERN float Node2D_get_angle_to(Node2D *self,Vector2 const &point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angle_to", point);
    }
SWIGINTERN void Node2D_set_z(Node2D *self,int z){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_z", z);
    }
SWIGINTERN int Node2D_get_z(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_z");
    }
SWIGINTERN void Node2D_set_z_as_relative(Node2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_z_as_relative", enable);
    }
SWIGINTERN bool Node2D_is_z_relative(Node2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_z_relative");
    }
SWIGINTERN void Node2D_edit_set_pivot(Node2D *self,Vector2 const &pivot){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("edit_set_pivot", pivot);
    }
SWIGINTERN Matrix32 Node2D_get_relative_transform_to_parent(Node2D *self,Object *parent){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_relative_transform_to_parent", parent);
    }
SWIGINTERN void ParallaxBackground_set_scroll_offset(ParallaxBackground *self,Vector2 const &ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scroll_offset", ofs);
    }
SWIGINTERN Vector2 ParallaxBackground_get_scroll_offset(ParallaxBackground *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scroll_offset");
    }
SWIGINTERN void ParallaxBackground_set_scroll_base_offset(ParallaxBackground *self,Vector2 const &ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scroll_base_offset", ofs);
    }
SWIGINTERN Vector2 ParallaxBackground_get_scroll_base_offset(ParallaxBackground *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scroll_base_offset");
    }
SWIGINTERN void ParallaxBackground_set_scroll_base_scale(ParallaxBackground *self,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scroll_base_scale", scale);
    }
SWIGINTERN Vector2 ParallaxBackground_get_scroll_base_scale(ParallaxBackground *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scroll_base_scale");
    }
SWIGINTERN void ParallaxBackground_set_limit_begin(ParallaxBackground *self,Vector2 const &ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_limit_begin", ofs);
    }
SWIGINTERN Vector2 ParallaxBackground_get_limit_begin(ParallaxBackground *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_limit_begin");
    }
SWIGINTERN void ParallaxBackground_set_limit_end(ParallaxBackground *self,Vector2 const &ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_limit_end", ofs);
    }
SWIGINTERN Vector2 ParallaxBackground_get_limit_end(ParallaxBackground *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_limit_end");
    }
SWIGINTERN void ParallaxBackground_set_ignore_camera_zoom(ParallaxBackground *self,bool ignore){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ignore_camera_zoom", ignore);
    }
SWIGINTERN bool ParallaxBackground_is_ignore_camera_zoom(ParallaxBackground *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_ignore_camera_zoom");
    }
SWIGINTERN void ParallaxLayer_set_motion_scale(ParallaxLayer *self,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_motion_scale", scale);
    }
SWIGINTERN Vector2 ParallaxLayer_get_motion_scale(ParallaxLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_motion_scale");
    }
SWIGINTERN void ParallaxLayer_set_mirroring(ParallaxLayer *self,Vector2 const &mirror){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mirroring", mirror);
    }
SWIGINTERN Vector2 ParallaxLayer_get_mirroring(ParallaxLayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mirroring");
    }
SWIGINTERN void ParticleAttractor2D_set_enabled(ParticleAttractor2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool ParticleAttractor2D_is_enabled(ParticleAttractor2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void ParticleAttractor2D_set_radius(ParticleAttractor2D *self,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radius", radius);
    }
SWIGINTERN float ParticleAttractor2D_get_radius(ParticleAttractor2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radius");
    }
SWIGINTERN void ParticleAttractor2D_set_disable_radius(ParticleAttractor2D *self,float radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_disable_radius", radius);
    }
SWIGINTERN float ParticleAttractor2D_get_disable_radius(ParticleAttractor2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_disable_radius");
    }
SWIGINTERN void ParticleAttractor2D_set_gravity(ParticleAttractor2D *self,float gravity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity", gravity);
    }
SWIGINTERN float ParticleAttractor2D_get_gravity(ParticleAttractor2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity");
    }
SWIGINTERN void ParticleAttractor2D_set_absorption(ParticleAttractor2D *self,float absorption){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_absorption", absorption);
    }
SWIGINTERN float ParticleAttractor2D_get_absorption(ParticleAttractor2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_absorption");
    }
SWIGINTERN void ParticleAttractor2D_set_particles_path(ParticleAttractor2D *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_particles_path", path);
    }
SWIGINTERN NodePath ParticleAttractor2D_get_particles_path(ParticleAttractor2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_particles_path");
    }
SWIGINTERN void Particles_set_amount(Particles *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_amount", amount);
    }
SWIGINTERN int Particles_get_amount(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_amount");
    }
SWIGINTERN void Particles_set_emitting(Particles *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emitting", enabled);
    }
SWIGINTERN bool Particles_is_emitting(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_emitting");
    }
SWIGINTERN void Particles_set_visibility_aabb(Particles *self,AABB const &aabb){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_visibility_aabb", aabb);
    }
SWIGINTERN AABB Particles_get_visibility_aabb(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visibility_aabb");
    }
SWIGINTERN void Particles_set_emission_half_extents(Particles *self,Vector3 const &half_extents){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emission_half_extents", half_extents);
    }
SWIGINTERN Vector3 Particles_get_emission_half_extents(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emission_half_extents");
    }
SWIGINTERN void Particles_set_emission_base_velocity(Particles *self,Vector3 const &base_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emission_base_velocity", base_velocity);
    }
SWIGINTERN Vector3 Particles_get_emission_base_velocity(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emission_base_velocity");
    }
SWIGINTERN void Particles_set_emission_points(Particles *self,Vector3Array const &points){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emission_points", points);
    }
SWIGINTERN Vector3Array Particles_get_emission_points(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emission_points");
    }
SWIGINTERN void Particles_set_gravity_normal(Particles *self,Vector3 const &normal){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_normal", normal);
    }
SWIGINTERN Vector3 Particles_get_gravity_normal(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_normal");
    }
SWIGINTERN void Particles_set_variable(Particles *self,int variable,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_variable", variable, value);
    }
SWIGINTERN float Particles_get_variable(Particles *self,int variable){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_variable", variable);
    }
SWIGINTERN void Particles_set_randomness(Particles *self,int variable,float randomness){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_randomness", variable, randomness);
    }
SWIGINTERN float Particles_get_randomness(Particles *self,int variable){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_randomness", variable);
    }
SWIGINTERN void Particles_set_color_phase_pos(Particles *self,int phase,float pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color_phase_pos", phase, pos);
    }
SWIGINTERN float Particles_get_color_phase_pos(Particles *self,int phase){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_phase_pos", phase);
    }
SWIGINTERN void Particles_set_color_phase_color(Particles *self,int phase,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color_phase_color", phase, color);
    }
SWIGINTERN Color Particles_get_color_phase_color(Particles *self,int phase){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_phase_color", phase);
    }
SWIGINTERN void Particles_set_material(Particles *self,Ref< Material > material){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_material", material);
    }
SWIGINTERN Ref< Material > Particles_get_material(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_material").operator Object *()->cast_to<Material>();
    }
SWIGINTERN void Particles_set_emit_timeout(Particles *self,float timeout){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emit_timeout", timeout);
    }
SWIGINTERN float Particles_get_emit_timeout(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emit_timeout");
    }
SWIGINTERN void Particles_set_height_from_velocity(Particles *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_height_from_velocity", enable);
    }
SWIGINTERN bool Particles_has_height_from_velocity(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_height_from_velocity");
    }
SWIGINTERN void Particles_set_use_local_coordinates(Particles *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_local_coordinates", enable);
    }
SWIGINTERN bool Particles_is_using_local_coordinates(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_local_coordinates");
    }
SWIGINTERN void Particles_set_color_phases(Particles *self,int count){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color_phases", count);
    }
SWIGINTERN int Particles_get_color_phases(Particles *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_phases");
    }
SWIGINTERN void Particles2D_set_emitting(Particles2D *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emitting", active);
    }
SWIGINTERN bool Particles2D_is_emitting(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_emitting");
    }
SWIGINTERN void Particles2D_set_amount(Particles2D *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_amount", amount);
    }
SWIGINTERN int Particles2D_get_amount(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_amount");
    }
SWIGINTERN void Particles2D_set_lifetime(Particles2D *self,float lifetime){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_lifetime", lifetime);
    }
SWIGINTERN float Particles2D_get_lifetime(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_lifetime");
    }
SWIGINTERN void Particles2D_set_time_scale(Particles2D *self,float time_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_time_scale", time_scale);
    }
SWIGINTERN float Particles2D_get_time_scale(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_time_scale");
    }
SWIGINTERN void Particles2D_set_pre_process_time(Particles2D *self,float time){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pre_process_time", time);
    }
SWIGINTERN float Particles2D_get_pre_process_time(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pre_process_time");
    }
SWIGINTERN void Particles2D_set_emit_timeout(Particles2D *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emit_timeout", value);
    }
SWIGINTERN float Particles2D_get_emit_timeout(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emit_timeout");
    }
SWIGINTERN void Particles2D_set_param(Particles2D *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float Particles2D_get_param(Particles2D *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void Particles2D_set_randomness(Particles2D *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_randomness", param, value);
    }
SWIGINTERN float Particles2D_get_randomness(Particles2D *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_randomness", param);
    }
SWIGINTERN Ref< Texture > Particles2D_set_texture(Particles2D *self,Object *texture){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("set_texture", texture).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< Texture > Particles2D_get_texture(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void Particles2D_set_color(Particles2D *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN Color Particles2D_get_color(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color");
    }
SWIGINTERN Ref< ColorRamp > Particles2D_set_color_ramp(Particles2D *self,Object *color_ramp){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("set_color_ramp", color_ramp).operator Object *()->cast_to<ColorRamp>();
    }
SWIGINTERN Ref< ColorRamp > Particles2D_get_color_ramp(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_ramp").operator Object *()->cast_to<ColorRamp>();
    }
SWIGINTERN void Particles2D_set_emissor_offset(Particles2D *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emissor_offset", offset);
    }
SWIGINTERN Vector2 Particles2D_get_emissor_offset(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emissor_offset");
    }
SWIGINTERN void Particles2D_set_flip_h(Particles2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_h", enable);
    }
SWIGINTERN bool Particles2D_is_flipped_h(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_h");
    }
SWIGINTERN void Particles2D_set_flip_v(Particles2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_v", enable);
    }
SWIGINTERN bool Particles2D_is_flipped_v(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_v");
    }
SWIGINTERN void Particles2D_set_h_frames(Particles2D *self,int enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_frames", enable);
    }
SWIGINTERN int Particles2D_get_h_frames(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_h_frames");
    }
SWIGINTERN void Particles2D_set_v_frames(Particles2D *self,int enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_frames", enable);
    }
SWIGINTERN int Particles2D_get_v_frames(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_frames");
    }
SWIGINTERN void Particles2D_set_emission_half_extents(Particles2D *self,Vector2 const &extents){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emission_half_extents", extents);
    }
SWIGINTERN Vector2 Particles2D_get_emission_half_extents(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emission_half_extents");
    }
SWIGINTERN void Particles2D_set_color_phases(Particles2D *self,int phases){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color_phases", phases);
    }
SWIGINTERN int Particles2D_get_color_phases(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_phases");
    }
SWIGINTERN void Particles2D_set_color_phase_color(Particles2D *self,int phase,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color_phase_color", phase, color);
    }
SWIGINTERN Color Particles2D_get_color_phase_color(Particles2D *self,int phase){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_phase_color", phase);
    }
SWIGINTERN void Particles2D_set_color_phase_pos(Particles2D *self,int phase,float pos){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color_phase_pos", phase, pos);
    }
SWIGINTERN float Particles2D_get_color_phase_pos(Particles2D *self,int phase){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color_phase_pos", phase);
    }
SWIGINTERN void Particles2D_pre_process(Particles2D *self,float time){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("pre_process", time);
    }
SWIGINTERN void Particles2D_reset(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("reset");
    }
SWIGINTERN void Particles2D_set_use_local_space(Particles2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_local_space", enable);
    }
SWIGINTERN bool Particles2D_is_using_local_space(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_local_space");
    }
SWIGINTERN void Particles2D_set_initial_velocity(Particles2D *self,Vector2 const &velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_initial_velocity", velocity);
    }
SWIGINTERN Vector2 Particles2D_get_initial_velocity(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_initial_velocity");
    }
SWIGINTERN void Particles2D_set_explosiveness(Particles2D *self,float amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_explosiveness", amount);
    }
SWIGINTERN float Particles2D_get_explosiveness(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_explosiveness");
    }
SWIGINTERN void Particles2D_set_emission_points(Particles2D *self,Vector2Array const &points){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_emission_points", points);
    }
SWIGINTERN Vector2Array Particles2D_get_emission_points(Particles2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_emission_points");
    }
SWIGINTERN void Patch9Frame_set_texture(Patch9Frame *self,Object *texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Object *Patch9Frame_get_texture(Patch9Frame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *();
    }
SWIGINTERN void Patch9Frame_set_modulate(Patch9Frame *self,Color const &modulate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", modulate);
    }
SWIGINTERN Color Patch9Frame_get_modulate(Patch9Frame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void Patch9Frame_set_patch_margin(Patch9Frame *self,int margin,int value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_patch_margin", margin, value);
    }
SWIGINTERN int Patch9Frame_get_patch_margin(Patch9Frame *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_patch_margin", margin);
    }
SWIGINTERN void Patch9Frame_set_draw_center(Patch9Frame *self,bool draw_center){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_center", draw_center);
    }
SWIGINTERN bool Patch9Frame_get_draw_center(Patch9Frame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_center");
    }
SWIGINTERN void Path_set_curve(Path *self,Ref< Curve3D > curve){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_curve", curve);
    }
SWIGINTERN Ref< Curve3D > Path_get_curve(Path *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_curve").operator Object *()->cast_to<Curve3D>();
    }
SWIGINTERN void Path2D_set_curve(Path2D *self,Ref< Curve2D > curve){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_curve", curve);
    }
SWIGINTERN Ref< Curve2D > Path2D_get_curve(Path2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_curve").operator Object *()->cast_to<Curve2D>();
    }
SWIGINTERN void PathFollow_set_offset(PathFollow *self,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN float PathFollow_get_offset(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void PathFollow_set_h_offset(PathFollow *self,float h_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_offset", h_offset);
    }
SWIGINTERN float PathFollow_get_h_offset(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_h_offset");
    }
SWIGINTERN void PathFollow_set_v_offset(PathFollow *self,float v_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_offset", v_offset);
    }
SWIGINTERN float PathFollow_get_v_offset(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_offset");
    }
SWIGINTERN void PathFollow_set_unit_offset(PathFollow *self,float unit_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_unit_offset", unit_offset);
    }
SWIGINTERN float PathFollow_get_unit_offset(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unit_offset");
    }
SWIGINTERN void PathFollow_set_rotation_mode(PathFollow *self,int rotation_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotation_mode", rotation_mode);
    }
SWIGINTERN int PathFollow_get_rotation_mode(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rotation_mode");
    }
SWIGINTERN void PathFollow_set_cubic_interpolation(PathFollow *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cubic_interpolation", enable);
    }
SWIGINTERN bool PathFollow_get_cubic_interpolation(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cubic_interpolation");
    }
SWIGINTERN void PathFollow_set_loop(PathFollow *self,bool loop){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", loop);
    }
SWIGINTERN bool PathFollow_has_loop(PathFollow *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN void PathFollow2D_set_offset(PathFollow2D *self,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN float PathFollow2D_get_offset(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void PathFollow2D_set_h_offset(PathFollow2D *self,float h_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_offset", h_offset);
    }
SWIGINTERN float PathFollow2D_get_h_offset(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_h_offset");
    }
SWIGINTERN void PathFollow2D_set_v_offset(PathFollow2D *self,float v_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_offset", v_offset);
    }
SWIGINTERN float PathFollow2D_get_v_offset(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_offset");
    }
SWIGINTERN void PathFollow2D_set_unit_offset(PathFollow2D *self,float unit_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_unit_offset", unit_offset);
    }
SWIGINTERN float PathFollow2D_get_unit_offset(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unit_offset");
    }
SWIGINTERN void PathFollow2D_set_rotate(PathFollow2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotate", enable);
    }
SWIGINTERN bool PathFollow2D_is_rotating(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_rotating");
    }
SWIGINTERN void PathFollow2D_set_cubic_interpolation(PathFollow2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cubic_interpolation", enable);
    }
SWIGINTERN bool PathFollow2D_get_cubic_interpolation(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cubic_interpolation");
    }
SWIGINTERN void PathFollow2D_set_loop(PathFollow2D *self,bool loop){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_loop", loop);
    }
SWIGINTERN bool PathFollow2D_has_loop(PathFollow2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_loop");
    }
SWIGINTERN void PhysicsBody_set_layer_mask(PhysicsBody *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", mask);
    }
SWIGINTERN int PhysicsBody_get_layer_mask(PhysicsBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void PhysicsBody_set_collision_mask(PhysicsBody *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask", mask);
    }
SWIGINTERN int PhysicsBody_get_collision_mask(PhysicsBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask");
    }
SWIGINTERN void PhysicsBody_set_collision_mask_bit(PhysicsBody *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask_bit", bit, value);
    }
SWIGINTERN bool PhysicsBody_get_collision_mask_bit(PhysicsBody *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask_bit", bit);
    }
SWIGINTERN void PhysicsBody_set_layer_mask_bit(PhysicsBody *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask_bit", bit, value);
    }
SWIGINTERN bool PhysicsBody_get_layer_mask_bit(PhysicsBody *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask_bit", bit);
    }
SWIGINTERN void PhysicsBody_add_collision_exception_with(PhysicsBody *self,PhysicsBody *body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_collision_exception_with", body);
    }
SWIGINTERN void PhysicsBody_remove_collision_exception_with(PhysicsBody *self,PhysicsBody *body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_collision_exception_with", body);
    }
SWIGINTERN void PinJoint_set_param(PinJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float PinJoint_get_param(PinJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void Polygon2D_set_polygon(Polygon2D *self,Vector2Array const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polygon", polygon);
    }
SWIGINTERN Vector2Array Polygon2D_get_polygon(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon");
    }
SWIGINTERN void Polygon2D_set_uv(Polygon2D *self,Vector2Array const &uv){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_uv", uv);
    }
SWIGINTERN Vector2Array Polygon2D_get_uv(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_uv");
    }
SWIGINTERN void Polygon2D_set_color(Polygon2D *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN Color Polygon2D_get_color(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color");
    }
SWIGINTERN void Polygon2D_set_vertex_colors(Polygon2D *self,ColorArray const &vertex_colors){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vertex_colors", vertex_colors);
    }
SWIGINTERN ColorArray Polygon2D_get_vertex_colors(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vertex_colors");
    }
SWIGINTERN void Polygon2D_set_texture(Polygon2D *self,Object *texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Object *Polygon2D_get_texture(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *();
    }
SWIGINTERN void Polygon2D_set_texture_offset(Polygon2D *self,Vector2 const &texture_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_offset", texture_offset);
    }
SWIGINTERN Vector2 Polygon2D_get_texture_offset(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_offset");
    }
SWIGINTERN void Polygon2D_set_texture_rotation(Polygon2D *self,float texture_rotation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_rotation", texture_rotation);
    }
SWIGINTERN float Polygon2D_get_texture_rotation(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_rotation");
    }
SWIGINTERN void Polygon2D_set_texture_scale(Polygon2D *self,Vector2 const &texture_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_scale", texture_scale);
    }
SWIGINTERN Vector2 Polygon2D_get_texture_scale(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_scale");
    }
SWIGINTERN void Polygon2D_set_invert(Polygon2D *self,bool invert){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_invert", invert);
    }
SWIGINTERN bool Polygon2D_get_invert(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_invert");
    }
SWIGINTERN void Polygon2D_set_invert_border(Polygon2D *self,float invert_border){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_invert_border", invert_border);
    }
SWIGINTERN float Polygon2D_get_invert_border(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_invert_border");
    }
SWIGINTERN void Polygon2D_set_offset(Polygon2D *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 Polygon2D_get_offset(Polygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void Popup_popup_centered__SWIG_0(Popup *self,Vector2 const &size=Vector2(0,0)){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("popup_centered", size);
    }
SWIGINTERN void Popup_popup_centered_ratio__SWIG_0(Popup *self,float ratio=0.75){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("popup_centered_ratio", ratio);
    }
SWIGINTERN void Popup_popup_centered_minsize__SWIG_0(Popup *self,Vector2 const &minsize=Vector2(0,0)){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("popup_centered_minsize", minsize);
    }
SWIGINTERN void Popup_popup(Popup *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("popup");
    }
SWIGINTERN void Popup_set_exclusive(Popup *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_exclusive", enable);
    }
SWIGINTERN bool Popup_is_exclusive(Popup *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_exclusive");
    }
SWIGINTERN void PopupMenu_add_icon_item__SWIG_0(PopupMenu *self,Object *texture,String const &label,int id=-1,int accel=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_icon_item", texture, label, id, accel);
    }
SWIGINTERN void PopupMenu_add_item__SWIG_0(PopupMenu *self,String const &label,int id=-1,int accel=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_item", label, id, accel);
    }
SWIGINTERN void PopupMenu_add_icon_check_item__SWIG_0(PopupMenu *self,Object *texture,String const &label,int id=-1,int accel=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_icon_check_item", texture, label, id, accel);
    }
SWIGINTERN void PopupMenu_add_check_item__SWIG_0(PopupMenu *self,String const &label,int id=-1,int accel=0){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_check_item", label, id, accel);
    }
SWIGINTERN void PopupMenu_add_submenu_item__SWIG_0(PopupMenu *self,String const &label,String const &submenu,int id=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_submenu_item", label, submenu, id);
    }
SWIGINTERN void PopupMenu_set_item_text(PopupMenu *self,int idx,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_text", idx, text);
    }
SWIGINTERN void PopupMenu_set_item_icon(PopupMenu *self,int idx,Object *icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_icon", idx, icon);
    }
SWIGINTERN void PopupMenu_set_item_accelerator(PopupMenu *self,int idx,int accel){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_accelerator", idx, accel);
    }
SWIGINTERN void PopupMenu_set_item_metadata(PopupMenu *self,int idx,Variant const &metadata){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_metadata", idx, metadata);
    }
SWIGINTERN void PopupMenu_set_item_checked(PopupMenu *self,int idx,bool checked){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_checked", idx, checked);
    }
SWIGINTERN void PopupMenu_set_item_disabled(PopupMenu *self,int idx,bool disabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_disabled", idx, disabled);
    }
SWIGINTERN void PopupMenu_set_item_submenu(PopupMenu *self,int idx,String const &submenu){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_submenu", idx, submenu);
    }
SWIGINTERN void PopupMenu_set_item_as_separator(PopupMenu *self,int idx,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_as_separator", idx, enable);
    }
SWIGINTERN void PopupMenu_set_item_as_checkable(PopupMenu *self,int idx,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_as_checkable", idx, enable);
    }
SWIGINTERN void PopupMenu_set_item_ID(PopupMenu *self,int idx,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_ID", idx, id);
    }
SWIGINTERN String PopupMenu_get_item_text(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_text", idx);
    }
SWIGINTERN Object *PopupMenu_get_item_icon(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_icon", idx).operator Object *();
    }
SWIGINTERN void PopupMenu_get_item_metadata(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_item_metadata", idx);
    }
SWIGINTERN int PopupMenu_get_item_accelerator(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_accelerator", idx);
    }
SWIGINTERN String PopupMenu_get_item_submenu(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_submenu", idx);
    }
SWIGINTERN bool PopupMenu_is_item_separator(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_separator", idx);
    }
SWIGINTERN bool PopupMenu_is_item_checkable(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_checkable", idx);
    }
SWIGINTERN bool PopupMenu_is_item_checked(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_checked", idx);
    }
SWIGINTERN bool PopupMenu_is_item_disabled(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_disabled", idx);
    }
SWIGINTERN int PopupMenu_get_item_ID(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_ID", idx);
    }
SWIGINTERN int PopupMenu_get_item_index(PopupMenu *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_index", id);
    }
SWIGINTERN int PopupMenu_get_item_count(PopupMenu *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_count");
    }
SWIGINTERN void PopupMenu_add_separator(PopupMenu *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_separator");
    }
SWIGINTERN void PopupMenu_remove_item(PopupMenu *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_item", idx);
    }
SWIGINTERN void PopupMenu_clear(PopupMenu *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void Portal_set_shape(Portal *self,Vector2Array const &points){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", points);
    }
SWIGINTERN Vector2Array Portal_get_shape(Portal *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape");
    }
SWIGINTERN void Portal_set_enabled(Portal *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enable);
    }
SWIGINTERN bool Portal_is_enabled(Portal *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void Portal_set_disable_distance(Portal *self,float distance){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_disable_distance", distance);
    }
SWIGINTERN float Portal_get_disable_distance(Portal *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_disable_distance");
    }
SWIGINTERN void Portal_set_disabled_color(Portal *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_disabled_color", color);
    }
SWIGINTERN Color Portal_get_disabled_color(Portal *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_disabled_color");
    }
SWIGINTERN void Portal_set_connect_range(Portal *self,float range){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_connect_range", range);
    }
SWIGINTERN float Portal_get_connect_range(Portal *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connect_range");
    }
SWIGINTERN void ProximityGroup_set_group_name(ProximityGroup *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_group_name", name);
    }
SWIGINTERN void ProximityGroup_broadcast(ProximityGroup *self,String const &name,Variant const &parameters){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("broadcast", name, parameters);
    }
SWIGINTERN void ProximityGroup_set_dispatch_mode(ProximityGroup *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_dispatch_mode", mode);
    }
SWIGINTERN void ProximityGroup_set_grid_radius(ProximityGroup *self,Vector3 const &radius){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_grid_radius", radius);
    }
SWIGINTERN Vector3 ProximityGroup_get_grid_radius(ProximityGroup *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_grid_radius");
    }
SWIGINTERN void Quad_set_axis(Quad *self,int axis){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_axis", axis);
    }
SWIGINTERN int Quad_get_axis(Quad *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_axis");
    }
SWIGINTERN void Quad_set_size(Quad *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_size", size);
    }
SWIGINTERN Vector2 Quad_get_size(Quad *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_size");
    }
SWIGINTERN void Quad_set_centered(Quad *self,bool centered){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_centered", centered);
    }
SWIGINTERN bool Quad_is_centered(Quad *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_centered");
    }
SWIGINTERN void Quad_set_offset(Quad *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 Quad_get_offset(Quad *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN float Range_get_val(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_val");
    }
SWIGINTERN float Range_get_value(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_value");
    }
SWIGINTERN float Range_get_min(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_min");
    }
SWIGINTERN float Range_get_max(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max");
    }
SWIGINTERN float Range_get_step(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_step");
    }
SWIGINTERN float Range_get_page(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_page");
    }
SWIGINTERN float Range_get_unit_value(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_unit_value");
    }
SWIGINTERN void Range_set_val(Range *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_val", value);
    }
SWIGINTERN void Range_set_value(Range *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_value", value);
    }
SWIGINTERN void Range_set_min(Range *self,float minimum){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_min", minimum);
    }
SWIGINTERN void Range_set_max(Range *self,float maximum){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max", maximum);
    }
SWIGINTERN void Range_set_step(Range *self,float step){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_step", step);
    }
SWIGINTERN void Range_set_page(Range *self,float pagesize){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_page", pagesize);
    }
SWIGINTERN void Range_set_unit_value(Range *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_unit_value", value);
    }
SWIGINTERN void Range_set_rounded_values(Range *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rounded_values", enabled);
    }
SWIGINTERN bool Range_is_rounded_values(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_rounded_values");
    }
SWIGINTERN void Range_set_exp_unit_value(Range *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_exp_unit_value", enabled);
    }
SWIGINTERN bool Range_is_unit_value_exp(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_unit_value_exp");
    }
SWIGINTERN void Range_share(Range *self,Object *with){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("share", with);
    }
SWIGINTERN void Range_unshare(Range *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("unshare");
    }
SWIGINTERN void RayCast_set_enabled(RayCast *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool RayCast_is_enabled(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void RayCast_set_cast_to(RayCast *self,Vector3 const &local_point){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cast_to", local_point);
    }
SWIGINTERN Vector3 RayCast_get_cast_to(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cast_to");
    }
SWIGINTERN bool RayCast_is_colliding(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_colliding");
    }
SWIGINTERN Object *RayCast_get_collider(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider").operator Object *();
    }
SWIGINTERN int RayCast_get_collider_shape(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_shape");
    }
SWIGINTERN Vector3 RayCast_get_collision_point(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_point");
    }
SWIGINTERN Vector3 RayCast_get_collision_normal(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_normal");
    }
SWIGINTERN void RayCast_add_exception_rid(RayCast *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_exception_rid", rid);
    }
SWIGINTERN void RayCast_add_exception(RayCast *self,Object *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_exception", node);
    }
SWIGINTERN void RayCast_remove_exception_rid(RayCast *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_exception_rid", rid);
    }
SWIGINTERN void RayCast_remove_exception(RayCast *self,Object *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_exception", node);
    }
SWIGINTERN void RayCast_clear_exceptions(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_exceptions");
    }
SWIGINTERN void RayCast_set_layer_mask(RayCast *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", mask);
    }
SWIGINTERN int RayCast_get_layer_mask(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void RayCast_set_type_mask(RayCast *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_type_mask", mask);
    }
SWIGINTERN int RayCast_get_type_mask(RayCast *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_type_mask");
    }
SWIGINTERN void RayCast2D_set_enabled(RayCast2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool RayCast2D_is_enabled(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void RayCast2D_set_cast_to(RayCast2D *self,Vector2 const &local_point){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cast_to", local_point);
    }
SWIGINTERN Vector2 RayCast2D_get_cast_to(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cast_to");
    }
SWIGINTERN bool RayCast2D_is_colliding(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_colliding");
    }
SWIGINTERN Object *RayCast2D_get_collider(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider").operator Object *();
    }
SWIGINTERN int RayCast2D_get_collider_shape(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_shape");
    }
SWIGINTERN Vector2 RayCast2D_get_collision_point(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_point");
    }
SWIGINTERN Vector2 RayCast2D_get_collision_normal(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_normal");
    }
SWIGINTERN void RayCast2D_add_exception_rid(RayCast2D *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_exception_rid", rid);
    }
SWIGINTERN void RayCast2D_add_exception(RayCast2D *self,Object *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_exception", node);
    }
SWIGINTERN void RayCast2D_remove_exception_rid(RayCast2D *self,RID const &rid){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_exception_rid", rid);
    }
SWIGINTERN void RayCast2D_remove_exception(RayCast2D *self,Object *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_exception", node);
    }
SWIGINTERN void RayCast2D_clear_exceptions(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_exceptions");
    }
SWIGINTERN void RayCast2D_set_layer_mask(RayCast2D *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", mask);
    }
SWIGINTERN int RayCast2D_get_layer_mask(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void RayCast2D_set_type_mask(RayCast2D *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_type_mask", mask);
    }
SWIGINTERN int RayCast2D_get_type_mask(RayCast2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_type_mask");
    }
SWIGINTERN void RemoteTransform2D_set_remote_node(RemoteTransform2D *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_remote_node", path);
    }
SWIGINTERN NodePath RemoteTransform2D_get_remote_node(RemoteTransform2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_remote_node");
    }
SWIGINTERN void RichTextLabel_add_text(RichTextLabel *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_text", text);
    }
SWIGINTERN void RichTextLabel_add_image(RichTextLabel *self,Ref< Texture > image){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_image", image);
    }
SWIGINTERN void RichTextLabel_newline(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("newline");
    }
SWIGINTERN void RichTextLabel_push_font(RichTextLabel *self,Object *font){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_font", font);
    }
SWIGINTERN void RichTextLabel_push_color(RichTextLabel *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_color", color);
    }
SWIGINTERN void RichTextLabel_push_align(RichTextLabel *self,int align){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_align", align);
    }
SWIGINTERN void RichTextLabel_push_indent(RichTextLabel *self,int level){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_indent", level);
    }
SWIGINTERN void RichTextLabel_push_list(RichTextLabel *self,int type){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_list", type);
    }
SWIGINTERN void RichTextLabel_push_meta(RichTextLabel *self,Variant const &data){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_meta", data);
    }
SWIGINTERN void RichTextLabel_push_underline(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_underline");
    }
SWIGINTERN void RichTextLabel_push_table(RichTextLabel *self,int columns){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_table", columns);
    }
SWIGINTERN void RichTextLabel_set_table_column_expand(RichTextLabel *self,int column,bool expand,int ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_table_column_expand", column, expand, ratio);
    }
SWIGINTERN void RichTextLabel_push_cell(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("push_cell");
    }
SWIGINTERN void RichTextLabel_pop(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("pop");
    }
SWIGINTERN void RichTextLabel_clear(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void RichTextLabel_set_meta_underline(RichTextLabel *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_meta_underline", enable);
    }
SWIGINTERN bool RichTextLabel_is_meta_underlined(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_meta_underlined");
    }
SWIGINTERN void RichTextLabel_set_scroll_active(RichTextLabel *self,bool active){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scroll_active", active);
    }
SWIGINTERN bool RichTextLabel_is_scroll_active(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_scroll_active");
    }
SWIGINTERN void RichTextLabel_set_scroll_follow(RichTextLabel *self,bool follow){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_scroll_follow", follow);
    }
SWIGINTERN bool RichTextLabel_is_scroll_following(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_scroll_following");
    }
SWIGINTERN Object *RichTextLabel_get_v_scroll(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_scroll").operator Object *();
    }
SWIGINTERN void RichTextLabel_scroll_to_line(RichTextLabel *self,int line){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("scroll_to_line", line);
    }
SWIGINTERN void RichTextLabel_set_tab_size(RichTextLabel *self,int spaces){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_size", spaces);
    }
SWIGINTERN int RichTextLabel_get_tab_size(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_size");
    }
SWIGINTERN void RichTextLabel_set_selection_enabled(RichTextLabel *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_selection_enabled", enabled);
    }
SWIGINTERN bool RichTextLabel_is_selection_enabled(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_selection_enabled");
    }
SWIGINTERN int RichTextLabel_parse_bbcode(RichTextLabel *self,String const &bbcode){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("parse_bbcode", bbcode);
    }
SWIGINTERN int RichTextLabel_append_bbcode(RichTextLabel *self,String const &bbcode){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("append_bbcode", bbcode);
    }
SWIGINTERN void RichTextLabel_set_bbcode(RichTextLabel *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bbcode", text);
    }
SWIGINTERN String RichTextLabel_get_bbcode(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bbcode");
    }
SWIGINTERN void RichTextLabel_set_visible_characters(RichTextLabel *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_visible_characters", amount);
    }
SWIGINTERN int RichTextLabel_get_visible_characters(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visible_characters");
    }
SWIGINTERN int RichTextLabel_get_total_character_count(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_total_character_count");
    }
SWIGINTERN void RichTextLabel_set_use_bbcode(RichTextLabel *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_bbcode", enable);
    }
SWIGINTERN bool RichTextLabel_is_using_bbcode(RichTextLabel *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_bbcode");
    }
SWIGINTERN void RigidBody__integrate_forces(RigidBody *self,PhysicsDirectBodyState *state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_integrate_forces", state);
    }
SWIGINTERN void RigidBody_set_mode(RigidBody *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int RigidBody_get_mode(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN void RigidBody_set_mass(RigidBody *self,float mass){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mass", mass);
    }
SWIGINTERN float RigidBody_get_mass(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mass");
    }
SWIGINTERN void RigidBody_set_weight(RigidBody *self,float weight){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_weight", weight);
    }
SWIGINTERN float RigidBody_get_weight(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_weight");
    }
SWIGINTERN void RigidBody_set_friction(RigidBody *self,float friction){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_friction", friction);
    }
SWIGINTERN float RigidBody_get_friction(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_friction");
    }
SWIGINTERN void RigidBody_set_bounce(RigidBody *self,float bounce){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bounce", bounce);
    }
SWIGINTERN float RigidBody_get_bounce(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounce");
    }
SWIGINTERN void RigidBody_set_linear_velocity(RigidBody *self,Vector3 const &linear_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_velocity", linear_velocity);
    }
SWIGINTERN Vector3 RigidBody_get_linear_velocity(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_velocity");
    }
SWIGINTERN void RigidBody_set_angular_velocity(RigidBody *self,Vector3 const &angular_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_velocity", angular_velocity);
    }
SWIGINTERN Vector3 RigidBody_get_angular_velocity(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_velocity");
    }
SWIGINTERN void RigidBody_set_gravity_scale(RigidBody *self,float gravity_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_scale", gravity_scale);
    }
SWIGINTERN float RigidBody_get_gravity_scale(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_scale");
    }
SWIGINTERN void RigidBody_set_linear_damp(RigidBody *self,float linear_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_damp", linear_damp);
    }
SWIGINTERN float RigidBody_get_linear_damp(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_damp");
    }
SWIGINTERN void RigidBody_set_angular_damp(RigidBody *self,float angular_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_damp", angular_damp);
    }
SWIGINTERN float RigidBody_get_angular_damp(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_damp");
    }
SWIGINTERN void RigidBody_set_max_contacts_reported(RigidBody *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_contacts_reported", amount);
    }
SWIGINTERN int RigidBody_get_max_contacts_reported(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_contacts_reported");
    }
SWIGINTERN void RigidBody_set_use_custom_integrator(RigidBody *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_custom_integrator", enable);
    }
SWIGINTERN bool RigidBody_is_using_custom_integrator(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_custom_integrator");
    }
SWIGINTERN void RigidBody_set_contact_monitor(RigidBody *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_contact_monitor", enabled);
    }
SWIGINTERN bool RigidBody_is_contact_monitor_enabled(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_contact_monitor_enabled");
    }
SWIGINTERN void RigidBody_set_use_continuous_collision_detection(RigidBody *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_continuous_collision_detection", enable);
    }
SWIGINTERN bool RigidBody_is_using_continuous_collision_detection(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_continuous_collision_detection");
    }
SWIGINTERN void RigidBody_set_axis_velocity(RigidBody *self,Vector3 const &axis_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_axis_velocity", axis_velocity);
    }
SWIGINTERN void RigidBody_apply_impulse(RigidBody *self,Vector3 const &pos,Vector3 const &impulse){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("apply_impulse", pos, impulse);
    }
SWIGINTERN void RigidBody_set_sleeping(RigidBody *self,bool sleeping){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sleeping", sleeping);
    }
SWIGINTERN bool RigidBody_is_sleeping(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_sleeping");
    }
SWIGINTERN void RigidBody_set_can_sleep(RigidBody *self,bool able_to_sleep){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_can_sleep", able_to_sleep);
    }
SWIGINTERN bool RigidBody_is_able_to_sleep(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_able_to_sleep");
    }
SWIGINTERN void RigidBody_set_axis_lock(RigidBody *self,int axis_lock){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_axis_lock", axis_lock);
    }
SWIGINTERN int RigidBody_get_axis_lock(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_axis_lock");
    }
SWIGINTERN Array RigidBody_get_colliding_bodies(RigidBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_colliding_bodies");
    }
SWIGINTERN void Room_set_room(Room *self,Room *room){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_room", room);
    }
SWIGINTERN Room *Room_get_room(Room *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_room").operator Object *()->cast_to<Room>();
    }
SWIGINTERN void Room_compute_room_from_subtree(Room *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("compute_room_from_subtree");
    }
SWIGINTERN void Room_set_simulate_acoustics(Room *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_simulate_acoustics", enable);
    }
SWIGINTERN bool Room_is_simulating_acoustics(Room *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_simulating_acoustics");
    }
SWIGINTERN void ScrollBar_set_custom_step(ScrollBar *self,float step){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_step", step);
    }
SWIGINTERN float ScrollBar_get_custom_step(ScrollBar *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_step");
    }
SWIGINTERN void Skeleton_add_bone(Skeleton *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_bone", name);
    }
SWIGINTERN int Skeleton_find_bone(Skeleton *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("find_bone", name);
    }
SWIGINTERN String Skeleton_get_bone_name(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_name", bone_idx);
    }
SWIGINTERN int Skeleton_get_bone_parent(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_parent", bone_idx);
    }
SWIGINTERN void Skeleton_set_bone_parent(Skeleton *self,int bone_idx,int parent_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_parent", bone_idx, parent_idx);
    }
SWIGINTERN int Skeleton_get_bone_count(Skeleton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_count");
    }
SWIGINTERN void Skeleton_unparent_bone_and_rest(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("unparent_bone_and_rest", bone_idx);
    }
SWIGINTERN Transform Skeleton_get_bone_rest(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_rest", bone_idx);
    }
SWIGINTERN void Skeleton_set_bone_rest(Skeleton *self,int bone_idx,Transform const &rest){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_rest", bone_idx, rest);
    }
SWIGINTERN void Skeleton_set_bone_disable_rest(Skeleton *self,int bone_idx,bool disable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_disable_rest", bone_idx, disable);
    }
SWIGINTERN bool Skeleton_is_bone_rest_disabled(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_bone_rest_disabled", bone_idx);
    }
SWIGINTERN void Skeleton_bind_child_node_to_bone(Skeleton *self,int bone_idx,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("bind_child_node_to_bone", bone_idx, node);
    }
SWIGINTERN void Skeleton_unbind_child_node_from_bone(Skeleton *self,int bone_idx,Node *node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("unbind_child_node_from_bone", bone_idx, node);
    }
SWIGINTERN Array Skeleton_get_bound_child_nodes_to_bone(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bound_child_nodes_to_bone", bone_idx);
    }
SWIGINTERN void Skeleton_clear_bones(Skeleton *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_bones");
    }
SWIGINTERN Transform Skeleton_get_bone_pose(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_pose", bone_idx);
    }
SWIGINTERN void Skeleton_set_bone_pose(Skeleton *self,int bone_idx,Transform const &pose){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_pose", bone_idx, pose);
    }
SWIGINTERN void Skeleton_set_bone_global_pose(Skeleton *self,int bone_idx,Transform const &pose){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_global_pose", bone_idx, pose);
    }
SWIGINTERN Transform Skeleton_get_bone_global_pose(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_global_pose", bone_idx);
    }
SWIGINTERN Transform Skeleton_get_bone_custom_pose(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_custom_pose", bone_idx);
    }
SWIGINTERN void Skeleton_set_bone_custom_pose(Skeleton *self,int bone_idx,Transform const &custom_pose){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bone_custom_pose", bone_idx, custom_pose);
    }
SWIGINTERN Transform Skeleton_get_bone_transform(Skeleton *self,int bone_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bone_transform", bone_idx);
    }
SWIGINTERN void Slider_set_ticks(Slider *self,int count){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ticks", count);
    }
SWIGINTERN int Slider_get_ticks(Slider *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ticks");
    }
SWIGINTERN bool Slider_get_ticks_on_borders(Slider *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ticks_on_borders");
    }
SWIGINTERN void Slider_set_ticks_on_borders(Slider *self,bool ticks_on_border){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_ticks_on_borders", ticks_on_border);
    }
SWIGINTERN void SliderJoint_set_param(SliderJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float SliderJoint_get_param(SliderJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void SoundPlayer2D_set_param(SoundPlayer2D *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float SoundPlayer2D_get_param(SoundPlayer2D *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void SpinBox_set_suffix(SpinBox *self,String const &suffix){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_suffix", suffix);
    }
SWIGINTERN String SpinBox_get_suffix(SpinBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_suffix");
    }
SWIGINTERN void SpinBox_set_prefix(SpinBox *self,String const &prefix){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_prefix", prefix);
    }
SWIGINTERN String SpinBox_get_prefix(SpinBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_prefix");
    }
SWIGINTERN void SpinBox_set_editable(SpinBox *self,bool editable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_editable", editable);
    }
SWIGINTERN bool SpinBox_is_editable(SpinBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editable");
    }
SWIGINTERN Object *SpinBox_get_line_edit(SpinBox *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line_edit").operator Object *();
    }
SWIGINTERN void Sprite_set_texture(Sprite *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Ref< Texture > Sprite_get_texture(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void Sprite_set_centered(Sprite *self,bool centered){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_centered", centered);
    }
SWIGINTERN bool Sprite_is_centered(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_centered");
    }
SWIGINTERN void Sprite_set_offset(Sprite *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 Sprite_get_offset(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void Sprite_set_flip_h(Sprite *self,bool flip_h){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_h", flip_h);
    }
SWIGINTERN bool Sprite_is_flipped_h(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_h");
    }
SWIGINTERN void Sprite_set_flip_v(Sprite *self,bool flip_v){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_v", flip_v);
    }
SWIGINTERN bool Sprite_is_flipped_v(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_v");
    }
SWIGINTERN void Sprite_set_region(Sprite *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_region", enabled);
    }
SWIGINTERN bool Sprite_is_region(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_region");
    }
SWIGINTERN void Sprite_set_region_rect(Sprite *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_region_rect", rect);
    }
SWIGINTERN Rect2 Sprite_get_region_rect(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_region_rect");
    }
SWIGINTERN void Sprite_set_frame(Sprite *self,int frame){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_frame", frame);
    }
SWIGINTERN int Sprite_get_frame(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame");
    }
SWIGINTERN void Sprite_set_vframes(Sprite *self,int vframes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vframes", vframes);
    }
SWIGINTERN int Sprite_get_vframes(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vframes");
    }
SWIGINTERN void Sprite_set_hframes(Sprite *self,int hframes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hframes", hframes);
    }
SWIGINTERN int Sprite_get_hframes(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_hframes");
    }
SWIGINTERN void Sprite_set_modulate(Sprite *self,Color const &modulate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", modulate);
    }
SWIGINTERN Color Sprite_get_modulate(Sprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void SpriteBase3D_set_centered(SpriteBase3D *self,bool centered){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_centered", centered);
    }
SWIGINTERN bool SpriteBase3D_is_centered(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_centered");
    }
SWIGINTERN void SpriteBase3D_set_offset(SpriteBase3D *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 SpriteBase3D_get_offset(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void SpriteBase3D_set_flip_h(SpriteBase3D *self,bool flip_h){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_h", flip_h);
    }
SWIGINTERN bool SpriteBase3D_is_flipped_h(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_h");
    }
SWIGINTERN void SpriteBase3D_set_flip_v(SpriteBase3D *self,bool flip_v){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_v", flip_v);
    }
SWIGINTERN bool SpriteBase3D_is_flipped_v(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_v");
    }
SWIGINTERN void SpriteBase3D_set_modulate(SpriteBase3D *self,Color const &modulate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", modulate);
    }
SWIGINTERN Color SpriteBase3D_get_modulate(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void SpriteBase3D_set_opacity(SpriteBase3D *self,float opacity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_opacity", opacity);
    }
SWIGINTERN float SpriteBase3D_get_opacity(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_opacity");
    }
SWIGINTERN void SpriteBase3D_set_pixel_size(SpriteBase3D *self,float pixel_size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pixel_size", pixel_size);
    }
SWIGINTERN float SpriteBase3D_get_pixel_size(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pixel_size");
    }
SWIGINTERN void SpriteBase3D_set_axis(SpriteBase3D *self,int axis){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_axis", axis);
    }
SWIGINTERN int SpriteBase3D_get_axis(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_axis");
    }
SWIGINTERN void SpriteBase3D_set_draw_flag(SpriteBase3D *self,int flag,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_draw_flag", flag, enabled);
    }
SWIGINTERN bool SpriteBase3D_get_draw_flag(SpriteBase3D *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_flag", flag);
    }
SWIGINTERN void SpriteBase3D_set_alpha_cut_mode(SpriteBase3D *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_alpha_cut_mode", mode);
    }
SWIGINTERN int SpriteBase3D_get_alpha_cut_mode(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_alpha_cut_mode");
    }
SWIGINTERN Rect2 SpriteBase3D_get_item_rect(SpriteBase3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_rect");
    }
SWIGINTERN void StaticBody_set_constant_linear_velocity(StaticBody *self,Vector3 const &vel){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_constant_linear_velocity", vel);
    }
SWIGINTERN void StaticBody_set_constant_angular_velocity(StaticBody *self,Vector3 const &vel){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_constant_angular_velocity", vel);
    }
SWIGINTERN Vector3 StaticBody_get_constant_linear_velocity(StaticBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant_linear_velocity");
    }
SWIGINTERN Vector3 StaticBody_get_constant_angular_velocity(StaticBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant_angular_velocity");
    }
SWIGINTERN void StaticBody_set_friction(StaticBody *self,float friction){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_friction", friction);
    }
SWIGINTERN float StaticBody_get_friction(StaticBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_friction");
    }
SWIGINTERN void StaticBody_set_bounce(StaticBody *self,float bounce){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bounce", bounce);
    }
SWIGINTERN float StaticBody_get_bounce(StaticBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounce");
    }
SWIGINTERN int TabContainer_get_tab_count(TabContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_count");
    }
SWIGINTERN void TabContainer_set_current_tab(TabContainer *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_tab", tab_idx);
    }
SWIGINTERN int TabContainer_get_current_tab(TabContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_tab");
    }
SWIGINTERN Control *TabContainer_get_current_tab_control(TabContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_tab_control").operator Object *()->cast_to<Control>();
    }
SWIGINTERN Control *TabContainer_get_tab_control(TabContainer *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_control", idx).operator Object *()->cast_to<Control>();
    }
SWIGINTERN void TabContainer_set_tab_align(TabContainer *self,int align){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_align", align);
    }
SWIGINTERN int TabContainer_get_tab_align(TabContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_align");
    }
SWIGINTERN void TabContainer_set_tabs_visible(TabContainer *self,bool visible){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tabs_visible", visible);
    }
SWIGINTERN bool TabContainer_are_tabs_visible(TabContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("are_tabs_visible");
    }
SWIGINTERN void TabContainer_set_tab_title(TabContainer *self,int tab_idx,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_title", tab_idx, title);
    }
SWIGINTERN String TabContainer_get_tab_title(TabContainer *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_title", tab_idx);
    }
SWIGINTERN void TabContainer_set_tab_icon(TabContainer *self,int tab_idx,Ref< Texture > icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_icon", tab_idx, icon);
    }
SWIGINTERN Ref< Texture > TabContainer_get_tab_icon(TabContainer *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_icon", tab_idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void TabContainer_set_popup(TabContainer *self,Popup *popup){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_popup", popup);
    }
SWIGINTERN Popup *TabContainer_get_popup(TabContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_popup").operator Object *()->cast_to<Popup>();
    }
SWIGINTERN int Tabs_get_tab_count(Tabs *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_count");
    }
SWIGINTERN void Tabs_set_current_tab(Tabs *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_tab", tab_idx);
    }
SWIGINTERN int Tabs_get_current_tab(Tabs *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_tab");
    }
SWIGINTERN void Tabs_set_tab_title(Tabs *self,int tab_idx,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_title", tab_idx, title);
    }
SWIGINTERN String Tabs_get_tab_title(Tabs *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_title", tab_idx);
    }
SWIGINTERN void Tabs_set_tab_icon(Tabs *self,int tab_idx,Ref< Texture > icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_icon", tab_idx, icon);
    }
SWIGINTERN Ref< Texture > Tabs_get_tab_icon(Tabs *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_icon", tab_idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void Tabs_remove_tab(Tabs *self,int tab_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_tab", tab_idx);
    }
SWIGINTERN void Tabs_add_tab(Tabs *self,String const &title,Ref< Texture > icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_tab", title, icon);
    }
SWIGINTERN void Tabs_set_tab_align(Tabs *self,int align){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tab_align", align);
    }
SWIGINTERN int Tabs_get_tab_align(Tabs *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tab_align");
    }
SWIGINTERN void Tabs_ensure_tab_visible(Tabs *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("ensure_tab_visible", idx);
    }
SWIGINTERN void TextEdit_set_text(TextEdit *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", text);
    }
SWIGINTERN void TextEdit_insert_text_at_cursor(TextEdit *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("insert_text_at_cursor", text);
    }
SWIGINTERN int TextEdit_get_line_count(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line_count");
    }
SWIGINTERN String TextEdit_get_text(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text");
    }
SWIGINTERN String TextEdit_get_line(TextEdit *self,int line){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_line", line);
    }
SWIGINTERN void TextEdit_cursor_set_column__SWIG_0(TextEdit *self,int column,bool adjust_viewport=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_column", column, adjust_viewport);
    }
SWIGINTERN void TextEdit_cursor_set_line__SWIG_0(TextEdit *self,int line,bool adjust_viewport=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_line", line, adjust_viewport);
    }
SWIGINTERN int TextEdit_cursor_get_column(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cursor_get_column");
    }
SWIGINTERN int TextEdit_cursor_get_line(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cursor_get_line");
    }
SWIGINTERN void TextEdit_cursor_set_blink_enabled(TextEdit *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_blink_enabled", enable);
    }
SWIGINTERN bool TextEdit_cursor_get_blink_enabled(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cursor_get_blink_enabled");
    }
SWIGINTERN void TextEdit_cursor_set_blink_speed(TextEdit *self,float blink_speed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cursor_set_blink_speed", blink_speed);
    }
SWIGINTERN float TextEdit_cursor_get_blink_speed(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("cursor_get_blink_speed");
    }
SWIGINTERN void TextEdit_set_readonly(TextEdit *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_readonly", enable);
    }
SWIGINTERN void TextEdit_set_wrap(TextEdit *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_wrap", enable);
    }
SWIGINTERN void TextEdit_set_max_chars(TextEdit *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_chars", amount);
    }
SWIGINTERN void TextEdit_cut(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("cut");
    }
SWIGINTERN void TextEdit_copy(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("copy");
    }
SWIGINTERN void TextEdit_paste(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("paste");
    }
SWIGINTERN void TextEdit_select_all(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select_all");
    }
SWIGINTERN void TextEdit_select(TextEdit *self,int from_line,int from_column,int to_line,int to_column){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select", from_line, from_column, to_line, to_column);
    }
SWIGINTERN bool TextEdit_is_selection_active(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_selection_active");
    }
SWIGINTERN int TextEdit_get_selection_from_line(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selection_from_line");
    }
SWIGINTERN int TextEdit_get_selection_from_column(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selection_from_column");
    }
SWIGINTERN int TextEdit_get_selection_to_line(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selection_to_line");
    }
SWIGINTERN int TextEdit_get_selection_to_column(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selection_to_column");
    }
SWIGINTERN String TextEdit_get_selection_text(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selection_text");
    }
SWIGINTERN String TextEdit_get_word_under_cursor(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_word_under_cursor");
    }
SWIGINTERN IntArray TextEdit_search(TextEdit *self,String const &flags,int from_line,int from_column,int to_line){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("search", flags, from_line, from_column, to_line);
    }
SWIGINTERN void TextEdit_undo(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("undo");
    }
SWIGINTERN void TextEdit_redo(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("redo");
    }
SWIGINTERN void TextEdit_clear_undo_history(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_undo_history");
    }
SWIGINTERN void TextEdit_set_syntax_coloring(TextEdit *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_syntax_coloring", enable);
    }
SWIGINTERN bool TextEdit_is_syntax_coloring_enabled(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_syntax_coloring_enabled");
    }
SWIGINTERN void TextEdit_add_keyword_color(TextEdit *self,String const &keyword,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_keyword_color", keyword, color);
    }
SWIGINTERN void TextEdit_add_color_region__SWIG_0(TextEdit *self,String const &begin_key,String const &end_key,Color const &color,bool line_only=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_color_region", begin_key, end_key, color, line_only);
    }
SWIGINTERN void TextEdit_set_symbol_color(TextEdit *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_symbol_color", color);
    }
SWIGINTERN void TextEdit_set_custom_bg_color(TextEdit *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_bg_color", color);
    }
SWIGINTERN void TextEdit_clear_colors(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_colors");
    }
SWIGINTERN void TextEdit_menu_option(TextEdit *self,int arg0_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("menu_option", arg0_);
    }
SWIGINTERN PopupMenu *TextEdit_get_menu(TextEdit *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_menu").operator Object *()->cast_to<PopupMenu>();
    }
SWIGINTERN void TextureFrame_set_texture(TextureFrame *self,Object *texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Object *TextureFrame_get_texture(TextureFrame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *();
    }
SWIGINTERN void TextureFrame_set_modulate(TextureFrame *self,Color const &modulate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", modulate);
    }
SWIGINTERN Color TextureFrame_get_modulate(TextureFrame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void TextureFrame_set_expand(TextureFrame *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_expand", enable);
    }
SWIGINTERN bool TextureFrame_has_expand(TextureFrame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_expand");
    }
SWIGINTERN void TextureFrame_set_stretch_mode(TextureFrame *self,int stretch_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stretch_mode", stretch_mode);
    }
SWIGINTERN int TextureFrame_get_stretch_mode(TextureFrame *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stretch_mode");
    }
SWIGINTERN void TextureProgress_set_under_texture(TextureProgress *self,Object *tex){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_under_texture", tex);
    }
SWIGINTERN Object *TextureProgress_get_under_texture(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_under_texture").operator Object *();
    }
SWIGINTERN void TextureProgress_set_progress_texture(TextureProgress *self,Object *tex){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_progress_texture", tex);
    }
SWIGINTERN Object *TextureProgress_get_progress_texture(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_progress_texture").operator Object *();
    }
SWIGINTERN void TextureProgress_set_over_texture(TextureProgress *self,Object *tex){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_over_texture", tex);
    }
SWIGINTERN Object *TextureProgress_get_over_texture(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_over_texture").operator Object *();
    }
SWIGINTERN void TextureProgress_set_fill_mode(TextureProgress *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fill_mode", mode);
    }
SWIGINTERN int TextureProgress_get_fill_mode(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fill_mode");
    }
SWIGINTERN void TextureProgress_set_radial_initial_angle(TextureProgress *self,float mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radial_initial_angle", mode);
    }
SWIGINTERN float TextureProgress_get_radial_initial_angle(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radial_initial_angle");
    }
SWIGINTERN void TextureProgress_set_radial_center_offset(TextureProgress *self,Vector2 const &mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_radial_center_offset", mode);
    }
SWIGINTERN Vector2 TextureProgress_get_radial_center_offset(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_radial_center_offset");
    }
SWIGINTERN void TextureProgress_set_fill_degrees(TextureProgress *self,float mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_fill_degrees", mode);
    }
SWIGINTERN float TextureProgress_get_fill_degrees(TextureProgress *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_fill_degrees");
    }
SWIGINTERN void TileMap_set_tileset(TileMap *self,Ref< TileSet > tileset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tileset", tileset);
    }
SWIGINTERN Ref< TileSet > TileMap_get_tileset(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tileset").operator Object *()->cast_to<TileSet>();
    }
SWIGINTERN void TileMap_set_mode(TileMap *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int TileMap_get_mode(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN void TileMap_set_half_offset(TileMap *self,int half_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_half_offset", half_offset);
    }
SWIGINTERN int TileMap_get_half_offset(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_half_offset");
    }
SWIGINTERN void TileMap_set_custom_transform(TileMap *self,Matrix32 const &custom_transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_custom_transform", custom_transform);
    }
SWIGINTERN Matrix32 TileMap_get_custom_transform(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_transform");
    }
SWIGINTERN void TileMap_set_cell_size(TileMap *self,Vector2 const &size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cell_size", size);
    }
SWIGINTERN Vector2 TileMap_get_cell_size(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell_size");
    }
SWIGINTERN void TileMap_set_quadrant_size(TileMap *self,int size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_quadrant_size", size);
    }
SWIGINTERN int TileMap_get_quadrant_size(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_quadrant_size");
    }
SWIGINTERN void TileMap_set_tile_origin(TileMap *self,int origin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_tile_origin", origin);
    }
SWIGINTERN int TileMap_get_tile_origin(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_tile_origin");
    }
SWIGINTERN void TileMap_set_center_x(TileMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_center_x", enable);
    }
SWIGINTERN bool TileMap_get_center_x(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_center_x");
    }
SWIGINTERN void TileMap_set_center_y(TileMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_center_y", enable);
    }
SWIGINTERN bool TileMap_get_center_y(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_center_y");
    }
SWIGINTERN void TileMap_set_y_sort_mode(TileMap *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_y_sort_mode", enable);
    }
SWIGINTERN bool TileMap_is_y_sort_mode_enabled(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_y_sort_mode_enabled");
    }
SWIGINTERN void TileMap_set_collision_use_kinematic(TileMap *self,bool use_kinematic){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_use_kinematic", use_kinematic);
    }
SWIGINTERN bool TileMap_get_collision_use_kinematic(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_use_kinematic");
    }
SWIGINTERN void TileMap_set_collision_layer(TileMap *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_layer", mask);
    }
SWIGINTERN int TileMap_get_collision_layer(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_layer");
    }
SWIGINTERN void TileMap_set_collision_mask(TileMap *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask", mask);
    }
SWIGINTERN int TileMap_get_collision_mask(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask");
    }
SWIGINTERN void TileMap_set_collision_friction(TileMap *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_friction", value);
    }
SWIGINTERN float TileMap_get_collision_friction(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_friction");
    }
SWIGINTERN void TileMap_set_collision_bounce(TileMap *self,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_bounce", value);
    }
SWIGINTERN float TileMap_get_collision_bounce(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_bounce");
    }
SWIGINTERN void TileMap_set_occluder_light_mask(TileMap *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_occluder_light_mask", mask);
    }
SWIGINTERN int TileMap_get_occluder_light_mask(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_occluder_light_mask");
    }
SWIGINTERN void TileMap_set_cell__SWIG_0(TileMap *self,int x,int y,int tile,bool flip_x=false,bool flip_y=false,bool transpose=false){
  Variant::CallError err;
Variant arg_0_ = Variant(x);
Variant arg_1_ = Variant(y);
Variant arg_2_ = Variant(tile);
Variant arg_3_ = Variant(flip_x);
Variant arg_4_ = Variant(flip_y);
Variant arg_5_ = Variant(transpose);
Variant *args_[6] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_ };
self->call("set_cell", (const Variant **) args_, 6, err);
    }
SWIGINTERN void TileMap_set_cellv__SWIG_0(TileMap *self,Vector2 const &pos,int tile,bool flip_x=false,bool flip_y=false,bool transpose=false){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_cellv", pos, tile, flip_x, flip_y, transpose);
    }
SWIGINTERN int TileMap_get_cell(TileMap *self,int x,int y){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cell", x, y);
    }
SWIGINTERN int TileMap_get_cellv(TileMap *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cellv", pos);
    }
SWIGINTERN bool TileMap_is_cell_x_flipped(TileMap *self,int x,int y){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_cell_x_flipped", x, y);
    }
SWIGINTERN bool TileMap_is_cell_y_flipped(TileMap *self,int x,int y){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_cell_y_flipped", x, y);
    }
SWIGINTERN bool TileMap_is_cell_transposed(TileMap *self,int x,int y){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_cell_transposed", x, y);
    }
SWIGINTERN void TileMap_clear(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN Array TileMap_get_used_cells(TileMap *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_used_cells");
    }
SWIGINTERN Vector2 TileMap_map_to_world__SWIG_0(TileMap *self,Vector2 const &mappos,bool ignore_half_ofs=false){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("map_to_world", mappos, ignore_half_ofs);
    }
SWIGINTERN Vector2 TileMap_world_to_map(TileMap *self,Vector2 const &worldpos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("world_to_map", worldpos);
    }
SWIGINTERN void TouchScreenButton_set_texture(TouchScreenButton *self,Object *texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Object *TouchScreenButton_get_texture(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *();
    }
SWIGINTERN void TouchScreenButton_set_texture_pressed(TouchScreenButton *self,Object *texture_pressed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_pressed", texture_pressed);
    }
SWIGINTERN Object *TouchScreenButton_get_texture_pressed(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_pressed").operator Object *();
    }
SWIGINTERN void TouchScreenButton_set_bitmask(TouchScreenButton *self,Object *bitmask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bitmask", bitmask);
    }
SWIGINTERN Object *TouchScreenButton_get_bitmask(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bitmask").operator Object *();
    }
SWIGINTERN void TouchScreenButton_set_action(TouchScreenButton *self,String const &action){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_action", action);
    }
SWIGINTERN String TouchScreenButton_get_action(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_action");
    }
SWIGINTERN void TouchScreenButton_set_visibility_mode(TouchScreenButton *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_visibility_mode", mode);
    }
SWIGINTERN int TouchScreenButton_get_visibility_mode(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_visibility_mode");
    }
SWIGINTERN void TouchScreenButton_set_passby_press(TouchScreenButton *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_passby_press", enabled);
    }
SWIGINTERN bool TouchScreenButton_is_passby_press_enabled(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_passby_press_enabled");
    }
SWIGINTERN bool TouchScreenButton_is_pressed(TouchScreenButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_pressed");
    }
SWIGINTERN void Tree_clear(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN TreeItem *Tree_create_item__SWIG_0(Tree *self,TreeItem *parent=NULL){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("create_item", parent).operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *Tree_get_root(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_root").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN void Tree_set_column_min_width(Tree *self,int column,int min_width){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_column_min_width", column, min_width);
    }
SWIGINTERN void Tree_set_column_expand(Tree *self,int column,bool expand){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_column_expand", column, expand);
    }
SWIGINTERN int Tree_get_column_width(Tree *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_column_width", column);
    }
SWIGINTERN void Tree_set_hide_root(Tree *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hide_root", enable);
    }
SWIGINTERN TreeItem *Tree_get_next_selected(Tree *self,TreeItem *from){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_next_selected", from).operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN TreeItem *Tree_get_selected(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selected").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN int Tree_get_selected_column(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selected_column");
    }
SWIGINTERN int Tree_get_pressed_button(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pressed_button");
    }
SWIGINTERN void Tree_set_select_mode(Tree *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_select_mode", mode);
    }
SWIGINTERN void Tree_set_columns(Tree *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_columns", amount);
    }
SWIGINTERN int Tree_get_columns(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_columns");
    }
SWIGINTERN TreeItem *Tree_get_edited(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edited").operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN int Tree_get_edited_column(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_edited_column");
    }
SWIGINTERN Rect2 Tree_get_custom_popup_rect(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_custom_popup_rect");
    }
SWIGINTERN Rect2 Tree_get_item_area_rect__SWIG_0(Tree *self,TreeItem *item,int column=-1){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_area_rect", item, column);
    }
SWIGINTERN TreeItem *Tree_get_item_at_pos(Tree *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_at_pos", pos).operator Object *()->cast_to<TreeItem>();
    }
SWIGINTERN int Tree_get_column_at_pos(Tree *self,Vector2 const &pos){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_column_at_pos", pos);
    }
SWIGINTERN void Tree_ensure_cursor_is_visible(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("ensure_cursor_is_visible");
    }
SWIGINTERN void Tree_set_column_titles_visible(Tree *self,bool visible){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_column_titles_visible", visible);
    }
SWIGINTERN bool Tree_are_column_titles_visible(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("are_column_titles_visible");
    }
SWIGINTERN void Tree_set_column_title(Tree *self,int column,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_column_title", column, title);
    }
SWIGINTERN String Tree_get_column_title(Tree *self,int column){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_column_title", column);
    }
SWIGINTERN Vector2 Tree_get_scroll(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_scroll");
    }
SWIGINTERN void Tree_set_hide_folding(Tree *self,bool hide){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hide_folding", hide);
    }
SWIGINTERN bool Tree_is_folding_hidden(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_folding_hidden");
    }
SWIGINTERN void Tree_set_drop_mode_flags(Tree *self,int flags){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_drop_mode_flags", flags);
    }
SWIGINTERN int Tree_get_drop_mode_flags(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_drop_mode_flags");
    }
SWIGINTERN void Tree_set_allow_rmb_select(Tree *self,bool allow){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_allow_rmb_select", allow);
    }
SWIGINTERN bool Tree_get_allow_rmb_select(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_allow_rmb_select");
    }
SWIGINTERN void Tree_set_single_select_cell_editing_only_when_already_selected(Tree *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_single_select_cell_editing_only_when_already_selected", enable);
    }
SWIGINTERN bool Tree_get_single_select_cell_editing_only_when_already_selected(Tree *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_single_select_cell_editing_only_when_already_selected");
    }
SWIGINTERN void VehicleBody_set_mass(VehicleBody *self,float mass){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mass", mass);
    }
SWIGINTERN float VehicleBody_get_mass(VehicleBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mass");
    }
SWIGINTERN void VehicleBody_set_friction(VehicleBody *self,float friction){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_friction", friction);
    }
SWIGINTERN float VehicleBody_get_friction(VehicleBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_friction");
    }
SWIGINTERN void VehicleBody_set_engine_force(VehicleBody *self,float engine_force){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_engine_force", engine_force);
    }
SWIGINTERN float VehicleBody_get_engine_force(VehicleBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_engine_force");
    }
SWIGINTERN void VehicleBody_set_brake(VehicleBody *self,float brake){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_brake", brake);
    }
SWIGINTERN float VehicleBody_get_brake(VehicleBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_brake");
    }
SWIGINTERN void VehicleBody_set_steering(VehicleBody *self,float steering){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_steering", steering);
    }
SWIGINTERN float VehicleBody_get_steering(VehicleBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_steering");
    }
SWIGINTERN Vector3 VehicleBody_get_linear_velocity(VehicleBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_velocity");
    }
SWIGINTERN void VideoPlayer_set_stream(VideoPlayer *self,Ref< VideoStream > stream){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stream", stream);
    }
SWIGINTERN Ref< VideoStream > VideoPlayer_get_stream(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream").operator Object *()->cast_to<VideoStream>();
    }
SWIGINTERN void VideoPlayer_play(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play");
    }
SWIGINTERN void VideoPlayer_stop(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN bool VideoPlayer_is_playing(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void VideoPlayer_set_paused(VideoPlayer *self,bool paused){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_paused", paused);
    }
SWIGINTERN bool VideoPlayer_is_paused(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_paused");
    }
SWIGINTERN void VideoPlayer_set_volume(VideoPlayer *self,float volume){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume", volume);
    }
SWIGINTERN float VideoPlayer_get_volume(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume");
    }
SWIGINTERN void VideoPlayer_set_volume_db(VideoPlayer *self,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_volume_db", db);
    }
SWIGINTERN float VideoPlayer_get_volume_db(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_volume_db");
    }
SWIGINTERN void VideoPlayer_set_audio_track(VideoPlayer *self,int track){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_audio_track", track);
    }
SWIGINTERN int VideoPlayer_get_audio_track(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_audio_track");
    }
SWIGINTERN String VideoPlayer_get_stream_name(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream_name");
    }
SWIGINTERN float VideoPlayer_get_stream_pos(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stream_pos");
    }
SWIGINTERN void VideoPlayer_set_autoplay(VideoPlayer *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_autoplay", enabled);
    }
SWIGINTERN bool VideoPlayer_has_autoplay(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_autoplay");
    }
SWIGINTERN void VideoPlayer_set_expand(VideoPlayer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_expand", enable);
    }
SWIGINTERN bool VideoPlayer_has_expand(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("has_expand");
    }
SWIGINTERN void VideoPlayer_set_buffering_msec(VideoPlayer *self,int msec){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_buffering_msec", msec);
    }
SWIGINTERN int VideoPlayer_get_buffering_msec(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_buffering_msec");
    }
SWIGINTERN Ref< Texture > VideoPlayer_get_video_texture(VideoPlayer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_video_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void ViewportSprite_set_viewport_path(ViewportSprite *self,NodePath const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_viewport_path", path);
    }
SWIGINTERN NodePath ViewportSprite_get_viewport_path(ViewportSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_viewport_path");
    }
SWIGINTERN void ViewportSprite_set_centered(ViewportSprite *self,bool centered){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_centered", centered);
    }
SWIGINTERN bool ViewportSprite_is_centered(ViewportSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_centered");
    }
SWIGINTERN void ViewportSprite_set_offset(ViewportSprite *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 ViewportSprite_get_offset(ViewportSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void ViewportSprite_set_modulate(ViewportSprite *self,Color const &modulate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", modulate);
    }
SWIGINTERN Color ViewportSprite_get_modulate(ViewportSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void VisibilityEnabler_set_enabler(VisibilityEnabler *self,int enabler,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabler", enabler, enabled);
    }
SWIGINTERN bool VisibilityEnabler_is_enabler_enabled(VisibilityEnabler *self,int enabler){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabler_enabled", enabler);
    }
SWIGINTERN void VisibilityNotifier2D_set_rect(VisibilityNotifier2D *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rect", rect);
    }
SWIGINTERN Rect2 VisibilityNotifier2D_get_rect(VisibilityNotifier2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rect");
    }
SWIGINTERN bool VisibilityNotifier2D_is_on_screen(VisibilityNotifier2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_on_screen");
    }
SWIGINTERN void WindowDialog_set_title(WindowDialog *self,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_title", title);
    }
SWIGINTERN String WindowDialog_get_title(WindowDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_title");
    }
SWIGINTERN TextureButton *WindowDialog_get_close_button(WindowDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_close_button").operator Object *()->cast_to<TextureButton>();
    }
SWIGINTERN void YSort_set_sort_enabled(YSort *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sort_enabled", enabled);
    }
SWIGINTERN bool YSort_is_sort_enabled(YSort *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_sort_enabled");
    }
SWIGINTERN Object *AcceptDialog_get_ok(AcceptDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_ok").operator Object *();
    }
SWIGINTERN Object *AcceptDialog_get_label(AcceptDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_label").operator Object *();
    }
SWIGINTERN void AcceptDialog_set_hide_on_ok(AcceptDialog *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hide_on_ok", enabled);
    }
SWIGINTERN bool AcceptDialog_get_hide_on_ok(AcceptDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_hide_on_ok");
    }
SWIGINTERN Button *AcceptDialog_add_button__SWIG_0(AcceptDialog *self,String const &text,bool right=false,String const &action=""){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("add_button", text, right, action).operator Object *()->cast_to<Button>();
    }
SWIGINTERN Button *AcceptDialog_add_cancel(AcceptDialog *self,String const &name){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("add_cancel", name).operator Object *()->cast_to<Button>();
    }
SWIGINTERN LineEdit *AcceptDialog_register_text_enter(AcceptDialog *self,Object *line_edit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("register_text_enter", line_edit).operator Object *()->cast_to<LineEdit>();
    }
SWIGINTERN void AcceptDialog_set_text(AcceptDialog *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", text);
    }
SWIGINTERN String AcceptDialog_get_text(AcceptDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text");
    }
SWIGINTERN void AnimatedSprite_set_sprite_frames(AnimatedSprite *self,Ref< SpriteFrames > sprite_frames){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sprite_frames", sprite_frames);
    }
SWIGINTERN Ref< SpriteFrames > AnimatedSprite_get_sprite_frames(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sprite_frames").operator Object *()->cast_to<SpriteFrames>();
    }
SWIGINTERN void AnimatedSprite_set_animation(AnimatedSprite *self,String const &animation){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_animation", animation);
    }
SWIGINTERN String AnimatedSprite_get_animation(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_animation");
    }
SWIGINTERN void AnimatedSprite_play__SWIG_0(AnimatedSprite *self,String const &anim=""){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("play", anim);
    }
SWIGINTERN void AnimatedSprite_stop(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop");
    }
SWIGINTERN bool AnimatedSprite_is_playing(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_playing");
    }
SWIGINTERN void AnimatedSprite_set_centered(AnimatedSprite *self,bool centered){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_centered", centered);
    }
SWIGINTERN bool AnimatedSprite_is_centered(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_centered");
    }
SWIGINTERN void AnimatedSprite_set_offset(AnimatedSprite *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 AnimatedSprite_get_offset(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void AnimatedSprite_set_flip_h(AnimatedSprite *self,bool flip_h){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_h", flip_h);
    }
SWIGINTERN bool AnimatedSprite_is_flipped_h(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_h");
    }
SWIGINTERN void AnimatedSprite_set_flip_v(AnimatedSprite *self,bool flip_v){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flip_v", flip_v);
    }
SWIGINTERN bool AnimatedSprite_is_flipped_v(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flipped_v");
    }
SWIGINTERN void AnimatedSprite_set_frame(AnimatedSprite *self,int frame){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_frame", frame);
    }
SWIGINTERN int AnimatedSprite_get_frame(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame");
    }
SWIGINTERN void AnimatedSprite_set_modulate(AnimatedSprite *self,Color const &modulate){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", modulate);
    }
SWIGINTERN Color AnimatedSprite_get_modulate(AnimatedSprite *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void AnimatedSprite3D_set_sprite_frames(AnimatedSprite3D *self,Ref< SpriteFrames > sprite_frames){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sprite_frames", sprite_frames);
    }
SWIGINTERN Ref< Texture > AnimatedSprite3D_get_sprite_frames(AnimatedSprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sprite_frames").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void AnimatedSprite3D_set_frame(AnimatedSprite3D *self,int frame){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_frame", frame);
    }
SWIGINTERN int AnimatedSprite3D_get_frame(AnimatedSprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame");
    }
SWIGINTERN void Area_set_space_override_mode(Area *self,int enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_space_override_mode", enable);
    }
SWIGINTERN int Area_get_space_override_mode(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space_override_mode");
    }
SWIGINTERN void Area_set_gravity_is_point(Area *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_is_point", enable);
    }
SWIGINTERN bool Area_is_gravity_a_point(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_gravity_a_point");
    }
SWIGINTERN void Area_set_gravity_distance_scale(Area *self,float distance_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_distance_scale", distance_scale);
    }
SWIGINTERN float Area_get_gravity_distance_scale(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_distance_scale");
    }
SWIGINTERN void Area_set_gravity_vector(Area *self,Vector3 const &vector){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_vector", vector);
    }
SWIGINTERN Vector3 Area_get_gravity_vector(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_vector");
    }
SWIGINTERN void Area_set_gravity(Area *self,float gravity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity", gravity);
    }
SWIGINTERN float Area_get_gravity(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity");
    }
SWIGINTERN void Area_set_angular_damp(Area *self,float angular_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_damp", angular_damp);
    }
SWIGINTERN float Area_get_angular_damp(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_damp");
    }
SWIGINTERN void Area_set_linear_damp(Area *self,float linear_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_damp", linear_damp);
    }
SWIGINTERN float Area_get_linear_damp(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_damp");
    }
SWIGINTERN void Area_set_priority(Area *self,float priority){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_priority", priority);
    }
SWIGINTERN float Area_get_priority(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_priority");
    }
SWIGINTERN void Area_set_collision_mask(Area *self,int collision_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask", collision_mask);
    }
SWIGINTERN int Area_get_collision_mask(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask");
    }
SWIGINTERN void Area_set_layer_mask(Area *self,int layer_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", layer_mask);
    }
SWIGINTERN int Area_get_layer_mask(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void Area_set_collision_mask_bit(Area *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask_bit", bit, value);
    }
SWIGINTERN bool Area_get_collision_mask_bit(Area *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask_bit", bit);
    }
SWIGINTERN void Area_set_layer_mask_bit(Area *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask_bit", bit, value);
    }
SWIGINTERN bool Area_get_layer_mask_bit(Area *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask_bit", bit);
    }
SWIGINTERN void Area_set_monitorable(Area *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_monitorable", enable);
    }
SWIGINTERN bool Area_is_monitorable(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_monitorable");
    }
SWIGINTERN void Area_set_enable_monitoring(Area *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enable_monitoring", enable);
    }
SWIGINTERN bool Area_is_monitoring_enabled(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_monitoring_enabled");
    }
SWIGINTERN Array Area_get_overlapping_bodies(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_overlapping_bodies");
    }
SWIGINTERN Array Area_get_overlapping_areas(Area *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_overlapping_areas");
    }
SWIGINTERN bool Area_overlaps_body(Area *self,Object *body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("overlaps_body", body);
    }
SWIGINTERN bool Area_overlaps_area(Area *self,Object *area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("overlaps_area", area);
    }
SWIGINTERN void BackBufferCopy_set_rect(BackBufferCopy *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rect", rect);
    }
SWIGINTERN Rect2 BackBufferCopy_get_rect(BackBufferCopy *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rect");
    }
SWIGINTERN void BackBufferCopy_set_copy_mode(BackBufferCopy *self,int copy_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_copy_mode", copy_mode);
    }
SWIGINTERN int BackBufferCopy_get_copy_mode(BackBufferCopy *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_copy_mode");
    }
SWIGINTERN void BaseButton__pressed(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_pressed");
    }
SWIGINTERN void BaseButton__toggled(BaseButton *self,bool pressed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_toggled", pressed);
    }
SWIGINTERN void BaseButton_set_pressed(BaseButton *self,bool pressed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pressed", pressed);
    }
SWIGINTERN bool BaseButton_is_pressed(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_pressed");
    }
SWIGINTERN bool BaseButton_is_hovered(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_hovered");
    }
SWIGINTERN void BaseButton_set_toggle_mode(BaseButton *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_toggle_mode", enabled);
    }
SWIGINTERN bool BaseButton_is_toggle_mode(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_toggle_mode");
    }
SWIGINTERN void BaseButton_set_disabled(BaseButton *self,bool disabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_disabled", disabled);
    }
SWIGINTERN bool BaseButton_is_disabled(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_disabled");
    }
SWIGINTERN void BaseButton_set_click_on_press(BaseButton *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_click_on_press", enable);
    }
SWIGINTERN bool BaseButton_get_click_on_press(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_click_on_press");
    }
SWIGINTERN int BaseButton_get_draw_mode(BaseButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_draw_mode");
    }
SWIGINTERN void Button_set_text(Button *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", text);
    }
SWIGINTERN String Button_get_text(Button *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text");
    }
SWIGINTERN void Button_set_button_icon(Button *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_button_icon", texture);
    }
SWIGINTERN Ref< Texture > Button_get_button_icon(Button *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button_icon").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void Button_set_flat(Button *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flat", enabled);
    }
SWIGINTERN void Button_set_clip_text(Button *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_clip_text", enabled);
    }
SWIGINTERN bool Button_get_clip_text(Button *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_clip_text");
    }
SWIGINTERN void Button_set_text_align(Button *self,int align){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text_align", align);
    }
SWIGINTERN int Button_get_text_align(Button *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text_align");
    }
SWIGINTERN bool Button_is_flat(Button *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_flat");
    }
SWIGINTERN void ButtonArray_add_button(ButtonArray *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_button", text);
    }
SWIGINTERN void ButtonArray_add_icon_button__SWIG_0(ButtonArray *self,Ref< Texture > icon,String const &text=""){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_icon_button", icon, text);
    }
SWIGINTERN void ButtonArray_set_button_text(ButtonArray *self,int button_idx,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_button_text", button_idx, text);
    }
SWIGINTERN void ButtonArray_set_button_icon(ButtonArray *self,int button_idx,Ref< Texture > icon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_button_icon", button_idx, icon);
    }
SWIGINTERN String ButtonArray_get_button_text(ButtonArray *self,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button_text", button_idx);
    }
SWIGINTERN Ref< Texture > ButtonArray_get_button_icon(ButtonArray *self,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button_icon", button_idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN int ButtonArray_get_button_count(ButtonArray *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button_count");
    }
SWIGINTERN int ButtonArray_get_selected(ButtonArray *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selected");
    }
SWIGINTERN int ButtonArray_get_hovered(ButtonArray *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_hovered");
    }
SWIGINTERN void ButtonArray_set_selected(ButtonArray *self,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_selected", button_idx);
    }
SWIGINTERN void ButtonArray_erase_button(ButtonArray *self,int button_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("erase_button", button_idx);
    }
SWIGINTERN void ButtonArray_clear(ButtonArray *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void Camera2D_set_offset(Camera2D *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 Camera2D_get_offset(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN void Camera2D_set_anchor_mode(Camera2D *self,int anchor_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_anchor_mode", anchor_mode);
    }
SWIGINTERN int Camera2D_get_anchor_mode(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_anchor_mode");
    }
SWIGINTERN void Camera2D_set_rotating(Camera2D *self,bool rotating){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rotating", rotating);
    }
SWIGINTERN bool Camera2D_is_rotating(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_rotating");
    }
SWIGINTERN void Camera2D_make_current(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("make_current");
    }
SWIGINTERN void Camera2D_clear_current(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_current");
    }
SWIGINTERN bool Camera2D_is_current(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_current");
    }
SWIGINTERN void Camera2D_set_limit(Camera2D *self,int margin,int limit){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_limit", margin, limit);
    }
SWIGINTERN int Camera2D_get_limit(Camera2D *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_limit", margin);
    }
SWIGINTERN void Camera2D_set_v_drag_enabled(Camera2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_drag_enabled", enabled);
    }
SWIGINTERN bool Camera2D_is_v_drag_enabled(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_v_drag_enabled");
    }
SWIGINTERN void Camera2D_set_h_drag_enabled(Camera2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_drag_enabled", enabled);
    }
SWIGINTERN bool Camera2D_is_h_drag_enabled(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_h_drag_enabled");
    }
SWIGINTERN void Camera2D_set_v_offset(Camera2D *self,float ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_offset", ofs);
    }
SWIGINTERN float Camera2D_get_v_offset(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_offset");
    }
SWIGINTERN void Camera2D_set_h_offset(Camera2D *self,float ofs){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_offset", ofs);
    }
SWIGINTERN float Camera2D_get_h_offset(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_h_offset");
    }
SWIGINTERN void Camera2D_set_drag_margin(Camera2D *self,int margin,float drag_margin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_drag_margin", margin, drag_margin);
    }
SWIGINTERN float Camera2D_get_drag_margin(Camera2D *self,int margin){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_drag_margin", margin);
    }
SWIGINTERN Vector2 Camera2D_get_camera_pos(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_camera_pos");
    }
SWIGINTERN Vector2 Camera2D_get_camera_screen_center(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_camera_screen_center");
    }
SWIGINTERN void Camera2D_set_zoom(Camera2D *self,Vector2 const &zoom){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_zoom", zoom);
    }
SWIGINTERN Vector2 Camera2D_get_zoom(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_zoom");
    }
SWIGINTERN void Camera2D_set_follow_smoothing(Camera2D *self,float follow_smoothing){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_follow_smoothing", follow_smoothing);
    }
SWIGINTERN float Camera2D_get_follow_smoothing(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_follow_smoothing");
    }
SWIGINTERN void Camera2D_set_enable_follow_smoothing(Camera2D *self,bool follow_smoothing){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enable_follow_smoothing", follow_smoothing);
    }
SWIGINTERN bool Camera2D_is_follow_smoothing_enabled(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_follow_smoothing_enabled");
    }
SWIGINTERN void Camera2D_force_update_scroll(Camera2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("force_update_scroll");
    }
SWIGINTERN void CanvasModulate_set_color(CanvasModulate *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN Color CanvasModulate_get_color(CanvasModulate *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color");
    }
SWIGINTERN void CollisionObject2D__input_event(CollisionObject2D *self,Object *viewport,InputEvent const &event,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_input_event", viewport, event, shape_idx);
    }
SWIGINTERN void CollisionObject2D_add_shape__SWIG_0(CollisionObject2D *self,Ref< Shape2D > shape,Matrix32 const &transform=Matrix32()){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_shape", shape, transform);
    }
SWIGINTERN int CollisionObject2D_get_shape_count(CollisionObject2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape_count");
    }
SWIGINTERN void CollisionObject2D_set_shape(CollisionObject2D *self,int shape_idx,Ref< Shape > shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", shape_idx, shape);
    }
SWIGINTERN void CollisionObject2D_set_shape_transform(CollisionObject2D *self,int shape_idx,Matrix32 const &transform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape_transform", shape_idx, transform);
    }
SWIGINTERN void CollisionObject2D_set_shape_as_trigger(CollisionObject2D *self,int shape_idx,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape_as_trigger", shape_idx, enable);
    }
SWIGINTERN Ref< Shape2D > CollisionObject2D_get_shape(CollisionObject2D *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape", shape_idx).operator Object *()->cast_to<Shape2D>();
    }
SWIGINTERN Matrix32 CollisionObject2D_get_shape_transform(CollisionObject2D *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape_transform", shape_idx);
    }
SWIGINTERN bool CollisionObject2D_is_shape_set_as_trigger(CollisionObject2D *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_shape_set_as_trigger", shape_idx);
    }
SWIGINTERN void CollisionObject2D_remove_shape(CollisionObject2D *self,int shape_idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_shape", shape_idx);
    }
SWIGINTERN void CollisionObject2D_clear_shapes(CollisionObject2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_shapes");
    }
SWIGINTERN RID CollisionObject2D_get_rid(CollisionObject2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rid");
    }
SWIGINTERN void CollisionObject2D_set_pickable(CollisionObject2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pickable", enabled);
    }
SWIGINTERN bool CollisionObject2D_is_pickable(CollisionObject2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_pickable");
    }
SWIGINTERN void CollisionPolygon2D_set_polygon(CollisionPolygon2D *self,Vector2Array const &polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polygon", polygon);
    }
SWIGINTERN Vector2Array CollisionPolygon2D_get_polygon(CollisionPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polygon");
    }
SWIGINTERN void CollisionPolygon2D_set_build_mode(CollisionPolygon2D *self,int build_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_build_mode", build_mode);
    }
SWIGINTERN int CollisionPolygon2D_get_build_mode(CollisionPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_build_mode");
    }
SWIGINTERN void CollisionPolygon2D_set_trigger(CollisionPolygon2D *self,bool trigger){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_trigger", trigger);
    }
SWIGINTERN bool CollisionPolygon2D_is_trigger(CollisionPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_trigger");
    }
SWIGINTERN int CollisionPolygon2D_get_collision_object_first_shape(CollisionPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_object_first_shape");
    }
SWIGINTERN int CollisionPolygon2D_get_collision_object_last_shape(CollisionPolygon2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_object_last_shape");
    }
SWIGINTERN void CollisionShape2D_set_shape(CollisionShape2D *self,Object *shape){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shape", shape);
    }
SWIGINTERN Object *CollisionShape2D_get_shape(CollisionShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shape").operator Object *();
    }
SWIGINTERN void CollisionShape2D_set_trigger(CollisionShape2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_trigger", enable);
    }
SWIGINTERN bool CollisionShape2D_is_trigger(CollisionShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_trigger");
    }
SWIGINTERN int CollisionShape2D_get_collision_object_shape_index(CollisionShape2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_object_shape_index");
    }
SWIGINTERN void ColorPickerButton_set_color(ColorPickerButton *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN Color ColorPickerButton_get_color(ColorPickerButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color");
    }
SWIGINTERN void ColorPickerButton_set_edit_alpha(ColorPickerButton *self,bool show){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_edit_alpha", show);
    }
SWIGINTERN bool ColorPickerButton_is_editing_alpha(ColorPickerButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editing_alpha");
    }
SWIGINTERN void ConeTwistJoint_set_param(ConeTwistJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float ConeTwistJoint_get_param(ConeTwistJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN Button *ConfirmationDialog_get_cancel(ConfirmationDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_cancel").operator Object *()->cast_to<Button>();
    }
SWIGINTERN void Container_queue_sort(Container *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("queue_sort");
    }
SWIGINTERN void Container_fit_child_in_rect(Container *self,Control *child,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("fit_child_in_rect", child, rect);
    }
SWIGINTERN void DirectionalLight_set_shadow_mode(DirectionalLight *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shadow_mode", mode);
    }
SWIGINTERN int DirectionalLight_get_shadow_mode(DirectionalLight *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shadow_mode");
    }
SWIGINTERN void DirectionalLight_set_shadow_param(DirectionalLight *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shadow_param", param, value);
    }
SWIGINTERN float DirectionalLight_get_shadow_param(DirectionalLight *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shadow_param", param);
    }
SWIGINTERN void EditorFileDialog_clear_filters(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_filters");
    }
SWIGINTERN void EditorFileDialog_add_filter(EditorFileDialog *self,String const &filter){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_filter", filter);
    }
SWIGINTERN String EditorFileDialog_get_current_dir(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_dir");
    }
SWIGINTERN String EditorFileDialog_get_current_file(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_file");
    }
SWIGINTERN String EditorFileDialog_get_current_path(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_path");
    }
SWIGINTERN void EditorFileDialog_set_current_dir(EditorFileDialog *self,String const &dir){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_dir", dir);
    }
SWIGINTERN void EditorFileDialog_set_current_file(EditorFileDialog *self,String const &file){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_file", file);
    }
SWIGINTERN void EditorFileDialog_set_current_path(EditorFileDialog *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_path", path);
    }
SWIGINTERN void EditorFileDialog_set_mode(EditorFileDialog *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int EditorFileDialog_get_mode(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN VBoxContainer *EditorFileDialog_get_vbox(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vbox").operator Object *()->cast_to<VBoxContainer>();
    }
SWIGINTERN void EditorFileDialog_set_access(EditorFileDialog *self,int access){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_access", access);
    }
SWIGINTERN int EditorFileDialog_get_access(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_access");
    }
SWIGINTERN void EditorFileDialog_set_show_hidden_files(EditorFileDialog *self,bool show){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_show_hidden_files", show);
    }
SWIGINTERN bool EditorFileDialog_is_showing_hidden_files(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_showing_hidden_files");
    }
SWIGINTERN void EditorFileDialog_set_display_mode(EditorFileDialog *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_display_mode", mode);
    }
SWIGINTERN int EditorFileDialog_get_display_mode(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_display_mode");
    }
SWIGINTERN void EditorFileDialog_invalidate(EditorFileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("invalidate");
    }
SWIGINTERN void FileDialog_clear_filters(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_filters");
    }
SWIGINTERN void FileDialog_add_filter(FileDialog *self,String const &filter){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_filter", filter);
    }
SWIGINTERN String FileDialog_get_current_dir(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_dir");
    }
SWIGINTERN String FileDialog_get_current_file(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_file");
    }
SWIGINTERN String FileDialog_get_current_path(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_current_path");
    }
SWIGINTERN void FileDialog_set_current_dir(FileDialog *self,String const &dir){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_dir", dir);
    }
SWIGINTERN void FileDialog_set_current_file(FileDialog *self,String const &file){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_file", file);
    }
SWIGINTERN void FileDialog_set_current_path(FileDialog *self,String const &path){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_current_path", path);
    }
SWIGINTERN void FileDialog_set_mode(FileDialog *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int FileDialog_get_mode(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN VBoxContainer *FileDialog_get_vbox(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vbox").operator Object *()->cast_to<VBoxContainer>();
    }
SWIGINTERN void FileDialog_set_access(FileDialog *self,int access){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_access", access);
    }
SWIGINTERN int FileDialog_get_access(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_access");
    }
SWIGINTERN void FileDialog_set_show_hidden_files(FileDialog *self,bool show){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_show_hidden_files", show);
    }
SWIGINTERN bool FileDialog_is_showing_hidden_files(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_showing_hidden_files");
    }
SWIGINTERN void FileDialog_invalidate(FileDialog *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("invalidate");
    }
SWIGINTERN void Generic6DOFJoint_set_param_x(Generic6DOFJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param_x", param, value);
    }
SWIGINTERN float Generic6DOFJoint_get_param_x(Generic6DOFJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param_x", param);
    }
SWIGINTERN void Generic6DOFJoint_set_param_y(Generic6DOFJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param_y", param, value);
    }
SWIGINTERN float Generic6DOFJoint_get_param_y(Generic6DOFJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param_y", param);
    }
SWIGINTERN void Generic6DOFJoint_set_param_z(Generic6DOFJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param_z", param, value);
    }
SWIGINTERN float Generic6DOFJoint_get_param_z(Generic6DOFJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param_z", param);
    }
SWIGINTERN void Generic6DOFJoint_set_flag_x(Generic6DOFJoint *self,int flag,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flag_x", flag, value);
    }
SWIGINTERN bool Generic6DOFJoint_get_flag_x(Generic6DOFJoint *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flag_x", flag);
    }
SWIGINTERN void Generic6DOFJoint_set_flag_y(Generic6DOFJoint *self,int flag,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flag_y", flag, value);
    }
SWIGINTERN bool Generic6DOFJoint_get_flag_y(Generic6DOFJoint *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flag_y", flag);
    }
SWIGINTERN void Generic6DOFJoint_set_flag_z(Generic6DOFJoint *self,int flag,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flag_z", flag, value);
    }
SWIGINTERN bool Generic6DOFJoint_get_flag_z(Generic6DOFJoint *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flag_z", flag);
    }
SWIGINTERN void GraphNode_set_title(GraphNode *self,String const &title){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_title", title);
    }
SWIGINTERN String GraphNode_get_title(GraphNode *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_title");
    }
SWIGINTERN void GraphNode_set_slot(GraphNode *self,int idx,bool enable_left,int type_left,Color const &color_left,bool enable_right,int type_right,Color const &color_right){
  Variant::CallError err;
Variant arg_0_ = Variant(idx);
Variant arg_1_ = Variant(enable_left);
Variant arg_2_ = Variant(type_left);
Variant arg_3_ = Variant(color_left);
Variant arg_4_ = Variant(enable_right);
Variant arg_5_ = Variant(type_right);
Variant arg_6_ = Variant(color_right);
Variant *args_[7] = { &arg_0_, &arg_1_, &arg_2_, &arg_3_, &arg_4_, &arg_5_, &arg_6_ };
self->call("set_slot", (const Variant **) args_, 7, err);
    }
SWIGINTERN void GraphNode_clear_slot(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_slot", idx);
    }
SWIGINTERN void GraphNode_clear_all_slots(GraphNode *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear_all_slots");
    }
SWIGINTERN bool GraphNode_is_slot_enabled_left(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_slot_enabled_left", idx);
    }
SWIGINTERN int GraphNode_get_slot_type_left(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_slot_type_left", idx);
    }
SWIGINTERN Color GraphNode_get_slot_color_left(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_slot_color_left", idx);
    }
SWIGINTERN bool GraphNode_is_slot_enabled_right(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_slot_enabled_right", idx);
    }
SWIGINTERN int GraphNode_get_slot_type_right(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_slot_type_right", idx);
    }
SWIGINTERN Color GraphNode_get_slot_color_right(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_slot_color_right", idx);
    }
SWIGINTERN void GraphNode_set_offset(GraphNode *self,Vector2 const &offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_offset", offset);
    }
SWIGINTERN Vector2 GraphNode_get_offset(GraphNode *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_offset");
    }
SWIGINTERN int GraphNode_get_connection_output_count(GraphNode *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_output_count");
    }
SWIGINTERN int GraphNode_get_connection_input_count(GraphNode *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_input_count");
    }
SWIGINTERN Vector2 GraphNode_get_connection_output_pos(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_output_pos", idx);
    }
SWIGINTERN int GraphNode_get_connection_output_type(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_output_type", idx);
    }
SWIGINTERN Color GraphNode_get_connection_output_color(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_output_color", idx);
    }
SWIGINTERN Vector2 GraphNode_get_connection_input_pos(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_input_pos", idx);
    }
SWIGINTERN int GraphNode_get_connection_input_type(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_input_type", idx);
    }
SWIGINTERN Color GraphNode_get_connection_input_color(GraphNode *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_connection_input_color", idx);
    }
SWIGINTERN void GraphNode_set_show_close_button(GraphNode *self,bool show){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_show_close_button", show);
    }
SWIGINTERN bool GraphNode_is_close_button_visible(GraphNode *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_close_button_visible");
    }
SWIGINTERN void GridContainer_set_columns(GridContainer *self,int columns){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_columns", columns);
    }
SWIGINTERN int GridContainer_get_columns(GridContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_columns");
    }
SWIGINTERN void HingeJoint_set_param(HingeJoint *self,int param,float value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_param", param, value);
    }
SWIGINTERN float HingeJoint_get_param(HingeJoint *self,int param){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_param", param);
    }
SWIGINTERN void HingeJoint_set_flag(HingeJoint *self,int flag,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_flag", flag, enabled);
    }
SWIGINTERN bool HingeJoint_get_flag(HingeJoint *self,int flag){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_flag", flag);
    }
SWIGINTERN void Joint2D_set_node_a(Joint2D *self,NodePath const &node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_node_a", node);
    }
SWIGINTERN NodePath Joint2D_get_node_a(Joint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_a");
    }
SWIGINTERN void Joint2D_set_node_b(Joint2D *self,NodePath const &node){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_node_b", node);
    }
SWIGINTERN NodePath Joint2D_get_node_b(Joint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_node_b");
    }
SWIGINTERN void Joint2D_set_bias(Joint2D *self,float bias){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bias", bias);
    }
SWIGINTERN float Joint2D_get_bias(Joint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bias");
    }
SWIGINTERN void Joint2D_set_exclude_nodes_from_collision(Joint2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_exclude_nodes_from_collision", enable);
    }
SWIGINTERN bool Joint2D_get_exclude_nodes_from_collision(Joint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_exclude_nodes_from_collision");
    }
SWIGINTERN Vector3 KinematicBody_move(KinematicBody *self,Vector3 const &rel_vec){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("move", rel_vec);
    }
SWIGINTERN Vector3 KinematicBody_move_to(KinematicBody *self,Vector3 const &position){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("move_to", position);
    }
SWIGINTERN bool KinematicBody_can_teleport_to(KinematicBody *self,Vector3 const &position){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_teleport_to", position);
    }
SWIGINTERN bool KinematicBody_is_colliding(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_colliding");
    }
SWIGINTERN Vector3 KinematicBody_get_collision_pos(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_pos");
    }
SWIGINTERN Vector3 KinematicBody_get_collision_normal(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_normal");
    }
SWIGINTERN Vector3 KinematicBody_get_collider_velocity(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_velocity");
    }
SWIGINTERN Object *KinematicBody_get_collider(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider").operator Object *();
    }
SWIGINTERN int KinematicBody_get_collider_shape(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_shape");
    }
SWIGINTERN void KinematicBody_set_collide_with_static_bodies(KinematicBody *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collide_with_static_bodies", enable);
    }
SWIGINTERN bool KinematicBody_can_collide_with_static_bodies(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_collide_with_static_bodies");
    }
SWIGINTERN void KinematicBody_set_collide_with_kinematic_bodies(KinematicBody *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collide_with_kinematic_bodies", enable);
    }
SWIGINTERN bool KinematicBody_can_collide_with_kinematic_bodies(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_collide_with_kinematic_bodies");
    }
SWIGINTERN void KinematicBody_set_collide_with_rigid_bodies(KinematicBody *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collide_with_rigid_bodies", enable);
    }
SWIGINTERN bool KinematicBody_can_collide_with_rigid_bodies(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_collide_with_rigid_bodies");
    }
SWIGINTERN void KinematicBody_set_collide_with_character_bodies(KinematicBody *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collide_with_character_bodies", enable);
    }
SWIGINTERN bool KinematicBody_can_collide_with_character_bodies(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("can_collide_with_character_bodies");
    }
SWIGINTERN void KinematicBody_set_collision_margin(KinematicBody *self,float pixels){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_margin", pixels);
    }
SWIGINTERN float KinematicBody_get_collision_margin(KinematicBody *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_margin");
    }
SWIGINTERN void Light2D_set_enabled(Light2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool Light2D_is_enabled(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void Light2D_set_texture(Light2D *self,Object *texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Object *Light2D_get_texture(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *();
    }
SWIGINTERN void Light2D_set_texture_offset(Light2D *self,Vector2 const &texture_offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_offset", texture_offset);
    }
SWIGINTERN Vector2 Light2D_get_texture_offset(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_offset");
    }
SWIGINTERN void Light2D_set_color(Light2D *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN Color Light2D_get_color(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color");
    }
SWIGINTERN void Light2D_set_height(Light2D *self,float height){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_height", height);
    }
SWIGINTERN float Light2D_get_height(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_height");
    }
SWIGINTERN void Light2D_set_energy(Light2D *self,float energy){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_energy", energy);
    }
SWIGINTERN float Light2D_get_energy(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_energy");
    }
SWIGINTERN void Light2D_set_texture_scale(Light2D *self,float texture_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_scale", texture_scale);
    }
SWIGINTERN float Light2D_get_texture_scale(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_scale");
    }
SWIGINTERN void Light2D_set_z_range_min(Light2D *self,int z){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_z_range_min", z);
    }
SWIGINTERN int Light2D_get_z_range_min(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_z_range_min");
    }
SWIGINTERN void Light2D_set_z_range_max(Light2D *self,int z){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_z_range_max", z);
    }
SWIGINTERN int Light2D_get_z_range_max(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_z_range_max");
    }
SWIGINTERN void Light2D_set_layer_range_min(Light2D *self,int layer){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_range_min", layer);
    }
SWIGINTERN int Light2D_get_layer_range_min(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_range_min");
    }
SWIGINTERN void Light2D_set_layer_range_max(Light2D *self,int layer){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_range_max", layer);
    }
SWIGINTERN int Light2D_get_layer_range_max(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_range_max");
    }
SWIGINTERN void Light2D_set_item_mask(Light2D *self,int item_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_mask", item_mask);
    }
SWIGINTERN int Light2D_get_item_mask(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_mask");
    }
SWIGINTERN void Light2D_set_item_shadow_mask(Light2D *self,int item_shadow_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_shadow_mask", item_shadow_mask);
    }
SWIGINTERN int Light2D_get_item_shadow_mask(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_shadow_mask");
    }
SWIGINTERN void Light2D_set_mode(Light2D *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int Light2D_get_mode(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN void Light2D_set_shadow_enabled(Light2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shadow_enabled", enabled);
    }
SWIGINTERN bool Light2D_is_shadow_enabled(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_shadow_enabled");
    }
SWIGINTERN void Light2D_set_shadow_buffer_size(Light2D *self,int size){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shadow_buffer_size", size);
    }
SWIGINTERN int Light2D_get_shadow_buffer_size(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shadow_buffer_size");
    }
SWIGINTERN void Light2D_set_shadow_esm_multiplier(Light2D *self,float multiplier){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shadow_esm_multiplier", multiplier);
    }
SWIGINTERN float Light2D_get_shadow_esm_multiplier(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shadow_esm_multiplier");
    }
SWIGINTERN void Light2D_set_shadow_color(Light2D *self,Color const &shadow_color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_shadow_color", shadow_color);
    }
SWIGINTERN Color Light2D_get_shadow_color(Light2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_shadow_color");
    }
SWIGINTERN void LightOccluder2D_set_occluder_polygon(LightOccluder2D *self,Ref< OccluderPolygon2D > polygon){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_occluder_polygon", polygon);
    }
SWIGINTERN Ref< OccluderPolygon2D > LightOccluder2D_get_occluder_polygon(LightOccluder2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_occluder_polygon").operator Object *()->cast_to<OccluderPolygon2D>();
    }
SWIGINTERN void LightOccluder2D_set_occluder_light_mask(LightOccluder2D *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_occluder_light_mask", mask);
    }
SWIGINTERN int LightOccluder2D_get_occluder_light_mask(LightOccluder2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_occluder_light_mask");
    }
SWIGINTERN void LinkButton_set_text(LinkButton *self,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_text", text);
    }
SWIGINTERN String LinkButton_get_text(LinkButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_text");
    }
SWIGINTERN void LinkButton_set_underline_mode(LinkButton *self,int underline_mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_underline_mode", underline_mode);
    }
SWIGINTERN int LinkButton_get_underline_mode(LinkButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_underline_mode");
    }
SWIGINTERN PopupMenu *MenuButton_get_popup(MenuButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_popup").operator Object *()->cast_to<PopupMenu>();
    }
SWIGINTERN int Navigation2D_navpoly_create__SWIG_0(Navigation2D *self,Ref< NavigationPolygon > mesh,Matrix32 const &xform,Object *owner=NULL){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("navpoly_create", mesh, xform, owner);
    }
SWIGINTERN void Navigation2D_navpoly_set_transform(Navigation2D *self,int id,Matrix32 const &xform){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("navpoly_set_transform", id, xform);
    }
SWIGINTERN void Navigation2D_navpoly_remove(Navigation2D *self,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("navpoly_remove", id);
    }
SWIGINTERN Vector2Array Navigation2D_get_simple_path__SWIG_0(Navigation2D *self,Vector2 const &start,Vector2 const &end,bool optimize=true){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_simple_path", start, end, optimize);
    }
SWIGINTERN Vector2 Navigation2D_get_closest_point(Navigation2D *self,Vector2 const &to_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point", to_point);
    }
SWIGINTERN Object *Navigation2D_get_closest_point_owner(Navigation2D *self,Vector2 const &to_point){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_closest_point_owner", to_point).operator Object *();
    }
SWIGINTERN void NavigationPolygonInstance_set_navigation_polygon(NavigationPolygonInstance *self,Ref< NavigationPolygon > navpoly){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_navigation_polygon", navpoly);
    }
SWIGINTERN Ref< NavigationPolygon > NavigationPolygonInstance_get_navigation_polygon(NavigationPolygonInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_navigation_polygon").operator Object *()->cast_to<NavigationPolygon>();
    }
SWIGINTERN void NavigationPolygonInstance_set_enabled(NavigationPolygonInstance *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabled", enabled);
    }
SWIGINTERN bool NavigationPolygonInstance_is_enabled(NavigationPolygonInstance *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabled");
    }
SWIGINTERN void OptionButton_add_item__SWIG_0(OptionButton *self,String const &label,int id=-1){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_item", label, id);
    }
SWIGINTERN void OptionButton_add_icon_item(OptionButton *self,Ref< Texture > texture,String const &label,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_icon_item", texture, label, id);
    }
SWIGINTERN void OptionButton_set_item_text(OptionButton *self,int idx,String const &text){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_text", idx, text);
    }
SWIGINTERN void OptionButton_set_item_icon(OptionButton *self,int idx,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_icon", idx, texture);
    }
SWIGINTERN void OptionButton_set_item_disabled(OptionButton *self,int idx,bool disabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_disabled", idx, disabled);
    }
SWIGINTERN void OptionButton_set_item_ID(OptionButton *self,int idx,int id){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_ID", idx, id);
    }
SWIGINTERN void OptionButton_set_item_metadata(OptionButton *self,int idx,Variant const &metadata){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_item_metadata", idx, metadata);
    }
SWIGINTERN String OptionButton_get_item_text(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_text", idx);
    }
SWIGINTERN Ref< Texture > OptionButton_get_item_icon(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_icon", idx).operator Object *()->cast_to<Texture>();
    }
SWIGINTERN int OptionButton_get_item_ID(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_ID", idx);
    }
SWIGINTERN void OptionButton_get_item_metadata(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_item_metadata", idx);
    }
SWIGINTERN bool OptionButton_is_item_disabled(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_item_disabled", idx);
    }
SWIGINTERN int OptionButton_get_item_count(OptionButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_item_count");
    }
SWIGINTERN void OptionButton_add_separator(OptionButton *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_separator");
    }
SWIGINTERN void OptionButton_clear(OptionButton *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("clear");
    }
SWIGINTERN void OptionButton_select(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("select", idx);
    }
SWIGINTERN int OptionButton_get_selected(OptionButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selected");
    }
SWIGINTERN int OptionButton_get_selected_ID(OptionButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_selected_ID");
    }
SWIGINTERN void OptionButton_get_selected_metadata(OptionButton *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("get_selected_metadata");
    }
SWIGINTERN void OptionButton_remove_item(OptionButton *self,int idx){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_item", idx);
    }
SWIGINTERN void PhysicsBody2D_set_layer_mask(PhysicsBody2D *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", mask);
    }
SWIGINTERN int PhysicsBody2D_get_layer_mask(PhysicsBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void PhysicsBody2D_set_collision_mask(PhysicsBody2D *self,int mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask", mask);
    }
SWIGINTERN int PhysicsBody2D_get_collision_mask(PhysicsBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask");
    }
SWIGINTERN void PhysicsBody2D_set_collision_mask_bit(PhysicsBody2D *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask_bit", bit, value);
    }
SWIGINTERN bool PhysicsBody2D_get_collision_mask_bit(PhysicsBody2D *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask_bit", bit);
    }
SWIGINTERN void PhysicsBody2D_set_layer_mask_bit(PhysicsBody2D *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask_bit", bit, value);
    }
SWIGINTERN bool PhysicsBody2D_get_layer_mask_bit(PhysicsBody2D *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask_bit", bit);
    }
SWIGINTERN void PhysicsBody2D_set_one_way_collision_direction(PhysicsBody2D *self,Vector2 const &dir){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_one_way_collision_direction", dir);
    }
SWIGINTERN Vector2 PhysicsBody2D_get_one_way_collision_direction(PhysicsBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_one_way_collision_direction");
    }
SWIGINTERN void PhysicsBody2D_set_one_way_collision_max_depth(PhysicsBody2D *self,float depth){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_one_way_collision_max_depth", depth);
    }
SWIGINTERN float PhysicsBody2D_get_one_way_collision_max_depth(PhysicsBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_one_way_collision_max_depth");
    }
SWIGINTERN void PhysicsBody2D_add_collision_exception_with(PhysicsBody2D *self,PhysicsBody2D *body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_collision_exception_with", body);
    }
SWIGINTERN void PhysicsBody2D_remove_collision_exception_with(PhysicsBody2D *self,PhysicsBody2D *body){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("remove_collision_exception_with", body);
    }
SWIGINTERN void PinJoint2D_set_softness(PinJoint2D *self,float softness){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_softness", softness);
    }
SWIGINTERN float PinJoint2D_get_softness(PinJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_softness");
    }
SWIGINTERN void ProgressBar_set_percent_visible(ProgressBar *self,bool visible){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_percent_visible", visible);
    }
SWIGINTERN bool ProgressBar_is_percent_visible(ProgressBar *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_percent_visible");
    }
SWIGINTERN void RigidBody2D__integrate_forces(RigidBody2D *self,Physics2DDirectBodyState *state){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("_integrate_forces", state);
    }
SWIGINTERN void RigidBody2D_set_mode(RigidBody2D *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mode", mode);
    }
SWIGINTERN int RigidBody2D_get_mode(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mode");
    }
SWIGINTERN void RigidBody2D_set_mass(RigidBody2D *self,float mass){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_mass", mass);
    }
SWIGINTERN float RigidBody2D_get_mass(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_mass");
    }
SWIGINTERN float RigidBody2D_get_inertia(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_inertia");
    }
SWIGINTERN void RigidBody2D_set_inertia(RigidBody2D *self,float inertia){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_inertia", inertia);
    }
SWIGINTERN void RigidBody2D_set_weight(RigidBody2D *self,float weight){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_weight", weight);
    }
SWIGINTERN float RigidBody2D_get_weight(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_weight");
    }
SWIGINTERN void RigidBody2D_set_friction(RigidBody2D *self,float friction){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_friction", friction);
    }
SWIGINTERN float RigidBody2D_get_friction(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_friction");
    }
SWIGINTERN void RigidBody2D_set_bounce(RigidBody2D *self,float bounce){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bounce", bounce);
    }
SWIGINTERN float RigidBody2D_get_bounce(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounce");
    }
SWIGINTERN void RigidBody2D_set_gravity_scale(RigidBody2D *self,float gravity_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_scale", gravity_scale);
    }
SWIGINTERN float RigidBody2D_get_gravity_scale(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_scale");
    }
SWIGINTERN void RigidBody2D_set_linear_damp(RigidBody2D *self,float linear_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_damp", linear_damp);
    }
SWIGINTERN float RigidBody2D_get_linear_damp(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_damp");
    }
SWIGINTERN void RigidBody2D_set_angular_damp(RigidBody2D *self,float angular_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_damp", angular_damp);
    }
SWIGINTERN float RigidBody2D_get_angular_damp(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_damp");
    }
SWIGINTERN void RigidBody2D_set_linear_velocity(RigidBody2D *self,Vector2 const &linear_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_velocity", linear_velocity);
    }
SWIGINTERN Vector2 RigidBody2D_get_linear_velocity(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_velocity");
    }
SWIGINTERN void RigidBody2D_set_angular_velocity(RigidBody2D *self,float angular_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_velocity", angular_velocity);
    }
SWIGINTERN float RigidBody2D_get_angular_velocity(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_velocity");
    }
SWIGINTERN void RigidBody2D_set_max_contacts_reported(RigidBody2D *self,int amount){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_max_contacts_reported", amount);
    }
SWIGINTERN int RigidBody2D_get_max_contacts_reported(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_max_contacts_reported");
    }
SWIGINTERN void RigidBody2D_set_use_custom_integrator(RigidBody2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_custom_integrator", enable);
    }
SWIGINTERN bool RigidBody2D_is_using_custom_integrator(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_custom_integrator");
    }
SWIGINTERN void RigidBody2D_set_contact_monitor(RigidBody2D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_contact_monitor", enabled);
    }
SWIGINTERN bool RigidBody2D_is_contact_monitor_enabled(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_contact_monitor_enabled");
    }
SWIGINTERN void RigidBody2D_set_continuous_collision_detection_mode(RigidBody2D *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_continuous_collision_detection_mode", mode);
    }
SWIGINTERN int RigidBody2D_get_continuous_collision_detection_mode(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_continuous_collision_detection_mode");
    }
SWIGINTERN void RigidBody2D_set_axis_velocity(RigidBody2D *self,Vector2 const &axis_velocity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_axis_velocity", axis_velocity);
    }
SWIGINTERN void RigidBody2D_apply_impulse(RigidBody2D *self,Vector2 const &offset,Vector2 const &impulse){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("apply_impulse", offset, impulse);
    }
SWIGINTERN void RigidBody2D_set_applied_force(RigidBody2D *self,Vector2 const &force){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_applied_force", force);
    }
SWIGINTERN Vector2 RigidBody2D_get_applied_force(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_applied_force");
    }
SWIGINTERN void RigidBody2D_set_applied_torque(RigidBody2D *self,float torque){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_applied_torque", torque);
    }
SWIGINTERN float RigidBody2D_get_applied_torque(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_applied_torque");
    }
SWIGINTERN void RigidBody2D_add_force(RigidBody2D *self,Vector2 const &offset,Vector2 const &force){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_force", offset, force);
    }
SWIGINTERN void RigidBody2D_set_sleeping(RigidBody2D *self,bool sleeping){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sleeping", sleeping);
    }
SWIGINTERN bool RigidBody2D_is_sleeping(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_sleeping");
    }
SWIGINTERN void RigidBody2D_set_can_sleep(RigidBody2D *self,bool able_to_sleep){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_can_sleep", able_to_sleep);
    }
SWIGINTERN bool RigidBody2D_is_able_to_sleep(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_able_to_sleep");
    }
SWIGINTERN bool RigidBody2D_test_motion__SWIG_0(RigidBody2D *self,Vector2 const &motion,float margin=0.08,Ref< Physics2DTestMotionResult > result=Ref< Physics2DTestMotionResult >()){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("test_motion", motion, margin, result);
    }
SWIGINTERN Array RigidBody2D_get_colliding_bodies(RigidBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_colliding_bodies");
    }
SWIGINTERN void SamplePlayer2D_set_sample_library(SamplePlayer2D *self,Ref< SampleLibrary > library){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_sample_library", library);
    }
SWIGINTERN Ref< SampleLibrary > SamplePlayer2D_get_sample_library(SamplePlayer2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_sample_library").operator Object *()->cast_to<SampleLibrary>();
    }
SWIGINTERN void SamplePlayer2D_set_polyphony(SamplePlayer2D *self,int max_voices){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_polyphony", max_voices);
    }
SWIGINTERN int SamplePlayer2D_get_polyphony(SamplePlayer2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_polyphony");
    }
SWIGINTERN int SamplePlayer2D_play__SWIG_0(SamplePlayer2D *self,String const &sample,int voice=-2){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("play", sample, voice);
    }
SWIGINTERN void SamplePlayer2D_voice_set_pitch_scale(SamplePlayer2D *self,int voice,float ratio){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_pitch_scale", voice, ratio);
    }
SWIGINTERN void SamplePlayer2D_voice_set_volume_scale_db(SamplePlayer2D *self,int voice,float db){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("voice_set_volume_scale_db", voice, db);
    }
SWIGINTERN bool SamplePlayer2D_is_voice_active(SamplePlayer2D *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_voice_active", voice);
    }
SWIGINTERN void SamplePlayer2D_stop_voice(SamplePlayer2D *self,int voice){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop_voice", voice);
    }
SWIGINTERN void SamplePlayer2D_stop_all(SamplePlayer2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("stop_all");
    }
SWIGINTERN void SamplePlayer2D_set_random_pitch_scale(SamplePlayer2D *self,float val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_random_pitch_scale", val);
    }
SWIGINTERN float SamplePlayer2D_get_random_pitch_scale(SamplePlayer2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_random_pitch_scale");
    }
SWIGINTERN void ScrollContainer_set_enable_h_scroll(ScrollContainer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enable_h_scroll", enable);
    }
SWIGINTERN bool ScrollContainer_is_h_scroll_enabled(ScrollContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_h_scroll_enabled");
    }
SWIGINTERN void ScrollContainer_set_enable_v_scroll(ScrollContainer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enable_v_scroll", enable);
    }
SWIGINTERN bool ScrollContainer_is_v_scroll_enabled(ScrollContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_v_scroll_enabled");
    }
SWIGINTERN void ScrollContainer_set_h_scroll(ScrollContainer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_h_scroll", val);
    }
SWIGINTERN int ScrollContainer_get_h_scroll(ScrollContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_h_scroll");
    }
SWIGINTERN void ScrollContainer_set_v_scroll(ScrollContainer *self,int val){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_v_scroll", val);
    }
SWIGINTERN int ScrollContainer_get_v_scroll(ScrollContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_v_scroll");
    }
SWIGINTERN void SplitContainer_set_split_offset(SplitContainer *self,int offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_split_offset", offset);
    }
SWIGINTERN int SplitContainer_get_split_offset(SplitContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_split_offset");
    }
SWIGINTERN void SplitContainer_set_collapsed(SplitContainer *self,bool collapsed){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collapsed", collapsed);
    }
SWIGINTERN bool SplitContainer_is_collapsed(SplitContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_collapsed");
    }
SWIGINTERN void SplitContainer_set_dragger_visibility(SplitContainer *self,int mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_dragger_visibility", mode);
    }
SWIGINTERN int SplitContainer_get_dragger_visibility(SplitContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_dragger_visibility");
    }
SWIGINTERN void Sprite3D_set_texture(Sprite3D *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture", texture);
    }
SWIGINTERN Ref< Texture > Sprite3D_get_texture(Sprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN void Sprite3D_set_region(Sprite3D *self,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_region", enabled);
    }
SWIGINTERN bool Sprite3D_is_region(Sprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_region");
    }
SWIGINTERN void Sprite3D_set_region_rect(Sprite3D *self,Rect2 const &rect){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_region_rect", rect);
    }
SWIGINTERN Rect2 Sprite3D_get_region_rect(Sprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_region_rect");
    }
SWIGINTERN void Sprite3D_set_frame(Sprite3D *self,int frame){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_frame", frame);
    }
SWIGINTERN int Sprite3D_get_frame(Sprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_frame");
    }
SWIGINTERN void Sprite3D_set_vframes(Sprite3D *self,int vframes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_vframes", vframes);
    }
SWIGINTERN int Sprite3D_get_vframes(Sprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_vframes");
    }
SWIGINTERN void Sprite3D_set_hframes(Sprite3D *self,int hframes){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hframes", hframes);
    }
SWIGINTERN int Sprite3D_get_hframes(Sprite3D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_hframes");
    }
SWIGINTERN void StaticBody2D_set_constant_linear_velocity(StaticBody2D *self,Vector2 const &vel){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_constant_linear_velocity", vel);
    }
SWIGINTERN void StaticBody2D_set_constant_angular_velocity(StaticBody2D *self,float vel){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_constant_angular_velocity", vel);
    }
SWIGINTERN Vector2 StaticBody2D_get_constant_linear_velocity(StaticBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant_linear_velocity");
    }
SWIGINTERN float StaticBody2D_get_constant_angular_velocity(StaticBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_constant_angular_velocity");
    }
SWIGINTERN void StaticBody2D_set_friction(StaticBody2D *self,float friction){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_friction", friction);
    }
SWIGINTERN float StaticBody2D_get_friction(StaticBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_friction");
    }
SWIGINTERN void StaticBody2D_set_bounce(StaticBody2D *self,float bounce){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_bounce", bounce);
    }
SWIGINTERN float StaticBody2D_get_bounce(StaticBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_bounce");
    }
SWIGINTERN void TextureButton_set_normal_texture(TextureButton *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_normal_texture", texture);
    }
SWIGINTERN void TextureButton_set_pressed_texture(TextureButton *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pressed_texture", texture);
    }
SWIGINTERN void TextureButton_set_hover_texture(TextureButton *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_hover_texture", texture);
    }
SWIGINTERN void TextureButton_set_disabled_texture(TextureButton *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_disabled_texture", texture);
    }
SWIGINTERN void TextureButton_set_focused_texture(TextureButton *self,Ref< Texture > texture){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_focused_texture", texture);
    }
SWIGINTERN void TextureButton_set_click_mask(TextureButton *self,Ref< BitMap > mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_click_mask", mask);
    }
SWIGINTERN void TextureButton_set_texture_scale(TextureButton *self,Vector2 const &scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_texture_scale", scale);
    }
SWIGINTERN void TextureButton_set_modulate(TextureButton *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_modulate", color);
    }
SWIGINTERN Ref< Texture > TextureButton_get_normal_texture(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_normal_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< Texture > TextureButton_get_pressed_texture(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pressed_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< Texture > TextureButton_get_hover_texture(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_hover_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< Texture > TextureButton_get_disabled_texture(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_disabled_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< Texture > TextureButton_get_focused_texture(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_focused_texture").operator Object *()->cast_to<Texture>();
    }
SWIGINTERN Ref< BitMap > TextureButton_get_click_mask(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_click_mask").operator Object *()->cast_to<BitMap>();
    }
SWIGINTERN Vector2 TextureButton_get_texture_scale(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_texture_scale");
    }
SWIGINTERN Color TextureButton_get_modulate(TextureButton *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_modulate");
    }
SWIGINTERN void VisibilityEnabler2D_set_enabler(VisibilityEnabler2D *self,int enabler,bool enabled){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enabler", enabler, enabled);
    }
SWIGINTERN bool VisibilityEnabler2D_is_enabler_enabled(VisibilityEnabler2D *self,int enabler){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_enabler_enabled", enabler);
    }
SWIGINTERN void Area2D_set_space_override_mode(Area2D *self,int enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_space_override_mode", enable);
    }
SWIGINTERN int Area2D_get_space_override_mode(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_space_override_mode");
    }
SWIGINTERN void Area2D_set_gravity_is_point(Area2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_is_point", enable);
    }
SWIGINTERN bool Area2D_is_gravity_a_point(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_gravity_a_point");
    }
SWIGINTERN void Area2D_set_gravity_distance_scale(Area2D *self,float distance_scale){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_distance_scale", distance_scale);
    }
SWIGINTERN float Area2D_get_gravity_distance_scale(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_distance_scale");
    }
SWIGINTERN void Area2D_set_gravity_vector(Area2D *self,Vector2 const &vector){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity_vector", vector);
    }
SWIGINTERN Vector2 Area2D_get_gravity_vector(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity_vector");
    }
SWIGINTERN void Area2D_set_gravity(Area2D *self,float gravity){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_gravity", gravity);
    }
SWIGINTERN float Area2D_get_gravity(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_gravity");
    }
SWIGINTERN void Area2D_set_linear_damp(Area2D *self,float linear_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_linear_damp", linear_damp);
    }
SWIGINTERN float Area2D_get_linear_damp(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_linear_damp");
    }
SWIGINTERN void Area2D_set_angular_damp(Area2D *self,float angular_damp){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_angular_damp", angular_damp);
    }
SWIGINTERN float Area2D_get_angular_damp(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_angular_damp");
    }
SWIGINTERN void Area2D_set_priority(Area2D *self,float priority){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_priority", priority);
    }
SWIGINTERN float Area2D_get_priority(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_priority");
    }
SWIGINTERN void Area2D_set_collision_mask(Area2D *self,int collision_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask", collision_mask);
    }
SWIGINTERN int Area2D_get_collision_mask(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask");
    }
SWIGINTERN void Area2D_set_layer_mask(Area2D *self,int layer_mask){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask", layer_mask);
    }
SWIGINTERN int Area2D_get_layer_mask(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask");
    }
SWIGINTERN void Area2D_set_collision_mask_bit(Area2D *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_mask_bit", bit, value);
    }
SWIGINTERN bool Area2D_get_collision_mask_bit(Area2D *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_mask_bit", bit);
    }
SWIGINTERN void Area2D_set_layer_mask_bit(Area2D *self,int bit,bool value){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_layer_mask_bit", bit, value);
    }
SWIGINTERN bool Area2D_get_layer_mask_bit(Area2D *self,int bit){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_layer_mask_bit", bit);
    }
SWIGINTERN void Area2D_set_enable_monitoring(Area2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_enable_monitoring", enable);
    }
SWIGINTERN bool Area2D_is_monitoring_enabled(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_monitoring_enabled");
    }
SWIGINTERN void Area2D_set_monitorable(Area2D *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_monitorable", enable);
    }
SWIGINTERN bool Area2D_is_monitorable(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_monitorable");
    }
SWIGINTERN Array Area2D_get_overlapping_bodies(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_overlapping_bodies");
    }
SWIGINTERN Array Area2D_get_overlapping_areas(Area2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_overlapping_areas");
    }
SWIGINTERN bool Area2D_overlaps_body(Area2D *self,Object *body){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("overlaps_body", body);
    }
SWIGINTERN bool Area2D_overlaps_area(Area2D *self,Object *area){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("overlaps_area", area);
    }
SWIGINTERN void BoxContainer_add_spacer(BoxContainer *self,bool begin){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_spacer", begin);
    }
SWIGINTERN int BoxContainer_get_alignment(BoxContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_alignment");
    }
SWIGINTERN void BoxContainer_set_alignment(BoxContainer *self,int alignment){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_alignment", alignment);
    }
SWIGINTERN BaseButton *ButtonGroup_get_pressed_button(ButtonGroup *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pressed_button").operator Object *()->cast_to<BaseButton>();
    }
SWIGINTERN int ButtonGroup_get_pressed_button_index(ButtonGroup *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_pressed_button_index");
    }
SWIGINTERN BaseButton *ButtonGroup_get_focused_button(ButtonGroup *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_focused_button").operator Object *()->cast_to<BaseButton>();
    }
SWIGINTERN Array ButtonGroup_get_button_list(ButtonGroup *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_button_list");
    }
SWIGINTERN void ButtonGroup_set_pressed_button(ButtonGroup *self,BaseButton *button){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_pressed_button", button);
    }
SWIGINTERN void CenterContainer_set_use_top_left(CenterContainer *self,bool enable){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_use_top_left", enable);
    }
SWIGINTERN bool CenterContainer_is_using_top_left(CenterContainer *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_using_top_left");
    }
SWIGINTERN void ColorPicker_set_color(ColorPicker *self,Color const &color){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_color", color);
    }
SWIGINTERN Color ColorPicker_get_color(ColorPicker *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_color");
    }
SWIGINTERN void ColorPicker_set_raw_mode(ColorPicker *self,bool mode){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_raw_mode", mode);
    }
SWIGINTERN bool ColorPicker_is_raw_mode(ColorPicker *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_raw_mode");
    }
SWIGINTERN void ColorPicker_set_edit_alpha(ColorPicker *self,bool show){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_edit_alpha", show);
    }
SWIGINTERN bool ColorPicker_is_editing_alpha(ColorPicker *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_editing_alpha");
    }
SWIGINTERN void ColorPicker_add_preset(ColorPicker *self,Color const &arg0_){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("add_preset", arg0_);
    }
SWIGINTERN void DampedSpringJoint2D_set_length(DampedSpringJoint2D *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_length", length);
    }
SWIGINTERN float DampedSpringJoint2D_get_length(DampedSpringJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void DampedSpringJoint2D_set_rest_length(DampedSpringJoint2D *self,float rest_length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_rest_length", rest_length);
    }
SWIGINTERN float DampedSpringJoint2D_get_rest_length(DampedSpringJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_rest_length");
    }
SWIGINTERN void DampedSpringJoint2D_set_stiffness(DampedSpringJoint2D *self,float stiffness){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_stiffness", stiffness);
    }
SWIGINTERN float DampedSpringJoint2D_get_stiffness(DampedSpringJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_stiffness");
    }
SWIGINTERN void DampedSpringJoint2D_set_damping(DampedSpringJoint2D *self,float damping){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_damping", damping);
    }
SWIGINTERN float DampedSpringJoint2D_get_damping(DampedSpringJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_damping");
    }
SWIGINTERN void GrooveJoint2D_set_length(GrooveJoint2D *self,float length){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_length", length);
    }
SWIGINTERN float GrooveJoint2D_get_length(GrooveJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_length");
    }
SWIGINTERN void GrooveJoint2D_set_initial_offset(GrooveJoint2D *self,float offset){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_initial_offset", offset);
    }
SWIGINTERN float GrooveJoint2D_get_initial_offset(GrooveJoint2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_initial_offset");
    }
SWIGINTERN Vector2 KinematicBody2D_move(KinematicBody2D *self,Vector2 const &rel_vec){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("move", rel_vec);
    }
SWIGINTERN Vector2 KinematicBody2D_move_to(KinematicBody2D *self,Vector2 const &position){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("move_to", position);
    }
SWIGINTERN bool KinematicBody2D_test_move(KinematicBody2D *self,Vector2 const &rel_vec){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("test_move", rel_vec);
    }
SWIGINTERN Vector2 KinematicBody2D_get_travel(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_travel");
    }
SWIGINTERN void KinematicBody2D_revert_motion(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("revert_motion");
    }
SWIGINTERN bool KinematicBody2D_is_colliding(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("is_colliding");
    }
SWIGINTERN Vector2 KinematicBody2D_get_collision_pos(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_pos");
    }
SWIGINTERN Vector2 KinematicBody2D_get_collision_normal(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_normal");
    }
SWIGINTERN Vector2 KinematicBody2D_get_collider_velocity(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_velocity");
    }
SWIGINTERN Object *KinematicBody2D_get_collider(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider").operator Object *();
    }
SWIGINTERN int KinematicBody2D_get_collider_shape(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_shape");
    }
SWIGINTERN Variant KinematicBody2D_get_collider_metadata(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collider_metadata");
    }
SWIGINTERN void KinematicBody2D_set_collision_margin(KinematicBody2D *self,float pixels){
  Object* self_obj = static_cast<Object*>(self);
  self_obj->call("set_collision_margin", pixels);
    }
SWIGINTERN float KinematicBody2D_get_collision_margin(KinematicBody2D *self){
  Object* self_obj = static_cast<Object*>(self);
  return self_obj->call("get_collision_margin");
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePath__SWIG_0() {
  void * jresult ;
  NodePath *result = 0 ;
  
  result = (NodePath *)memnew(NodePath());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePath__SWIG_1(char * jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  NodePath *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg1_str = jarg1;
  arg1 = &arg1_str; 
  result = (NodePath *)memnew(NodePath((String const &)*arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodePath(void * jarg1) {
  NodePath *arg1 = (NodePath *) 0 ;
  
  arg1 = (NodePath *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_0() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)memnew(Vector2());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Vector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2 *)memnew(Vector2(arg1,arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Vector2(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Variant_operator_to_float(void * jarg1) {
  float jresult ;
  Variant *arg1 = (Variant *) 0 ;
  float result;
  
  arg1 = (Variant *)jarg1; 
  result = (float)((Variant const *)arg1)->operator float();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_String(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  String result;
  
  arg1 = (Variant *)jarg1; 
  result = ((Variant const *)arg1)->operator String();
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Object(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Variant *)jarg1; 
  result = (Object *)((Variant const *)arg1)->operator Object*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Node(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Variant *)jarg1; 
  result = (Node *)((Variant const *)arg1)->operator Node*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variant_operator_to_Control(void * jarg1) {
  void * jresult ;
  Variant *arg1 = (Variant *) 0 ;
  Control *result = 0 ;
  
  arg1 = (Variant *)jarg1; 
  result = (Control *)((Variant const *)arg1)->operator Control*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_0() {
  void * jresult ;
  Variant *result = 0 ;
  
  result = (Variant *)memnew(Variant());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  Variant *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (Variant *)memnew(Variant(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_2(char * jarg1) {
  void * jresult ;
  String *arg1 = 0 ;
  Variant *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg1_str = jarg1;
  arg1 = &arg1_str; 
  result = (Variant *)memnew(Variant((String const &)*arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variant__SWIG_3(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Variant *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  result = (Variant *)memnew(Variant((Object const *)arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Variant(void * jarg1) {
  Variant *arg1 = (Variant *) 0 ;
  
  arg1 = (Variant *)jarg1; 
  memdelete(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__get(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object__get(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object__get_property_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object__get_property_list(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__init(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  Object__init(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__notification(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  Object__notification(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object__set(void * jarg1, char * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object__set(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_free(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  Object_free(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_type(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_type(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_type(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_is_type(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set(void * jarg1, char * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_set(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_get(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_get(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_property_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_property_list(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_method_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_method_list(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_notification__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Object_notification__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_notification__SWIG_1(void * jarg1, int jarg2) {
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (int)jarg2; 
  Object_notification__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_get_instance_ID(void * jarg1) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  result = (int)Object_get_instance_ID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_script(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Ref< Script > > arg2 ;
  Ref< Script > *argp2 ;
  
  arg1 = (Object *)jarg1; 
  argp2 = (Ref< Script > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Script >", 0);
    return ;
  }
  arg2 = *argp2; 
  Object_set_script(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_script(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  SwigValueWrapper< Ref< Script > > result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_script(arg1);
  jresult = memnew(Ref< Script >((const Ref< Script > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_meta(void * jarg1, char * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_set_meta(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_get_meta(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_get_meta(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_has_meta(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_has_meta(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_meta_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  StringArray result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_meta_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_add_user_signal__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Array *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Object_add_user_signal__SWIG_0(arg1,(String const &)*arg2,(Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_add_user_signal__SWIG_1(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_add_user_signal__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_has_user_signal(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_has_user_signal(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_emit_signal__SWIG_5(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Object_emit_signal__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_has_method(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Object_has_method(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_signal_list(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  result = Object_get_signal_list(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_get_signal_connection_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Array result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Object_get_signal_connection_list(arg1,(String const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_connect__SWIG_0(void * jarg1, char * jarg2, void * jarg3, char * jarg4, void * jarg5, int jarg6) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Array *arg5 = 0 ;
  int arg6 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (int)Object_connect__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4,(Array const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_connect__SWIG_1(void * jarg1, char * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Array *arg5 = 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = (int)Object_connect__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4,(Array const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object_connect__SWIG_2(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  int result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (int)Object_connect__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_disconnect(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Object_disconnect(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_connected(void * jarg1, char * jarg2, void * jarg3, char * jarg4) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (bool)Object_is_connected(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_block_signals(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Object_set_block_signals(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_blocking_signals(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)Object_is_blocking_signals(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_set_message_translation(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Object_set_message_translation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_can_translate_messages(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)Object_can_translate_messages(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_property_list_changed_notify(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  Object_property_list_changed_notify(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_XL_MESSAGE(void * jarg1, char * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Object_XL_MESSAGE(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_tr(void * jarg1, char * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Object_tr(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_is_queued_for_deletion(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)Object_is_queued_for_deletion(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (arg1)->call((String const &)*arg2,(Variant const &)*arg3);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_call__SWIG_5(void * jarg1, char * jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (arg1)->call((String const &)*arg2);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  (arg1)->call_deferred((String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_call_deferred__SWIG_5(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  (arg1)->call_deferred((String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_callv(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  String *arg2 = 0 ;
  Array *arg3 = 0 ;
  Variant result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = (arg1)->callv((String const &)*arg2,(Array const &)*arg3);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object() {
  void * jresult ;
  Object *result = 0 ;
  
  result = (Object *)memnew(Object());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_add_remap__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  PathRemap_add_remap__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_add_remap__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PathRemap_add_remap__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathRemap_has_remap(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)PathRemap_has_remap(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathRemap_get_remap(void * jarg1, char * jarg2) {
  void * jresult ;
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = PathRemap_get_remap(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_erase_remap(void * jarg1, char * jarg2) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  PathRemap_erase_remap(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathRemap_clear_remaps(void * jarg1) {
  PathRemap *arg1 = (PathRemap *) 0 ;
  
  arg1 = (PathRemap *)jarg1; 
  PathRemap_clear_remaps(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathRemap_SingletonGetInstance() {
  void * jresult ;
  PathRemap *result = 0 ;
  
  result = (PathRemap *)PathRemap_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Performance_get_monitor(void * jarg1, int jarg2) {
  float jresult ;
  Performance *arg1 = (Performance *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Performance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Performance_get_monitor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Performance_SingletonGetInstance() {
  void * jresult ;
  Performance *result = 0 ;
  
  result = (Performance *)Performance_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_total_gravity(void * jarg1) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = Physics2DDirectBodyState_get_total_gravity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_total_linear_damp(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_total_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_total_angular_damp(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_total_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_inverse_mass(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_inverse_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_inverse_inertia(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_inverse_inertia(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_linear_velocity(void * jarg1, void * jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DDirectBodyState_set_linear_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_linear_velocity(void * jarg1) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = Physics2DDirectBodyState_get_linear_velocity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_angular_velocity(void * jarg1, float jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float arg2 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (float)jarg2; 
  Physics2DDirectBodyState_set_angular_velocity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_angular_velocity(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_angular_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_transform(void * jarg1, void * jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DDirectBodyState_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_transform(void * jarg1) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Matrix32 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = Physics2DDirectBodyState_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_set_sleep_state(void * jarg1, unsigned int jarg2) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  bool arg2 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Physics2DDirectBodyState_set_sleep_state(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DDirectBodyState_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  bool result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (bool)Physics2DDirectBodyState_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_count(void * jarg1) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (int)Physics2DDirectBodyState_get_contact_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_local_pos(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_local_pos(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_local_normal(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_local_normal(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_local_shape(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DDirectBodyState_get_contact_local_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_pos(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider_pos(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_id(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DDirectBodyState_get_contact_collider_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_object(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)Physics2DDirectBodyState_get_contact_collider_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_shape(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DDirectBodyState_get_contact_collider_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_shape_metadata(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Variant result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider_shape_metadata(arg1,arg2);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_contact_collider_velocity_at_pos(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DDirectBodyState_get_contact_collider_velocity_at_pos(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_step(void * jarg1) {
  float jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  float result;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (float)Physics2DDirectBodyState_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DDirectBodyState_integrate_forces(void * jarg1) {
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  Physics2DDirectBodyState_integrate_forces(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectBodyState_get_space_state(void * jarg1) {
  void * jresult ;
  Physics2DDirectBodyState *arg1 = (Physics2DDirectBodyState *) 0 ;
  Physics2DDirectSpaceState *result = 0 ;
  
  arg1 = (Physics2DDirectBodyState *)jarg1; 
  result = (Physics2DDirectSpaceState *)Physics2DDirectBodyState_get_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,(Array const &)*arg4,arg5,arg6);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  int arg5 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,(Array const &)*arg4,arg5);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,(Array const &)*arg4);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_point__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_point__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Array const &)*arg4,arg5,arg6);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Array const &)*arg4,arg5);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Array *arg4 = 0 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Array const &)*arg4);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_ray__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Physics2DDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< Physics2DShapeQueryParameters > > arg2 ;
  int arg3 ;
  Ref< Physics2DShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  argp2 = (Ref< Physics2DShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = Physics2DDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_intersect_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< Physics2DShapeQueryParameters > > arg2 ;
  Ref< Physics2DShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  argp2 = (Ref< Physics2DShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = Physics2DDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_cast_motion(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< Physics2DShapeQueryParameters > > arg2 ;
  Ref< Physics2DShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  argp2 = (Ref< Physics2DShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = Physics2DDirectSpaceState_cast_motion(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_collide_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< Physics2DShapeQueryParameters > > arg2 ;
  int arg3 ;
  Ref< Physics2DShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  argp2 = (Ref< Physics2DShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = Physics2DDirectSpaceState_collide_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_collide_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< Physics2DShapeQueryParameters > > arg2 ;
  Ref< Physics2DShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  argp2 = (Ref< Physics2DShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = Physics2DDirectSpaceState_collide_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_get_rest_info(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DDirectSpaceState *arg1 = (Physics2DDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< Physics2DShapeQueryParameters > > arg2 ;
  Ref< Physics2DShapeQueryParameters > *argp2 ;
  Dictionary result;
  
  arg1 = (Physics2DDirectSpaceState *)jarg1; 
  argp2 = (Ref< Physics2DShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = Physics2DDirectSpaceState_get_rest_info(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_shape_create(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DServer_shape_create(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_shape_set_data(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_shape_set_data(arg1,(RID const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_shape_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_shape_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_shape_get_data(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_shape_get_data(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_space_create(void * jarg1) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  result = Physics2DServer_space_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_space_set_active(void * jarg1, void * jarg2, unsigned int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  Physics2DServer_space_set_active(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_space_is_active(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)Physics2DServer_space_is_active(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_space_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_space_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_space_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_space_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_space_get_direct_state(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Physics2DDirectSpaceState *result = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (Physics2DDirectSpaceState *)Physics2DServer_space_get_direct_state(arg1,(RID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_create(void * jarg1) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  result = Physics2DServer_area_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_space(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_area_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_space_override_mode(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_set_space_override_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_area_get_space_override_mode(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_area_get_space_override_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_area_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_area_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_area_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_area_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_clear_shapes(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_param(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_param(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_area_set_transform(arg1,(RID const &)*arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_get_param(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_get_param(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_area_get_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_area_get_transform(arg1,(RID const &)*arg2);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_area_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_area_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_area_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_area_set_monitor_callback(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Physics2DServer_area_set_monitor_callback(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_create__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  bool arg3 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = Physics2DServer_body_create__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_create__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DServer_body_create__SWIG_0(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_create__SWIG_2(void * jarg1) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  result = Physics2DServer_body_create__SWIG_0(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_space(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_body_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_mode(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_mode(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape_metadata(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_shape_metadata(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_body_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Matrix32 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = Physics2DServer_body_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_get_shape_metadata(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_get_shape_metadata(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_clear_shapes(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_shape_as_trigger(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  Physics2DServer_body_set_shape_as_trigger(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_is_shape_set_as_trigger(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)Physics2DServer_body_is_shape_set_as_trigger(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_continuous_collision_detection_mode(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_continuous_collision_detection_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_continuous_collision_detection_mode(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_continuous_collision_detection_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_layer_mask(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_layer_mask(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_collision_mask(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_collision_mask(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_body_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_body_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_body_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_state(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_state(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_get_state(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_get_state(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_apply_impulse(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_apply_impulse(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_force(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_force(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_axis_velocity(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_axis_velocity(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_add_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_add_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_remove_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_remove_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_max_contacts_reported(void * jarg1, void * jarg2, int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  Physics2DServer_body_set_max_contacts_reported(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_body_get_max_contacts_reported(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_body_get_max_contacts_reported(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_one_way_collision_direction(void * jarg1, void * jarg2, void * jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_one_way_collision_direction(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_body_get_one_way_collision_direction(void * jarg1, void * jarg2) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_body_get_one_way_collision_direction(arg1,(RID const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_one_way_collision_max_depth(void * jarg1, void * jarg2, float jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  Physics2DServer_body_set_one_way_collision_max_depth(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_body_get_one_way_collision_max_depth(void * jarg1, void * jarg2) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)Physics2DServer_body_get_one_way_collision_max_depth(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_omit_force_integration(void * jarg1, void * jarg2, unsigned int jarg3) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  Physics2DServer_body_set_omit_force_integration(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_is_omitting_force_integration(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)Physics2DServer_body_is_omitting_force_integration(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_force_integration_callback__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Physics2DServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_body_set_force_integration_callback__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Physics2DServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_test_motion__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  float arg4 ;
  SwigValueWrapper< Ref< Physics2DTestMotionResult > > arg5 ;
  Ref< Physics2DTestMotionResult > *argp5 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  argp5 = (Ref< Physics2DTestMotionResult > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DTestMotionResult >", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)Physics2DServer_body_test_motion__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_test_motion__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)Physics2DServer_body_test_motion__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Physics2DServer_body_test_motion__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  bool result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)Physics2DServer_body_test_motion__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_pin_joint_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  RID *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_pin_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(RID const &)*arg3,(RID const &)*arg4);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_pin_joint_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  RID *arg3 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_pin_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(RID const &)*arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_groove_joint_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  RID *arg5 = 0 ;
  RID *arg6 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg6 = (RID *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_groove_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(RID const &)*arg5,(RID const &)*arg6);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_groove_joint_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  RID *arg5 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_groove_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(RID const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_groove_joint_create__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_groove_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_damped_spring_joint_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID *arg5 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_damped_spring_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(RID const &)*arg4,(RID const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_damped_spring_joint_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = Physics2DServer_damped_spring_joint_create__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(RID const &)*arg4);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_damped_string_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Physics2DServer_damped_string_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DServer_damped_string_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)Physics2DServer_damped_string_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_joint_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)Physics2DServer_joint_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_free_rid(void * jarg1, void * jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DServer_set_active(void * jarg1, unsigned int jarg2) {
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  bool arg2 ;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Physics2DServer_set_active(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DServer_get_process_info(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DServer *arg1 = (Physics2DServer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DServer_get_process_info(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DServer_SingletonGetInstance() {
  void * jresult ;
  Physics2DServer *result = 0 ;
  
  result = (Physics2DServer *)Physics2DServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_total_gravity(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_total_gravity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_total_linear_damp(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_total_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_total_angular_damp(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_total_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_inverse_mass(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_inverse_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_inverse_inertia(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_inverse_inertia(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_linear_velocity(void * jarg1, void * jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_set_linear_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_linear_velocity(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_angular_velocity(void * jarg1, void * jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_set_angular_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_angular_velocity(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_angular_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_transform(void * jarg1, void * jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_set_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_transform(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Transform result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = PhysicsDirectBodyState_get_transform(arg1);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_add_force(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_add_force(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_apply_impulse(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsDirectBodyState_apply_impulse(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_set_sleep_state(void * jarg1, unsigned int jarg2) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  bool arg2 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PhysicsDirectBodyState_set_sleep_state(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsDirectBodyState_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  bool result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (bool)PhysicsDirectBodyState_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_count(void * jarg1) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (int)PhysicsDirectBodyState_get_contact_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_local_pos(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_local_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_local_normal(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_local_normal(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_local_shape(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsDirectBodyState_get_contact_local_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_collider(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_pos(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_collider_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_id(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsDirectBodyState_get_contact_collider_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_object(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)PhysicsDirectBodyState_get_contact_collider_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_shape(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsDirectBodyState_get_contact_collider_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsDirectBodyState_get_contact_collider_velocity_at_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_step(void * jarg1) {
  float jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  float result;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (float)PhysicsDirectBodyState_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsDirectBodyState_integrate_forces(void * jarg1) {
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  PhysicsDirectBodyState_integrate_forces(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectBodyState_get_space_state(void * jarg1) {
  void * jresult ;
  PhysicsDirectBodyState *arg1 = (PhysicsDirectBodyState *) 0 ;
  PhysicsDirectSpaceState *result = 0 ;
  
  arg1 = (PhysicsDirectBodyState *)jarg1; 
  result = (PhysicsDirectSpaceState *)PhysicsDirectBodyState_get_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4,arg5,arg6);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  int arg5 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4,arg5);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_ray__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = PhysicsDirectSpaceState_intersect_ray__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< PhysicsShapeQueryParameters > > arg2 ;
  int arg3 ;
  Ref< PhysicsShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  argp2 = (Ref< PhysicsShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PhysicsShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = PhysicsDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_intersect_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< PhysicsShapeQueryParameters > > arg2 ;
  Ref< PhysicsShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  argp2 = (Ref< PhysicsShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PhysicsShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = PhysicsDirectSpaceState_intersect_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_cast_motion(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< PhysicsShapeQueryParameters > > arg2 ;
  Vector3 *arg3 = 0 ;
  Ref< PhysicsShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  argp2 = (Ref< PhysicsShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PhysicsShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = PhysicsDirectSpaceState_cast_motion(arg1,arg2,(Vector3 const &)*arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_collide_shape__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< PhysicsShapeQueryParameters > > arg2 ;
  int arg3 ;
  Ref< PhysicsShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  argp2 = (Ref< PhysicsShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PhysicsShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = PhysicsDirectSpaceState_collide_shape__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_collide_shape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< PhysicsShapeQueryParameters > > arg2 ;
  Ref< PhysicsShapeQueryParameters > *argp2 ;
  Array result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  argp2 = (Ref< PhysicsShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PhysicsShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = PhysicsDirectSpaceState_collide_shape__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_get_rest_info(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsDirectSpaceState *arg1 = (PhysicsDirectSpaceState *) 0 ;
  SwigValueWrapper< Ref< PhysicsShapeQueryParameters > > arg2 ;
  Ref< PhysicsShapeQueryParameters > *argp2 ;
  Dictionary result;
  
  arg1 = (PhysicsDirectSpaceState *)jarg1; 
  argp2 = (Ref< PhysicsShapeQueryParameters > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PhysicsShapeQueryParameters >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = PhysicsDirectSpaceState_get_rest_info(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_shape_create(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsServer_shape_create(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_shape_set_data(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_shape_set_data(arg1,(RID const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_shape_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_shape_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_shape_get_data(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_shape_get_data(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_space_create(void * jarg1) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  result = PhysicsServer_space_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_space_set_active(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_space_set_active(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_space_is_active(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_space_is_active(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_space_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_space_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_space_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_space_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_space_get_direct_state(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  PhysicsDirectSpaceState *result = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (PhysicsDirectSpaceState *)PhysicsServer_space_get_direct_state(arg1,(RID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_create(void * jarg1) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  result = PhysicsServer_area_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_space(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_area_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_space_override_mode(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_set_space_override_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_area_get_space_override_mode(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_area_get_space_override_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_area_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_area_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_area_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_area_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_clear_shapes(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_param(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_param(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_area_set_transform(arg1,(RID const &)*arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_get_param(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_get_param(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_area_get_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_area_get_transform(arg1,(RID const &)*arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_area_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_area_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_area_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_monitor_callback(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  PhysicsServer_area_set_monitor_callback(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_area_set_ray_pickable(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_area_set_ray_pickable(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_area_is_ray_pickable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_area_is_ray_pickable(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_create__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  bool arg3 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = PhysicsServer_body_create__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_create__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsServer_body_create__SWIG_0(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_create__SWIG_2(void * jarg1) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  result = PhysicsServer_body_create__SWIG_0(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_space(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_space(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_get_space(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_body_get_space(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_mode(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_mode(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_layer_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_layer_mask(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)PhysicsServer_body_get_layer_mask(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_collision_mask(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_collision_mask(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)PhysicsServer_body_get_collision_mask(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,(Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_add_shape__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_add_shape__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_shape(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_shape(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_shape_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_shape_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_shape_count(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_shape_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_get_shape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_body_get_shape(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_body_get_shape_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = PhysicsServer_body_get_shape_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_remove_shape(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_remove_shape(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_clear_shapes(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_clear_shapes(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_enable_continuous_collision_detection(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_body_set_enable_continuous_collision_detection(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_body_is_continuous_collision_detection_enabled(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_body_is_continuous_collision_detection_enabled(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_body_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_body_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_body_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_state(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_state(arg1,(RID const &)*arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_get_state(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_get_state(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_apply_impulse(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_apply_impulse(arg1,(RID const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_axis_velocity(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_axis_velocity(arg1,(RID const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_axis_lock(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_axis_lock(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_axis_lock(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_axis_lock(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_add_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_add_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_remove_collision_exception(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_remove_collision_exception(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_max_contacts_reported(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_body_set_max_contacts_reported(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_body_get_max_contacts_reported(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_body_get_max_contacts_reported(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_omit_force_integration(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_body_set_omit_force_integration(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_body_is_omitting_force_integration(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_body_is_omitting_force_integration(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_force_integration_callback__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PhysicsServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_force_integration_callback__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  PhysicsServer_body_set_force_integration_callback__SWIG_0(arg1,(RID const &)*arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_body_set_ray_pickable(void * jarg1, void * jarg2, unsigned int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  PhysicsServer_body_set_ray_pickable(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_body_is_ray_pickable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)PhysicsServer_body_is_ray_pickable(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_pin(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_pin(arg1,(RID const &)*arg2,(Vector3 const &)*arg3,(RID const &)*arg4,(Vector3 const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_pin_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_pin_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_pin_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_pin_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_pin_joint_set_local_A(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_pin_joint_set_local_A(arg1,(RID const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_pin_joint_get_local_A(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_pin_joint_get_local_A(arg1,(RID const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_pin_joint_set_local_B(void * jarg1, void * jarg2, void * jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  PhysicsServer_pin_joint_set_local_B(arg1,(RID const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_pin_joint_get_local_B(void * jarg1, void * jarg2) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_pin_joint_get_local_B(arg1,(RID const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_hinge(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_hinge(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_hinge_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_hinge_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_set_flag(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  PhysicsServer_hinge_joint_set_flag(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_hinge_joint_get_flag(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)PhysicsServer_hinge_joint_get_flag(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_slider(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_slider(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_slider_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_slider_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_slider_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_slider_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_cone_twist(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_cone_twist(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_cone_twist_joint_set_param(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  PhysicsServer_cone_twist_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_cone_twist_joint_get_param(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)PhysicsServer_cone_twist_joint_get_param(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_joint_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_joint_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_joint_set_solver_priority(void * jarg1, void * jarg2, int jarg3) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  PhysicsServer_joint_set_solver_priority(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_joint_get_solver_priority(void * jarg1, void * jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)PhysicsServer_joint_get_solver_priority(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_joint_create_generic_6dof(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  RID *arg4 = 0 ;
  Transform *arg5 = 0 ;
  RID result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg5 = (Transform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = PhysicsServer_joint_create_generic_6dof(arg1,(RID const &)*arg2,(Transform const &)*arg3,(RID const &)*arg4,(Transform const &)*arg5);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_set_param(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  PhysicsServer_generic_6dof_joint_set_param(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_get_param(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  float jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (float)PhysicsServer_generic_6dof_joint_get_param(arg1,(RID const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_set_flag(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  PhysicsServer_generic_6dof_joint_set_flag(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsServer_generic_6dof_joint_get_flag(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)PhysicsServer_generic_6dof_joint_get_flag(arg1,(RID const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_free_rid(void * jarg1, void * jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsServer_set_active(void * jarg1, unsigned int jarg2) {
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  bool arg2 ;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PhysicsServer_set_active(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsServer_get_process_info(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsServer *arg1 = (PhysicsServer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsServer_get_process_info(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsServer_SingletonGetInstance() {
  void * jresult ;
  PhysicsServer *result = 0 ;
  
  result = (PhysicsServer *)PhysicsServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Reference_init_ref(void * jarg1) {
  unsigned int jresult ;
  Reference *arg1 = (Reference *) 0 ;
  bool result;
  
  arg1 = (Reference *)jarg1; 
  result = (bool)Reference_init_ref(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Reference_reference(void * jarg1) {
  Reference *arg1 = (Reference *) 0 ;
  
  arg1 = (Reference *)jarg1; 
  Reference_reference(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Reference_unreference(void * jarg1) {
  unsigned int jresult ;
  Reference *arg1 = (Reference *) 0 ;
  bool result;
  
  arg1 = (Reference *)jarg1; 
  result = (bool)Reference_unreference(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Reference() {
  void * jresult ;
  Reference *result = 0 ;
  
  result = (Reference *)memnew(Reference());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_compile__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)RegEx_compile__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_compile__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RegEx_compile__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_find__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)RegEx_find__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_find__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)RegEx_find__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_find__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RegEx_find__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegEx_clear(void * jarg1) {
  RegEx *arg1 = (RegEx *) 0 ;
  
  arg1 = (RegEx *)jarg1; 
  RegEx_clear(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegEx_is_valid(void * jarg1) {
  unsigned int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  bool result;
  
  arg1 = (RegEx *)jarg1; 
  result = (bool)RegEx_is_valid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_get_capture_count(void * jarg1) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  result = (int)RegEx_get_capture_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegEx_get_capture(void * jarg1, int jarg2) {
  void * jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (RegEx *)jarg1; 
  arg2 = (int)jarg2; 
  result = RegEx_get_capture(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegEx_get_capture_start(void * jarg1, int jarg2) {
  int jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (RegEx *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)RegEx_get_capture_start(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegEx_get_captures(void * jarg1) {
  void * jresult ;
  RegEx *arg1 = (RegEx *) 0 ;
  StringArray result;
  
  arg1 = (RegEx *)jarg1; 
  result = RegEx_get_captures(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegEx() {
  void * jresult ;
  RegEx *result = 0 ;
  
  result = (RegEx *)memnew(RegEx());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_set_path(void * jarg1, char * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Resource_set_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_take_over_path(void * jarg1, char * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Resource_take_over_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_path(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  String result;
  
  arg1 = (Resource *)jarg1; 
  result = Resource_get_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_set_name(void * jarg1, char * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Resource_set_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_name(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  String result;
  
  arg1 = (Resource *)jarg1; 
  result = Resource_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_rid(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  RID result;
  
  arg1 = (Resource *)jarg1; 
  result = Resource_get_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Resource_set_import_metadata(void * jarg1, void * jarg2) {
  Resource *arg1 = (Resource *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = (Object *)jarg2; 
  Resource_set_import_metadata(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_get_import_metadata(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (Object *)Resource_get_import_metadata(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_duplicate__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  bool arg2 ;
  Object *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Object *)Resource_duplicate__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_duplicate__SWIG_1(void * jarg1) {
  void * jresult ;
  Resource *arg1 = (Resource *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Resource *)jarg1; 
  result = (Object *)Resource_duplicate__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Resource() {
  void * jresult ;
  Resource *result = 0 ;
  
  result = (Resource *)memnew(Resource());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_set_editor(void * jarg1, char * jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourceImportMetadata_set_editor(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_editor(void * jarg1) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  result = ResourceImportMetadata_get_editor(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_add_source__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ResourceImportMetadata_add_source__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_add_source__SWIG_1(void * jarg1, char * jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourceImportMetadata_add_source__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_source_path(void * jarg1, int jarg2) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  result = ResourceImportMetadata_get_source_path(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_source_md5(void * jarg1, int jarg2) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  result = ResourceImportMetadata_get_source_md5(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_remove_source(void * jarg1, int jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int arg2 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  ResourceImportMetadata_remove_source(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceImportMetadata_get_source_count(void * jarg1) {
  int jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  int result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  result = (int)ResourceImportMetadata_get_source_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_set_option(void * jarg1, char * jarg2, void * jarg3) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ResourceImportMetadata_set_option(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceImportMetadata_get_option(void * jarg1, char * jarg2) {
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourceImportMetadata_get_option(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceImportMetadata_get_options(void * jarg1) {
  void * jresult ;
  ResourceImportMetadata *arg1 = (ResourceImportMetadata *) 0 ;
  StringArray result;
  
  arg1 = (ResourceImportMetadata *)jarg1; 
  result = ResourceImportMetadata_get_options(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResourceImportMetadata() {
  void * jresult ;
  ResourceImportMetadata *result = 0 ;
  
  result = (ResourceImportMetadata *)memnew(ResourceImportMetadata());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceInteractiveLoader_get_resource(void * jarg1) {
  void * jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  Object *result = 0 ;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (Object *)ResourceInteractiveLoader_get_resource(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_poll(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_poll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_wait(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_wait(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_get_stage(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_get_stage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceInteractiveLoader_get_stage_count(void * jarg1) {
  int jresult ;
  ResourceInteractiveLoader *arg1 = (ResourceInteractiveLoader *) 0 ;
  int result;
  
  arg1 = (ResourceInteractiveLoader *)jarg1; 
  result = (int)ResourceInteractiveLoader_get_stage_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_set_bounds(void * jarg1, void * jarg2) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Dictionary *arg2 = 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return ;
  } 
  RoomBounds_set_bounds(arg1,(Dictionary const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomBounds_get_bounds(void * jarg1) {
  void * jresult ;
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Dictionary result;
  
  arg1 = (RoomBounds *)jarg1; 
  result = RoomBounds_get_bounds(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_set_geometry_hint(void * jarg1, void * jarg2) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  RoomBounds_set_geometry_hint(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RoomBounds_get_geometry_hint(void * jarg1) {
  void * jresult ;
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  Vector3Array result;
  
  arg1 = (RoomBounds *)jarg1; 
  result = RoomBounds_get_geometry_hint(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_regenerate_bsp(void * jarg1) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  RoomBounds_regenerate_bsp(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoomBounds_regenerate_bsp_cubic(void * jarg1) {
  RoomBounds *arg1 = (RoomBounds *) 0 ;
  
  arg1 = (RoomBounds *)jarg1; 
  RoomBounds_regenerate_bsp_cubic(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RoomBounds() {
  void * jresult ;
  RoomBounds *result = 0 ;
  
  result = (RoomBounds *)memnew(RoomBounds());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_create(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  Sample_create(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_format(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sample_is_stereo(void * jarg1) {
  unsigned int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  bool result;
  
  arg1 = (Sample *)jarg1; 
  result = (bool)Sample_is_stereo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_length(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_data(void * jarg1, void * jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  Sample_set_data(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sample_get_data(void * jarg1) {
  void * jresult ;
  Sample *arg1 = (Sample *) 0 ;
  RawArray result;
  
  arg1 = (Sample *)jarg1; 
  result = Sample_get_data(arg1);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_mix_rate(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_mix_rate(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_mix_rate(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_mix_rate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_loop_format(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_loop_format(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_loop_format(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_loop_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_loop_begin(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_loop_begin(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_loop_begin(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_loop_begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sample_set_loop_end(void * jarg1, int jarg2) {
  Sample *arg1 = (Sample *) 0 ;
  int arg2 ;
  
  arg1 = (Sample *)jarg1; 
  arg2 = (int)jarg2; 
  Sample_set_loop_end(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sample_get_loop_end(void * jarg1) {
  int jresult ;
  Sample *arg1 = (Sample *) 0 ;
  int result;
  
  arg1 = (Sample *)jarg1; 
  result = (int)Sample_get_loop_end(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sample() {
  void * jresult ;
  Sample *result = 0 ;
  
  result = (Sample *)memnew(Sample());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_add_sample(void * jarg1, char * jarg2, void * jarg3) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Sample > > arg3 ;
  Ref< Sample > *argp3 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Sample > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Sample >", 0);
    return ;
  }
  arg3 = *argp3; 
  SampleLibrary_add_sample(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SampleLibrary_get_sample(void * jarg1, char * jarg2) {
  void * jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Sample > > result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = SampleLibrary_get_sample(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Sample >((const Ref< Sample > &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SampleLibrary_has_sample(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SampleLibrary_has_sample(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_remove_sample(void * jarg1, char * jarg2) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SampleLibrary_remove_sample(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_sample_set_volume_db(void * jarg1, char * jarg2, float jarg3) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  SampleLibrary_sample_set_volume_db(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SampleLibrary_sample_get_volume_db(void * jarg1, char * jarg2) {
  float jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)SampleLibrary_sample_get_volume_db(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SampleLibrary_sample_set_pitch_scale(void * jarg1, char * jarg2, float jarg3) {
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  SampleLibrary_sample_set_pitch_scale(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SampleLibrary_sample_get_pitch_scale(void * jarg1, char * jarg2) {
  float jresult ;
  SampleLibrary *arg1 = (SampleLibrary *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (SampleLibrary *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)SampleLibrary_sample_get_pitch_scale(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SampleLibrary() {
  void * jresult ;
  SampleLibrary *result = 0 ;
  
  result = (SampleLibrary *)memnew(SampleLibrary());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_node_count(void * jarg1) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  result = (int)SceneState_get_node_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_type(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_type(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_name(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_path__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  bool arg3 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = SceneState_get_node_path__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_path__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_path__SWIG_0(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_owner_path(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_owner_path(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneState_is_node_instance_placeholder(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SceneState_is_node_instance_placeholder(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_instance_placeholder(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_instance_placeholder(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_instance(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< PackedScene > > result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_instance(arg1,arg2);
  jresult = memnew(Ref< PackedScene >((const Ref< PackedScene > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_groups(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  StringArray result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_node_groups(arg1,arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_node_property_count(void * jarg1, int jarg2) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SceneState_get_node_property_count(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_node_property_name(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = SceneState_get_node_property_name(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneState_get_node_property_value(void * jarg1, int jarg2, int jarg3) {
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  SceneState_get_node_property_value(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_connection_count(void * jarg1) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  result = (int)SceneState_get_connection_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_source(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_source(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_signal(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_signal(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_target(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_target(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_method(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_method(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneState_get_connection_flags(void * jarg1, int jarg2) {
  int jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SceneState_get_connection_flags(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneState_get_connection_binds(void * jarg1, int jarg2) {
  void * jresult ;
  SceneState *arg1 = (SceneState *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (SceneState *)jarg1; 
  arg2 = (int)jarg2; 
  result = SceneState_get_connection_binds(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Script_can_instance(void * jarg1) {
  unsigned int jresult ;
  Script *arg1 = (Script *) 0 ;
  bool result;
  
  arg1 = (Script *)jarg1; 
  result = (bool)Script_can_instance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Script_instance_has(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Script *arg1 = (Script *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Script *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Script_instance_has(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Script_has_source_code(void * jarg1) {
  unsigned int jresult ;
  Script *arg1 = (Script *) 0 ;
  bool result;
  
  arg1 = (Script *)jarg1; 
  result = (bool)Script_has_source_code(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Script_get_source_code(void * jarg1) {
  void * jresult ;
  Script *arg1 = (Script *) 0 ;
  String result;
  
  arg1 = (Script *)jarg1; 
  result = Script_get_source_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Script_set_source_code(void * jarg1, char * jarg2) {
  Script *arg1 = (Script *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Script *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Script_set_source_code(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Script_reload(void * jarg1) {
  int jresult ;
  Script *arg1 = (Script *) 0 ;
  int result;
  
  arg1 = (Script *)jarg1; 
  result = (int)Script_reload(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shader_get_mode(void * jarg1) {
  int jresult ;
  Shader *arg1 = (Shader *) 0 ;
  int result;
  
  arg1 = (Shader *)jarg1; 
  result = (int)Shader_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_code__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  Shader_set_code__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_code__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  Shader_set_code__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_code__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Shader_set_code__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_vertex_code(void * jarg1) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String result;
  
  arg1 = (Shader *)jarg1; 
  result = Shader_get_vertex_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_fragment_code(void * jarg1) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String result;
  
  arg1 = (Shader *)jarg1; 
  result = Shader_get_fragment_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_light_code(void * jarg1) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String result;
  
  arg1 = (Shader *)jarg1; 
  result = Shader_get_light_code(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shader_set_default_texture_param(void * jarg1, char * jarg2, void * jarg3) {
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  Shader_set_default_texture_param(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shader_get_default_texture_param(void * jarg1, char * jarg2) {
  void * jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Shader_get_default_texture_param(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shader_has_param(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Shader *arg1 = (Shader *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Shader_has_param(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_add(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_node_add(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_remove(void * jarg1, int jarg2, int jarg3) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  ShaderGraph_node_remove(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_set_pos(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ShaderGraph_node_set_pos(arg1,arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_node_get_pos(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_node_get_pos(arg1,arg2,arg3);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_node_get_type(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_node_get_type(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_get_node_list(void * jarg1, int jarg2) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  result = ShaderGraph_get_node_list(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_default_set_value(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Variant *arg5 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ShaderGraph_default_set_value(arg1,arg2,arg3,arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_default_get_value(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_default_get_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_const_node_set_value(void * jarg1, int jarg2, int jarg3, float jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  ShaderGraph_scalar_const_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ShaderGraph_scalar_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)ShaderGraph_scalar_const_node_get_value(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_const_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ShaderGraph_vec_const_node_set_value(arg1,arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_vec_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_vec_const_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_rgb_const_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ShaderGraph_rgb_const_node_set_value(arg1,arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_rgb_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_rgb_const_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_xform_const_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  ShaderGraph_xform_const_node_set_value(arg1,arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_xform_const_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_xform_const_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_texture_node_set_filter_size(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_texture_node_set_filter_size(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_texture_node_get_filter_size(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_texture_node_get_filter_size(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_texture_node_set_filter_strength(void * jarg1, int jarg2, float jarg3, float jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  ShaderGraph_texture_node_set_filter_strength(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ShaderGraph_texture_node_get_filter_strength(void * jarg1, int jarg2, float jarg3) {
  float jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)ShaderGraph_texture_node_get_filter_strength(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_scalar_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_scalar_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_scalar_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_vec_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_vec_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_vec_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_scalar_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_vec_scalar_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_vec_scalar_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_vec_scalar_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_rgb_op_node_set_op(void * jarg1, int jarg2, float jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_rgb_op_node_set_op(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_rgb_op_node_get_op(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ShaderGraph_rgb_op_node_get_op(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_xform_vec_mult_node_set_no_translation(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  ShaderGraph_xform_vec_mult_node_set_no_translation(arg1,arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShaderGraph_xform_vec_mult_node_get_no_translation(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)ShaderGraph_xform_vec_mult_node_get_no_translation(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_func_node_set_function(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_scalar_func_node_set_function(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_scalar_func_node_get_function(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_scalar_func_node_get_function(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_func_node_set_function(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ShaderGraph_vec_func_node_set_function(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_vec_func_node_get_function(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)ShaderGraph_vec_func_node_get_function(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_input_node_set_name(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  ShaderGraph_input_node_set_name(arg1,arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_input_node_get_name(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_input_node_get_name(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_scalar_input_node_set_value(void * jarg1, int jarg2, int jarg3, float jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  ShaderGraph_scalar_input_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ShaderGraph_scalar_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)ShaderGraph_scalar_input_node_get_value(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_vec_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ShaderGraph_vec_input_node_set_value(arg1,arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_vec_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector3 result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_vec_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_rgb_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ShaderGraph_rgb_input_node_set_value(arg1,arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_rgb_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Color result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_rgb_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_xform_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  ShaderGraph_xform_input_node_set_value(arg1,arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_xform_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Transform result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_xform_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_texture_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< Ref< Texture > > arg4 ;
  Ref< Texture > *argp4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (Ref< Texture > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg4 = *argp4; 
  ShaderGraph_texture_input_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_texture_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_texture_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_cubemap_input_node_set_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< Ref< CubeMap > > arg4 ;
  Ref< CubeMap > *argp4 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (Ref< CubeMap > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< CubeMap >", 0);
    return ;
  }
  arg4 = *argp4; 
  ShaderGraph_cubemap_input_node_set_value(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_cubemap_input_node_get_value(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< Ref< CubeMap > > result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_cubemap_input_node_get_value(arg1,arg2,arg3);
  jresult = memnew(Ref< CubeMap >((const Ref< CubeMap > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_comment_node_set_text(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  ShaderGraph_comment_node_set_text(arg1,arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_comment_node_get_text(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_comment_node_get_text(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_color_ramp_node_set_ramp(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  ColorArray *arg4 = 0 ;
  RealArray *arg5 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (RealArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  ShaderGraph_color_ramp_node_set_ramp(arg1,arg2,arg3,(ColorArray const &)*arg4,(RealArray const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_color_ramp_node_get_colors(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  ColorArray result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_color_ramp_node_get_colors(arg1,arg2,arg3);
  jresult = memnew(ColorArray((const ColorArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_color_ramp_node_get_offsets(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  RealArray result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_color_ramp_node_get_offsets(arg1,arg2,arg3);
  jresult = memnew(RealArray((const RealArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_curve_map_node_set_points(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ShaderGraph_curve_map_node_set_points(arg1,arg2,arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_curve_map_node_get_points(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2Array result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_curve_map_node_get_points(arg1,arg2,arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShaderGraph_connect_node(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)ShaderGraph_connect_node(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShaderGraph_is_node_connected(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ShaderGraph_is_node_connected(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_disconnect_node(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  ShaderGraph_disconnect_node(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_get_node_connections(void * jarg1, int jarg2) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  result = ShaderGraph_get_node_connections(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_clear(void * jarg1, int jarg2) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  ShaderGraph_clear(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderGraph_node_set_state(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ShaderGraph_node_set_state(arg1,arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderGraph_node_get_state(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ShaderGraph *arg1 = (ShaderGraph *) 0 ;
  int arg2 ;
  int arg3 ;
  Variant result;
  
  arg1 = (ShaderGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ShaderGraph_node_get_state(arg1,arg2,arg3);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape2D_set_custom_solver_bias(void * jarg1, float jarg2) {
  Shape2D *arg1 = (Shape2D *) 0 ;
  float arg2 ;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (float)jarg2; 
  Shape2D_set_custom_solver_bias(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Shape2D_get_custom_solver_bias(void * jarg1) {
  float jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  float result;
  
  arg1 = (Shape2D *)jarg1; 
  result = (float)Shape2D_get_custom_solver_bias(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shape2D_collide(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg3 ;
  Matrix32 *arg4 = 0 ;
  Ref< Shape2D > *argp3 ;
  bool result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  argp3 = (Ref< Shape2D > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = (bool)Shape2D_collide(arg1,(Matrix32 const &)*arg2,arg3,(Matrix32 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Shape2D_collide_with_motion(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg4 ;
  Matrix32 *arg5 = 0 ;
  Vector2 *arg6 = 0 ;
  Ref< Shape2D > *argp4 ;
  bool result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  argp4 = (Ref< Shape2D > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (Matrix32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg6 = (Vector2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)Shape2D_collide_with_motion(arg1,(Matrix32 const &)*arg2,(Vector2 const &)*arg3,arg4,(Matrix32 const &)*arg5,(Vector2 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shape2D_collide_and_get_contacts(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg3 ;
  Matrix32 *arg4 = 0 ;
  Ref< Shape2D > *argp3 ;
  Variant result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  argp3 = (Ref< Shape2D > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = Shape2D_collide_and_get_contacts(arg1,(Matrix32 const &)*arg2,arg3,(Matrix32 const &)*arg4);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Shape2D_collide_with_motion_and_get_contacts(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  Shape2D *arg1 = (Shape2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg4 ;
  Matrix32 *arg5 = 0 ;
  Vector2 *arg6 = 0 ;
  Ref< Shape2D > *argp4 ;
  Variant result;
  
  arg1 = (Shape2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  argp4 = (Ref< Shape2D > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (Matrix32 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg6 = (Vector2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Shape2D_collide_with_motion_and_get_contacts(arg1,(Matrix32 const &)*arg2,(Vector2 const &)*arg3,arg4,(Matrix32 const &)*arg5,(Vector2 const &)*arg6);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialSound2DServer_SingletonGetInstance() {
  void * jresult ;
  SpatialSound2DServer *result = 0 ;
  
  result = (SpatialSound2DServer *)SpatialSound2DServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialSoundServer_SingletonGetInstance() {
  void * jresult ;
  SpatialSoundServer *result = 0 ;
  
  result = (SpatialSoundServer *)SpatialSoundServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SphereShape_set_radius(void * jarg1, float jarg2) {
  SphereShape *arg1 = (SphereShape *) 0 ;
  float arg2 ;
  
  arg1 = (SphereShape *)jarg1; 
  arg2 = (float)jarg2; 
  SphereShape_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SphereShape_get_radius(void * jarg1) {
  float jresult ;
  SphereShape *arg1 = (SphereShape *) 0 ;
  float result;
  
  arg1 = (SphereShape *)jarg1; 
  result = (float)SphereShape_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SphereShape() {
  void * jresult ;
  SphereShape *result = 0 ;
  
  result = (SphereShape *)memnew(SphereShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_add_animation(void * jarg1, char * jarg2) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpriteFrames_add_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteFrames_has_animation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SpriteFrames_has_animation(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_remove_animation(void * jarg1, char * jarg2) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpriteFrames_remove_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_rename_animation(void * jarg1, char * jarg2, char * jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  SpriteFrames_rename_animation(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_set_animation_speed(void * jarg1, char * jarg2, float jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  SpriteFrames_set_animation_speed(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpriteFrames_get_animation_speed(void * jarg1, char * jarg2) {
  float jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)SpriteFrames_get_animation_speed(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_set_animation_loop(void * jarg1, char * jarg2, unsigned int jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  SpriteFrames_set_animation_loop(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteFrames_get_animation_loop(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SpriteFrames_get_animation_loop(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_add_frame__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  int arg4 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  arg4 = (int)jarg4; 
  SpriteFrames_add_frame__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_add_frame__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  SpriteFrames_add_frame__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpriteFrames_get_frame_count(void * jarg1, char * jarg2) {
  int jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SpriteFrames_get_frame_count(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteFrames_get_frame(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  Object *result = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (Object *)SpriteFrames_get_frame(arg1,(String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_set_frame(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  Object *arg4 = (Object *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (Object *)jarg4; 
  SpriteFrames_set_frame(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_remove_frame(void * jarg1, char * jarg2, int jarg3) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  SpriteFrames_remove_frame(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_clear(void * jarg1, char * jarg2) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpriteFrames_clear(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteFrames_clear_all(void * jarg1) {
  SpriteFrames *arg1 = (SpriteFrames *) 0 ;
  
  arg1 = (SpriteFrames *)jarg1; 
  SpriteFrames_clear_all(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpriteFrames() {
  void * jresult ;
  SpriteFrames *result = 0 ;
  
  result = (SpriteFrames *)memnew(SpriteFrames());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_put_data(void * jarg1, void * jarg2) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)StreamPeer_put_data(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_put_partial_data(void * jarg1, void * jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  RawArray *arg2 = 0 ;
  Array result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = StreamPeer_put_partial_data(arg1,(RawArray const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_data(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_data(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_partial_data(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_partial_data(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_available_bytes(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_available_bytes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_set_big_endian(void * jarg1, unsigned int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPeer_set_big_endian(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPeer_is_big_endian_enabled(void * jarg1) {
  unsigned int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  bool result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (bool)StreamPeer_is_big_endian_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_8(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_8(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u8(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u8(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_16(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_16(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u16(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u16(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_32(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_32(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u32(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u32(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_64(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_64(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_u64(void * jarg1, int jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPeer_put_u64(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_float(void * jarg1, float jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPeer_put_float(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_double(void * jarg1, float jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPeer_put_double(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_utf8_string(void * jarg1, char * jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (StreamPeer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  StreamPeer_put_utf8_string(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeer_put_var(void * jarg1, void * jarg2) {
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  StreamPeer_put_var(arg1,(Variant const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_8(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_8(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u8(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u8(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_16(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u16(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_32(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u32(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_64(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeer_get_u64(void * jarg1) {
  int jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (int)StreamPeer_get_u64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPeer_get_float(void * jarg1) {
  float jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (float)StreamPeer_get_float(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPeer_get_double(void * jarg1) {
  float jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  float result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = (float)StreamPeer_get_double(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_string(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_string(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_utf8_string(void * jarg1, int jarg2) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (StreamPeer *)jarg1; 
  arg2 = (int)jarg2; 
  result = StreamPeer_get_utf8_string(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeer_get_var(void * jarg1) {
  void * jresult ;
  StreamPeer *arg1 = (StreamPeer *) 0 ;
  Variant result;
  
  arg1 = (StreamPeer *)jarg1; 
  result = StreamPeer_get_var(arg1);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_accept(void * jarg1, void * jarg2) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > arg2 ;
  Ref< StreamPeer > *argp2 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  argp2 = (Ref< StreamPeer > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StreamPeer >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)StreamPeerSSL_accept(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_connect__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > arg2 ;
  bool arg3 ;
  String *arg4 = 0 ;
  Ref< StreamPeer > *argp2 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  argp2 = (Ref< StreamPeer > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StreamPeer >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (int)StreamPeerSSL_connect__SWIG_0(arg1,arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_connect__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > arg2 ;
  bool arg3 ;
  Ref< StreamPeer > *argp2 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  argp2 = (Ref< StreamPeer > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StreamPeer >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)StreamPeerSSL_connect__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_connect__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > arg2 ;
  Ref< StreamPeer > *argp2 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  argp2 = (Ref< StreamPeer > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StreamPeer >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)StreamPeerSSL_connect__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerSSL_get_status(void * jarg1) {
  int jresult ;
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  int result;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  result = (int)StreamPeerSSL_get_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeerSSL_disconnect(void * jarg1) {
  StreamPeerSSL *arg1 = (StreamPeerSSL *) 0 ;
  
  arg1 = (StreamPeerSSL *)jarg1; 
  StreamPeerSSL_disconnect(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamPeerSSL() {
  void * jresult ;
  StreamPeerSSL *result = 0 ;
  
  result = (StreamPeerSSL *)new_StreamPeerSSL();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerTCP_connect(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)StreamPeerTCP_connect(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPeerTCP_is_connected(void * jarg1) {
  unsigned int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  bool result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = (bool)StreamPeerTCP_is_connected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerTCP_get_status(void * jarg1) {
  int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  int result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = (int)StreamPeerTCP_get_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPeerTCP_get_connected_host(void * jarg1) {
  void * jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  String result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = StreamPeerTCP_get_connected_host(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPeerTCP_get_connected_port(void * jarg1) {
  int jresult ;
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  int result;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  result = (int)StreamPeerTCP_get_connected_port(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPeerTCP_disconnect(void * jarg1) {
  StreamPeerTCP *arg1 = (StreamPeerTCP *) 0 ;
  
  arg1 = (StreamPeerTCP *)jarg1; 
  StreamPeerTCP_disconnect(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamPeerTCP() {
  void * jresult ;
  StreamPeerTCP *result = 0 ;
  
  result = (StreamPeerTCP *)new_StreamPeerTCP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBox_test_mask(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool result;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return 0;
  } 
  result = (bool)StyleBox_test_mask(arg1,(Vector2 const &)*arg2,(Rect2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBox_set_default_margin(void * jarg1, int jarg2, float jarg3) {
  StyleBox *arg1 = (StyleBox *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBox_set_default_margin(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBox_get_default_margin(void * jarg1, int jarg2) {
  float jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBox_get_default_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBox_get_margin(void * jarg1, int jarg2) {
  float jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBox_get_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBox_get_minimum_size(void * jarg1) {
  void * jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 result;
  
  arg1 = (StyleBox *)jarg1; 
  result = StyleBox_get_minimum_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBox_get_center_size(void * jarg1) {
  void * jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 result;
  
  arg1 = (StyleBox *)jarg1; 
  result = StyleBox_get_center_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBox_get_offset(void * jarg1) {
  void * jresult ;
  StyleBox *arg1 = (StyleBox *) 0 ;
  Vector2 result;
  
  arg1 = (StyleBox *)jarg1; 
  result = StyleBox_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBox_draw(void * jarg1, void * jarg2, void * jarg3) {
  StyleBox *arg1 = (StyleBox *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (StyleBox *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  StyleBox_draw(arg1,(RID const &)*arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxEmpty() {
  void * jresult ;
  StyleBoxEmpty *result = 0 ;
  
  result = (StyleBoxEmpty *)memnew(StyleBoxEmpty());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_bg_color(void * jarg1, void * jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  StyleBoxFlat_set_bg_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxFlat_get_bg_color(void * jarg1) {
  void * jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = StyleBoxFlat_get_bg_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_light_color(void * jarg1, void * jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  StyleBoxFlat_set_light_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxFlat_get_light_color(void * jarg1) {
  void * jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = StyleBoxFlat_get_light_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_dark_color(void * jarg1, void * jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  StyleBoxFlat_set_dark_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxFlat_get_dark_color(void * jarg1) {
  void * jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  Color result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = StyleBoxFlat_get_dark_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_border_size(void * jarg1, int jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  int arg2 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = (int)jarg2; 
  StyleBoxFlat_set_border_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StyleBoxFlat_get_border_size(void * jarg1) {
  int jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  int result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = (int)StyleBoxFlat_get_border_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_border_blend(void * jarg1, unsigned int jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxFlat_set_border_blend(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxFlat_get_border_blend(void * jarg1) {
  unsigned int jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = (bool)StyleBoxFlat_get_border_blend(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxFlat_set_draw_center(void * jarg1, unsigned int jarg2) {
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxFlat_set_draw_center(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxFlat_get_draw_center(void * jarg1) {
  unsigned int jresult ;
  StyleBoxFlat *arg1 = (StyleBoxFlat *) 0 ;
  bool result;
  
  arg1 = (StyleBoxFlat *)jarg1; 
  result = (bool)StyleBoxFlat_get_draw_center(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxFlat() {
  void * jresult ;
  StyleBoxFlat *result = 0 ;
  
  result = (StyleBoxFlat *)memnew(StyleBoxFlat());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxImageMask_set_image(void * jarg1, void * jarg2) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  StyleBoxImageMask_set_image(arg1,(Image const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxImageMask_get_image(void * jarg1) {
  void * jresult ;
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  Image result;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  result = StyleBoxImageMask_get_image(arg1);
  jresult = memnew(Image((const Image &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxImageMask_set_expand(void * jarg1, unsigned int jarg2) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxImageMask_set_expand(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxImageMask_get_expand(void * jarg1) {
  unsigned int jresult ;
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  bool result;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  result = (bool)StyleBoxImageMask_get_expand(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxImageMask_set_expand_margin_size(void * jarg1, int jarg2, float jarg3) {
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBoxImageMask_set_expand_margin_size(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBoxImageMask_get_expand_margin_size(void * jarg1, int jarg2) {
  float jresult ;
  StyleBoxImageMask *arg1 = (StyleBoxImageMask *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBoxImageMask *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBoxImageMask_get_expand_margin_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxImageMask() {
  void * jresult ;
  StyleBoxImageMask *result = 0 ;
  
  result = (StyleBoxImageMask *)memnew(StyleBoxImageMask());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_texture(void * jarg1, void * jarg2) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  StyleBoxTexture_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StyleBoxTexture_get_texture(void * jarg1) {
  void * jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  result = StyleBoxTexture_get_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_margin_size(void * jarg1, int jarg2, float jarg3) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBoxTexture_set_margin_size(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBoxTexture_get_margin_size(void * jarg1, int jarg2) {
  float jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBoxTexture_get_margin_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_expand_margin_size(void * jarg1, int jarg2, float jarg3) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  StyleBoxTexture_set_expand_margin_size(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StyleBoxTexture_get_expand_margin_size(void * jarg1, int jarg2) {
  float jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)StyleBoxTexture_get_expand_margin_size(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleBoxTexture_set_draw_center(void * jarg1, unsigned int jarg2) {
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  bool arg2 ;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StyleBoxTexture_set_draw_center(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StyleBoxTexture_get_draw_center(void * jarg1) {
  unsigned int jresult ;
  StyleBoxTexture *arg1 = (StyleBoxTexture *) 0 ;
  bool result;
  
  arg1 = (StyleBoxTexture *)jarg1; 
  result = (bool)StyleBoxTexture_get_draw_center(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StyleBoxTexture() {
  void * jresult ;
  StyleBoxTexture *result = 0 ;
  
  result = (StyleBoxTexture *)memnew(StyleBoxTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_begin(void * jarg1, int jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  int arg2 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (int)jarg2; 
  SurfaceTool_begin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_vertex(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_vertex(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_color(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_normal(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_normal(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_tangent(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Plane *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_tangent(arg1,(Plane const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_uv(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_uv(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_uv2(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_uv2(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_bones(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_bones(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_weights(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  RealArray *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (RealArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_weights(arg1,(RealArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_smooth_group(void * jarg1, unsigned int jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  bool arg2 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SurfaceTool_add_smooth_group(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  Vector2Array *arg5 = 0 ;
  Vector3Array *arg6 = 0 ;
  Array *arg7 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3Array *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg7 = (Array *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4,(Vector2Array const &)*arg5,(Vector3Array const &)*arg6,(Array const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  Vector2Array *arg5 = 0 ;
  Vector3Array *arg6 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3Array *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4,(Vector2Array const &)*arg5,(Vector3Array const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  Vector2Array *arg5 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4,(Vector2Array const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  ColorArray *arg4 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg4 = (ColorArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3,(ColorArray const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2,(Vector2Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_add_triangle_fan__SWIG_5(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  SurfaceTool_add_triangle_fan__SWIG_0(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_set_material(void * jarg1, void * jarg2) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  SwigValueWrapper< Ref< Material > > arg2 ;
  Ref< Material > *argp2 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  argp2 = (Ref< Material > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg2 = *argp2; 
  SurfaceTool_set_material(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_index(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_index(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_deindex(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_deindex(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_generate_normals(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_generate_normals(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SurfaceTool_commit__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  SwigValueWrapper< Ref< Mesh > > arg2 ;
  Ref< Mesh > *argp2 ;
  SwigValueWrapper< Ref< Mesh > > result;
  
  arg1 = (SurfaceTool *)jarg1; 
  argp2 = (Ref< Mesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = SurfaceTool_commit__SWIG_0(arg1,arg2);
  jresult = memnew(Ref< Mesh >((const Ref< Mesh > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SurfaceTool_commit__SWIG_1(void * jarg1) {
  void * jresult ;
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  SwigValueWrapper< Ref< Mesh > > result;
  
  arg1 = (SurfaceTool *)jarg1; 
  result = SurfaceTool_commit__SWIG_0(arg1);
  jresult = memnew(Ref< Mesh >((const Ref< Mesh > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SurfaceTool_clear(void * jarg1) {
  SurfaceTool *arg1 = (SurfaceTool *) 0 ;
  
  arg1 = (SurfaceTool *)jarg1; 
  SurfaceTool_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SurfaceTool() {
  void * jresult ;
  SurfaceTool *result = 0 ;
  
  result = (SurfaceTool *)memnew(SurfaceTool());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TCP_Server_listen__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  int arg2 ;
  StringArray *arg3 = 0 ;
  int result;
  
  arg1 = (TCP_Server *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  result = (int)TCP_Server_listen__SWIG_0(arg1,arg2,(StringArray const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TCP_Server_listen__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TCP_Server *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TCP_Server_listen__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TCP_Server_is_connection_available(void * jarg1) {
  unsigned int jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  bool result;
  
  arg1 = (TCP_Server *)jarg1; 
  result = (bool)TCP_Server_is_connection_available(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TCP_Server_take_connection(void * jarg1) {
  void * jresult ;
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TCP_Server *)jarg1; 
  result = (Object *)TCP_Server_take_connection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TCP_Server_stop(void * jarg1) {
  TCP_Server *arg1 = (TCP_Server *) 0 ;
  
  arg1 = (TCP_Server *)jarg1; 
  TCP_Server_stop(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TCP_Server() {
  void * jresult ;
  TCP_Server *result = 0 ;
  
  result = (TCP_Server *)new_TCP_Server();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_get_width(void * jarg1) {
  int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  int result;
  
  arg1 = (Texture *)jarg1; 
  result = (int)Texture_get_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_get_height(void * jarg1) {
  int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  int result;
  
  arg1 = (Texture *)jarg1; 
  result = (int)Texture_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_get_size(void * jarg1) {
  void * jresult ;
  Texture *arg1 = (Texture *) 0 ;
  Vector2 result;
  
  arg1 = (Texture *)jarg1; 
  result = Texture_get_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Texture_get_rid(void * jarg1) {
  void * jresult ;
  Texture *arg1 = (Texture *) 0 ;
  RID result;
  
  arg1 = (Texture *)jarg1; 
  result = Texture_get_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Texture_has_alpha(void * jarg1) {
  unsigned int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  bool result;
  
  arg1 = (Texture *)jarg1; 
  result = (bool)Texture_has_alpha(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_set_flags(void * jarg1, int jarg2) {
  Texture *arg1 = (Texture *) 0 ;
  int arg2 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (int)jarg2; 
  Texture_set_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Texture_get_flags(void * jarg1) {
  int jresult ;
  Texture *arg1 = (Texture *) 0 ;
  int result;
  
  arg1 = (Texture *)jarg1; 
  result = (int)Texture_get_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  Texture_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Texture_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Texture_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  Texture_draw_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Texture_draw_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  Texture_draw_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect_region__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  Texture_draw_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect_region__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Texture_draw_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Texture_draw_rect_region__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Texture *arg1 = (Texture *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (Texture *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Texture_draw_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_icon(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg4 ;
  Ref< Texture > *argp4 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  argp4 = (Ref< Texture > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg4 = *argp4; 
  Theme_set_icon(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_icon(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_icon(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_icon(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_icon(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_icon(void * jarg1, char * jarg2, char * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_icon(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_icon_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_icon_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_stylebox(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< StyleBox > > arg4 ;
  Ref< StyleBox > *argp4 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  argp4 = (Ref< StyleBox > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StyleBox >", 0);
    return ;
  }
  arg4 = *argp4; 
  Theme_set_stylebox(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_stylebox(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< StyleBox > > result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_stylebox(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< StyleBox >((const Ref< StyleBox > &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_stylebox(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_stylebox(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_stylebox(void * jarg1, char * jarg2, char * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_stylebox(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_stylebox_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_stylebox_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_stylebox_types(void * jarg1) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  result = Theme_get_stylebox_types(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_font(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Font > > arg4 ;
  Ref< Font > *argp4 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  argp4 = (Ref< Font > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return ;
  }
  arg4 = *argp4; 
  Theme_set_font(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_font(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Font > > result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_font(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< Font >((const Ref< Font > &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_font(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_font(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_font(void * jarg1, char * jarg2, char * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_font(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_font_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_font_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_color(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Theme_set_color(arg1,(String const &)*arg2,(String const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_color(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Theme_get_color(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_color(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_color(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_color(void * jarg1, char * jarg2, char * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_color(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_color_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_color_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_constant(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  Theme_set_constant(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Theme_get_constant(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)Theme_get_constant(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Theme_has_constant(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Theme_has_constant(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_clear_constant(void * jarg1, char * jarg2, char * jarg3) {
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Theme_clear_constant(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_constant_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_constant_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_set_default_font(void * jarg1, void * jarg2) {
  Theme *arg1 = (Theme *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  arg2 = (Object *)jarg2; 
  Theme_set_default_font(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_default_font(void * jarg1) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Theme *)jarg1; 
  result = (Object *)Theme_get_default_font(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Theme_get_type_list(void * jarg1, char * jarg2) {
  void * jresult ;
  Theme *arg1 = (Theme *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (Theme *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Theme_get_type_list(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Theme_copy_default_theme(void * jarg1) {
  Theme *arg1 = (Theme *) 0 ;
  
  arg1 = (Theme *)jarg1; 
  Theme_copy_default_theme(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Theme() {
  void * jresult ;
  Theme *result = 0 ;
  
  result = (Theme *)memnew(Theme());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_create_tile(void * jarg1, int jarg2) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  TileSet_create_tile(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_name(void * jarg1, int jarg2, char * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TileSet_tile_set_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_name(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_texture(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  TileSet_tile_set_texture(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_texture(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_texture(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_material(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< CanvasItemMaterial > > arg3 ;
  Ref< CanvasItemMaterial > *argp3 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< CanvasItemMaterial > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< CanvasItemMaterial >", 0);
    return ;
  }
  arg3 = *argp3; 
  TileSet_tile_set_material(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_material(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< CanvasItemMaterial > > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_material(arg1,arg2);
  jresult = memnew(Ref< CanvasItemMaterial >((const Ref< CanvasItemMaterial > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_texture_offset(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_texture_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_texture_offset(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_texture_offset(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_shape_offset(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_shape_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_shape_offset(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_shape_offset(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_region(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_region(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_region(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Rect2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_region(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_shape(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape2D > > arg3 ;
  Ref< Shape2D > *argp3 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Shape2D > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return ;
  }
  arg3 = *argp3; 
  TileSet_tile_set_shape(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_shape(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape2D > > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_shape(arg1,arg2);
  jresult = memnew(Ref< Shape2D >((const Ref< Shape2D > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_shapes(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_shapes(arg1,arg2,(Array const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_shapes(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_shapes(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_navigation_polygon(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< NavigationPolygon > > arg3 ;
  Ref< NavigationPolygon > *argp3 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< NavigationPolygon > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationPolygon >", 0);
    return ;
  }
  arg3 = *argp3; 
  TileSet_tile_set_navigation_polygon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_navigation_polygon(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< NavigationPolygon > > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_navigation_polygon(arg1,arg2);
  jresult = memnew(Ref< NavigationPolygon >((const Ref< NavigationPolygon > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_navigation_polygon_offset(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_navigation_polygon_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_navigation_polygon_offset(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_navigation_polygon_offset(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_light_occluder(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< OccluderPolygon2D > > arg3 ;
  Ref< OccluderPolygon2D > *argp3 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< OccluderPolygon2D > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< OccluderPolygon2D >", 0);
    return ;
  }
  arg3 = *argp3; 
  TileSet_tile_set_light_occluder(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_light_occluder(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< OccluderPolygon2D > > result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_light_occluder(arg1,arg2);
  jresult = memnew(Ref< OccluderPolygon2D >((const Ref< OccluderPolygon2D > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_tile_set_occluder_offset(void * jarg1, int jarg2, void * jarg3) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileSet_tile_set_occluder_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_tile_get_occluder_offset(void * jarg1, int jarg2) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  result = TileSet_tile_get_occluder_offset(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_remove_tile(void * jarg1, int jarg2) {
  TileSet *arg1 = (TileSet *) 0 ;
  int arg2 ;
  
  arg1 = (TileSet *)jarg1; 
  arg2 = (int)jarg2; 
  TileSet_remove_tile(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileSet_clear(void * jarg1) {
  TileSet *arg1 = (TileSet *) 0 ;
  
  arg1 = (TileSet *)jarg1; 
  TileSet_clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileSet_get_last_unused_tile_id(void * jarg1) {
  int jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  int result;
  
  arg1 = (TileSet *)jarg1; 
  result = (int)TileSet_get_last_unused_tile_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileSet_find_tile_by_name(void * jarg1, char * jarg2) {
  int jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (TileSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)TileSet_find_tile_by_name(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileSet_get_tiles_ids(void * jarg1) {
  void * jresult ;
  TileSet *arg1 = (TileSet *) 0 ;
  Array result;
  
  arg1 = (TileSet *)jarg1; 
  result = TileSet_get_tiles_ids(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TileSet() {
  void * jresult ;
  TileSet *result = 0 ;
  
  result = (TileSet *)memnew(TileSet());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Translation_set_locale(void * jarg1, char * jarg2) {
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Translation_set_locale(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Translation_get_locale(void * jarg1) {
  void * jresult ;
  Translation *arg1 = (Translation *) 0 ;
  String result;
  
  arg1 = (Translation *)jarg1; 
  result = Translation_get_locale(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Translation_add_message(void * jarg1, char * jarg2, char * jarg3) {
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Translation_add_message(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Translation_get_message(void * jarg1, char * jarg2) {
  void * jresult ;
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Translation_get_message(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Translation_erase_message(void * jarg1, char * jarg2) {
  Translation *arg1 = (Translation *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Translation *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Translation_erase_message(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Translation_get_message_list(void * jarg1) {
  void * jresult ;
  Translation *arg1 = (Translation *) 0 ;
  StringArray result;
  
  arg1 = (Translation *)jarg1; 
  result = Translation_get_message_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Translation_get_message_count(void * jarg1) {
  int jresult ;
  Translation *arg1 = (Translation *) 0 ;
  int result;
  
  arg1 = (Translation *)jarg1; 
  result = (int)Translation_get_message_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Translation() {
  void * jresult ;
  Translation *result = 0 ;
  
  result = (Translation *)memnew(Translation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_set_locale(void * jarg1, char * jarg2) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TranslationServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TranslationServer_set_locale(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationServer_get_locale(void * jarg1) {
  void * jresult ;
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  String result;
  
  arg1 = (TranslationServer *)jarg1; 
  result = TranslationServer_get_locale(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationServer_translate(void * jarg1, char * jarg2) {
  void * jresult ;
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (TranslationServer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = TranslationServer_translate(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_add_translation(void * jarg1, void * jarg2) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  SwigValueWrapper< Ref< Translation > > arg2 ;
  Ref< Translation > *argp2 ;
  
  arg1 = (TranslationServer *)jarg1; 
  argp2 = (Ref< Translation > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Translation >", 0);
    return ;
  }
  arg2 = *argp2; 
  TranslationServer_add_translation(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_remove_translation(void * jarg1, void * jarg2) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  SwigValueWrapper< Ref< Translation > > arg2 ;
  Ref< Translation > *argp2 ;
  
  arg1 = (TranslationServer *)jarg1; 
  argp2 = (Ref< Translation > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Translation >", 0);
    return ;
  }
  arg2 = *argp2; 
  TranslationServer_remove_translation(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TranslationServer_clear(void * jarg1) {
  TranslationServer *arg1 = (TranslationServer *) 0 ;
  
  arg1 = (TranslationServer *)jarg1; 
  TranslationServer_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TranslationServer_SingletonGetInstance() {
  void * jresult ;
  TranslationServer *result = 0 ;
  
  result = (TranslationServer *)TranslationServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_cell_mode(void * jarg1, int jarg2, int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TreeItem_set_cell_mode(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TreeItem_get_cell_mode(void * jarg1, int jarg2) {
  int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TreeItem_get_cell_mode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_checked(void * jarg1, int jarg2, unsigned int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TreeItem_set_checked(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_checked(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_checked(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_text(void * jarg1, int jarg2, char * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TreeItem_set_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_text(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_icon(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  TreeItem_set_icon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_icon(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_icon(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_icon_region(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  TreeItem_set_icon_region(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_icon_region(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Rect2 result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_icon_region(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_icon_max_width(void * jarg1, int jarg2, int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TreeItem_set_icon_max_width(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TreeItem_get_icon_max_width(void * jarg1, int jarg2) {
  int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TreeItem_get_icon_max_width(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_range(void * jarg1, int jarg2, float jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  TreeItem_set_range(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TreeItem_get_range(void * jarg1, int jarg2) {
  float jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)TreeItem_get_range(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_range_config__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  TreeItem_set_range_config__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_range_config__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  TreeItem_set_range_config__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_range_config(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Dictionary result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_range_config(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_metadata(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  TreeItem_set_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_get_metadata(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_get_metadata(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_draw(void * jarg1, int jarg2, void * jarg3, char * jarg4) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Object *arg3 = (Object *) 0 ;
  String *arg4 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Object *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  TreeItem_set_custom_draw(arg1,arg2,arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_collapsed(void * jarg1, unsigned int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  bool arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TreeItem_set_collapsed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_collapsed(void * jarg1) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  result = (bool)TreeItem_is_collapsed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_next(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_next(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_prev(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_prev(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_parent(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_parent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_children(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_children(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_next_visible(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_next_visible(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_prev_visible(void * jarg1) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  result = (TreeItem *)TreeItem_get_prev_visible(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_remove_child(void * jarg1, void * jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  Object *arg2 = (Object *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (TreeItem *)TreeItem_remove_child(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_selectable(void * jarg1, int jarg2, unsigned int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TreeItem_set_selectable(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_selectable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_selectable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_selected(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_selected(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_select(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_select(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_deselect(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_deselect(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_editable(void * jarg1, int jarg2, unsigned int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TreeItem_set_editable(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_editable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)TreeItem_is_editable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_color(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TreeItem_set_custom_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_clear_custom_color(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_clear_custom_color(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_bg_color__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  TreeItem_set_custom_bg_color__SWIG_0(arg1,arg2,(Color const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_custom_bg_color__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TreeItem_set_custom_bg_color__SWIG_0(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_clear_custom_bg_color(void * jarg1, int jarg2) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  TreeItem_clear_custom_bg_color(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_custom_bg_color(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_custom_bg_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_add_button__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  int arg4 ;
  bool arg5 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  TreeItem_add_button__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_add_button__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  int arg4 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  TreeItem_add_button__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_add_button__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  TreeItem_add_button__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TreeItem_get_button_count(void * jarg1, int jarg2) {
  int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)TreeItem_get_button_count(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_button(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = TreeItem_get_button(arg1,arg2,arg3);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_erase_button(void * jarg1, int jarg2, int jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  TreeItem_erase_button(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeItem_is_button_disabled(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TreeItem_is_button_disabled(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_set_tooltip(void * jarg1, int jarg2, char * jarg3) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TreeItem_set_tooltip(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TreeItem_get_tooltip(void * jarg1, int jarg2) {
  void * jresult ;
  TreeItem *arg1 = (TreeItem *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TreeItem *)jarg1; 
  arg2 = (int)jarg2; 
  result = TreeItem_get_tooltip(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_move_to_top(void * jarg1) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  TreeItem_move_to_top(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeItem_move_to_bottom(void * jarg1) {
  TreeItem *arg1 = (TreeItem *) 0 ;
  
  arg1 = (TreeItem *)jarg1; 
  TreeItem_move_to_bottom(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_create_action__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (UndoRedo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  UndoRedo_create_action__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_create_action__SWIG_1(void * jarg1, char * jarg2) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  UndoRedo_create_action__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_commit_action(void * jarg1) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  UndoRedo_commit_action(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_2(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_3(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_4(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_method__SWIG_5(void * jarg1, void * jarg2, char * jarg3) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  UndoRedo_add_do_method__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_2(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_3(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_4(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_method__SWIG_5(void * jarg1, void * jarg2, char * jarg3) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  UndoRedo_add_undo_method__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_property(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_do_property(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_property(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  UndoRedo_add_undo_property(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_do_reference(void * jarg1, void * jarg2) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  UndoRedo_add_do_reference(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_add_undo_reference(void * jarg1, void * jarg2) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  arg2 = (Object *)jarg2; 
  UndoRedo_add_undo_reference(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UndoRedo_clear_history(void * jarg1) {
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  
  arg1 = (UndoRedo *)jarg1; 
  UndoRedo_clear_history(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UndoRedo_get_current_action_name(void * jarg1) {
  void * jresult ;
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  String result;
  
  arg1 = (UndoRedo *)jarg1; 
  result = UndoRedo_get_current_action_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UndoRedo_get_version(void * jarg1) {
  int jresult ;
  UndoRedo *arg1 = (UndoRedo *) 0 ;
  int result;
  
  arg1 = (UndoRedo *)jarg1; 
  result = (int)UndoRedo_get_version(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UndoRedo() {
  void * jresult ;
  UndoRedo *result = 0 ;
  
  result = (UndoRedo *)memnew(UndoRedo());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoStreamTheora() {
  void * jresult ;
  VideoStreamTheora *result = 0 ;
  
  result = (VideoStreamTheora *)memnew(VideoStreamTheora());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_texture_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_texture_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_texture_create_from_image__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Image *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_texture_create_from_image__SWIG_0(arg1,(Image const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_texture_create_from_image__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Image *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return 0;
  } 
  result = VisualServer_texture_create_from_image__SWIG_0(arg1,(Image const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_texture_set_flags(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_texture_set_flags(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_texture_get_flags(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_texture_get_flags(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_texture_get_width(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_texture_get_width(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_texture_get_height(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_texture_get_height(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_texture_set_shrink_all_x2_on_set_data(void * jarg1, unsigned int jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  bool arg2 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VisualServer_texture_set_shrink_all_x2_on_set_data(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_shader_create__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = VisualServer_shader_create__SWIG_0(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_shader_create__SWIG_1(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_shader_create__SWIG_0(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_shader_set_mode(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_shader_set_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_material_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_material_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_shader(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_material_set_shader(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_material_get_shader(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_material_get_shader(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_param(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  VisualServer_material_set_param(arg1,(RID const &)*arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_get_param(void * jarg1, void * jarg2, char * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  VisualServer_material_get_param(arg1,(RID const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_flag(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  VisualServer_material_set_flag(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_material_get_flag(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)VisualServer_material_get_flag(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_blend_mode(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_material_set_blend_mode(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_material_get_blend_mode(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_material_get_blend_mode(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_material_set_line_width(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_material_set_line_width(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_material_get_line_width(void * jarg1, void * jarg2) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)VisualServer_material_get_line_width(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_mesh_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_mesh_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_add_surface__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  Array *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  VisualServer_mesh_add_surface__SWIG_0(arg1,(RID const &)*arg2,arg3,(Array const &)*arg4,(Array const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_add_surface__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Array *arg4 = 0 ;
  Array *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  VisualServer_mesh_add_surface__SWIG_0(arg1,(RID const &)*arg2,arg3,(Array const &)*arg4,(Array const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_surface_set_material__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  VisualServer_mesh_surface_set_material__SWIG_0(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_surface_set_material__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_mesh_surface_set_material__SWIG_0(arg1,(RID const &)*arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_material(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_mesh_surface_get_material(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_array_len(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_array_len(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_array_index_len(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_array_index_len(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_format(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_format(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_surface_get_primitive_type(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)VisualServer_mesh_surface_get_primitive_type(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_remove_surface(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_mesh_remove_surface(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_mesh_get_surface_count(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_mesh_get_surface_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_multimesh_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_set_mesh(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_set_mesh(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_set_aabb(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_set_aabb(arg1,(RID const &)*arg2,(AABB const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_instance_set_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_instance_set_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_multimesh_instance_set_color(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_multimesh_instance_set_color(arg1,(RID const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_get_mesh(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_multimesh_get_mesh(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_get_aabb(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB *arg3 = 0 ;
  AABB result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return 0;
  } 
  result = VisualServer_multimesh_get_aabb(arg1,(RID const &)*arg2,(AABB const &)*arg3);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_instance_get_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_multimesh_instance_get_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_multimesh_instance_get_color(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_multimesh_instance_get_color(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_particles_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_amount(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_particles_set_amount(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_particles_get_amount(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_particles_get_amount(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_emitting(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_particles_set_emitting(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_particles_is_emitting(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_particles_is_emitting(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_visibility_aabb(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_visibility_aabb(arg1,(RID const &)*arg2,(AABB const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_get_visibility_aabb(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  AABB result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_particles_get_visibility_aabb(arg1,(RID const &)*arg2);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_variable(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_variable(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_variable(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_variable(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_randomness(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_randomness(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_randomness(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_randomness(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_color_phases(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_particles_set_color_phases(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_particles_get_color_phases(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_particles_get_color_phases(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_color_phase_pos(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_color_phase_pos(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_color_phase_pos(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_color_phase_pos(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_color_phase_color(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_color_phase_color(arg1,(RID const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_get_color_phase_color(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_particles_get_color_phase_color(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_attractors(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_particles_set_attractors(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_particles_get_attractors(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_particles_get_attractors(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_attractor_pos(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_attractor_pos(arg1,(RID const &)*arg2,arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_particles_get_attractor_pos(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Vector3 result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_particles_get_attractor_pos(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_attractor_strength(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_particles_set_attractor_strength(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_particles_get_attractor_strength(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_particles_get_attractor_strength(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_material__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  VisualServer_particles_set_material__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_material__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_particles_set_material__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_particles_set_height_from_velocity(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_particles_set_height_from_velocity(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_particles_has_height_from_velocity(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_particles_has_height_from_velocity(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_light_create(void * jarg1, int jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = VisualServer_light_create(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_light_get_type(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_light_get_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_color(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_light_set_color(arg1,(RID const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_light_get_color(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_light_get_color(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_shadow(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_light_set_shadow(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_light_has_shadow(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_light_has_shadow(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_volumetric(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_light_set_volumetric(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_light_is_volumetric(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_light_is_volumetric(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_projector(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_light_set_projector(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_light_get_projector(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_light_get_projector(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_light_set_var(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  VisualServer_light_set_var(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_light_get_var(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (float)VisualServer_light_get_var(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_skeleton_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_skeleton_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_skeleton_resize(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_skeleton_resize(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_skeleton_get_bone_count(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_skeleton_get_bone_count(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_skeleton_bone_set_transform(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Transform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_skeleton_bone_set_transform(arg1,(RID const &)*arg2,arg3,(Transform const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_skeleton_bone_get_transform(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  Transform result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = VisualServer_skeleton_bone_get_transform(arg1,(RID const &)*arg2,arg3);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_room_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_room_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_room_set_bounds(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Dictionary *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Dictionary *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return ;
  } 
  VisualServer_room_set_bounds(arg1,(RID const &)*arg2,(Dictionary const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_room_get_bounds(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Dictionary result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_room_get_bounds(arg1,(RID const &)*arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_portal_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_portal_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_shape(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2Array *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  VisualServer_portal_set_shape(arg1,(RID const &)*arg2,(Vector2Array const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_portal_get_shape(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_portal_get_shape(arg1,(RID const &)*arg2);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_enabled(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_portal_set_enabled(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_portal_is_enabled(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_portal_is_enabled(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_disable_distance(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_portal_set_disable_distance(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_portal_get_disable_distance(void * jarg1, void * jarg2) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)VisualServer_portal_get_disable_distance(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_portal_set_disabled_color(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_portal_set_disabled_color(arg1,(RID const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_portal_get_disabled_color(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Color result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_portal_get_disabled_color(arg1,(RID const &)*arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_camera_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_camera_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_camera_set_perspective(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  VisualServer_camera_set_perspective(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_camera_set_orthogonal(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  VisualServer_camera_set_orthogonal(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_camera_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_camera_set_transform(arg1,(RID const &)*arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_viewport_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_set_rect(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_set_rect(arg1,(RID const &)*arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_get_rect(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_viewport_get_rect(arg1,(RID const &)*arg2);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_attach_camera__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_attach_camera__SWIG_0(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_attach_camera__SWIG_1(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_attach_camera__SWIG_0(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_get_attached_camera(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_viewport_get_attached_camera(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_viewport_get_scenario(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_viewport_get_scenario(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_attach_canvas(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_attach_canvas(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_remove_canvas(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_remove_canvas(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_set_global_canvas_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_set_global_canvas_transform(arg1,(RID const &)*arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_scenario_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_scenario_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_scenario_set_debug(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_scenario_set_debug(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_instance_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_base(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_base(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_base_aabb(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_base_aabb(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Transform *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  VisualServer_instance_set_transform(arg1,(RID const &)*arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Transform result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_transform(arg1,(RID const &)*arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_attach_object_instance_ID(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_instance_attach_object_instance_ID(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_instance_get_object_instance_ID(void * jarg1, void * jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)VisualServer_instance_get_object_instance_ID(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_attach_skeleton(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_instance_attach_skeleton(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_skeleton(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_skeleton(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_set_room(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_instance_set_room(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_get_room(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_get_room(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_instance_set_exterior(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_instance_set_exterior(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisualServer_instance_is_exterior(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)VisualServer_instance_is_exterior(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instances_cull_aabb(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  AABB *arg2 = 0 ;
  RID *arg3 = 0 ;
  Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instances_cull_aabb(arg1,(AABB const &)*arg2,(RID const &)*arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instances_cull_ray(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instances_cull_ray(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(RID const &)*arg4);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instances_cull_convex(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  Array *arg2 = 0 ;
  RID *arg3 = 0 ;
  Array result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instances_cull_convex(arg1,(Array const &)*arg2,(RID const &)*arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_geometry_override_material_param(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_geometry_override_material_param(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_instance_geometry_get_material_param(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_instance_geometry_get_material_param(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_get_test_cube(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_get_test_cube(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_canvas_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_canvas_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_canvas_item_create(void * jarg1) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  result = VisualServer_canvas_item_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_parent(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_set_parent(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_canvas_item_get_parent(void * jarg1, void * jarg2) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = VisualServer_canvas_item_get_parent(arg1,(RID const &)*arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_transform(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_set_transform(arg1,(RID const &)*arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_custom_rect(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_set_custom_rect(arg1,(RID const &)*arg2,arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_clip(void * jarg1, void * jarg2, unsigned int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  VisualServer_canvas_item_set_clip(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_opacity(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_canvas_item_set_opacity(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_canvas_item_get_opacity(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (float)VisualServer_canvas_item_get_opacity(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_self_opacity(void * jarg1, void * jarg2, float jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  VisualServer_canvas_item_set_self_opacity(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VisualServer_canvas_item_get_self_opacity(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (float)VisualServer_canvas_item_get_self_opacity(arg1,(RID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_set_z(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_canvas_item_set_z(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_line__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  VisualServer_canvas_item_add_line__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_line__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_line__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_rect(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_rect(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  Color *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  VisualServer_canvas_item_add_texture_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,arg5,(Color const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  Color *arg6 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_texture_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,arg5,(Color const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  VisualServer_canvas_item_add_texture_rect__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect_region__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Rect2 *arg5 = 0 ;
  Color *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (Rect2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  VisualServer_canvas_item_add_texture_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(Rect2 const &)*arg5,(Color const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect_region__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Rect2 *arg5 = 0 ;
  Color *arg6 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (Rect2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_texture_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(Rect2 const &)*arg5,(Color const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_texture_rect_region__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  Rect2 *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (Rect2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_texture_rect_region__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(Rect2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_style_box__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  RealArray *arg5 = 0 ;
  Color *arg6 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (RealArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_style_box__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(RealArray const &)*arg5,(Color const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_style_box__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Rect2 *arg3 = 0 ;
  RID *arg4 = 0 ;
  RealArray *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (RealArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_style_box__SWIG_0(arg1,(RID const &)*arg2,(Rect2 const &)*arg3,(RID const &)*arg4,(RealArray const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_add_circle(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  float arg4 ;
  Color *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_add_circle(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_viewport_set_canvas_transform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  Matrix32 *arg4 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (Matrix32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  VisualServer_viewport_set_canvas_transform(arg1,(RID const &)*arg2,(RID const &)*arg3,(Matrix32 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_clear(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_clear(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_canvas_item_raise(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_canvas_item_raise(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_rotation(void * jarg1, float jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  VisualServer_cursor_set_rotation(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_texture(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  VisualServer_cursor_set_texture(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_visible(void * jarg1, unsigned int jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  VisualServer_cursor_set_visible(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_cursor_set_pos(void * jarg1, void * jarg2, int jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  VisualServer_cursor_set_pos(arg1,(Vector2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_black_bars_set_margins(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  VisualServer_black_bars_set_margins(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_black_bars_set_images(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  RID *arg4 = 0 ;
  RID *arg5 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg5 = (RID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_black_bars_set_images(arg1,(RID const &)*arg2,(RID const &)*arg3,(RID const &)*arg4,(RID const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_make_sphere_mesh(void * jarg1, int jarg2, int jarg3, float jarg4) {
  void * jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  RID result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  result = VisualServer_make_sphere_mesh(arg1,arg2,arg3,arg4);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_mesh_add_surface_from_planes(void * jarg1, void * jarg2, void * jarg3) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  Array *arg3 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  VisualServer_mesh_add_surface_from_planes(arg1,(RID const &)*arg2,(Array const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_draw(void * jarg1) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  VisualServer_draw(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_sync(void * jarg1) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  VisualServer_sync(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_free(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualServer_free(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualServer_set_default_clear_color(void * jarg1, void * jarg2) {
  VisualServer *arg1 = (VisualServer *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  VisualServer_set_default_clear_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualServer_get_render_info(void * jarg1, int jarg2) {
  int jresult ;
  VisualServer *arg1 = (VisualServer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (VisualServer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)VisualServer_get_render_info(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisualServer_SingletonGetInstance() {
  void * jresult ;
  VisualServer *result = 0 ;
  
  result = (VisualServer *)VisualServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeakRef_get_ref(void * jarg1) {
  void * jresult ;
  WeakRef *arg1 = (WeakRef *) 0 ;
  Object *result = 0 ;
  
  arg1 = (WeakRef *)jarg1; 
  result = (Object *)WeakRef_get_ref(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeakRef() {
  void * jresult ;
  WeakRef *result = 0 ;
  
  result = (WeakRef *)memnew(WeakRef());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_space(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  RID result;
  
  arg1 = (World *)jarg1; 
  result = World_get_space(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_scenario(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  RID result;
  
  arg1 = (World *)jarg1; 
  result = World_get_scenario(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_sound_space(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  RID result;
  
  arg1 = (World *)jarg1; 
  result = World_get_sound_space(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_World_set_environment(void * jarg1, void * jarg2) {
  World *arg1 = (World *) 0 ;
  SwigValueWrapper< Ref< Environment > > arg2 ;
  Ref< Environment > *argp2 ;
  
  arg1 = (World *)jarg1; 
  argp2 = (Ref< Environment > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Environment >", 0);
    return ;
  }
  arg2 = *argp2; 
  World_set_environment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_environment(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  SwigValueWrapper< Ref< Environment > > result;
  
  arg1 = (World *)jarg1; 
  result = World_get_environment(arg1);
  jresult = memnew(Ref< Environment >((const Ref< Environment > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World_get_direct_space_state(void * jarg1) {
  void * jresult ;
  World *arg1 = (World *) 0 ;
  PhysicsDirectSpaceState *result = 0 ;
  
  arg1 = (World *)jarg1; 
  result = (PhysicsDirectSpaceState *)World_get_direct_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World() {
  void * jresult ;
  World *result = 0 ;
  
  result = (World *)memnew(World());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_canvas(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  RID result;
  
  arg1 = (World2D *)jarg1; 
  result = World2D_get_canvas(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_space(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  RID result;
  
  arg1 = (World2D *)jarg1; 
  result = World2D_get_space(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_sound_space(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  RID result;
  
  arg1 = (World2D *)jarg1; 
  result = World2D_get_sound_space(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_World2D_get_direct_space_state(void * jarg1) {
  void * jresult ;
  World2D *arg1 = (World2D *) 0 ;
  Physics2DDirectSpaceState *result = 0 ;
  
  arg1 = (World2D *)jarg1; 
  result = (Physics2DDirectSpaceState *)World2D_get_direct_space_state(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_World2D() {
  void * jresult ;
  World2D *result = 0 ;
  
  result = (World2D *)memnew(World2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_read(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_read(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_node_type(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_node_type(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_node_name(void * jarg1) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  result = XMLParser_get_node_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_node_data(void * jarg1) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  result = XMLParser_get_node_data(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_node_offset(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_node_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_attribute_count(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_attribute_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_attribute_name(void * jarg1, int jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (int)jarg2; 
  result = XMLParser_get_attribute_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_attribute_value(void * jarg1, int jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (int)jarg2; 
  result = XMLParser_get_attribute_value(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLParser_has_attribute(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)XMLParser_has_attribute(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_named_attribute_value(void * jarg1, char * jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = XMLParser_get_named_attribute_value(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLParser_get_named_attribute_value_safe(void * jarg1, char * jarg2) {
  void * jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = XMLParser_get_named_attribute_value_safe(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLParser_is_empty(void * jarg1) {
  unsigned int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  bool result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (bool)XMLParser_is_empty(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_get_current_line(void * jarg1) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  result = (int)XMLParser_get_current_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLParser_skip_section(void * jarg1) {
  XMLParser *arg1 = (XMLParser *) 0 ;
  
  arg1 = (XMLParser *)jarg1; 
  XMLParser_skip_section(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_seek(void * jarg1, int jarg2) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)XMLParser_seek(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_open(void * jarg1, char * jarg2) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)XMLParser_open(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLParser_open_buffer(void * jarg1, void * jarg2) {
  int jresult ;
  XMLParser *arg1 = (XMLParser *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (XMLParser *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)XMLParser_open_buffer(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLParser() {
  void * jresult ;
  XMLParser *result = 0 ;
  
  result = (XMLParser *)memnew(XMLParser());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_open(void * jarg1, char * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_open(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_list_dir_begin(void * jarg1) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  result = (bool)_Directory_list_dir_begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Directory_get_next(void * jarg1) {
  void * jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String result;
  
  arg1 = (_Directory *)jarg1; 
  result = _Directory_get_next(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_current_is_dir(void * jarg1) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  result = (bool)_Directory_current_is_dir(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Directory_list_dir_end(void * jarg1) {
  _Directory *arg1 = (_Directory *) 0 ;
  
  arg1 = (_Directory *)jarg1; 
  _Directory_list_dir_end(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_get_drive_count(void * jarg1) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  result = (int)_Directory_get_drive_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Directory_get_drive(void * jarg1, int jarg2) {
  void * jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (_Directory *)jarg1; 
  arg2 = (int)jarg2; 
  result = _Directory_get_drive(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_change_dir(void * jarg1, char * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_change_dir(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Directory_get_current_dir(void * jarg1) {
  void * jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String result;
  
  arg1 = (_Directory *)jarg1; 
  result = _Directory_get_current_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_make_dir(void * jarg1, char * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_make_dir(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_make_dir_recursive(void * jarg1, char * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_make_dir_recursive(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_file_exists(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_Directory_file_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Directory_dir_exists(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_Directory_dir_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_get_space_left(void * jarg1) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  result = (int)_Directory_get_space_left(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_copy(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)_Directory_copy(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_rename(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)_Directory_rename(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Directory_remove(void * jarg1, char * jarg2) {
  int jresult ;
  _Directory *arg1 = (_Directory *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_Directory_remove(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Directory() {
  void * jresult ;
  _Directory *result = 0 ;
  
  result = (_Directory *)memnew(_Directory());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_open_encrypted(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  RawArray *arg4 = 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (RawArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)_File_open_encrypted(arg1,(String const &)*arg2,arg3,(RawArray const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_open_encrypted_with_pass(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (int)_File_open_encrypted_with_pass(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_open(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)_File_open(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_close(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  _File_close(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_is_open(void * jarg1) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  result = (bool)_File_is_open(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_seek(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_seek(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_seek_end__SWIG_0(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_seek_end__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_seek_end__SWIG_1(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  _File_seek_end__SWIG_0(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_pos(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_len(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_len(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_eof_reached(void * jarg1) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  result = (bool)_File_eof_reached(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_8(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_8(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_16(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_32(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_64(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_File_get_float(void * jarg1) {
  float jresult ;
  _File *arg1 = (_File *) 0 ;
  float result;
  
  arg1 = (_File *)jarg1; 
  result = (float)_File_get_float(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_File_get_double(void * jarg1) {
  float jresult ;
  _File *arg1 = (_File *) 0 ;
  float result;
  
  arg1 = (_File *)jarg1; 
  result = (float)_File_get_double(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_File_get_real(void * jarg1) {
  float jresult ;
  _File *arg1 = (_File *) 0 ;
  float result;
  
  arg1 = (_File *)jarg1; 
  result = (float)_File_get_real(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_buffer(void * jarg1, int jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  RawArray result;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  result = _File_get_buffer(arg1,arg2);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_line(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_line(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_as_text(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_as_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_md5(void * jarg1, char * jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _File_get_md5(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_get_endian_swap(void * jarg1) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  result = (bool)_File_get_endian_swap(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_set_endian_swap(void * jarg1, unsigned int jarg2) {
  _File *arg1 = (_File *) 0 ;
  bool arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _File_set_endian_swap(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_File_get_error(void * jarg1) {
  int jresult ;
  _File *arg1 = (_File *) 0 ;
  int result;
  
  arg1 = (_File *)jarg1; 
  result = (int)_File_get_error(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_get_var(void * jarg1) {
  _File *arg1 = (_File *) 0 ;
  
  arg1 = (_File *)jarg1; 
  _File_get_var(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_csv_line__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _File_get_csv_line__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_csv_line__SWIG_1(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  StringArray result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_csv_line__SWIG_0(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_8(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_8(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_16(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_16(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_32(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_32(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_64(void * jarg1, int jarg2) {
  _File *arg1 = (_File *) 0 ;
  int arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (int)jarg2; 
  _File_store_64(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_float(void * jarg1, float jarg2) {
  _File *arg1 = (_File *) 0 ;
  float arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (float)jarg2; 
  _File_store_float(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_double(void * jarg1, float jarg2) {
  _File *arg1 = (_File *) 0 ;
  float arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (float)jarg2; 
  _File_store_double(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_real(void * jarg1, float jarg2) {
  _File *arg1 = (_File *) 0 ;
  float arg2 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (float)jarg2; 
  _File_store_real(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_buffer(void * jarg1, void * jarg2) {
  _File *arg1 = (_File *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  _File_store_buffer(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_line(void * jarg1, char * jarg2) {
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _File_store_line(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_string(void * jarg1, char * jarg2) {
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _File_store_string(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_var(void * jarg1, void * jarg2) {
  _File *arg1 = (_File *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  _File_store_var(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_File_store_pascal_string(void * jarg1, char * jarg2) {
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _File_store_pascal_string(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_File_get_pascal_string(void * jarg1) {
  void * jresult ;
  _File *arg1 = (_File *) 0 ;
  String result;
  
  arg1 = (_File *)jarg1; 
  result = _File_get_pascal_string(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_File_file_exists(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  _File *arg1 = (_File *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_File_file_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_File() {
  void * jresult ;
  _File *result = 0 ;
  
  result = (_File *)memnew(_File());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_box_planes(void * jarg1, void * jarg2) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_build_box_planes(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_cylinder_planes__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = _Geometry_build_cylinder_planes__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_cylinder_planes__SWIG_1(void * jarg1, float jarg2, float jarg3, int jarg4) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = _Geometry_build_cylinder_planes__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_capsule_planes__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = _Geometry_build_capsule_planes__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_build_capsule_planes__SWIG_1(void * jarg1, float jarg2, float jarg3, int jarg4, int jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = _Geometry_build_capsule_planes__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Geometry_segment_intersects_circle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  float jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  float arg5 ;
  float result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (float)_Geometry_segment_intersects_circle(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_segment_intersects_segment_2d(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  _Geometry_segment_intersects_segment_2d(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Vector2 const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_get_closest_points_between_segments_2d(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  Vector2Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_get_closest_points_between_segments_2d(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Vector2 const &)*arg5);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_get_closest_points_between_segments(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_get_closest_points_between_segments(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_get_closest_point_to_segment(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = _Geometry_get_closest_point_to_segment(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Geometry_get_uv84_normal_bit(void * jarg1, void * jarg2) {
  int jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  int result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (int)_Geometry_get_uv84_normal_bit(arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_ray_intersects_triangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  Vector3 *arg6 = 0 ;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  _Geometry_ray_intersects_triangle(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5,(Vector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geometry_segment_intersects_triangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  Vector3 *arg6 = 0 ;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = (Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  _Geometry_segment_intersects_triangle(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5,(Vector3 const &)*arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_segment_intersects_sphere(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  float arg5 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = _Geometry_segment_intersects_sphere(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,arg5);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_segment_intersects_cylinder(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = _Geometry_segment_intersects_cylinder(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4,arg5);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_segment_intersects_convex(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Array *arg4 = 0 ;
  Vector3Array result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = _Geometry_segment_intersects_convex(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Array const &)*arg4);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Geometry_point_is_inside_triangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  bool result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)_Geometry_point_is_inside_triangle(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,(Vector2 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_triangulate_polygon(void * jarg1, void * jarg2) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2Array *arg2 = 0 ;
  IntArray result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return 0;
  } 
  result = _Geometry_triangulate_polygon(arg1,(Vector2Array const &)*arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geometry_make_atlas(void * jarg1, void * jarg2) {
  void * jresult ;
  _Geometry *arg1 = (_Geometry *) 0 ;
  Vector2Array *arg2 = 0 ;
  Dictionary result;
  
  arg1 = (_Geometry *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return 0;
  } 
  result = _Geometry_make_atlas(arg1,(Vector2Array const &)*arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_variant_to_base64(void * jarg1, void * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  Variant *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = _Marshalls_variant_to_base64(arg1,(Variant const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_base64_to_variant(void * jarg1, char * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  Variant result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_base64_to_variant(arg1,(String const &)*arg2);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_raw_to_base64(void * jarg1, void * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  RawArray *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = _Marshalls_raw_to_base64(arg1,(RawArray const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_base64_to_raw(void * jarg1, char * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  RawArray result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_base64_to_raw(arg1,(String const &)*arg2);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_utf8_to_base64(void * jarg1, char * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_utf8_to_base64(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Marshalls_base64_to_utf8(void * jarg1, char * jarg2) {
  void * jresult ;
  _Marshalls *arg1 = (_Marshalls *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_Marshalls *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _Marshalls_base64_to_utf8(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mutex__lock(void * jarg1) {
  _Mutex *arg1 = (_Mutex *) 0 ;
  
  arg1 = (_Mutex *)jarg1; 
  _Mutex_lock(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mutex_try_lock(void * jarg1) {
  int jresult ;
  _Mutex *arg1 = (_Mutex *) 0 ;
  int result;
  
  arg1 = (_Mutex *)jarg1; 
  result = (int)_Mutex_try_lock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mutex_unlock(void * jarg1) {
  _Mutex *arg1 = (_Mutex *) 0 ;
  
  arg1 = (_Mutex *)jarg1; 
  _Mutex_unlock(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mutex() {
  void * jresult ;
  _Mutex *result = 0 ;
  
  result = (_Mutex *)memnew(_Mutex());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_clipboard(void * jarg1, char * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_set_clipboard(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_clipboard(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_clipboard(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_video_mode__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  _OS_set_video_mode__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_video_mode__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  _OS_set_video_mode__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_video_mode_size__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_video_mode_size__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_video_mode_size__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_video_mode_size__SWIG_0(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_fullscreen__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)_OS_is_video_mode_fullscreen__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_fullscreen__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_video_mode_fullscreen__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_resizable__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)_OS_is_video_mode_resizable__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_video_mode_resizable__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_video_mode_resizable__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_fullscreen_mode_list__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_fullscreen_mode_list__SWIG_0(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_fullscreen_mode_list__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Array result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_fullscreen_mode_list__SWIG_0(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_count(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_screen_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_current_screen(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_current_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_current_screen(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_current_screen(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_screen_position__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_screen_position__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_screen_position__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_screen_position__SWIG_0(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_screen_size__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_screen_size__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_screen_size__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_screen_size__SWIG_0(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_dpi__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)_OS_get_screen_dpi__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_dpi__SWIG_1(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_screen_dpi__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_window_position(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_window_position(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_position(void * jarg1, void * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  _OS_set_window_position(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_window_size(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Vector2 result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_window_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_size(void * jarg1, void * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  _OS_set_window_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_fullscreen(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_fullscreen(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_fullscreen(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_fullscreen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_resizable(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_resizable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_resizable(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_resizable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_minimized(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_minimized(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_minimized(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_minimized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_maximized(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_window_maximized(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_window_maximized(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_window_maximized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_borderless_window(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_borderless_window(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_get_borderless_window(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_get_borderless_window(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_screen_orientation(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_screen_orientation(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_screen_orientation(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_screen_orientation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_keep_screen_on(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_keep_screen_on(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_keep_screen_on(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_keep_screen_on(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_iterations_per_second(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_iterations_per_second(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_iterations_per_second(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_iterations_per_second(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_target_fps(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_set_target_fps(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OS_get_target_fps(void * jarg1) {
  float jresult ;
  _OS *arg1 = (_OS *) 0 ;
  float result;
  
  arg1 = (_OS *)jarg1; 
  result = (float)_OS_get_target_fps(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_time_scale(void * jarg1, float jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  float arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (float)jarg2; 
  _OS_set_time_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OS_get_time_scale(void * jarg1) {
  float jresult ;
  _OS *arg1 = (_OS *) 0 ;
  float result;
  
  arg1 = (_OS *)jarg1; 
  result = (float)_OS_get_time_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_has_touchscreen_ui_hint(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_has_touchscreen_ui_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_window_title(void * jarg1, char * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_set_window_title(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_low_processor_usage_mode(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_low_processor_usage_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_in_low_processor_usage_mode(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_in_low_processor_usage_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_processor_count(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_processor_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_executable_path(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_executable_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_execute__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  bool arg4 ;
  Array *arg5 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Array *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return 0;
  } 
  result = (int)_OS_execute__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3,arg4,(Array const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_execute__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (int)_OS_execute__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_kill(void * jarg1, int jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)_OS_kill(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_shell_open(void * jarg1, char * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_OS_shell_open(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_process_ID(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_process_ID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_environment(void * jarg1, char * jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _OS_get_environment(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_has_environment(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_OS_has_environment(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_name(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_cmdline_args(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  StringArray result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_cmdline_args(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_main_loop(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Object *result = 0 ;
  
  arg1 = (_OS *)jarg1; 
  result = (Object *)_OS_get_main_loop(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_datetime__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = _OS_get_datetime__SWIG_0(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_datetime__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_datetime__SWIG_0(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_date__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = _OS_get_date__SWIG_0(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_date__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_date__SWIG_0(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_time__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = _OS_get_time__SWIG_0(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_time__SWIG_1(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_time__SWIG_0(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_time_zone_info(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_time_zone_info(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_unix_time(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_unix_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_datetime_from_unix_time(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  Dictionary result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_datetime_from_unix_time(arg1,arg2);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_unix_time_from_datetime(void * jarg1, void * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  Dictionary *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return 0;
  } 
  result = (int)_OS_get_unix_time_from_datetime(arg1,(Dictionary const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_system_time_secs(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_system_time_secs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_icon(void * jarg1, void * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  _OS_set_icon(arg1,(Image const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_delay_usec(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_delay_usec(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_delay_msec(void * jarg1, int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  _OS_delay_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_ticks_msec(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_ticks_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_splash_tick_msec(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_splash_tick_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_locale(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_locale(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_model_name(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_model_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_custom_level(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_custom_level(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_can_draw(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_can_draw(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_frames_drawn(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_frames_drawn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_stdout_verbose(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_stdout_verbose(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_can_use_threads(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_can_use_threads(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_debug_build(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_debug_build(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_dump_memory_to_file(void * jarg1, char * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_dump_memory_to_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_dump_resources_to_file(void * jarg1, char * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_dump_resources_to_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_resources_in_use__SWIG_0(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_print_resources_in_use__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_resources_in_use__SWIG_1(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_print_resources_in_use__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_all_resources__SWIG_0(void * jarg1, char * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_print_all_resources__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_all_resources__SWIG_1(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_print_all_resources__SWIG_0(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_static_memory_usage(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_static_memory_usage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_static_memory_peak_usage(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_static_memory_peak_usage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_get_dynamic_memory_usage(void * jarg1) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  result = (int)_OS_get_dynamic_memory_usage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_data_dir(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_data_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_system_dir(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_system_dir(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_unique_ID(void * jarg1) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  result = _OS_get_unique_ID(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_ok_left_and_cancel_right(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_is_ok_left_and_cancel_right(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OS_get_frames_per_second(void * jarg1) {
  float jresult ;
  _OS *arg1 = (_OS *) 0 ;
  float result;
  
  arg1 = (_OS *)jarg1; 
  result = (float)_OS_get_frames_per_second(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_all_textures_by_size(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_print_all_textures_by_size(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_print_resources_by_type(void * jarg1, void * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  _OS_print_resources_by_type(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_native_video_play(void * jarg1, char * jarg2, float jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  String *arg5 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  result = (int)_OS_native_video_play(arg1,(String const &)*arg2,arg3,(String const &)*arg4,(String const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_native_video_is_playing(void * jarg1) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  result = (bool)_OS_native_video_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_native_video_stop(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_native_video_stop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_native_video_pause(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_native_video_pause(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_native_video_unpause(void * jarg1) {
  _OS *arg1 = (_OS *) 0 ;
  
  arg1 = (_OS *)jarg1; 
  _OS_native_video_unpause(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OS_get_scancode_string(void * jarg1, int jarg2) {
  void * jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = _OS_get_scancode_string(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OS_is_scancode_unicode(void * jarg1, int jarg2) {
  unsigned int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (_OS *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)_OS_is_scancode_unicode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_find_scancode_from_string(void * jarg1, char * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_OS_find_scancode_from_string(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_set_use_file_access_save_and_swap(void * jarg1, unsigned int jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  bool arg2 ;
  
  arg1 = (_OS *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _OS_set_use_file_access_save_and_swap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_alert__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  _OS_alert__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OS_alert__SWIG_1(void * jarg1, char * jarg2) {
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  _OS_alert__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OS_set_thread_name(void * jarg1, char * jarg2) {
  int jresult ;
  _OS *arg1 = (_OS *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (_OS *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)_OS_set_thread_name(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_load_interactive__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< ResourceInteractiveLoader > > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = _ResourceLoader_load_interactive__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< ResourceInteractiveLoader >((const Ref< ResourceInteractiveLoader > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_load_interactive__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< ResourceInteractiveLoader > > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_load_interactive__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Ref< ResourceInteractiveLoader >((const Ref< ResourceInteractiveLoader > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_load__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool arg4 ;
  SwigValueWrapper< Ref< Resource > > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  result = _ResourceLoader_load__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
  jresult = memnew(Ref< Resource >((const Ref< Resource > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_load__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Resource > > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = _ResourceLoader_load__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< Resource >((const Ref< Resource > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_load__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Resource > > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_load__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Resource >((const Ref< Resource > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_load_import_metadata(void * jarg1, char * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< ResourceImportMetadata > > result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_load_import_metadata(arg1,(String const &)*arg2);
  jresult = memnew(Ref< ResourceImportMetadata >((const Ref< ResourceImportMetadata > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_get_recognized_extensions_for_type(void * jarg1, char * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_get_recognized_extensions_for_type(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourceLoader_set_abort_on_missing_resources(void * jarg1, unsigned int jarg2) {
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  bool arg2 ;
  
  arg1 = (_ResourceLoader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  _ResourceLoader_set_abort_on_missing_resources(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceLoader_get_dependencies(void * jarg1, char * jarg2) {
  void * jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = _ResourceLoader_get_dependencies(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourceLoader_has(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  _ResourceLoader *arg1 = (_ResourceLoader *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (_ResourceLoader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)_ResourceLoader_has(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceSaver_save__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  _ResourceSaver *arg1 = (_ResourceSaver *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Resource > > arg3 ;
  int arg4 ;
  Ref< Resource > *argp3 ;
  int result;
  
  arg1 = (_ResourceSaver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Resource > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Resource >", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  result = (int)_ResourceSaver_save__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResourceSaver_save__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  _ResourceSaver *arg1 = (_ResourceSaver *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Resource > > arg3 ;
  Ref< Resource > *argp3 ;
  int result;
  
  arg1 = (_ResourceSaver *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Resource > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Resource >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)_ResourceSaver_save__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourceSaver_get_recognized_extensions(void * jarg1, void * jarg2) {
  void * jresult ;
  _ResourceSaver *arg1 = (_ResourceSaver *) 0 ;
  Object *arg2 = (Object *) 0 ;
  StringArray result;
  
  arg1 = (_ResourceSaver *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = _ResourceSaver_get_recognized_extensions(arg1,arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Semaphore_wait(void * jarg1) {
  int jresult ;
  _Semaphore *arg1 = (_Semaphore *) 0 ;
  int result;
  
  arg1 = (_Semaphore *)jarg1; 
  result = (int)_Semaphore_wait(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Semaphore_post(void * jarg1) {
  int jresult ;
  _Semaphore *arg1 = (_Semaphore *) 0 ;
  int result;
  
  arg1 = (_Semaphore *)jarg1; 
  result = (int)_Semaphore_post(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Semaphore() {
  void * jresult ;
  _Semaphore *result = 0 ;
  
  result = (_Semaphore *)memnew(_Semaphore());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_start__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  int arg5 ;
  int result;
  
  arg1 = (_Thread *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (int)_Thread_start__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_start__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  int result;
  
  arg1 = (_Thread *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (int)_Thread_start__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Thread_start__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (_Thread *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)_Thread_start__SWIG_0(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Thread_get_id(void * jarg1) {
  void * jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  String result;
  
  arg1 = (_Thread *)jarg1; 
  result = _Thread_get_id(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Thread_is_active(void * jarg1) {
  unsigned int jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  bool result;
  
  arg1 = (_Thread *)jarg1; 
  result = (bool)_Thread_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Thread_wait_to_finish(void * jarg1) {
  void * jresult ;
  _Thread *arg1 = (_Thread *) 0 ;
  Variant result;
  
  arg1 = (_Thread *)jarg1; 
  result = _Thread_wait_to_finish(arg1);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Thread() {
  void * jresult ;
  _Thread *result = 0 ;
  
  result = (_Thread *)memnew(_Thread());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_add_track__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)Animation_add_track__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_add_track__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_add_track__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_remove_track(void * jarg1, int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  Animation_remove_track(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_get_track_count(void * jarg1) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  result = (int)Animation_get_track_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_get_type(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_track_get_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_track_get_path(void * jarg1, int jarg2) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = Animation_track_get_path(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_path(void * jarg1, int jarg2, void * jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  NodePath *arg3 = 0 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Animation_track_set_path(arg1,arg2,(NodePath const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_find_track(void * jarg1, void * jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  NodePath *arg2 = 0 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (int)Animation_find_track(arg1,(NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_move_up(void * jarg1, int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  Animation_track_move_up(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_move_down(void * jarg1, int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  Animation_track_move_down(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_transform_track_insert_key(void * jarg1, int jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector3 *arg4 = 0 ;
  Quat *arg5 = 0 ;
  Vector3 *arg6 = 0 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (Quat *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quat const & type is null", 0);
    return 0;
  } 
  arg6 = (Vector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (int)Animation_transform_track_insert_key(arg1,arg2,arg3,(Vector3 const &)*arg4,(Quat const &)*arg5,(Vector3 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_insert_key__SWIG_0(void * jarg1, int jarg2, float jarg3, void * jarg4, float jarg5) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Variant *arg4 = 0 ;
  float arg5 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (float)jarg5; 
  Animation_track_insert_key__SWIG_0(arg1,arg2,arg3,(Variant const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_insert_key__SWIG_1(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Animation_track_insert_key__SWIG_0(arg1,arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_remove_key(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_track_remove_key(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_remove_key_at_pos(void * jarg1, int jarg2, float jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Animation_track_remove_key_at_pos(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_key_value(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  Variant *arg4 = 0 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Animation_track_set_key_value(arg1,arg2,arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_key_transition(void * jarg1, int jarg2, int jarg3, float jarg4) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Animation_track_set_key_transition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_track_get_key_transition(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)Animation_track_get_key_transition(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_get_key_count(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_track_get_key_count(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_get_key_value(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_track_get_key_value(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_track_get_key_time(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)Animation_track_get_key_time(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_find_key__SWIG_0(void * jarg1, int jarg2, float jarg3, unsigned int jarg4) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)Animation_track_find_key__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_find_key__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)Animation_track_find_key__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_track_set_interpolation_type(void * jarg1, int jarg2, int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Animation_track_set_interpolation_type(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Animation_track_get_interpolation_type(void * jarg1, int jarg2) {
  int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Animation_track_get_interpolation_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_transform_track_interpolate(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  Array result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Animation_transform_track_interpolate(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_value_track_set_continuous(void * jarg1, int jarg2, unsigned int jarg3) {
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Animation_value_track_set_continuous(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Animation_value_track_is_continuous(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Animation_value_track_is_continuous(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_value_track_get_key_indices(void * jarg1, int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  IntArray result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = Animation_value_track_get_key_indices(arg1,arg2,arg3,arg4);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_method_track_get_key_indices(void * jarg1, int jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  IntArray result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = Animation_method_track_get_key_indices(arg1,arg2,arg3,arg4);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_method_track_get_name(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  String result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = Animation_method_track_get_name(arg1,arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Animation_method_track_get_params(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Animation *arg1 = (Animation *) 0 ;
  int arg2 ;
  int arg3 ;
  Array result;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = Animation_method_track_get_params(arg1,arg2,arg3);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_length(void * jarg1, float jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  float arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (float)jarg2; 
  Animation_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_get_length(void * jarg1) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  result = (float)Animation_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_loop(void * jarg1, unsigned int jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  bool arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Animation_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Animation_has_loop(void * jarg1) {
  unsigned int jresult ;
  Animation *arg1 = (Animation *) 0 ;
  bool result;
  
  arg1 = (Animation *)jarg1; 
  result = (bool)Animation_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_set_step(void * jarg1, float jarg2) {
  Animation *arg1 = (Animation *) 0 ;
  float arg2 ;
  
  arg1 = (Animation *)jarg1; 
  arg2 = (float)jarg2; 
  Animation_set_step(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Animation_get_step(void * jarg1) {
  float jresult ;
  Animation *arg1 = (Animation *) 0 ;
  float result;
  
  arg1 = (Animation *)jarg1; 
  result = (float)Animation_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Animation_clear(void * jarg1) {
  Animation *arg1 = (Animation *) 0 ;
  
  arg1 = (Animation *)jarg1; 
  Animation_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Animation() {
  void * jresult ;
  Animation *result = 0 ;
  
  result = (Animation *)memnew(Animation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtlasTexture_set_atlas(void * jarg1, void * jarg2) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  AtlasTexture_set_atlas(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtlasTexture_get_atlas(void * jarg1) {
  void * jresult ;
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (AtlasTexture *)jarg1; 
  result = AtlasTexture_get_atlas(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtlasTexture_set_region(void * jarg1, void * jarg2) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  AtlasTexture_set_region(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtlasTexture_get_region(void * jarg1) {
  void * jresult ;
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 result;
  
  arg1 = (AtlasTexture *)jarg1; 
  result = AtlasTexture_get_region(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AtlasTexture_set_margin(void * jarg1, void * jarg2) {
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (AtlasTexture *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  AtlasTexture_set_margin(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtlasTexture_get_margin(void * jarg1) {
  void * jresult ;
  AtlasTexture *arg1 = (AtlasTexture *) 0 ;
  Rect2 result;
  
  arg1 = (AtlasTexture *)jarg1; 
  result = AtlasTexture_get_margin(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AtlasTexture() {
  void * jresult ;
  AtlasTexture *result = 0 ;
  
  result = (AtlasTexture *)memnew(AtlasTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_sample_create(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  RID result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = AudioServer_sample_create(arg1,arg2,arg3,arg4);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_description(void * jarg1, void * jarg2, char * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AudioServer_sample_set_description(arg1,(RID const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_sample_get_description(void * jarg1, void * jarg2) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  String result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = AudioServer_sample_get_description(arg1,(RID const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_format(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_format(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioServer_sample_is_stereo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)AudioServer_sample_is_stereo(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_length(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_length(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_signed_data(void * jarg1, void * jarg2, void * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RealArray *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RealArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  AudioServer_sample_set_signed_data(arg1,(RID const &)*arg2,(RealArray const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_data(void * jarg1, void * jarg2, void * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RawArray *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RawArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  AudioServer_sample_set_data(arg1,(RID const &)*arg2,(RawArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_sample_get_data(void * jarg1, void * jarg2) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RawArray result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = AudioServer_sample_get_data(arg1,(RID const &)*arg2);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_mix_rate(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_mix_rate(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_mix_rate(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_mix_rate(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_loop_format(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_loop_format(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_loop_format(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_loop_format(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_loop_begin(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_loop_begin(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_loop_begin(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_loop_begin(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_sample_set_loop_end(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_sample_set_loop_end(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_sample_get_loop_end(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_sample_get_loop_end(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_voice_create(void * jarg1) {
  void * jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID result;
  
  arg1 = (AudioServer *)jarg1; 
  result = AudioServer_voice_create(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_play(void * jarg1, void * jarg2, void * jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  RID *arg3 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (RID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  AudioServer_voice_play(arg1,(RID const &)*arg2,(RID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_volume(void * jarg1, void * jarg2, float jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  AudioServer_voice_set_volume(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_pan__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  AudioServer_voice_set_pan__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_pan__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  AudioServer_voice_set_pan__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_pan__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  AudioServer_voice_set_pan__SWIG_0(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_filter__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  AudioServer_voice_set_filter__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_filter__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  AudioServer_voice_set_filter__SWIG_0(arg1,(RID const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_chorus(void * jarg1, void * jarg2, float jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  AudioServer_voice_set_chorus(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_reverb(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  AudioServer_voice_set_reverb(arg1,(RID const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_mix_rate(void * jarg1, void * jarg2, int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  AudioServer_voice_set_mix_rate(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_set_positional(void * jarg1, void * jarg2, unsigned int jarg3) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  AudioServer_voice_set_positional(arg1,(RID const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_volume(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_volume(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_pan(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_pan(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_pan_height(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_pan_height(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_pan_depth(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_pan_depth(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_voice_get_filter_type(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_voice_get_filter_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_filter_cutoff(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_filter_cutoff(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_filter_resonance(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_filter_resonance(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_chorus(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_chorus(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_voice_get_reverb_type(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_voice_get_reverb_type(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_voice_get_reverb(void * jarg1, void * jarg2) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (float)AudioServer_voice_get_reverb(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioServer_voice_get_mix_rate(void * jarg1, void * jarg2) {
  int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  int result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (int)AudioServer_voice_get_mix_rate(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioServer_voice_is_positional(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  bool result;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  result = (bool)AudioServer_voice_is_positional(arg1,(RID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_voice_stop(void * jarg1, void * jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  AudioServer_voice_stop(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_free_rid(void * jarg1, void * jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  AudioServer_free_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_set_stream_global_volume_scale(void * jarg1, float jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  float arg2 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (float)jarg2; 
  AudioServer_set_stream_global_volume_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_get_stream_global_volume_scale(void * jarg1) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  result = (float)AudioServer_get_stream_global_volume_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_set_fx_global_volume_scale(void * jarg1, float jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  float arg2 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (float)jarg2; 
  AudioServer_set_fx_global_volume_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_get_fx_global_volume_scale(void * jarg1) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  result = (float)AudioServer_get_fx_global_volume_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioServer_set_event_voice_global_volume_scale(void * jarg1, float jarg2) {
  AudioServer *arg1 = (AudioServer *) 0 ;
  float arg2 ;
  
  arg1 = (AudioServer *)jarg1; 
  arg2 = (float)jarg2; 
  AudioServer_set_event_voice_global_volume_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioServer_get_event_voice_global_volume_scale(void * jarg1) {
  float jresult ;
  AudioServer *arg1 = (AudioServer *) 0 ;
  float result;
  
  arg1 = (AudioServer *)jarg1; 
  result = (float)AudioServer_get_event_voice_global_volume_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AudioServer_SingletonGetInstance() {
  void * jresult ;
  AudioServer *result = 0 ;
  
  result = (AudioServer *)AudioServer_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamMPC() {
  void * jresult ;
  AudioStreamMPC *result = 0 ;
  
  result = (AudioStreamMPC *)memnew(AudioStreamMPC());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamOGGVorbis() {
  void * jresult ;
  AudioStreamOGGVorbis *result = 0 ;
  
  result = (AudioStreamOGGVorbis *)memnew(AudioStreamOGGVorbis());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamOpus() {
  void * jresult ;
  AudioStreamOpus *result = 0 ;
  
  result = (AudioStreamOpus *)memnew(AudioStreamOpus());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_play__SWIG_0(void * jarg1, float jarg2) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float arg2 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  arg2 = (float)jarg2; 
  AudioStreamPlayback_play__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_play__SWIG_1(void * jarg1) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  AudioStreamPlayback_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_stop(void * jarg1) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  AudioStreamPlayback_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioStreamPlayback_is_playing(void * jarg1) {
  unsigned int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  bool result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (bool)AudioStreamPlayback_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_set_loop(void * jarg1, unsigned int jarg2) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  bool arg2 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AudioStreamPlayback_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioStreamPlayback_has_loop(void * jarg1) {
  unsigned int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  bool result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (bool)AudioStreamPlayback_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_loop_count(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioStreamPlayback_seek_pos(void * jarg1, float jarg2) {
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float arg2 ;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  arg2 = (float)jarg2; 
  AudioStreamPlayback_seek_pos(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioStreamPlayback_get_pos(void * jarg1) {
  float jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (float)AudioStreamPlayback_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AudioStreamPlayback_get_length(void * jarg1) {
  float jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  float result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (float)AudioStreamPlayback_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_channels(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_channels(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_mix_rate(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_mix_rate(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioStreamPlayback_get_minimum_buffer_size(void * jarg1) {
  int jresult ;
  AudioStreamPlayback *arg1 = (AudioStreamPlayback *) 0 ;
  int result;
  
  arg1 = (AudioStreamPlayback *)jarg1; 
  result = (int)AudioStreamPlayback_get_minimum_buffer_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioStreamSpeex() {
  void * jresult ;
  AudioStreamSpeex *result = 0 ;
  
  result = (AudioStreamSpeex *)memnew(AudioStreamSpeex());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_mode(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_mode(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_octree(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  BakedLight_set_octree(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_octree(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_octree(arg1);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_light(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return ;
  } 
  BakedLight_set_light(arg1,(RawArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_light(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  RawArray result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_light(arg1);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_sampler_octree(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  BakedLight_set_sampler_octree(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_sampler_octree(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  IntArray result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_sampler_octree(arg1);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_add_lightmap(void * jarg1, void * jarg2, void * jarg3) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Vector2 *arg3 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (BakedLight *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  BakedLight_add_lightmap(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_erase_lightmap(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_erase_lightmap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_clear_lightmaps(void * jarg1) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  BakedLight_clear_lightmaps(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_cell_subdivision(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_cell_subdivision(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_cell_subdivision(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_cell_subdivision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_initial_lattice_subdiv(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_initial_lattice_subdiv(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_initial_lattice_subdiv(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_initial_lattice_subdiv(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_plot_size(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_plot_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_plot_size(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_plot_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_bounces(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_bounces(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_bounces(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_bounces(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_cell_extra_margin(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_cell_extra_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_cell_extra_margin(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_cell_extra_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_edge_damp(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_edge_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_edge_damp(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_edge_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_normal_damp(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_normal_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_normal_damp(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_normal_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_tint(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_tint(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_tint(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_tint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_saturation(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_saturation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_saturation(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_saturation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_ao_radius(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_ao_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_ao_radius(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_ao_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_ao_strength(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_ao_strength(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_ao_strength(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_ao_strength(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_realtime_color_enabled(void * jarg1, unsigned int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BakedLight_set_realtime_color_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BakedLight_get_realtime_color_enabled(void * jarg1) {
  unsigned int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (bool)BakedLight_get_realtime_color_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_realtime_color(void * jarg1, void * jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  BakedLight_set_realtime_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLight_get_realtime_color(void * jarg1) {
  void * jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  Color result;
  
  arg1 = (BakedLight *)jarg1; 
  result = BakedLight_get_realtime_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_realtime_energy(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_realtime_energy(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_realtime_energy(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_realtime_energy(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_format(void * jarg1, int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLight_set_format(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLight_get_format(void * jarg1) {
  int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (int)BakedLight_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_transfer_lightmaps_only_to_uv2(void * jarg1, unsigned int jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BakedLight_set_transfer_lightmaps_only_to_uv2(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BakedLight_get_transfer_lightmaps_only_to_uv2(void * jarg1) {
  unsigned int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  bool result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (bool)BakedLight_get_transfer_lightmaps_only_to_uv2(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_energy_multiplier(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_energy_multiplier(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_energy_multiplier(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_energy_multiplier(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_gamma_adjust(void * jarg1, float jarg2) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  float arg2 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (float)jarg2; 
  BakedLight_set_gamma_adjust(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLight_get_gamma_adjust(void * jarg1) {
  float jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  float result;
  
  arg1 = (BakedLight *)jarg1; 
  result = (float)BakedLight_get_gamma_adjust(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLight_set_bake_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  BakedLight_set_bake_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BakedLight_get_bake_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BakedLight *arg1 = (BakedLight *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BakedLight *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)BakedLight_get_bake_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BakedLight() {
  void * jresult ;
  BakedLight *result = 0 ;
  
  result = (BakedLight *)memnew(BakedLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_create(void * jarg1, void * jarg2) {
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  BitMap_create(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_create_from_image_alpha(void * jarg1, void * jarg2) {
  BitMap *arg1 = (BitMap *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  BitMap_create_from_image_alpha(arg1,(Image const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_set_bit(void * jarg1, void * jarg2, unsigned int jarg3) {
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  BitMap_set_bit(arg1,(Vector2 const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BitMap_get_bit(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)BitMap_get_bit(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitMap_set_bit_rect(void * jarg1, void * jarg2, unsigned int jarg3) {
  BitMap *arg1 = (BitMap *) 0 ;
  Rect2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (BitMap *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  BitMap_set_bit_rect(arg1,(Rect2 const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitMap_get_true_bit_count(void * jarg1) {
  int jresult ;
  BitMap *arg1 = (BitMap *) 0 ;
  int result;
  
  arg1 = (BitMap *)jarg1; 
  result = (int)BitMap_get_true_bit_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BitMap_get_size(void * jarg1) {
  void * jresult ;
  BitMap *arg1 = (BitMap *) 0 ;
  Vector2 result;
  
  arg1 = (BitMap *)jarg1; 
  result = BitMap_get_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BitMap() {
  void * jresult ;
  BitMap *result = 0 ;
  
  result = (BitMap *)memnew(BitMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxShape_set_extents(void * jarg1, void * jarg2) {
  BoxShape *arg1 = (BoxShape *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (BoxShape *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  BoxShape_set_extents(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoxShape_get_extents(void * jarg1) {
  void * jresult ;
  BoxShape *arg1 = (BoxShape *) 0 ;
  Vector3 result;
  
  arg1 = (BoxShape *)jarg1; 
  result = BoxShape_get_extents(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoxShape() {
  void * jresult ;
  BoxShape *result = 0 ;
  
  result = (BoxShape *)memnew(BoxShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CSharpScript() {
  void * jresult ;
  CSharpScript *result = 0 ;
  
  result = (CSharpScript *)memnew(CSharpScript());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_set_shader(void * jarg1, void * jarg2) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  SwigValueWrapper< Ref< Shader > > arg2 ;
  Ref< Shader > *argp2 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  argp2 = (Ref< Shader > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shader >", 0);
    return ;
  }
  arg2 = *argp2; 
  CanvasItemMaterial_set_shader(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItemMaterial_get_shader(void * jarg1) {
  void * jresult ;
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  SwigValueWrapper< Ref< Shader > > result;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  result = CanvasItemMaterial_get_shader(arg1);
  jresult = memnew(Ref< Shader >((const Ref< Shader > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_set_shader_param(void * jarg1, char * jarg2, void * jarg3) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  CanvasItemMaterial_set_shader_param(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_get_shader_param(void * jarg1, char * jarg2) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  CanvasItemMaterial_get_shader_param(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItemMaterial_set_shading_mode(void * jarg1, int jarg2) {
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasItemMaterial_set_shading_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasItemMaterial_get_shading_mode(void * jarg1) {
  int jresult ;
  CanvasItemMaterial *arg1 = (CanvasItemMaterial *) 0 ;
  int result;
  
  arg1 = (CanvasItemMaterial *)jarg1; 
  result = (int)CanvasItemMaterial_get_shading_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasItemMaterial() {
  void * jresult ;
  CanvasItemMaterial *result = 0 ;
  
  result = (CanvasItemMaterial *)memnew(CanvasItemMaterial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasItemShader() {
  void * jresult ;
  CanvasItemShader *result = 0 ;
  
  result = (CanvasItemShader *)memnew(CanvasItemShader());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasItemShaderGraph() {
  void * jresult ;
  CanvasItemShaderGraph *result = 0 ;
  
  result = (CanvasItemShaderGraph *)memnew(CanvasItemShaderGraph());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape_set_radius(void * jarg1, float jarg2) {
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape_get_radius(void * jarg1) {
  float jresult ;
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float result;
  
  arg1 = (CapsuleShape *)jarg1; 
  result = (float)CapsuleShape_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape_set_height(void * jarg1, float jarg2) {
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape_set_height(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape_get_height(void * jarg1) {
  float jresult ;
  CapsuleShape *arg1 = (CapsuleShape *) 0 ;
  float result;
  
  arg1 = (CapsuleShape *)jarg1; 
  result = (float)CapsuleShape_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CapsuleShape() {
  void * jresult ;
  CapsuleShape *result = 0 ;
  
  result = (CapsuleShape *)memnew(CapsuleShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape2D_set_radius(void * jarg1, float jarg2) {
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape2D_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape2D_get_radius(void * jarg1) {
  float jresult ;
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float result;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  result = (float)CapsuleShape2D_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CapsuleShape2D_set_height(void * jarg1, float jarg2) {
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  CapsuleShape2D_set_height(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CapsuleShape2D_get_height(void * jarg1) {
  float jresult ;
  CapsuleShape2D *arg1 = (CapsuleShape2D *) 0 ;
  float result;
  
  arg1 = (CapsuleShape2D *)jarg1; 
  result = (float)CapsuleShape2D_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CapsuleShape2D() {
  void * jresult ;
  CapsuleShape2D *result = 0 ;
  
  result = (CapsuleShape2D *)memnew(CapsuleShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CircleShape2D_set_radius(void * jarg1, float jarg2) {
  CircleShape2D *arg1 = (CircleShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (CircleShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  CircleShape2D_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CircleShape2D_get_radius(void * jarg1) {
  float jresult ;
  CircleShape2D *arg1 = (CircleShape2D *) 0 ;
  float result;
  
  arg1 = (CircleShape2D *)jarg1; 
  result = (float)CircleShape2D_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CircleShape2D() {
  void * jresult ;
  CircleShape2D *result = 0 ;
  
  result = (CircleShape2D *)memnew(CircleShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_add_point(void * jarg1, float jarg2, void * jarg3) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  float arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorRamp_add_point(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_remove_point(void * jarg1, int jarg2) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  ColorRamp_remove_point(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_offset(void * jarg1, int jarg2, float jarg3) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  ColorRamp_set_offset(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColorRamp_get_offset(void * jarg1, int jarg2) {
  float jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)ColorRamp_get_offset(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_color(void * jarg1, int jarg2, void * jarg3) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorRamp_set_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_get_color(void * jarg1, int jarg2) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (int)jarg2; 
  result = ColorRamp_get_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_interpolate(void * jarg1, float jarg2) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  float arg2 ;
  Color result;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (float)jarg2; 
  result = ColorRamp_interpolate(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorRamp_get_point_count(void * jarg1) {
  int jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  int result;
  
  arg1 = (ColorRamp *)jarg1; 
  result = (int)ColorRamp_get_point_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_offsets(void * jarg1, void * jarg2) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  RealArray *arg2 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (RealArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  ColorRamp_set_offsets(arg1,(RealArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_get_offsets(void * jarg1) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  RealArray result;
  
  arg1 = (ColorRamp *)jarg1; 
  result = ColorRamp_get_offsets(arg1);
  jresult = memnew(RealArray((const RealArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorRamp_set_colors(void * jarg1, void * jarg2) {
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  ColorArray *arg2 = 0 ;
  
  arg1 = (ColorRamp *)jarg1; 
  arg2 = (ColorArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  ColorRamp_set_colors(arg1,(ColorArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorRamp_get_colors(void * jarg1) {
  void * jresult ;
  ColorRamp *arg1 = (ColorRamp *) 0 ;
  ColorArray result;
  
  arg1 = (ColorRamp *)jarg1; 
  result = ColorRamp_get_colors(arg1);
  jresult = memnew(ColorArray((const ColorArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorRamp() {
  void * jresult ;
  ColorRamp *result = 0 ;
  
  result = (ColorRamp *)memnew(ColorRamp());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConcavePolygonShape_set_faces(void * jarg1, void * jarg2) {
  ConcavePolygonShape *arg1 = (ConcavePolygonShape *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (ConcavePolygonShape *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  ConcavePolygonShape_set_faces(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConcavePolygonShape_get_faces(void * jarg1) {
  void * jresult ;
  ConcavePolygonShape *arg1 = (ConcavePolygonShape *) 0 ;
  Vector3Array result;
  
  arg1 = (ConcavePolygonShape *)jarg1; 
  result = ConcavePolygonShape_get_faces(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConcavePolygonShape() {
  void * jresult ;
  ConcavePolygonShape *result = 0 ;
  
  result = (ConcavePolygonShape *)memnew(ConcavePolygonShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConcavePolygonShape2D_set_segments(void * jarg1, void * jarg2) {
  ConcavePolygonShape2D *arg1 = (ConcavePolygonShape2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (ConcavePolygonShape2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ConcavePolygonShape2D_set_segments(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConcavePolygonShape2D_get_segments(void * jarg1) {
  void * jresult ;
  ConcavePolygonShape2D *arg1 = (ConcavePolygonShape2D *) 0 ;
  Vector2Array result;
  
  arg1 = (ConcavePolygonShape2D *)jarg1; 
  result = ConcavePolygonShape2D_get_segments(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConcavePolygonShape2D() {
  void * jresult ;
  ConcavePolygonShape2D *result = 0 ;
  
  result = (ConcavePolygonShape2D *)memnew(ConcavePolygonShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfigFile_set_value(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ConfigFile_set_value(arg1,(String const &)*arg2,(String const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_value__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = ConfigFile_get_value__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(Variant const &)*arg4);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_value__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Variant result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = ConfigFile_get_value__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfigFile_has_section(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)ConfigFile_has_section(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConfigFile_has_section_key(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)ConfigFile_has_section_key(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_sections(void * jarg1) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  StringArray result;
  
  arg1 = (ConfigFile *)jarg1; 
  result = ConfigFile_get_sections(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfigFile_get_section_keys(void * jarg1, char * jarg2) {
  void * jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  StringArray result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = ConfigFile_get_section_keys(arg1,(String const &)*arg2);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConfigFile_load(void * jarg1, char * jarg2) {
  int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)ConfigFile_load(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConfigFile_save(void * jarg1, char * jarg2) {
  int jresult ;
  ConfigFile *arg1 = (ConfigFile *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (ConfigFile *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)ConfigFile_save(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfigFile() {
  void * jresult ;
  ConfigFile *result = 0 ;
  
  result = (ConfigFile *)memnew(ConfigFile());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexPolygonShape_set_points(void * jarg1, void * jarg2) {
  ConvexPolygonShape *arg1 = (ConvexPolygonShape *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (ConvexPolygonShape *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  ConvexPolygonShape_set_points(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexPolygonShape_get_points(void * jarg1) {
  void * jresult ;
  ConvexPolygonShape *arg1 = (ConvexPolygonShape *) 0 ;
  Vector3Array result;
  
  arg1 = (ConvexPolygonShape *)jarg1; 
  result = ConvexPolygonShape_get_points(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexPolygonShape() {
  void * jresult ;
  ConvexPolygonShape *result = 0 ;
  
  result = (ConvexPolygonShape *)memnew(ConvexPolygonShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexPolygonShape2D_set_point_cloud(void * jarg1, void * jarg2) {
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ConvexPolygonShape2D_set_point_cloud(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvexPolygonShape2D_set_points(void * jarg1, void * jarg2) {
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  ConvexPolygonShape2D_set_points(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConvexPolygonShape2D_get_points(void * jarg1) {
  void * jresult ;
  ConvexPolygonShape2D *arg1 = (ConvexPolygonShape2D *) 0 ;
  Vector2Array result;
  
  arg1 = (ConvexPolygonShape2D *)jarg1; 
  result = ConvexPolygonShape2D_get_points(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConvexPolygonShape2D() {
  void * jresult ;
  ConvexPolygonShape2D *result = 0 ;
  
  result = (ConvexPolygonShape2D *)memnew(ConvexPolygonShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_width(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_height(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CubeMap_get_rid(void * jarg1) {
  void * jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  RID result;
  
  arg1 = (CubeMap *)jarg1; 
  result = CubeMap_get_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_flags(void * jarg1, int jarg2) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  CubeMap_set_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_flags(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_side(void * jarg1, int jarg2, void * jarg3) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  Image *arg3 = 0 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Image *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  CubeMap_set_side(arg1,arg2,(Image const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CubeMap_get_side(void * jarg1, int jarg2) {
  void * jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  Image result;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = CubeMap_get_side(arg1,arg2);
  jresult = memnew(Image((const Image &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_storage(void * jarg1, int jarg2) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  int arg2 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (int)jarg2; 
  CubeMap_set_storage(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CubeMap_get_storage(void * jarg1) {
  int jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  int result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (int)CubeMap_get_storage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CubeMap_set_lossy_storage_quality(void * jarg1, float jarg2) {
  CubeMap *arg1 = (CubeMap *) 0 ;
  float arg2 ;
  
  arg1 = (CubeMap *)jarg1; 
  arg2 = (float)jarg2; 
  CubeMap_set_lossy_storage_quality(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CubeMap_get_lossy_storage_quality(void * jarg1) {
  float jresult ;
  CubeMap *arg1 = (CubeMap *) 0 ;
  float result;
  
  arg1 = (CubeMap *)jarg1; 
  result = (float)CubeMap_get_lossy_storage_quality(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CubeMap() {
  void * jresult ;
  CubeMap *result = 0 ;
  
  result = (CubeMap *)memnew(CubeMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Curve2D_get_point_count(void * jarg1) {
  int jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int result;
  
  arg1 = (Curve2D *)jarg1; 
  result = (int)Curve2D_get_point_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_add_point__SWIG_3(void * jarg1, void * jarg2) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_add_point__SWIG_0(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_point_pos(void * jarg1, int jarg2, void * jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_set_point_pos(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_get_point_pos(void * jarg1, int jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_get_point_pos(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_point_in(void * jarg1, int jarg2, void * jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_set_point_in(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_get_point_in(void * jarg1, int jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_get_point_in(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_point_out(void * jarg1, int jarg2, void * jarg3) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Curve2D_set_point_out(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_get_point_out(void * jarg1, int jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_get_point_out(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_remove_point(void * jarg1, int jarg2) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  Curve2D_remove_point(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_interpolate(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve2D_interpolate(arg1,arg2,arg3);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_interpolatef(void * jarg1, float jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve2D_interpolatef(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve2D_set_bake_interval(void * jarg1, float jarg2) {
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  Curve2D_set_bake_interval(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve2D_get_bake_interval(void * jarg1) {
  float jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float result;
  
  arg1 = (Curve2D *)jarg1; 
  result = (float)Curve2D_get_bake_interval(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve2D_get_baked_length(void * jarg1) {
  float jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float result;
  
  arg1 = (Curve2D *)jarg1; 
  result = (float)Curve2D_get_baked_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_interpolate_baked__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  bool arg3 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = Curve2D_interpolate_baked__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_interpolate_baked__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  float arg2 ;
  Vector2 result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve2D_interpolate_baked__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_get_baked_points(void * jarg1) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  result = Curve2D_get_baked_points(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_tesselate__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve2D_tesselate__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_tesselate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  int arg2 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve2D_tesselate__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve2D_tesselate__SWIG_2(void * jarg1) {
  void * jresult ;
  Curve2D *arg1 = (Curve2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Curve2D *)jarg1; 
  result = Curve2D_tesselate__SWIG_0(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Curve2D() {
  void * jresult ;
  Curve2D *result = 0 ;
  
  result = (Curve2D *)memnew(Curve2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Curve3D_get_point_count(void * jarg1) {
  int jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int result;
  
  arg1 = (Curve3D *)jarg1; 
  result = (int)Curve3D_get_point_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_add_point__SWIG_3(void * jarg1, void * jarg2) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_add_point__SWIG_0(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_pos(void * jarg1, int jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_set_point_pos(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_point_pos(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_get_point_pos(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_tilt(void * jarg1, int jarg2, float jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Curve3D_set_point_tilt(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve3D_get_point_tilt(void * jarg1, int jarg2) {
  float jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Curve3D_get_point_tilt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_in(void * jarg1, int jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_set_point_in(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_point_in(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_get_point_in(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_point_out(void * jarg1, int jarg2, void * jarg3) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Curve3D_set_point_out(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_point_out(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_get_point_out(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_remove_point(void * jarg1, int jarg2) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  Curve3D_remove_point(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolate(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve3D_interpolate(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolatef(void * jarg1, float jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve3D_interpolatef(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Curve3D_set_bake_interval(void * jarg1, float jarg2) {
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  Curve3D_set_bake_interval(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve3D_get_bake_interval(void * jarg1) {
  float jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float result;
  
  arg1 = (Curve3D *)jarg1; 
  result = (float)Curve3D_get_bake_interval(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Curve3D_get_baked_length(void * jarg1) {
  float jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float result;
  
  arg1 = (Curve3D *)jarg1; 
  result = (float)Curve3D_get_baked_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolate_baked__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  bool arg3 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = Curve3D_interpolate_baked__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_interpolate_baked__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  float arg2 ;
  Vector3 result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (float)jarg2; 
  result = Curve3D_interpolate_baked__SWIG_0(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_baked_points(void * jarg1) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  result = Curve3D_get_baked_points(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_get_baked_tilts(void * jarg1) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  RealArray result;
  
  arg1 = (Curve3D *)jarg1; 
  result = Curve3D_get_baked_tilts(arg1);
  jresult = memnew(RealArray((const RealArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_tesselate__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  float arg3 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = Curve3D_tesselate__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_tesselate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  int arg2 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Curve3D_tesselate__SWIG_0(arg1,arg2);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Curve3D_tesselate__SWIG_2(void * jarg1) {
  void * jresult ;
  Curve3D *arg1 = (Curve3D *) 0 ;
  Vector3Array result;
  
  arg1 = (Curve3D *)jarg1; 
  result = Curve3D_tesselate__SWIG_0(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Curve3D() {
  void * jresult ;
  Curve3D *result = 0 ;
  
  result = (Curve3D *)memnew(Curve3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DynamicFontData() {
  void * jresult ;
  DynamicFontData *result = 0 ;
  
  result = (DynamicFontData *)memnew(DynamicFontData());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorExportPlugin_custom_export(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  EditorExportPlugin *arg1 = (EditorExportPlugin *) 0 ;
  String *arg2 = 0 ;
  EditorExportPlatform *arg3 = (EditorExportPlatform *) 0 ;
  Variant result;
  
  arg1 = (EditorExportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (EditorExportPlatform *)jarg3; 
  result = EditorExportPlugin_custom_export(arg1,(String const &)*arg2,arg3);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorExportPlugin() {
  void * jresult ;
  EditorExportPlugin *result = 0 ;
  
  result = (EditorExportPlugin *)memnew(EditorExportPlugin());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorImportPlugin_can_reimport_multiple_files(void * jarg1) {
  unsigned int jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  bool result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  result = (bool)EditorImportPlugin_can_reimport_multiple_files(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_custom_export(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  EditorExportPlatform *arg3 = (EditorExportPlatform *) 0 ;
  RawArray result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (EditorExportPlatform *)jarg3; 
  result = EditorImportPlugin_custom_export(arg1,(String const &)*arg2,arg3);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_get_name(void * jarg1) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  result = EditorImportPlugin_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_get_visible_name(void * jarg1) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  result = EditorImportPlugin_get_visible_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorImportPlugin_import(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< ResourceImportMetadata > > arg3 ;
  Ref< ResourceImportMetadata > *argp3 ;
  int result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< ResourceImportMetadata > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< ResourceImportMetadata >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)EditorImportPlugin_import(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorImportPlugin_import_dialog(void * jarg1, char * jarg2) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorImportPlugin_import_dialog(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorImportPlugin_import_from_drop(void * jarg1, void * jarg2, char * jarg3) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  StringArray *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  EditorImportPlugin_import_from_drop(arg1,(StringArray const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorImportPlugin_reimport_multiple_files(void * jarg1, void * jarg2) {
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  EditorImportPlugin_reimport_multiple_files(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_validate_source_path(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = EditorImportPlugin_validate_source_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorImportPlugin_expand_source_path(void * jarg1, char * jarg2) {
  void * jresult ;
  EditorImportPlugin *arg1 = (EditorImportPlugin *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (EditorImportPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = EditorImportPlugin_expand_source_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorImportPlugin() {
  void * jresult ;
  EditorImportPlugin *result = 0 ;
  
  result = (EditorImportPlugin *)memnew(EditorImportPlugin());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorScenePostImport_post_import(void * jarg1, void * jarg2) {
  EditorScenePostImport *arg1 = (EditorScenePostImport *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorScenePostImport *)jarg1; 
  arg2 = (Object *)jarg2; 
  EditorScenePostImport_post_import(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorScenePostImport() {
  void * jresult ;
  EditorScenePostImport *result = 0 ;
  
  result = (EditorScenePostImport *)memnew(EditorScenePostImport());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorScript__run(void * jarg1) {
  EditorScript *arg1 = (EditorScript *) 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  EditorScript__run(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorScript_add_root_node(void * jarg1, void * jarg2) {
  EditorScript *arg1 = (EditorScript *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  arg2 = (Object *)jarg2; 
  EditorScript_add_root_node(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorScript_get_scene(void * jarg1) {
  void * jresult ;
  EditorScript *arg1 = (EditorScript *) 0 ;
  Object *result = 0 ;
  
  arg1 = (EditorScript *)jarg1; 
  result = (Object *)EditorScript_get_scene(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorScript() {
  void * jresult ;
  EditorScript *result = 0 ;
  
  result = (EditorScript *)memnew(EditorScript());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSelection_clear(void * jarg1) {
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  
  arg1 = (EditorSelection *)jarg1; 
  EditorSelection_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSelection_add_node(void * jarg1, void * jarg2) {
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (EditorSelection *)jarg1; 
  arg2 = (Node *)jarg2; 
  EditorSelection_add_node(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSelection_remove_node(void * jarg1, void * jarg2) {
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (EditorSelection *)jarg1; 
  arg2 = (Node *)jarg2; 
  EditorSelection_remove_node(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSelection_get_selected_nodes(void * jarg1) {
  void * jresult ;
  EditorSelection *arg1 = (EditorSelection *) 0 ;
  Array result;
  
  arg1 = (EditorSelection *)jarg1; 
  result = EditorSelection_get_selected_nodes(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorSelection() {
  void * jresult ;
  EditorSelection *result = 0 ;
  
  result = (EditorSelection *)memnew(EditorSelection());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSettings_erase(void * jarg1, char * jarg2) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorSettings_erase(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_settings_path(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  String result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_settings_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_project_settings_path(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  String result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_project_settings_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSettings_set_favorite_dirs(void * jarg1, void * jarg2) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  EditorSettings_set_favorite_dirs(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_favorite_dirs(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_favorite_dirs(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSettings_set_recent_dirs(void * jarg1, void * jarg2) {
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray *arg2 = 0 ;
  
  arg1 = (EditorSettings *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  EditorSettings_set_recent_dirs(arg1,(StringArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSettings_get_recent_dirs(void * jarg1) {
  void * jresult ;
  EditorSettings *arg1 = (EditorSettings *) 0 ;
  StringArray result;
  
  arg1 = (EditorSettings *)jarg1; 
  result = EditorSettings_get_recent_dirs(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorSettings() {
  void * jresult ;
  EditorSettings *result = 0 ;
  
  result = (EditorSettings *)memnew(EditorSettings());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_commit_handle(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  EditorSpatialGizmo_commit_handle(arg1,arg2,(Variant const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSpatialGizmo_get_handle_name(void * jarg1, int jarg2) {
  void * jresult ;
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  result = EditorSpatialGizmo_get_handle_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorSpatialGizmo_get_handle_value(void * jarg1, int jarg2) {
  void * jresult ;
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  Variant result;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  result = EditorSpatialGizmo_get_handle_value(arg1,arg2);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_redraw(void * jarg1) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  EditorSpatialGizmo_redraw(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_set_handle(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  int arg2 ;
  Camera *arg3 = (Camera *) 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Camera *)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_set_handle(arg1,arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_lines__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  SwigValueWrapper< Ref< Material > > arg3 ;
  bool arg4 ;
  Ref< Material > *argp3 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  argp3 = (Ref< Material > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  EditorSpatialGizmo_add_lines__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_lines__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  SwigValueWrapper< Ref< Material > > arg3 ;
  Ref< Material > *argp3 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  argp3 = (Ref< Material > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg3 = *argp3; 
  EditorSpatialGizmo_add_lines__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_mesh__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  SwigValueWrapper< Ref< Mesh > > arg2 ;
  bool arg3 ;
  RID *arg4 = 0 ;
  Ref< Mesh > *argp2 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  argp2 = (Ref< Mesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (RID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_add_mesh__SWIG_0(arg1,arg2,arg3,(RID const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_mesh__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  SwigValueWrapper< Ref< Mesh > > arg2 ;
  bool arg3 ;
  Ref< Mesh > *argp2 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  argp2 = (Ref< Mesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  EditorSpatialGizmo_add_mesh__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_mesh__SWIG_2(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  SwigValueWrapper< Ref< Mesh > > arg2 ;
  Ref< Mesh > *argp2 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  argp2 = (Ref< Mesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return ;
  }
  arg2 = *argp2; 
  EditorSpatialGizmo_add_mesh__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_collision_segments(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_add_collision_segments(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_collision_triangles(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  TriangleMesh *arg2 = (TriangleMesh *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (TriangleMesh *)jarg2; 
  EditorSpatialGizmo_add_collision_triangles(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  SwigValueWrapper< Ref< Material > > arg2 ;
  float arg3 ;
  Ref< Material > *argp2 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  argp2 = (Ref< Material > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_unscaled_billboard__SWIG_1(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  SwigValueWrapper< Ref< Material > > arg2 ;
  Ref< Material > *argp2 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  argp2 = (Ref< Material > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg2 = *argp2; 
  EditorSpatialGizmo_add_unscaled_billboard__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_handles__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  EditorSpatialGizmo_add_handles__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_handles__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  EditorSpatialGizmo_add_handles__SWIG_0(arg1,(Vector3Array const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_add_handles__SWIG_2(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  EditorSpatialGizmo_add_handles__SWIG_0(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorSpatialGizmo_set_spatial_node(void * jarg1, void * jarg2) {
  EditorSpatialGizmo *arg1 = (EditorSpatialGizmo *) 0 ;
  Spatial *arg2 = (Spatial *) 0 ;
  
  arg1 = (EditorSpatialGizmo *)jarg1; 
  arg2 = (Spatial *)jarg2; 
  EditorSpatialGizmo_set_spatial_node(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorSpatialGizmo() {
  void * jresult ;
  EditorSpatialGizmo *result = 0 ;
  
  result = (EditorSpatialGizmo *)memnew(EditorSpatialGizmo());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_set_background(void * jarg1, int jarg2) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  Environment_set_background(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Environment_get_background(void * jarg1) {
  int jresult ;
  Environment *arg1 = (Environment *) 0 ;
  int result;
  
  arg1 = (Environment *)jarg1; 
  result = (int)Environment_get_background(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_set_background_param(void * jarg1, int jarg2, void * jarg3) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Environment_set_background_param(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_get_background_param(void * jarg1, int jarg2) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  Environment_get_background_param(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_set_enable_fx(void * jarg1, int jarg2, unsigned int jarg3) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Environment_set_enable_fx(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Environment_is_fx_enabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Environment_is_fx_enabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_fx_set_param(void * jarg1, int jarg2, void * jarg3) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Environment_fx_set_param(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Environment_fx_get_param(void * jarg1, int jarg2) {
  Environment *arg1 = (Environment *) 0 ;
  int arg2 ;
  
  arg1 = (Environment *)jarg1; 
  arg2 = (int)jarg2; 
  Environment_fx_get_param(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Environment() {
  void * jresult ;
  Environment *result = 0 ;
  
  result = (Environment *)memnew(Environment());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventStreamChibi() {
  void * jresult ;
  EventStreamChibi *result = 0 ;
  
  result = (EventStreamChibi *)memnew(EventStreamChibi());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Font_draw__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5, int jarg6) {
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  Font_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Font_draw__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Font_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Font_draw__SWIG_2(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  Font_draw__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_get_ascent(void * jarg1) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  result = (float)Font_get_ascent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_get_descent(void * jarg1) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  result = (float)Font_get_descent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_get_height(void * jarg1) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  result = (float)Font_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Font_is_distance_field_hint(void * jarg1) {
  unsigned int jresult ;
  Font *arg1 = (Font *) 0 ;
  bool result;
  
  arg1 = (Font *)jarg1; 
  result = (bool)Font_is_distance_field_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Font_get_string_size(void * jarg1, char * jarg2) {
  void * jresult ;
  Font *arg1 = (Font *) 0 ;
  String *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Font *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Font_get_string_size(arg1,(String const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_draw_char__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  Color *arg6 = 0 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return 0;
  } 
  result = (float)Font_draw_char__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,arg5,(Color const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_draw_char__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (float)Font_draw_char__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Font_draw_char__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  float jresult ;
  Font *arg1 = (Font *) 0 ;
  RID *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  int arg4 ;
  float result;
  
  arg1 = (Font *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (float)Font_draw_char__SWIG_0(arg1,(RID const &)*arg2,(Vector2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  Variant *arg10 = 0 ;
  Variant *arg11 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg10 = (Variant *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg11 = (Variant *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9,(Variant const &)*arg10,(Variant const &)*arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  Variant *arg10 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg10 = (Variant *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9,(Variant const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  Variant *arg4 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3,(Variant const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_9(void * jarg1, void * jarg2) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FuncRef_call_func__SWIG_0(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_call_func__SWIG_10(void * jarg1) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  FuncRef_call_func__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_set_instance(void * jarg1, void * jarg2) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  arg2 = (Object *)jarg2; 
  FuncRef_set_instance(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FuncRef_set_function(void * jarg1, char * jarg2) {
  FuncRef *arg1 = (FuncRef *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FuncRef *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FuncRef_set_function(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FuncRef() {
  void * jresult ;
  FuncRef *result = 0 ;
  
  result = (FuncRef *)memnew(FuncRef());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GDFunctionState_resume__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  Variant *arg2 = 0 ;
  Variant result;
  
  arg1 = (GDFunctionState *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = GDFunctionState_resume__SWIG_0(arg1,(Variant const &)*arg2);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GDFunctionState_resume__SWIG_1(void * jarg1) {
  void * jresult ;
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  Variant result;
  
  arg1 = (GDFunctionState *)jarg1; 
  result = GDFunctionState_resume__SWIG_0(arg1);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GDFunctionState_is_valid(void * jarg1) {
  unsigned int jresult ;
  GDFunctionState *arg1 = (GDFunctionState *) 0 ;
  bool result;
  
  arg1 = (GDFunctionState *)jarg1; 
  result = (bool)GDFunctionState_is_valid(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GDScript__new(void * jarg1) {
  GDScript *arg1 = (GDScript *) 0 ;
  
  arg1 = (GDScript *)jarg1; 
  GDScript_new(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GDScript_get_as_byte_code(void * jarg1) {
  void * jresult ;
  GDScript *arg1 = (GDScript *) 0 ;
  RawArray result;
  
  arg1 = (GDScript *)jarg1; 
  result = GDScript_get_as_byte_code(arg1);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GDScript() {
  void * jresult ;
  GDScript *result = 0 ;
  
  result = (GDScript *)memnew(GDScript());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_has(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_has(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Globals_set_order(void * jarg1, char * jarg2, int jarg3) {
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  Globals_set_order(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Globals_get_order(void * jarg1, char * jarg2) {
  int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Globals_get_order(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Globals_set_persisting(void * jarg1, char * jarg2, unsigned int jarg3) {
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  Globals_set_persisting(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_is_persisting(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_is_persisting(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Globals_clear(void * jarg1, char * jarg2) {
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Globals_clear(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_localize_path(void * jarg1, char * jarg2) {
  void * jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Globals_localize_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_globalize_path(void * jarg1, char * jarg2) {
  void * jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Globals_globalize_path(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Globals_save(void * jarg1) {
  int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  int result;
  
  arg1 = (Globals *)jarg1; 
  result = (int)Globals_save(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_has_singleton(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_has_singleton(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_get_singleton(void * jarg1, char * jarg2) {
  void * jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Object *)Globals_get_singleton(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Globals_load_resource_pack(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Globals_load_resource_pack(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Globals_save_custom(void * jarg1, char * jarg2) {
  int jresult ;
  Globals *arg1 = (Globals *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Globals *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Globals_save_custom(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Globals_SingletonGetInstance() {
  void * jresult ;
  Globals *result = 0 ;
  
  result = (Globals *)Globals_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_connect__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (int)HTTPClient_connect__SWIG_0(arg1,(String const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_connect__SWIG_1(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)HTTPClient_connect__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_connect__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)HTTPClient_connect__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_set_connection(void * jarg1, void * jarg2) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > arg2 ;
  Ref< StreamPeer > *argp2 ;
  
  arg1 = (HTTPClient *)jarg1; 
  argp2 = (Ref< StreamPeer > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StreamPeer >", 0);
    return ;
  }
  arg2 = *argp2; 
  HTTPClient_set_connection(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_get_connection(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_get_connection(arg1);
  jresult = memnew(Ref< StreamPeer >((const Ref< StreamPeer > &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_request_raw(void * jarg1, int jarg2, char * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  StringArray *arg4 = 0 ;
  RawArray *arg5 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StringArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg5 = (RawArray *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPClient_request_raw(arg1,arg2,(String const &)*arg3,(StringArray const &)*arg4,(RawArray const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_request__SWIG_0(void * jarg1, int jarg2, char * jarg3, void * jarg4, char * jarg5) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  StringArray *arg4 = 0 ;
  String *arg5 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StringArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  result = (int)HTTPClient_request__SWIG_0(arg1,arg2,(String const &)*arg3,(StringArray const &)*arg4,(String const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_request__SWIG_1(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  StringArray *arg4 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (StringArray *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPClient_request__SWIG_0(arg1,arg2,(String const &)*arg3,(StringArray const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_send_body_text(void * jarg1, char * jarg2) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)HTTPClient_send_body_text(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_send_body_data(void * jarg1, void * jarg2) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPClient_send_body_data(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_close(void * jarg1) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  
  arg1 = (HTTPClient *)jarg1; 
  HTTPClient_close(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPClient_has_response(void * jarg1) {
  unsigned int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (bool)HTTPClient_has_response(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPClient_is_response_chunked(void * jarg1) {
  unsigned int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (bool)HTTPClient_is_response_chunked(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_get_response_code(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_get_response_code(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_get_response_headers(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  StringArray result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_get_response_headers(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_get_response_headers_as_dictionary(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  Dictionary result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_get_response_headers_as_dictionary(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_get_response_body_length(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_get_response_body_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_read_response_body_chunk(void * jarg1) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  RawArray result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = HTTPClient_read_response_body_chunk(arg1);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_set_read_chunk_size(void * jarg1, int jarg2) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int arg2 ;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (int)jarg2; 
  HTTPClient_set_read_chunk_size(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPClient_set_blocking_mode(void * jarg1, unsigned int jarg2) {
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool arg2 ;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  HTTPClient_set_blocking_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPClient_is_blocking_mode_enabled(void * jarg1) {
  unsigned int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  bool result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (bool)HTTPClient_is_blocking_mode_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_get_status(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_get_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPClient_poll(void * jarg1) {
  int jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  int result;
  
  arg1 = (HTTPClient *)jarg1; 
  result = (int)HTTPClient_poll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPClient_query_string_from_dict(void * jarg1, void * jarg2) {
  void * jresult ;
  HTTPClient *arg1 = (HTTPClient *) 0 ;
  Dictionary *arg2 = 0 ;
  String result;
  
  arg1 = (HTTPClient *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return 0;
  } 
  result = HTTPClient_query_string_from_dict(arg1,(Dictionary const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTTPClient() {
  void * jresult ;
  HTTPClient *result = 0 ;
  
  result = (HTTPClient *)memnew(HTTPClient());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_resolve_hostname(void * jarg1, char * jarg2) {
  void * jresult ;
  IP *arg1 = (IP *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (IP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = IP_resolve_hostname(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IP_resolve_hostname_queue_item(void * jarg1, char * jarg2) {
  int jresult ;
  IP *arg1 = (IP *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (IP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)IP_resolve_hostname_queue_item(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IP_get_resolve_item_status(void * jarg1, int jarg2) {
  int jresult ;
  IP *arg1 = (IP *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (IP *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)IP_get_resolve_item_status(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_get_resolve_item_address(void * jarg1, int jarg2) {
  void * jresult ;
  IP *arg1 = (IP *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (IP *)jarg1; 
  arg2 = (int)jarg2; 
  result = IP_get_resolve_item_address(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IP_erase_resolve_item(void * jarg1, int jarg2) {
  IP *arg1 = (IP *) 0 ;
  int arg2 ;
  
  arg1 = (IP *)jarg1; 
  arg2 = (int)jarg2; 
  IP_erase_resolve_item(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_get_local_addresses(void * jarg1) {
  void * jresult ;
  IP *arg1 = (IP *) 0 ;
  Array result;
  
  arg1 = (IP *)jarg1; 
  result = IP_get_local_addresses(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IP_SingletonGetInstance() {
  void * jresult ;
  IP *result = 0 ;
  
  result = (IP *)IP_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  ImageTexture_create__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ImageTexture_create__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create_from_image__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  ImageTexture_create_from_image__SWIG_0(arg1,(Image const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_create_from_image__SWIG_1(void * jarg1, void * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  ImageTexture_create_from_image__SWIG_0(arg1,(Image const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageTexture_get_format(void * jarg1) {
  int jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = (int)ImageTexture_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_load(void * jarg1, char * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ImageTexture_load(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_data(void * jarg1, void * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Image *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Image const & type is null", 0);
    return ;
  } 
  ImageTexture_set_data(arg1,(Image const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImageTexture_get_data(void * jarg1) {
  void * jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Image result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = ImageTexture_get_data(arg1);
  jresult = memnew(Image((const Image &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_storage(void * jarg1, int jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int arg2 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (int)jarg2; 
  ImageTexture_set_storage(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImageTexture_get_storage(void * jarg1) {
  int jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  int result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = (int)ImageTexture_get_storage(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_lossy_storage_quality(void * jarg1, float jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  float arg2 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (float)jarg2; 
  ImageTexture_set_lossy_storage_quality(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImageTexture_get_lossy_storage_quality(void * jarg1) {
  float jresult ;
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  float result;
  
  arg1 = (ImageTexture *)jarg1; 
  result = (float)ImageTexture_get_lossy_storage_quality(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_fix_alpha_edges(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_fix_alpha_edges(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_premultiply_alpha(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_premultiply_alpha(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_normal_to_xy(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_normal_to_xy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_shrink_x2_and_keep_size(void * jarg1) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  ImageTexture_shrink_x2_and_keep_size(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImageTexture_set_size_override(void * jarg1, void * jarg2) {
  ImageTexture *arg1 = (ImageTexture *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ImageTexture *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ImageTexture_set_size_override(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImageTexture() {
  void * jresult ;
  ImageTexture *result = 0 ;
  
  result = (ImageTexture *)memnew(ImageTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_key_pressed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Input_is_key_pressed(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_mouse_button_pressed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Input_is_mouse_button_pressed(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_joy_button_pressed(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)Input_is_joy_button_pressed(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_action_pressed(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Input_is_action_pressed(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_add_joy_mapping__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  Input_add_joy_mapping__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_add_joy_mapping__SWIG_1(void * jarg1, char * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_add_joy_mapping__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_remove_joy_mapping(void * jarg1, char * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_remove_joy_mapping(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Input_is_joy_known(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Input_is_joy_known(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Input_get_joy_axis(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)Input_get_joy_axis(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_joy_name(void * jarg1, int jarg2) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = Input_get_joy_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_joy_guid(void * jarg1, int jarg2) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  result = Input_get_joy_guid(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_accelerometer(void * jarg1) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  Vector3 result;
  
  arg1 = (Input *)jarg1; 
  result = Input_get_accelerometer(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_magnetometer(void * jarg1) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  Vector3 result;
  
  arg1 = (Input *)jarg1; 
  result = Input_get_magnetometer(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_get_mouse_speed(void * jarg1) {
  void * jresult ;
  Input *arg1 = (Input *) 0 ;
  Vector2 result;
  
  arg1 = (Input *)jarg1; 
  result = Input_get_mouse_speed(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Input_get_mouse_button_mask(void * jarg1) {
  int jresult ;
  Input *arg1 = (Input *) 0 ;
  int result;
  
  arg1 = (Input *)jarg1; 
  result = (int)Input_get_mouse_button_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_set_mouse_mode(void * jarg1, int jarg2) {
  Input *arg1 = (Input *) 0 ;
  int arg2 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (int)jarg2; 
  Input_set_mouse_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Input_get_mouse_mode(void * jarg1) {
  int jresult ;
  Input *arg1 = (Input *) 0 ;
  int result;
  
  arg1 = (Input *)jarg1; 
  result = (int)Input_get_mouse_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_warp_mouse_pos(void * jarg1, void * jarg2) {
  Input *arg1 = (Input *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Input_warp_mouse_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_action_press(void * jarg1, char * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_action_press(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_action_release(void * jarg1, char * jarg2) {
  Input *arg1 = (Input *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Input *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Input_action_release(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_set_custom_mouse_cursor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Input *arg1 = (Input *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Vector2 *arg3 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (Input *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Input_set_custom_mouse_cursor__SWIG_0(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Input_set_custom_mouse_cursor__SWIG_1(void * jarg1, void * jarg2) {
  Input *arg1 = (Input *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (Input *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  Input_set_custom_mouse_cursor__SWIG_0(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Input_SingletonGetInstance() {
  void * jresult ;
  Input *result = 0 ;
  
  result = (Input *)Input_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputMap_has_action(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)InputMap_has_action(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InputMap_get_action_id(void * jarg1, char * jarg2) {
  int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)InputMap_get_action_id(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_get_action_from_id(void * jarg1, int jarg2) {
  void * jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (InputMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = InputMap_get_action_from_id(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_add_action(void * jarg1, char * jarg2) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  InputMap_add_action(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_erase_action(void * jarg1, char * jarg2) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  InputMap_erase_action(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_action_add_event(void * jarg1, char * jarg2, void * jarg3) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  InputEvent *arg3 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  InputMap_action_add_event(arg1,(String const &)*arg2,(InputEvent const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputMap_action_has_event(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  InputEvent *arg3 = 0 ;
  bool result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)InputMap_action_has_event(arg1,(String const &)*arg2,(InputEvent const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_action_erase_event(void * jarg1, char * jarg2, void * jarg3) {
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  InputEvent *arg3 = 0 ;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  InputMap_action_erase_event(arg1,(String const &)*arg2,(InputEvent const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_get_action_list(void * jarg1, char * jarg2) {
  void * jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  String *arg2 = 0 ;
  Array result;
  
  arg1 = (InputMap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = InputMap_get_action_list(arg1,(String const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputMap_event_is_action(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  InputMap *arg1 = (InputMap *) 0 ;
  InputEvent *arg2 = 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (InputMap *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)InputMap_event_is_action(arg1,(InputEvent const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InputMap_load_from_globals(void * jarg1) {
  InputMap *arg1 = (InputMap *) 0 ;
  
  arg1 = (InputMap *)jarg1; 
  InputMap_load_from_globals(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InputMap_SingletonGetInstance() {
  void * jresult ;
  InputMap *result = 0 ;
  
  result = (InputMap *)InputMap_SingletonGetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LargeTexture_add_piece(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  Vector2 *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  int result;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)LargeTexture_add_piece(arg1,(Vector2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_set_piece_offset(void * jarg1, int jarg2, void * jarg3) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  LargeTexture_set_piece_offset(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_set_piece_texture(void * jarg1, int jarg2, void * jarg3) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  LargeTexture_set_piece_texture(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_set_size(void * jarg1, void * jarg2) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  LargeTexture_set_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTexture_clear(void * jarg1) {
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  
  arg1 = (LargeTexture *)jarg1; 
  LargeTexture_clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LargeTexture_get_piece_count(void * jarg1) {
  int jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int result;
  
  arg1 = (LargeTexture *)jarg1; 
  result = (int)LargeTexture_get_piece_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LargeTexture_get_piece_offset(void * jarg1, int jarg2) {
  void * jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = LargeTexture_get_piece_offset(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LargeTexture_get_piece_texture(void * jarg1, int jarg2) {
  void * jresult ;
  LargeTexture *arg1 = (LargeTexture *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (LargeTexture *)jarg1; 
  arg2 = (int)jarg2; 
  result = LargeTexture_get_piece_texture(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LargeTexture() {
  void * jresult ;
  LargeTexture *result = 0 ;
  
  result = (LargeTexture *)memnew(LargeTexture());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineShape2D_set_normal(void * jarg1, void * jarg2) {
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (LineShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  LineShape2D_set_normal(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineShape2D_get_normal(void * jarg1) {
  void * jresult ;
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (LineShape2D *)jarg1; 
  result = LineShape2D_get_normal(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineShape2D_set_d(void * jarg1, float jarg2) {
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (LineShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  LineShape2D_set_d(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_LineShape2D_get_d(void * jarg1) {
  float jresult ;
  LineShape2D *arg1 = (LineShape2D *) 0 ;
  float result;
  
  arg1 = (LineShape2D *)jarg1; 
  result = (float)LineShape2D_get_d(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LineShape2D() {
  void * jresult ;
  LineShape2D *result = 0 ;
  
  result = (LineShape2D *)memnew(LineShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__drop_files(void * jarg1, void * jarg2, int jarg3) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  StringArray *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (StringArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  MainLoop__drop_files(arg1,(StringArray const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__finalize(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop__finalize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__idle(void * jarg1, float jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  MainLoop__idle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__initialize(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop__initialize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__input_event(void * jarg1, void * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  MainLoop__input_event(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__input_text(void * jarg1, char * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  MainLoop__input_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop__iteration(void * jarg1, float jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  MainLoop__iteration(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_input_event(void * jarg1, void * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  MainLoop_input_event(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_input_text(void * jarg1, char * jarg2) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  MainLoop_input_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_init(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop_init(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MainLoop_iteration(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)MainLoop_iteration(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MainLoop_idle(void * jarg1, float jarg2) {
  unsigned int jresult ;
  MainLoop *arg1 = (MainLoop *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (MainLoop *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)MainLoop_idle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainLoop_finish(void * jarg1) {
  MainLoop *arg1 = (MainLoop *) 0 ;
  
  arg1 = (MainLoop *)jarg1; 
  MainLoop_finish(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MainLoop() {
  void * jresult ;
  MainLoop *result = 0 ;
  
  result = (MainLoop *)memnew(MainLoop());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Material_set_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Material_get_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Material_get_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_blend_mode(void * jarg1, int jarg2) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  Material_set_blend_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_get_blend_mode(void * jarg1) {
  int jresult ;
  Material *arg1 = (Material *) 0 ;
  int result;
  
  arg1 = (Material *)jarg1; 
  result = (int)Material_get_blend_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_line_width(void * jarg1, float jarg2) {
  Material *arg1 = (Material *) 0 ;
  float arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (float)jarg2; 
  Material_set_line_width(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Material_get_line_width(void * jarg1) {
  float jresult ;
  Material *arg1 = (Material *) 0 ;
  float result;
  
  arg1 = (Material *)jarg1; 
  result = (float)Material_get_line_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Material_set_depth_draw_mode(void * jarg1, int jarg2) {
  Material *arg1 = (Material *) 0 ;
  int arg2 ;
  
  arg1 = (Material *)jarg1; 
  arg2 = (int)jarg2; 
  Material_set_depth_draw_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Material_get_depth_draw_mode(void * jarg1) {
  int jresult ;
  Material *arg1 = (Material *) 0 ;
  int result;
  
  arg1 = (Material *)jarg1; 
  result = (int)Material_get_depth_draw_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialShader() {
  void * jresult ;
  MaterialShader *result = 0 ;
  
  result = (MaterialShader *)memnew(MaterialShader());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MaterialShaderGraph() {
  void * jresult ;
  MaterialShaderGraph *result = 0 ;
  
  result = (MaterialShaderGraph *)memnew(MaterialShaderGraph());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_morph_target(void * jarg1, char * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Mesh_add_morph_target(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_get_morph_target_count(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)Mesh_get_morph_target_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_get_morph_target_name(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = Mesh_get_morph_target_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_clear_morph_targets(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  Mesh_clear_morph_targets(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_set_morph_target_mode(void * jarg1, int jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  Mesh_set_morph_target_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_get_morph_target_mode(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)Mesh_get_morph_target_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_surface__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  Array *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  Mesh_add_surface__SWIG_0(arg1,arg2,(Array const &)*arg3,(Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_surface__SWIG_1(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  Array *arg4 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  arg4 = (Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Mesh_add_surface__SWIG_0(arg1,arg2,(Array const &)*arg3,(Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_add_surface__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Array *arg3 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Mesh_add_surface__SWIG_0(arg1,arg2,(Array const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_get_surface_count(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)Mesh_get_surface_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_surface_remove(void * jarg1, int jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  Mesh_surface_remove(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_array_len(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_array_len(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_array_index_len(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_array_index_len(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_format(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_format(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_surface_get_primitive_type(void * jarg1, int jarg2) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Mesh_surface_get_primitive_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_surface_set_material(void * jarg1, int jarg2, void * jarg3) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Material > > arg3 ;
  Ref< Material > *argp3 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Material > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg3 = *argp3; 
  Mesh_surface_set_material(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_surface_get_material(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Material > > result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = Mesh_surface_get_material(arg1,arg2);
  jresult = memnew(Ref< Material >((const Ref< Material > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_surface_set_name(void * jarg1, int jarg2, char * jarg3) {
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Mesh_surface_set_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_surface_get_name(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = Mesh_surface_get_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_center_geometry(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  Mesh_center_geometry(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_regen_normalmaps(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  Mesh_regen_normalmaps(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_set_custom_aabb(void * jarg1, void * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  Mesh_set_custom_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_get_custom_aabb(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  AABB result;
  
  arg1 = (Mesh *)jarg1; 
  result = Mesh_get_custom_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh() {
  void * jresult ;
  Mesh *result = 0 ;
  
  result = (Mesh *)memnew(Mesh());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_clear(void * jarg1) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  MeshDataTool_clear(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_create_from_surface(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Object *arg2 = (Object *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_create_from_surface(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_commit_to_surface(void * jarg1, void * jarg2) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Object *arg2 = (Object *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (int)MeshDataTool_commit_to_surface(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_format(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_format(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_vertex_count(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_vertex_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_edge_count(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_edge_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_face_count(void * jarg1) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (int)MeshDataTool_get_face_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_normal(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_normal(arg1,arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_normal(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_normal(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_tangent(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Plane *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Plane *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_tangent(arg1,arg2,(Plane const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_tangent(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Plane result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_tangent(arg1,arg2);
  jresult = memnew(Plane((const Plane &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_uv(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_uv(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_uv(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_uv(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_uv2(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_uv2(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_uv2(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_uv2(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_color(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_color(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_bones(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (IntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_bones(arg1,arg2,(IntArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_bones(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_bones(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_weights(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  RealArray *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RealArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RealArray const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_weights(arg1,arg2,(RealArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_weights(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  RealArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_weights(arg1,arg2);
  jresult = memnew(RealArray((const RealArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_vertex_meta(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_vertex_meta(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_get_vertex_meta(void * jarg1, int jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  MeshDataTool_get_vertex_meta(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_edges(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_edges(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_vertex_faces(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_vertex_faces(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_edge_vertex(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_get_edge_vertex(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_edge_faces(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_edge_faces(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_edge_meta(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_edge_meta(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_get_edge_meta(void * jarg1, int jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  MeshDataTool_get_edge_meta(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_face_vertex(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_get_face_vertex(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshDataTool_get_face_edge(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)MeshDataTool_get_face_edge(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_face_meta(void * jarg1, int jarg2, void * jarg3) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  MeshDataTool_set_face_meta(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_get_face_meta(void * jarg1, int jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  MeshDataTool_get_face_meta(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_face_normal(void * jarg1, int jarg2) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  int arg2 ;
  Vector3 result;
  
  arg1 = (MeshDataTool *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshDataTool_get_face_normal(arg1,arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshDataTool_set_material(void * jarg1, void * jarg2) {
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  SwigValueWrapper< Ref< Material > > arg2 ;
  Ref< Material > *argp2 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  argp2 = (Ref< Material > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg2 = *argp2; 
  MeshDataTool_set_material(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshDataTool_get_material(void * jarg1) {
  void * jresult ;
  MeshDataTool *arg1 = (MeshDataTool *) 0 ;
  Object *result = 0 ;
  
  arg1 = (MeshDataTool *)jarg1; 
  result = (Object *)MeshDataTool_get_material(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshDataTool() {
  void * jresult ;
  MeshDataTool *result = 0 ;
  
  result = (MeshDataTool *)memnew(MeshDataTool());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_create_item(void * jarg1, int jarg2) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  MeshLibrary_create_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_name(void * jarg1, int jarg2, char * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  MeshLibrary_set_item_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_mesh(void * jarg1, int jarg2, void * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Mesh > > arg3 ;
  Ref< Mesh > *argp3 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Mesh > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return ;
  }
  arg3 = *argp3; 
  MeshLibrary_set_item_mesh(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_navmesh(void * jarg1, int jarg2, void * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< NavigationMesh > > arg3 ;
  Ref< NavigationMesh > *argp3 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< NavigationMesh > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationMesh >", 0);
    return ;
  }
  arg3 = *argp3; 
  MeshLibrary_set_item_navmesh(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_set_item_shape(void * jarg1, int jarg2, void * jarg3) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape > > arg3 ;
  Ref< Shape > *argp3 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Shape > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape >", 0);
    return ;
  }
  arg3 = *argp3; 
  MeshLibrary_set_item_shape(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_name(void * jarg1, int jarg2) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_mesh(void * jarg1, int jarg2) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Mesh > > result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_mesh(arg1,arg2);
  jresult = memnew(Ref< Mesh >((const Ref< Mesh > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_navmesh(void * jarg1, int jarg2) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< NavigationMesh > > result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_navmesh(arg1,arg2);
  jresult = memnew(Ref< NavigationMesh >((const Ref< NavigationMesh > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_shape(void * jarg1, int jarg2) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape > > result;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = MeshLibrary_get_item_shape(arg1,arg2);
  jresult = memnew(Ref< Shape >((const Ref< Shape > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_remove_item(void * jarg1, int jarg2) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int arg2 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  MeshLibrary_remove_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshLibrary_clear(void * jarg1) {
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  
  arg1 = (MeshLibrary *)jarg1; 
  MeshLibrary_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshLibrary_get_item_list(void * jarg1) {
  void * jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  IntArray result;
  
  arg1 = (MeshLibrary *)jarg1; 
  result = MeshLibrary_get_item_list(arg1);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshLibrary_get_last_unused_item_id(void * jarg1) {
  int jresult ;
  MeshLibrary *arg1 = (MeshLibrary *) 0 ;
  int result;
  
  arg1 = (MeshLibrary *)jarg1; 
  result = (int)MeshLibrary_get_last_unused_item_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshLibrary() {
  void * jresult ;
  MeshLibrary *result = 0 ;
  
  result = (MeshLibrary *)memnew(MeshLibrary());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_mesh(void * jarg1, void * jarg2) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  SwigValueWrapper< Ref< Mesh > > arg2 ;
  Ref< Mesh > *argp2 ;
  
  arg1 = (MultiMesh *)jarg1; 
  argp2 = (Ref< Mesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return ;
  }
  arg2 = *argp2; 
  MultiMesh_set_mesh(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_mesh(void * jarg1) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  SwigValueWrapper< Ref< Mesh > > result;
  
  arg1 = (MultiMesh *)jarg1; 
  result = MultiMesh_get_mesh(arg1);
  jresult = memnew(Ref< Mesh >((const Ref< Mesh > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_instance_count(void * jarg1, int jarg2) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  MultiMesh_set_instance_count(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultiMesh_get_instance_count(void * jarg1) {
  int jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int result;
  
  arg1 = (MultiMesh *)jarg1; 
  result = (int)MultiMesh_get_instance_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_instance_transform(void * jarg1, int jarg2, void * jarg3) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  MultiMesh_set_instance_transform(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_instance_transform(void * jarg1, int jarg2) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = MultiMesh_get_instance_transform(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_instance_color(void * jarg1, int jarg2, void * jarg3) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  MultiMesh_set_instance_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_instance_color(void * jarg1, int jarg2) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = MultiMesh_get_instance_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_set_aabb(void * jarg1, void * jarg2) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  MultiMesh_set_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMesh_get_aabb(void * jarg1) {
  void * jresult ;
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  AABB result;
  
  arg1 = (MultiMesh *)jarg1; 
  result = MultiMesh_get_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMesh_generate_aabb(void * jarg1) {
  MultiMesh *arg1 = (MultiMesh *) 0 ;
  
  arg1 = (MultiMesh *)jarg1; 
  MultiMesh_generate_aabb(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultiMesh() {
  void * jresult ;
  MultiMesh *result = 0 ;
  
  result = (MultiMesh *)memnew(MultiMesh());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMesh_set_vertices(void * jarg1, void * jarg2) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  NavigationMesh_set_vertices(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationMesh_get_vertices(void * jarg1) {
  void * jresult ;
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  Vector3Array result;
  
  arg1 = (NavigationMesh *)jarg1; 
  result = NavigationMesh_get_vertices(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMesh_add_polygon(void * jarg1, void * jarg2) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  NavigationMesh_add_polygon(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigationMesh_get_polygon_count(void * jarg1) {
  int jresult ;
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  int result;
  
  arg1 = (NavigationMesh *)jarg1; 
  result = (int)NavigationMesh_get_polygon_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationMesh_get_polygon(void * jarg1, int jarg2) {
  void * jresult ;
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (NavigationMesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = NavigationMesh_get_polygon(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMesh_clear_polygons(void * jarg1) {
  NavigationMesh *arg1 = (NavigationMesh *) 0 ;
  
  arg1 = (NavigationMesh *)jarg1; 
  NavigationMesh_clear_polygons(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationMesh() {
  void * jresult ;
  NavigationMesh *result = 0 ;
  
  result = (NavigationMesh *)memnew(NavigationMesh());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_set_vertices(void * jarg1, void * jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  NavigationPolygon_set_vertices(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygon_get_vertices(void * jarg1) {
  void * jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  result = NavigationPolygon_get_vertices(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_add_polygon(void * jarg1, void * jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  IntArray *arg2 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (IntArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  NavigationPolygon_add_polygon(arg1,(IntArray const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigationPolygon_get_polygon_count(void * jarg1) {
  int jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  result = (int)NavigationPolygon_get_polygon_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygon_get_polygon(void * jarg1, int jarg2) {
  void * jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  IntArray result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  result = NavigationPolygon_get_polygon(arg1,arg2);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_clear_polygons(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  NavigationPolygon_clear_polygons(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_add_outline(void * jarg1, void * jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  NavigationPolygon_add_outline(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_add_outline_at_index(void * jarg1, void * jarg2, int jarg3) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  NavigationPolygon_add_outline_at_index(arg1,(Vector2Array const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NavigationPolygon_get_outline_count(void * jarg1) {
  int jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  result = (int)NavigationPolygon_get_outline_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_set_outline(void * jarg1, int jarg2, void * jarg3) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  Vector2Array *arg3 = 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Vector2Array *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  NavigationPolygon_set_outline(arg1,arg2,(Vector2Array const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygon_get_outline(void * jarg1, int jarg2) {
  void * jresult ;
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  Vector2Array result;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  result = NavigationPolygon_get_outline(arg1,arg2);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_remove_outline(void * jarg1, int jarg2) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  int arg2 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  NavigationPolygon_remove_outline(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_clear_outlines(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  NavigationPolygon_clear_outlines(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygon_make_polygons_from_outlines(void * jarg1) {
  NavigationPolygon *arg1 = (NavigationPolygon *) 0 ;
  
  arg1 = (NavigationPolygon *)jarg1; 
  NavigationPolygon_make_polygons_from_outlines(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationPolygon() {
  void * jresult ;
  NavigationPolygon *result = 0 ;
  
  result = (NavigationPolygon *)memnew(NavigationPolygon());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__enter_tree(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node__enter_tree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__exit_tree(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node__exit_tree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__fixed_process(void * jarg1, float jarg2) {
  Node *arg1 = (Node *) 0 ;
  float arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (float)jarg2; 
  Node__fixed_process(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__input(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Node__input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__process(void * jarg1, float jarg2) {
  Node *arg1 = (Node *) 0 ;
  float arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (float)jarg2; 
  Node__process(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__ready(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node__ready(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__unhandled_input(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Node__unhandled_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node__unhandled_key_input(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Node__unhandled_key_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_name(void * jarg1, char * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_set_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_name(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool arg3 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node_add_child__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_child__SWIG_1(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_add_child__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_child(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_remove_child(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_child_count(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_child_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_children(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Array result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_children(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_child(void * jarg1, int jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Node *)Node_get_child(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_has_node(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (bool)Node_has_node(arg1,(NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node(void * jarg1, void * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (Node *)Node_get_node(arg1,(NodePath const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_parent(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Node_get_parent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_node__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (Node *)Node_find_node__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_node__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (Node *)Node_find_node__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_find_node__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Node *)Node_find_node__SWIG_0(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_has_node_and_resource(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = (bool)Node_has_node_and_resource(arg1,(NodePath const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_node_and_resource(void * jarg1, void * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath *arg2 = 0 ;
  Array result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return 0;
  } 
  result = Node_get_node_and_resource(arg1,(NodePath const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_inside_tree(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_inside_tree(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_a_parent_of(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (bool)Node_is_a_parent_of(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_greater_than(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (bool)Node_is_greater_than(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  NodePath result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_path_to(void * jarg1, void * jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  NodePath result;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = Node_get_path_to(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_to_group__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  Node_add_to_group__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_add_to_group__SWIG_1(void * jarg1, char * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_add_to_group__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_from_group(void * jarg1, char * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_remove_from_group(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_in_group(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)Node_is_in_group(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_move_child(void * jarg1, void * jarg2, int jarg3) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int arg3 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = (int)jarg3; 
  Node_move_child(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_groups(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Array result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_groups(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_raise(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_raise(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_owner(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_set_owner(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_owner(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Node_get_owner(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_remove_and_skip(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_remove_and_skip(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_index(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_tree(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_print_tree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_filename(void * jarg1, char * jarg2) {
  Node *arg1 = (Node *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Node *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Node_set_filename(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_filename(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  String result;
  
  arg1 = (Node *)jarg1; 
  result = Node_get_filename(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_propagate_notification(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  Node_propagate_notification(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_fixed_process(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_fixed_process(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node_get_fixed_process_delta_time(void * jarg1) {
  float jresult ;
  Node *arg1 = (Node *) 0 ;
  float result;
  
  arg1 = (Node *)jarg1; 
  result = (float)Node_get_fixed_process_delta_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_fixed_processing(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_fixed_processing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node_get_process_delta_time(void * jarg1) {
  float jresult ;
  Node *arg1 = (Node *) 0 ;
  float result;
  
  arg1 = (Node *)jarg1; 
  result = (float)Node_get_process_delta_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_input(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_input(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing_input(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_unhandled_input(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process_unhandled_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_unhandled_input(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing_unhandled_input(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_process_unhandled_key_input(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_process_unhandled_key_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_is_processing_unhandled_key_input(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_is_processing_unhandled_key_input(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_pause_mode(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  Node_set_pause_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_pause_mode(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_pause_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_can_process(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_can_process(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_print_stray_nodes(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_print_stray_nodes(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_get_position_in_parent(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int)Node_get_position_in_parent(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_tree(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  SceneTree *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (SceneTree *)Node_get_tree(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_duplicate__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Node *)Node_duplicate__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_duplicate__SWIG_1(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Node *)Node_duplicate__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_replace_by__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  bool arg3 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node_replace_by__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_replace_by__SWIG_1(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (Node *)jarg2; 
  Node_replace_by__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_set_scene_instance_load_placeholder(void * jarg1, unsigned int jarg2) {
  Node *arg1 = (Node *) 0 ;
  bool arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node_set_scene_instance_load_placeholder(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node_get_scene_instance_load_placeholder(void * jarg1) {
  unsigned int jresult ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  arg1 = (Node *)jarg1; 
  result = (bool)Node_get_scene_instance_load_placeholder(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_get_viewport(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (Object *)Node_get_viewport(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_queue_free(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  Node_queue_free(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node() {
  void * jresult ;
  Node *result = 0 ;
  
  result = (Node *)memnew(Node());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OccluderPolygon2D_set_closed(void * jarg1, unsigned int jarg2) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  bool arg2 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  OccluderPolygon2D_set_closed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OccluderPolygon2D_is_closed(void * jarg1) {
  unsigned int jresult ;
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  bool result;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  result = (bool)OccluderPolygon2D_is_closed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OccluderPolygon2D_set_cull_mode(void * jarg1, int jarg2) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  int arg2 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  arg2 = (int)jarg2; 
  OccluderPolygon2D_set_cull_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OccluderPolygon2D_get_cull_mode(void * jarg1) {
  int jresult ;
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  int result;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  result = (int)OccluderPolygon2D_get_cull_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OccluderPolygon2D_set_polygon(void * jarg1, void * jarg2) {
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  OccluderPolygon2D_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OccluderPolygon2D_get_polygon(void * jarg1) {
  void * jresult ;
  OccluderPolygon2D *arg1 = (OccluderPolygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (OccluderPolygon2D *)jarg1; 
  result = OccluderPolygon2D_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OccluderPolygon2D() {
  void * jresult ;
  OccluderPolygon2D *result = 0 ;
  
  result = (OccluderPolygon2D *)memnew(OccluderPolygon2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCKPacker_pck_start(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PCKPacker *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)PCKPacker_pck_start(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCKPacker_add_file(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (PCKPacker *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)PCKPacker_add_file(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PCKPacker_flush(void * jarg1, unsigned int jarg2) {
  int jresult ;
  PCKPacker *arg1 = (PCKPacker *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (PCKPacker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)PCKPacker_flush(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PCKPacker() {
  void * jresult ;
  PCKPacker *result = 0 ;
  
  result = (PCKPacker *)memnew(PCKPacker());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PHashTranslation_generate(void * jarg1, void * jarg2) {
  PHashTranslation *arg1 = (PHashTranslation *) 0 ;
  SwigValueWrapper< Ref< Translation > > arg2 ;
  Ref< Translation > *argp2 ;
  
  arg1 = (PHashTranslation *)jarg1; 
  argp2 = (Ref< Translation > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Translation >", 0);
    return ;
  }
  arg2 = *argp2; 
  PHashTranslation_generate(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PHashTranslation() {
  void * jresult ;
  PHashTranslation *result = 0 ;
  
  result = (PHashTranslation *)memnew(PHashTranslation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedDataContainer_pack(void * jarg1, void * jarg2) {
  int jresult ;
  PackedDataContainer *arg1 = (PackedDataContainer *) 0 ;
  Variant *arg2 = 0 ;
  int result;
  
  arg1 = (PackedDataContainer *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (int)PackedDataContainer_pack(arg1,(Variant const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedDataContainer_size(void * jarg1) {
  int jresult ;
  PackedDataContainer *arg1 = (PackedDataContainer *) 0 ;
  int result;
  
  arg1 = (PackedDataContainer *)jarg1; 
  result = (int)PackedDataContainer_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PackedDataContainer() {
  void * jresult ;
  PackedDataContainer *result = 0 ;
  
  result = (PackedDataContainer *)memnew(PackedDataContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedDataContainerRef_size(void * jarg1) {
  int jresult ;
  PackedDataContainerRef *arg1 = (PackedDataContainerRef *) 0 ;
  int result;
  
  arg1 = (PackedDataContainerRef *)jarg1; 
  result = (int)PackedDataContainerRef_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PackedScene_pack(void * jarg1, void * jarg2) {
  int jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int result;
  
  arg1 = (PackedScene *)jarg1; 
  arg2 = (Node *)jarg2; 
  result = (int)PackedScene_pack(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PackedScene_instance__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  bool arg2 ;
  Node *result = 0 ;
  
  arg1 = (PackedScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Node *)PackedScene_instance__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PackedScene_instance__SWIG_1(void * jarg1) {
  void * jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  Node *result = 0 ;
  
  arg1 = (PackedScene *)jarg1; 
  result = (Node *)PackedScene_instance__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PackedScene_can_instance(void * jarg1) {
  unsigned int jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  bool result;
  
  arg1 = (PackedScene *)jarg1; 
  result = (bool)PackedScene_can_instance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PackedScene_get_state(void * jarg1) {
  void * jresult ;
  PackedScene *arg1 = (PackedScene *) 0 ;
  SwigValueWrapper< Ref< SceneState > > result;
  
  arg1 = (PackedScene *)jarg1; 
  result = PackedScene_get_state(arg1);
  jresult = memnew(Ref< SceneState >((const Ref< SceneState > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PackedScene() {
  void * jresult ;
  PackedScene *result = 0 ;
  
  result = (PackedScene *)memnew(PackedScene());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketPeer_get_var(void * jarg1) {
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  
  arg1 = (PacketPeer *)jarg1; 
  PacketPeer_get_var(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_put_var(void * jarg1, void * jarg2) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  Variant *arg2 = 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (int)PacketPeer_put_var(arg1,(Variant const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketPeer_get_packet(void * jarg1) {
  void * jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  RawArray result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = PacketPeer_get_packet(arg1);
  jresult = memnew(RawArray((const RawArray &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_put_packet(void * jarg1, void * jarg2) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  RawArray *arg2 = 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  arg2 = (RawArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RawArray const & type is null", 0);
    return 0;
  } 
  result = (int)PacketPeer_put_packet(arg1,(RawArray const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_get_packet_error(void * jarg1) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = (int)PacketPeer_get_packet_error(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeer_get_available_packet_count(void * jarg1) {
  int jresult ;
  PacketPeer *arg1 = (PacketPeer *) 0 ;
  int result;
  
  arg1 = (PacketPeer *)jarg1; 
  result = (int)PacketPeer_get_available_packet_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketPeerStream_set_stream_peer(void * jarg1, void * jarg2) {
  PacketPeerStream *arg1 = (PacketPeerStream *) 0 ;
  SwigValueWrapper< Ref< StreamPeer > > arg2 ;
  Ref< StreamPeer > *argp2 ;
  
  arg1 = (PacketPeerStream *)jarg1; 
  argp2 = (Ref< StreamPeer > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StreamPeer >", 0);
    return ;
  }
  arg2 = *argp2; 
  PacketPeerStream_set_stream_peer(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketPeerStream() {
  void * jresult ;
  PacketPeerStream *result = 0 ;
  
  result = (PacketPeerStream *)memnew(PacketPeerStream());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_listen__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)PacketPeerUDP_listen__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_listen__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PacketPeerUDP_listen__SWIG_0(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketPeerUDP_close(void * jarg1) {
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  PacketPeerUDP_close(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_wait(void * jarg1) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (int)PacketPeerUDP_wait(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketPeerUDP_is_listening(void * jarg1) {
  unsigned int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  bool result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (bool)PacketPeerUDP_is_listening(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketPeerUDP_get_packet_ip(void * jarg1) {
  void * jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  String result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = PacketPeerUDP_get_packet_ip(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_get_packet_address(void * jarg1) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (int)PacketPeerUDP_get_packet_address(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_get_packet_port(void * jarg1) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  result = (int)PacketPeerUDP_get_packet_port(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketPeerUDP_set_send_address(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  PacketPeerUDP *arg1 = (PacketPeerUDP *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (PacketPeerUDP *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)PacketPeerUDP_set_send_address(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketPeerUDP() {
  void * jresult ;
  PacketPeerUDP *result = 0 ;
  
  result = (PacketPeerUDP *)new_PacketPeerUDP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_shape(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg2 ;
  Ref< Shape2D > *argp2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  argp2 = (Ref< Shape2D > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return ;
  }
  arg2 = *argp2; 
  Physics2DShapeQueryParameters_set_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_shape_rid(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_shape_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_shape_rid(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  RID result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_shape_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_transform(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_transform(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Matrix32 result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_motion(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_motion(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_motion(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_motion(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_margin(void * jarg1, float jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  float arg2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (float)jarg2; 
  Physics2DShapeQueryParameters_set_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_margin(void * jarg1) {
  float jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  float result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = (float)Physics2DShapeQueryParameters_get_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_layer_mask(void * jarg1, int jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  Physics2DShapeQueryParameters_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_layer_mask(void * jarg1) {
  int jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = (int)Physics2DShapeQueryParameters_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_object_type_mask(void * jarg1, int jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  Physics2DShapeQueryParameters_set_object_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_object_type_mask(void * jarg1) {
  int jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = (int)Physics2DShapeQueryParameters_get_object_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_set_exclude(void * jarg1, void * jarg2) {
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Array *arg2 = 0 ;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  arg2 = (Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  Physics2DShapeQueryParameters_set_exclude(arg1,(Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_get_exclude(void * jarg1) {
  void * jresult ;
  Physics2DShapeQueryParameters *arg1 = (Physics2DShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (Physics2DShapeQueryParameters *)jarg1; 
  result = Physics2DShapeQueryParameters_get_exclude(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Physics2DShapeQueryParameters() {
  void * jresult ;
  Physics2DShapeQueryParameters *result = 0 ;
  
  result = (Physics2DShapeQueryParameters *)memnew(Physics2DShapeQueryParameters());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_count(void * jarg1) {
  int jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  result = (int)Physics2DShapeQueryResult_get_result_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_rid(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = Physics2DShapeQueryResult_get_result_rid(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_object_id(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DShapeQueryResult_get_result_object_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_object(void * jarg1, int jarg2) {
  void * jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)Physics2DShapeQueryResult_get_result_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DShapeQueryResult_get_result_object_shape(void * jarg1, int jarg2) {
  int jresult ;
  Physics2DShapeQueryResult *arg1 = (Physics2DShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Physics2DShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Physics2DShapeQueryResult_get_result_object_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_motion(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_motion(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_motion_remainder(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_motion_remainder(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collision_point(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collision_point(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collision_normal(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collision_normal(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_velocity(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Vector2 result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collider_velocity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_id(void * jarg1) {
  int jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  int result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = (int)Physics2DTestMotionResult_get_collider_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_rid(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  RID result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = Physics2DTestMotionResult_get_collider_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider(void * jarg1) {
  void * jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = (Object *)Physics2DTestMotionResult_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Physics2DTestMotionResult_get_collider_shape(void * jarg1) {
  int jresult ;
  Physics2DTestMotionResult *arg1 = (Physics2DTestMotionResult *) 0 ;
  int result;
  
  arg1 = (Physics2DTestMotionResult *)jarg1; 
  result = (int)Physics2DTestMotionResult_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Physics2DTestMotionResult() {
  void * jresult ;
  Physics2DTestMotionResult *result = 0 ;
  
  result = (Physics2DTestMotionResult *)memnew(Physics2DTestMotionResult());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_shape(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  SwigValueWrapper< Ref< Shape > > arg2 ;
  Ref< Shape > *argp2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  argp2 = (Ref< Shape > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape >", 0);
    return ;
  }
  arg2 = *argp2; 
  PhysicsShapeQueryParameters_set_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_shape_rid(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  PhysicsShapeQueryParameters_set_shape_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_shape_rid(void * jarg1) {
  void * jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  RID result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = PhysicsShapeQueryParameters_get_shape_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_transform(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  PhysicsShapeQueryParameters_set_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_transform(void * jarg1) {
  void * jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Transform result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = PhysicsShapeQueryParameters_get_transform(arg1);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_margin(void * jarg1, float jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  float arg2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (float)jarg2; 
  PhysicsShapeQueryParameters_set_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_margin(void * jarg1) {
  float jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  float result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = (float)PhysicsShapeQueryParameters_get_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_layer_mask(void * jarg1, int jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsShapeQueryParameters_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_layer_mask(void * jarg1) {
  int jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = (int)PhysicsShapeQueryParameters_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_object_type_mask(void * jarg1, int jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsShapeQueryParameters_set_object_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_object_type_mask(void * jarg1) {
  int jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  int result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = (int)PhysicsShapeQueryParameters_get_object_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_set_exclude(void * jarg1, void * jarg2) {
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Array *arg2 = 0 ;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  arg2 = (Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Array const & type is null", 0);
    return ;
  } 
  PhysicsShapeQueryParameters_set_exclude(arg1,(Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_get_exclude(void * jarg1) {
  void * jresult ;
  PhysicsShapeQueryParameters *arg1 = (PhysicsShapeQueryParameters *) 0 ;
  Array result;
  
  arg1 = (PhysicsShapeQueryParameters *)jarg1; 
  result = PhysicsShapeQueryParameters_get_exclude(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsShapeQueryParameters() {
  void * jresult ;
  PhysicsShapeQueryParameters *result = 0 ;
  
  result = (PhysicsShapeQueryParameters *)memnew(PhysicsShapeQueryParameters());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_count(void * jarg1) {
  int jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  result = (int)PhysicsShapeQueryResult_get_result_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_rid(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  RID result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = PhysicsShapeQueryResult_get_result_rid(arg1,arg2);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_object_id(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsShapeQueryResult_get_result_object_id(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_object(void * jarg1, int jarg2) {
  void * jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)PhysicsShapeQueryResult_get_result_object(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsShapeQueryResult_get_result_object_shape(void * jarg1, int jarg2) {
  int jresult ;
  PhysicsShapeQueryResult *arg1 = (PhysicsShapeQueryResult *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PhysicsShapeQueryResult *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PhysicsShapeQueryResult_get_result_object_shape(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlaneShape_set_plane(void * jarg1, void * jarg2) {
  PlaneShape *arg1 = (PlaneShape *) 0 ;
  Plane *arg2 = 0 ;
  
  arg1 = (PlaneShape *)jarg1; 
  arg2 = (Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  PlaneShape_set_plane(arg1,(Plane const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaneShape_get_plane(void * jarg1) {
  void * jresult ;
  PlaneShape *arg1 = (PlaneShape *) 0 ;
  Plane result;
  
  arg1 = (PlaneShape *)jarg1; 
  result = PlaneShape_get_plane(arg1);
  jresult = memnew(Plane((const Plane &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlaneShape() {
  void * jresult ;
  PlaneShape *result = 0 ;
  
  result = (PlaneShape *)memnew(PlaneShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPathFinder_setup(void * jarg1, void * jarg2, void * jarg3) {
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2Array *arg2 = 0 ;
  IntArray *arg3 = 0 ;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (IntArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "IntArray const & type is null", 0);
    return ;
  } 
  PolygonPathFinder_setup(arg1,(Vector2Array const &)*arg2,(IntArray const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_find_path(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2Array result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = PolygonPathFinder_find_path(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_get_intersections(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2Array result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = PolygonPathFinder_get_intersections(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_get_closest_point(void * jarg1, void * jarg2) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = PolygonPathFinder_get_closest_point(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPathFinder_is_point_inside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)PolygonPathFinder_is_point_inside(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPathFinder_set_point_penalty(void * jarg1, int jarg2, float jarg3) {
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  PolygonPathFinder_set_point_penalty(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PolygonPathFinder_get_point_penalty(void * jarg1, int jarg2) {
  float jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)PolygonPathFinder_get_point_penalty(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPathFinder_get_bounds(void * jarg1) {
  void * jresult ;
  PolygonPathFinder *arg1 = (PolygonPathFinder *) 0 ;
  Rect2 result;
  
  arg1 = (PolygonPathFinder *)jarg1; 
  result = PolygonPathFinder_get_bounds(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonPathFinder() {
  void * jresult ;
  PolygonPathFinder *result = 0 ;
  
  result = (PolygonPathFinder *)memnew(PolygonPathFinder());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayShape_set_length(void * jarg1, float jarg2) {
  RayShape *arg1 = (RayShape *) 0 ;
  float arg2 ;
  
  arg1 = (RayShape *)jarg1; 
  arg2 = (float)jarg2; 
  RayShape_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RayShape_get_length(void * jarg1) {
  float jresult ;
  RayShape *arg1 = (RayShape *) 0 ;
  float result;
  
  arg1 = (RayShape *)jarg1; 
  result = (float)RayShape_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayShape() {
  void * jresult ;
  RayShape *result = 0 ;
  
  result = (RayShape *)memnew(RayShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayShape2D_set_length(void * jarg1, float jarg2) {
  RayShape2D *arg1 = (RayShape2D *) 0 ;
  float arg2 ;
  
  arg1 = (RayShape2D *)jarg1; 
  arg2 = (float)jarg2; 
  RayShape2D_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RayShape2D_get_length(void * jarg1) {
  float jresult ;
  RayShape2D *arg1 = (RayShape2D *) 0 ;
  float result;
  
  arg1 = (RayShape2D *)jarg1; 
  result = (float)RayShape2D_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayShape2D() {
  void * jresult ;
  RayShape2D *result = 0 ;
  
  result = (RayShape2D *)memnew(RayShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RectangleShape2D_set_extents(void * jarg1, void * jarg2) {
  RectangleShape2D *arg1 = (RectangleShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RectangleShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RectangleShape2D_set_extents(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RectangleShape2D_get_extents(void * jarg1) {
  void * jresult ;
  RectangleShape2D *arg1 = (RectangleShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (RectangleShape2D *)jarg1; 
  result = RectangleShape2D_get_extents(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RectangleShape2D() {
  void * jresult ;
  RectangleShape2D *result = 0 ;
  
  result = (RectangleShape2D *)memnew(RectangleShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourcePreloader_add_resource(void * jarg1, char * jarg2, void * jarg3) {
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Object *)jarg3; 
  ResourcePreloader_add_resource(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourcePreloader_remove_resource(void * jarg1, char * jarg2) {
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ResourcePreloader_remove_resource(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResourcePreloader_rename_resource(void * jarg1, char * jarg2, char * jarg3) {
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ResourcePreloader_rename_resource(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResourcePreloader_has_resource(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)ResourcePreloader_has_resource(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourcePreloader_get_resource(void * jarg1, char * jarg2) {
  void * jresult ;
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  String *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (ResourcePreloader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Object *)ResourcePreloader_get_resource(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResourcePreloader_get_resource_list(void * jarg1) {
  void * jresult ;
  ResourcePreloader *arg1 = (ResourcePreloader *) 0 ;
  StringArray result;
  
  arg1 = (ResourcePreloader *)jarg1; 
  result = ResourcePreloader_get_resource_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResourcePreloader() {
  void * jresult ;
  ResourcePreloader *result = 0 ;
  
  result = (ResourcePreloader *)memnew(ResourcePreloader());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_sample_library(void * jarg1, void * jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  SwigValueWrapper< Ref< SampleLibrary > > arg2 ;
  Ref< SampleLibrary > *argp2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  argp2 = (Ref< SampleLibrary > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< SampleLibrary >", 0);
    return ;
  }
  arg2 = *argp2; 
  SamplePlayer_set_sample_library(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SamplePlayer_get_sample_library(void * jarg1) {
  void * jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  SwigValueWrapper< Ref< SampleLibrary > > result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = SamplePlayer_get_sample_library(arg1);
  jresult = memnew(Ref< SampleLibrary >((const Ref< SampleLibrary > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_polyphony(void * jarg1, int jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer_set_polyphony(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_polyphony(void * jarg1) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (int)SamplePlayer_get_polyphony(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_play__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (int)SamplePlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_play__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SamplePlayer_play__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_stop(void * jarg1, int jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer_stop(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_stop_all(void * jarg1) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  SamplePlayer_stop_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_mix_rate(void * jarg1, int jarg2, int jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  SamplePlayer_set_mix_rate(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pitch_scale(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_pitch_scale(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_volume(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_volume(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_volume_db(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_volume_db(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pan__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  SamplePlayer_set_pan__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pan__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_pan__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_pan__SWIG_2(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_pan__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_filter__SWIG_0(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  SamplePlayer_set_filter__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_filter__SWIG_1(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  SamplePlayer_set_filter__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_chorus(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_chorus(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_reverb(void * jarg1, int jarg2, int jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_reverb(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_mix_rate(void * jarg1, int jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SamplePlayer_get_mix_rate(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pitch_scale(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pitch_scale(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_volume(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_volume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_volume_db(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_volume_db(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pan(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pan(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pan_depth(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pan_depth(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_pan_height(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_pan_height(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_filter_type(void * jarg1, int jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SamplePlayer_get_filter_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_filter_cutoff(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_filter_cutoff(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_filter_resonance(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_filter_resonance(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_filter_gain(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_filter_gain(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_chorus(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_chorus(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_reverb_room(void * jarg1, int jarg2) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SamplePlayer_get_reverb_room(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_reverb(void * jarg1, int jarg2) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SamplePlayer_get_reverb(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pitch_scale(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_pitch_scale(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_volume(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_volume(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_volume_db(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_volume_db(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pan__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_default_pan__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pan__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_default_pan__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_pan__SWIG_2(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_pan__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_filter__SWIG_0(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  SamplePlayer_set_default_filter__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_filter__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  SamplePlayer_set_default_filter__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_chorus(void * jarg1, float jarg2) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer_set_default_chorus(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer_set_default_reverb(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer_set_default_reverb(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pitch_scale(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pitch_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_volume(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_volume_db(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pan(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pan_depth(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pan_depth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_pan_height(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_pan_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_type(void * jarg1) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (int)SamplePlayer_get_default_filter_type(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_cutoff(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_filter_cutoff(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_resonance(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_filter_resonance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_filter_gain(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_filter_gain(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_chorus(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_chorus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer_get_default_reverb_room(void * jarg1) {
  int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (int)SamplePlayer_get_default_reverb_room(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer_get_default_reverb(void * jarg1) {
  float jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  float result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (float)SamplePlayer_get_default_reverb(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplePlayer_is_active(void * jarg1) {
  unsigned int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  bool result;
  
  arg1 = (SamplePlayer *)jarg1; 
  result = (bool)SamplePlayer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplePlayer_is_voice_active(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SamplePlayer *arg1 = (SamplePlayer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SamplePlayer_is_voice_active(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SamplePlayer() {
  void * jresult ;
  SamplePlayer *result = 0 ;
  
  result = (SamplePlayer *)memnew(SamplePlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_notify_group(void * jarg1, int jarg2, char * jarg3, int jarg4) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  SceneTree_notify_group(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_group(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_set_group(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_nodes_in_group(void * jarg1, char * jarg2) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  String *arg2 = 0 ;
  Array result;
  
  arg1 = (SceneTree *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = SceneTree_get_nodes_in_group(arg1,(String const &)*arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_root(void * jarg1) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  Viewport *result = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  result = (Viewport *)SceneTree_get_root(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_has_group(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)SceneTree_has_group(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_auto_accept_quit(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_auto_accept_quit(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_editor_hint(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_editor_hint(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_editor_hint(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_editor_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_debug_collisions_hint(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_debug_collisions_hint(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_debugging_collisions_hint(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_debugging_collisions_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_debug_navigation_hint(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_debug_navigation_hint(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_debugging_navigation_hint(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_debugging_navigation_hint(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_edited_scene_root(void * jarg1, void * jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (Object *)jarg2; 
  SceneTree_set_edited_scene_root(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_edited_scene_root(void * jarg1) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  Object *result = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  result = (Object *)SceneTree_get_edited_scene_root(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_pause(void * jarg1, unsigned int jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool arg2 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SceneTree_set_pause(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SceneTree_is_paused(void * jarg1) {
  unsigned int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  bool result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (bool)SceneTree_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_input_as_handled(void * jarg1) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  SceneTree_set_input_as_handled(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_get_node_count(void * jarg1) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (int)SceneTree_get_node_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_get_frame(void * jarg1) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (int)SceneTree_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_quit(void * jarg1) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  SceneTree_quit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_screen_stretch(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SceneTree_set_screen_stretch(arg1,arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_queue_delete(void * jarg1, void * jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (Object *)jarg2; 
  SceneTree_queue_delete(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_0(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_1(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_2(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_3(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_4(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4,(Variant const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_call_group__SWIG_5(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  String *arg4 = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  SceneTree_call_group__SWIG_0(arg1,arg2,(String const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SceneTree_set_current_scene(void * jarg1, void * jarg2) {
  SceneTree *arg1 = (SceneTree *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  arg2 = (Node *)jarg2; 
  SceneTree_set_current_scene(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SceneTree_get_current_scene(void * jarg1) {
  void * jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  Node *result = 0 ;
  
  arg1 = (SceneTree *)jarg1; 
  result = (Node *)SceneTree_get_current_scene(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_change_scene(void * jarg1, char * jarg2) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SceneTree_change_scene(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_change_scene_to(void * jarg1, void * jarg2) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  SwigValueWrapper< Ref< PackedScene > > arg2 ;
  Ref< PackedScene > *argp2 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  argp2 = (Ref< PackedScene > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PackedScene >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)SceneTree_change_scene_to(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SceneTree_reload_current_scene(void * jarg1) {
  int jresult ;
  SceneTree *arg1 = (SceneTree *) 0 ;
  int result;
  
  arg1 = (SceneTree *)jarg1; 
  result = (int)SceneTree_reload_current_scene(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SceneTree() {
  void * jresult ;
  SceneTree *result = 0 ;
  
  result = (SceneTree *)memnew(SceneTree());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SegmentShape2D_set_a(void * jarg1, void * jarg2) {
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SegmentShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SegmentShape2D_set_a(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SegmentShape2D_get_a(void * jarg1) {
  void * jresult ;
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (SegmentShape2D *)jarg1; 
  result = SegmentShape2D_get_a(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SegmentShape2D_set_b(void * jarg1, void * jarg2) {
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SegmentShape2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SegmentShape2D_set_b(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SegmentShape2D_get_b(void * jarg1) {
  void * jresult ;
  SegmentShape2D *arg1 = (SegmentShape2D *) 0 ;
  Vector2 result;
  
  arg1 = (SegmentShape2D *)jarg1; 
  result = SegmentShape2D_get_b(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SegmentShape2D() {
  void * jresult ;
  SegmentShape2D *result = 0 ;
  
  result = (SegmentShape2D *)memnew(SegmentShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderMaterial_set_shader(void * jarg1, void * jarg2) {
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  SwigValueWrapper< Ref< Shader > > arg2 ;
  Ref< Shader > *argp2 ;
  
  arg1 = (ShaderMaterial *)jarg1; 
  argp2 = (Ref< Shader > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shader >", 0);
    return ;
  }
  arg2 = *argp2; 
  ShaderMaterial_set_shader(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderMaterial_get_shader(void * jarg1) {
  void * jresult ;
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  SwigValueWrapper< Ref< Shader > > result;
  
  arg1 = (ShaderMaterial *)jarg1; 
  result = ShaderMaterial_get_shader(arg1);
  jresult = memnew(Ref< Shader >((const Ref< Shader > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShaderMaterial_set_shader_param(void * jarg1, char * jarg2, void * jarg3) {
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ShaderMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ShaderMaterial_set_shader_param(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShaderMaterial_get_shader_param(void * jarg1, char * jarg2) {
  void * jresult ;
  ShaderMaterial *arg1 = (ShaderMaterial *) 0 ;
  String *arg2 = 0 ;
  Variant result;
  
  arg1 = (ShaderMaterial *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = ShaderMaterial_get_shader_param(arg1,(String const &)*arg2);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShaderMaterial() {
  void * jresult ;
  ShaderMaterial *result = 0 ;
  
  result = (ShaderMaterial *)memnew(ShaderMaterial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundRoomParams_set_param(void * jarg1, int jarg2, float jarg3) {
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SoundRoomParams_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundRoomParams_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SoundRoomParams_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundRoomParams_set_reverb_mode(void * jarg1, int jarg2) {
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int arg2 ;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = (int)jarg2; 
  SoundRoomParams_set_reverb_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundRoomParams_get_reverb_mode(void * jarg1) {
  int jresult ;
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  int result;
  
  arg1 = (SoundRoomParams *)jarg1; 
  result = (int)SoundRoomParams_get_reverb_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundRoomParams_set_force_params_to_all_sources(void * jarg1, unsigned int jarg2) {
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  bool arg2 ;
  
  arg1 = (SoundRoomParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SoundRoomParams_set_force_params_to_all_sources(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundRoomParams_is_forcing_params_to_all_sources(void * jarg1) {
  unsigned int jresult ;
  SoundRoomParams *arg1 = (SoundRoomParams *) 0 ;
  bool result;
  
  arg1 = (SoundRoomParams *)jarg1; 
  result = (bool)SoundRoomParams_is_forcing_params_to_all_sources(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoundRoomParams() {
  void * jresult ;
  SoundRoomParams *result = 0 ;
  
  result = (SoundRoomParams *)memnew(SoundRoomParams());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_transform(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Spatial_set_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_transform(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Transform result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_transform(arg1);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_translation(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_translation(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_translation(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_translation(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_rotation(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_rotation(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_rotation(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_rotation(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_rotation_deg(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_rotation_deg(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_rotation_deg(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_rotation_deg(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_scale(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_set_scale(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_scale(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_scale(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_global_transform(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Spatial_set_global_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_global_transform(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Transform result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_global_transform(arg1);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_parent_spatial(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  result = (Object *)Spatial_get_parent_spatial(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_ignore_transform_notification(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_ignore_transform_notification(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_as_toplevel(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_as_toplevel(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_set_as_toplevel(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_set_as_toplevel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_world(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  SwigValueWrapper< Ref< World > > result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_world(arg1);
  jresult = memnew(Ref< World >((const Ref< World > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_update_gizmo(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_update_gizmo(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_gizmo(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  SwigValueWrapper< Ref< SpatialGizmo > > arg2 ;
  Ref< SpatialGizmo > *argp2 ;
  
  arg1 = (Spatial *)jarg1; 
  argp2 = (Ref< SpatialGizmo > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< SpatialGizmo >", 0);
    return ;
  }
  arg2 = *argp2; 
  Spatial_set_gizmo(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spatial_get_gizmo(void * jarg1) {
  void * jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  SwigValueWrapper< Ref< SpatialGizmo > > result;
  
  arg1 = (Spatial *)jarg1; 
  result = Spatial_get_gizmo(arg1);
  jresult = memnew(Ref< SpatialGizmo >((const Ref< SpatialGizmo > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_show(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_show(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_hide(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_hide(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_visible(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_hidden(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_hidden(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_hidden(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_hidden(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_notify_local_transform(void * jarg1, unsigned int jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  bool arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Spatial_set_notify_local_transform(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spatial_is_local_transform_notification_enabled(void * jarg1) {
  unsigned int jresult ;
  Spatial *arg1 = (Spatial *) 0 ;
  bool result;
  
  arg1 = (Spatial *)jarg1; 
  result = (bool)Spatial_is_local_transform_notification_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate(void * jarg1, void * jarg2, float jarg3) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  Spatial_rotate(arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_global_rotate(void * jarg1, void * jarg2, float jarg3) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  Spatial_global_rotate(arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate_x(void * jarg1, float jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  float arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (float)jarg2; 
  Spatial_rotate_x(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate_y(void * jarg1, float jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  float arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (float)jarg2; 
  Spatial_rotate_y(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_rotate_z(void * jarg1, float jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  float arg2 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (float)jarg2; 
  Spatial_rotate_z(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_translate(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_translate(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_global_translate(void * jarg1, void * jarg2) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_global_translate(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_orthonormalize(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_orthonormalize(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_set_identity(void * jarg1) {
  Spatial *arg1 = (Spatial *) 0 ;
  
  arg1 = (Spatial *)jarg1; 
  Spatial_set_identity(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_look_at(void * jarg1, void * jarg2, void * jarg3) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_look_at(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spatial_look_at_from_pos(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Spatial *arg1 = (Spatial *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  
  arg1 = (Spatial *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Spatial_look_at_from_pos(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spatial() {
  void * jresult ;
  Spatial *result = 0 ;
  
  result = (Spatial *)memnew(Spatial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialPlayer_set_param(void * jarg1, int jarg2, float jarg3) {
  SpatialPlayer *arg1 = (SpatialPlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SpatialPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SpatialPlayer_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialPlayer_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SpatialPlayer *arg1 = (SpatialPlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SpatialPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SpatialPlayer_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_set_sample_library(void * jarg1, void * jarg2) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  SwigValueWrapper< Ref< SampleLibrary > > arg2 ;
  Ref< SampleLibrary > *argp2 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  argp2 = (Ref< SampleLibrary > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< SampleLibrary >", 0);
    return ;
  }
  arg2 = *argp2; 
  SpatialSamplePlayer_set_sample_library(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialSamplePlayer_get_sample_library(void * jarg1) {
  void * jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  SwigValueWrapper< Ref< SampleLibrary > > result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  result = SpatialSamplePlayer_get_sample_library(arg1);
  jresult = memnew(Ref< SampleLibrary >((const Ref< SampleLibrary > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_set_polyphony(void * jarg1, int jarg2) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SpatialSamplePlayer_set_polyphony(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialSamplePlayer_get_polyphony(void * jarg1) {
  int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  result = (int)SpatialSamplePlayer_get_polyphony(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialSamplePlayer_play__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)SpatialSamplePlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialSamplePlayer_play__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SpatialSamplePlayer_play__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_voice_set_pitch_scale(void * jarg1, int jarg2, float jarg3) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SpatialSamplePlayer_voice_set_pitch_scale(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_voice_set_volume_scale_db(void * jarg1, int jarg2, float jarg3) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SpatialSamplePlayer_voice_set_volume_scale_db(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialSamplePlayer_is_voice_active(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SpatialSamplePlayer_is_voice_active(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_stop_voice(void * jarg1, int jarg2) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SpatialSamplePlayer_stop_voice(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialSamplePlayer_stop_all(void * jarg1) {
  SpatialSamplePlayer *arg1 = (SpatialSamplePlayer *) 0 ;
  
  arg1 = (SpatialSamplePlayer *)jarg1; 
  SpatialSamplePlayer_stop_all(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpatialSamplePlayer() {
  void * jresult ;
  SpatialSamplePlayer *result = 0 ;
  
  result = (SpatialSamplePlayer *)memnew(SpatialSamplePlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_stream(void * jarg1, void * jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  SwigValueWrapper< Ref< AudioStream > > arg2 ;
  Ref< AudioStream > *argp2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  argp2 = (Ref< AudioStream > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< AudioStream >", 0);
    return ;
  }
  arg2 = *argp2; 
  SpatialStreamPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialStreamPlayer_get_stream(void * jarg1) {
  void * jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  SwigValueWrapper< Ref< AudioStream > > result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = SpatialStreamPlayer_get_stream(arg1);
  jresult = memnew(Ref< AudioStream >((const Ref< AudioStream > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_play__SWIG_0(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_play__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_play__SWIG_1(void * jarg1) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  SpatialStreamPlayer_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_stop(void * jarg1) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  SpatialStreamPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpatialStreamPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_loop(void * jarg1, unsigned int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpatialStreamPlayer_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_has_loop(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_volume(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_volume(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_volume_db(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_buffering_msec(void * jarg1, int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  SpatialStreamPlayer_set_buffering_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialStreamPlayer_get_buffering_msec(void * jarg1) {
  int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  int result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (int)SpatialStreamPlayer_get_buffering_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_loop_restart_time(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_set_loop_restart_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_loop_restart_time(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_loop_restart_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpatialStreamPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  String result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = SpatialStreamPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpatialStreamPlayer_get_loop_count(void * jarg1) {
  int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  int result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (int)SpatialStreamPlayer_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_pos(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_seek_pos(void * jarg1, float jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  SpatialStreamPlayer_seek_pos(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpatialStreamPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpatialStreamPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpatialStreamPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  bool result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (bool)SpatialStreamPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpatialStreamPlayer_get_length(void * jarg1) {
  float jresult ;
  SpatialStreamPlayer *arg1 = (SpatialStreamPlayer *) 0 ;
  float result;
  
  arg1 = (SpatialStreamPlayer *)jarg1; 
  result = (float)SpatialStreamPlayer_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpatialStreamPlayer() {
  void * jresult ;
  SpatialStreamPlayer *result = 0 ;
  
  result = (SpatialStreamPlayer *)memnew(SpatialStreamPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_stream(void * jarg1, void * jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  SwigValueWrapper< Ref< AudioStream > > arg2 ;
  Ref< AudioStream > *argp2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  argp2 = (Ref< AudioStream > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< AudioStream >", 0);
    return ;
  }
  arg2 = *argp2; 
  StreamPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPlayer_get_stream(void * jarg1) {
  void * jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  SwigValueWrapper< Ref< AudioStream > > result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = StreamPlayer_get_stream(arg1);
  jresult = memnew(Ref< AudioStream >((const Ref< AudioStream > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_play__SWIG_0(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_play__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_play__SWIG_1(void * jarg1) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  StreamPlayer_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_stop(void * jarg1) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  StreamPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_loop(void * jarg1, unsigned int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPlayer_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_has_loop(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_volume(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_volume(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_volume_db(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_buffering_msec(void * jarg1, int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  StreamPlayer_set_buffering_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPlayer_get_buffering_msec(void * jarg1) {
  int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  int result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (int)StreamPlayer_get_buffering_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_loop_restart_time(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_set_loop_restart_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_loop_restart_time(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_loop_restart_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StreamPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  String result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = StreamPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StreamPlayer_get_loop_count(void * jarg1) {
  int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  int result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (int)StreamPlayer_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_pos(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_seek_pos(void * jarg1, float jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  StreamPlayer_seek_pos(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StreamPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (StreamPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  StreamPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StreamPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  bool result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (bool)StreamPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StreamPlayer_get_length(void * jarg1) {
  float jresult ;
  StreamPlayer *arg1 = (StreamPlayer *) 0 ;
  float result;
  
  arg1 = (StreamPlayer *)jarg1; 
  result = (float)StreamPlayer_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StreamPlayer() {
  void * jresult ;
  StreamPlayer *result = 0 ;
  
  result = (StreamPlayer *)memnew(StreamPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_wait_time(void * jarg1, float jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  float arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = (float)jarg2; 
  Timer_set_wait_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Timer_get_wait_time(void * jarg1) {
  float jresult ;
  Timer *arg1 = (Timer *) 0 ;
  float result;
  
  arg1 = (Timer *)jarg1; 
  result = (float)Timer_get_wait_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_one_shot(void * jarg1, unsigned int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Timer_set_one_shot(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Timer_is_one_shot(void * jarg1) {
  unsigned int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  arg1 = (Timer *)jarg1; 
  result = (bool)Timer_is_one_shot(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_autostart(void * jarg1, unsigned int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Timer_set_autostart(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Timer_has_autostart(void * jarg1) {
  unsigned int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  arg1 = (Timer *)jarg1; 
  result = (bool)Timer_has_autostart(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_start(void * jarg1) {
  Timer *arg1 = (Timer *) 0 ;
  
  arg1 = (Timer *)jarg1; 
  Timer_start(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_stop(void * jarg1) {
  Timer *arg1 = (Timer *) 0 ;
  
  arg1 = (Timer *)jarg1; 
  Timer_stop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_active(void * jarg1, unsigned int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  bool arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Timer_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Timer_is_active(void * jarg1) {
  unsigned int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  bool result;
  
  arg1 = (Timer *)jarg1; 
  result = (bool)Timer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Timer_get_time_left(void * jarg1) {
  float jresult ;
  Timer *arg1 = (Timer *) 0 ;
  float result;
  
  arg1 = (Timer *)jarg1; 
  result = (float)Timer_get_time_left(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Timer_set_timer_process_mode(void * jarg1, int jarg2) {
  Timer *arg1 = (Timer *) 0 ;
  int arg2 ;
  
  arg1 = (Timer *)jarg1; 
  arg2 = (int)jarg2; 
  Timer_set_timer_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Timer_get_timer_process_mode(void * jarg1) {
  int jresult ;
  Timer *arg1 = (Timer *) 0 ;
  int result;
  
  arg1 = (Timer *)jarg1; 
  result = (int)Timer_get_timer_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Timer() {
  void * jresult ;
  Timer *result = 0 ;
  
  result = (Timer *)memnew(Timer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_is_active(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_active(void * jarg1, unsigned int jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  bool arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tween_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_is_repeat(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_is_repeat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_repeat(void * jarg1, unsigned int jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  bool arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tween_set_repeat(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_speed(void * jarg1, float jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  float arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (float)jarg2; 
  Tween_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tween_get_speed(void * jarg1) {
  float jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float result;
  
  arg1 = (Tween *)jarg1; 
  result = (float)Tween_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tween_set_tween_process_mode(void * jarg1, int jarg2) {
  Tween *arg1 = (Tween *) 0 ;
  int arg2 ;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (int)jarg2; 
  Tween_set_tween_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tween_get_tween_process_mode(void * jarg1) {
  int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  int result;
  
  arg1 = (Tween *)jarg1; 
  result = (int)Tween_get_tween_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_start(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_start(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_reset(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_reset(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_reset_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_reset_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_stop(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_stop(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_stop_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_stop_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_resume(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_resume(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_resume_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_resume_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_remove(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (bool)Tween_remove(arg1,arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_remove_all(void * jarg1) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  result = (bool)Tween_remove_all(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_seek(void * jarg1, float jarg2) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)Tween_seek(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tween_tell(void * jarg1) {
  float jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float result;
  
  arg1 = (Tween *)jarg1; 
  result = (float)Tween_tell(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Tween_get_runtime(void * jarg1) {
  float jresult ;
  Tween *arg1 = (Tween *) 0 ;
  float result;
  
  arg1 = (Tween *)jarg1; 
  result = (float)Tween_get_runtime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_property__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8, float jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  result = (bool)Tween_interpolate_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_property__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)Tween_interpolate_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_method__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8, float jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  result = (bool)Tween_interpolate_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_method__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, float jarg6, int jarg7, int jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Variant *arg5 = 0 ;
  float arg6 ;
  int arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (bool)Tween_interpolate_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,(Variant const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_0(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_1(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_2(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_3(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_4(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_callback__SWIG_5(void * jarg1, void * jarg2, float jarg3, char * jarg4) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (bool)Tween_interpolate_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_0(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  Variant *arg9 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg9 = (Variant *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8,(Variant const &)*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_1(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  Variant *arg8 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg8 = (Variant *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7,(Variant const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_2(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  Variant *arg7 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (Variant *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6,(Variant const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_3(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  Variant *arg6 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5,(Variant const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_4(void * jarg1, void * jarg2, float jarg3, char * jarg4, void * jarg5) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  Variant *arg5 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Variant *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4,(Variant const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_interpolate_deferred_callback__SWIG_5(void * jarg1, void * jarg2, float jarg3, char * jarg4) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  float arg3 ;
  String *arg4 = 0 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (float)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (bool)Tween_interpolate_deferred_callback__SWIG_0(arg1,arg2,arg3,(String const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_property__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, char * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_follow_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_property__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, char * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_follow_property__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_method__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, char * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_follow_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_follow_method__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, void * jarg5, char * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Variant *arg4 = 0 ;
  Object *arg5 = (Object *) 0 ;
  String *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Variant *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg5 = (Object *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg6_str = jarg6;
  arg6 = &arg6_str; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_follow_method__SWIG_0(arg1,arg2,(String const &)*arg3,(Variant const &)*arg4,arg5,(String const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_property__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, char * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_targeting_property__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_property__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, char * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_targeting_property__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_method__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, char * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9, float jarg10) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  float arg10 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (float)jarg10; 
  result = (bool)Tween_targeting_method__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tween_targeting_method__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4, char * jarg5, void * jarg6, float jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Tween *arg1 = (Tween *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  String *arg5 = 0 ;
  Variant *arg6 = 0 ;
  float arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Tween *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Object *)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Variant *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)Tween_targeting_method__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,(String const &)*arg5,(Variant const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tween() {
  void * jresult ;
  Tween *result = 0 ;
  
  result = (Tween *)memnew(Tween());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_radius(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_radius(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_rest_length(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_rest_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_rest_length(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_rest_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_travel(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_travel(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_travel(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_travel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_stiffness(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_stiffness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_stiffness(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_stiffness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_suspension_max_force(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_suspension_max_force(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_suspension_max_force(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_suspension_max_force(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_damping_compression(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_damping_compression(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_damping_compression(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_damping_compression(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_damping_relaxation(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_damping_relaxation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_damping_relaxation(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_damping_relaxation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_use_as_traction(void * jarg1, unsigned int jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VehicleWheel_set_use_as_traction(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VehicleWheel_is_used_as_traction(void * jarg1) {
  unsigned int jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (bool)VehicleWheel_is_used_as_traction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_use_as_steering(void * jarg1, unsigned int jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VehicleWheel_set_use_as_steering(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VehicleWheel_is_used_as_steering(void * jarg1) {
  unsigned int jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  bool result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (bool)VehicleWheel_is_used_as_steering(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleWheel_set_friction_slip(void * jarg1, float jarg2) {
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleWheel *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleWheel_set_friction_slip(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleWheel_get_friction_slip(void * jarg1) {
  float jresult ;
  VehicleWheel *arg1 = (VehicleWheel *) 0 ;
  float result;
  
  arg1 = (VehicleWheel *)jarg1; 
  result = (float)VehicleWheel_get_friction_slip(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VehicleWheel() {
  void * jresult ;
  VehicleWheel *result = 0 ;
  
  result = (VehicleWheel *)memnew(VehicleWheel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_rect(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Viewport_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_rect(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_find_world_2d(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  SwigValueWrapper< Ref< World2D > > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_find_world_2d(arg1);
  jresult = memnew(Ref< World2D >((const Ref< World2D > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_world(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  SwigValueWrapper< Ref< World > > arg2 ;
  Ref< World > *argp2 ;
  
  arg1 = (Viewport *)jarg1; 
  argp2 = (Ref< World > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< World >", 0);
    return ;
  }
  arg2 = *argp2; 
  Viewport_set_world(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_world(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  SwigValueWrapper< Ref< World > > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_world(arg1);
  jresult = memnew(Ref< World >((const Ref< World > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_find_world(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  SwigValueWrapper< Ref< World > > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_find_world(arg1);
  jresult = memnew(Ref< World >((const Ref< World > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_canvas_transform(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Viewport_set_canvas_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_canvas_transform(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_canvas_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_global_canvas_transform(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Viewport_set_global_canvas_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_global_canvas_transform(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_global_canvas_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_final_transform(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Matrix32 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_final_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_visible_rect(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_visible_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_transparent_background(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_transparent_background(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_has_transparent_background(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_has_transparent_background(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  Vector2 *arg3 = 0 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Viewport_set_size_override__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Viewport_set_size_override__SWIG_0(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override__SWIG_2(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_size_override__SWIG_0(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_size_override(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Vector2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_size_override(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_size_override_enabled(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_size_override_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_size_override_stretch(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_size_override_stretch(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_size_override_stretch_enabled(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_size_override_stretch_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_queue_screen_capture(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  Viewport_queue_screen_capture(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_screen_capture(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Image result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_screen_capture(arg1);
  jresult = memnew(Image((const Image &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_as_render_target(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_as_render_target(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_set_as_render_target(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_set_as_render_target(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_vflip(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_vflip(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_vflip(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_vflip(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_clear_on_new_frame(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_clear_on_new_frame(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_clear_on_new_frame(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_clear_on_new_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_render_target_clear(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  Viewport_render_target_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_filter(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_filter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_filter(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_filter(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_gen_mipmaps(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_render_target_gen_mipmaps(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_render_target_gen_mipmaps(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_render_target_gen_mipmaps(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_update_mode(void * jarg1, int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  int arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (int)jarg2; 
  Viewport_set_render_target_update_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Viewport_get_render_target_update_mode(void * jarg1) {
  int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  int result;
  
  arg1 = (Viewport *)jarg1; 
  result = (int)Viewport_get_render_target_update_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_render_target_texture(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  SwigValueWrapper< Ref< RenderTargetTexture > > result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_render_target_texture(arg1);
  jresult = memnew(Ref< RenderTargetTexture >((const Ref< RenderTargetTexture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_physics_object_picking(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_physics_object_picking(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_get_physics_object_picking(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_get_physics_object_picking(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_viewport(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  RID result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_viewport(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_input(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Viewport_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_unhandled_input(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Viewport_unhandled_input(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_update_worlds(void * jarg1) {
  Viewport *arg1 = (Viewport *) 0 ;
  
  arg1 = (Viewport *)jarg1; 
  Viewport_update_worlds(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_use_own_world(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_use_own_world(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_using_own_world(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_using_own_world(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_camera(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Camera *result = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  result = (Camera *)Viewport_get_camera(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_as_audio_listener(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_as_audio_listener(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_audio_listener(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_audio_listener(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_as_audio_listener_2d(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_as_audio_listener_2d(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_audio_listener_2d(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_audio_listener_2d(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_render_target_to_screen_rect(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Viewport_set_render_target_to_screen_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_get_mouse_pos(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Vector2 result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_get_mouse_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_warp_mouse(void * jarg1, void * jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Viewport_warp_mouse(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_gui_has_modal_stack(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_gui_has_modal_stack(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Viewport_gui_get_drag_data(void * jarg1) {
  void * jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  Variant result;
  
  arg1 = (Viewport *)jarg1; 
  result = Viewport_gui_get_drag_data(arg1);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Viewport_set_disable_input(void * jarg1, unsigned int jarg2) {
  Viewport *arg1 = (Viewport *) 0 ;
  bool arg2 ;
  
  arg1 = (Viewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Viewport_set_disable_input(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Viewport_is_input_disabled(void * jarg1) {
  unsigned int jresult ;
  Viewport *arg1 = (Viewport *) 0 ;
  bool result;
  
  arg1 = (Viewport *)jarg1; 
  result = (bool)Viewport_is_input_disabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Viewport() {
  void * jresult ;
  Viewport *result = 0 ;
  
  result = (Viewport *)memnew(Viewport());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityNotifier_set_aabb(void * jarg1, void * jarg2) {
  VisibilityNotifier *arg1 = (VisibilityNotifier *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (VisibilityNotifier *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  VisibilityNotifier_set_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisibilityNotifier_get_aabb(void * jarg1) {
  void * jresult ;
  VisibilityNotifier *arg1 = (VisibilityNotifier *) 0 ;
  AABB result;
  
  arg1 = (VisibilityNotifier *)jarg1; 
  result = VisibilityNotifier_get_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityNotifier_is_on_screen(void * jarg1) {
  unsigned int jresult ;
  VisibilityNotifier *arg1 = (VisibilityNotifier *) 0 ;
  bool result;
  
  arg1 = (VisibilityNotifier *)jarg1; 
  result = (bool)VisibilityNotifier_is_on_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityNotifier() {
  void * jresult ;
  VisibilityNotifier *result = 0 ;
  
  result = (VisibilityNotifier *)memnew(VisibilityNotifier());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualInstance_set_base(void * jarg1, void * jarg2) {
  VisualInstance *arg1 = (VisualInstance *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (VisualInstance *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  VisualInstance_set_base(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisualInstance_set_layer_mask(void * jarg1, int jarg2) {
  VisualInstance *arg1 = (VisualInstance *) 0 ;
  int arg2 ;
  
  arg1 = (VisualInstance *)jarg1; 
  arg2 = (int)jarg2; 
  VisualInstance_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VisualInstance_get_layer_mask(void * jarg1) {
  int jresult ;
  VisualInstance *arg1 = (VisualInstance *) 0 ;
  int result;
  
  arg1 = (VisualInstance *)jarg1; 
  result = (int)VisualInstance_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldEnvironment_set_environment(void * jarg1, void * jarg2) {
  WorldEnvironment *arg1 = (WorldEnvironment *) 0 ;
  SwigValueWrapper< Ref< Environment > > arg2 ;
  Ref< Environment > *argp2 ;
  
  arg1 = (WorldEnvironment *)jarg1; 
  argp2 = (Ref< Environment > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Environment >", 0);
    return ;
  }
  arg2 = *argp2; 
  WorldEnvironment_set_environment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorldEnvironment_get_environment(void * jarg1) {
  void * jresult ;
  WorldEnvironment *arg1 = (WorldEnvironment *) 0 ;
  SwigValueWrapper< Ref< Environment > > result;
  
  arg1 = (WorldEnvironment *)jarg1; 
  result = WorldEnvironment_get_environment(arg1);
  jresult = memnew(Ref< Environment >((const Ref< Environment > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorldEnvironment() {
  void * jresult ;
  WorldEnvironment *result = 0 ;
  
  result = (WorldEnvironment *)memnew(WorldEnvironment());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationPlayer_add_animation(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Animation > > arg3 ;
  Ref< Animation > *argp3 ;
  int result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Animation > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Animation >", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)AnimationPlayer_add_animation(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_remove_animation(void * jarg1, char * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_remove_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_rename_animation(void * jarg1, char * jarg2, char * jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationPlayer_rename_animation(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationPlayer_has_animation(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationPlayer_has_animation(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_animation(void * jarg1, char * jarg2) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Animation > > result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationPlayer_get_animation(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Animation >((const Ref< Animation > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_animation_list(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  StringArray result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_animation_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_animation_set_next(void * jarg1, char * jarg2, char * jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationPlayer_animation_set_next(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_animation_get_next(void * jarg1, char * jarg2) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationPlayer_animation_get_next(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_blend_time(void * jarg1, char * jarg2, char * jarg3, float jarg4) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (float)jarg4; 
  AnimationPlayer_set_blend_time(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_blend_time(void * jarg1, char * jarg2, char * jarg3) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (float)AnimationPlayer_get_blend_time(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_default_blend_time(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_set_default_blend_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_default_blend_time(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_default_blend_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_0(void * jarg1, char * jarg2, float jarg3, float jarg4, unsigned int jarg5) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_1(void * jarg1, char * jarg2, float jarg3, float jarg4) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_2(void * jarg1, char * jarg2, float jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_3(void * jarg1, char * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_play__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play__SWIG_4(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play_backwards__SWIG_0(void * jarg1, char * jarg2, float jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationPlayer_play_backwards__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play_backwards__SWIG_1(void * jarg1, char * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_play_backwards__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_play_backwards__SWIG_2(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_play_backwards__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_stop__SWIG_0(void * jarg1, unsigned int jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimationPlayer_stop__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_stop__SWIG_1(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_stop__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_stop_all(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_stop_all(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (bool)AnimationPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_current_animation(void * jarg1, char * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_set_current_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_current_animation(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_current_animation(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_queue(void * jarg1, char * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_queue(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_clear_queue(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_clear_queue(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_active(void * jarg1, unsigned int jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimationPlayer_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationPlayer_is_active(void * jarg1) {
  unsigned int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  bool result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (bool)AnimationPlayer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_speed(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_speed(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_autoplay(void * jarg1, char * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationPlayer_set_autoplay(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_autoplay(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_autoplay(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_root(void * jarg1, void * jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  AnimationPlayer_set_root(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_get_root(void * jarg1) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  NodePath result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = AnimationPlayer_get_root(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_seek__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  AnimationPlayer_seek__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_seek__SWIG_1(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_seek__SWIG_0(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_pos(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationPlayer_find_animation(void * jarg1, void * jarg2) {
  void * jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  SwigValueWrapper< Ref< Animation > > arg2 ;
  Ref< Animation > *argp2 ;
  String result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  argp2 = (Ref< Animation > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Animation >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = AnimationPlayer_find_animation(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_clear_caches(void * jarg1) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  AnimationPlayer_clear_caches(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_set_animation_process_mode(void * jarg1, int jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  AnimationPlayer_set_animation_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationPlayer_get_animation_process_mode(void * jarg1) {
  int jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  int result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (int)AnimationPlayer_get_animation_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_current_animation_pos(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_current_animation_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationPlayer_get_current_animation_length(void * jarg1) {
  float jresult ;
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float result;
  
  arg1 = (AnimationPlayer *)jarg1; 
  result = (float)AnimationPlayer_get_current_animation_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationPlayer_advance(void * jarg1, float jarg2) {
  AnimationPlayer *arg1 = (AnimationPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationPlayer_advance(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimationPlayer() {
  void * jresult ;
  AnimationPlayer *result = 0 ;
  
  result = (AnimationPlayer *)memnew(AnimationPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_add_node(void * jarg1, int jarg2, char * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationTreePlayer_add_node(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_node_exists(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationTreePlayer_node_exists(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_node_rename(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)AnimationTreePlayer_node_rename(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_type(void * jarg1, char * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_node_get_type(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_input_count(void * jarg1, char * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_node_get_input_count(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_input_source(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = AnimationTreePlayer_node_get_input_source(arg1,(String const &)*arg2,arg3);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_set_animation(void * jarg1, char * jarg2, void * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Animation > > arg3 ;
  Ref< Animation > *argp3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Animation > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Animation >", 0);
    return ;
  }
  arg3 = *argp3; 
  AnimationTreePlayer_animation_node_set_animation(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_get_animation(void * jarg1, char * jarg2) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Animation > > result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_animation_node_get_animation(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Animation >((const Ref< Animation > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_set_master_animation(void * jarg1, char * jarg2, char * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  AnimationTreePlayer_animation_node_set_master_animation(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_get_master_animation(void * jarg1, char * jarg2) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_animation_node_get_master_animation(arg1,(String const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_animation_node_set_filter_path(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  NodePath *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_animation_node_set_filter_path(arg1,(String const &)*arg2,(NodePath const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_fadein_time(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_fadein_time(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_fadein_time(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_fadein_time(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_fadeout_time(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_fadeout_time(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_fadeout_time(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_fadeout_time(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_autorestart(void * jarg1, char * jarg2, unsigned int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  AnimationTreePlayer_oneshot_node_set_autorestart(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_autorestart_delay(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_autorestart_delay(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_oneshot_node_set_autorestart_random_delay(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_has_autorestart(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationTreePlayer_oneshot_node_has_autorestart(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_autorestart_delay(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_autorestart_delay(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_oneshot_node_get_autorestart_random_delay(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_start(void * jarg1, char * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationTreePlayer_oneshot_node_start(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_stop(void * jarg1, char * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationTreePlayer_oneshot_node_stop(arg1,(String const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_is_active(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (bool)AnimationTreePlayer_oneshot_node_is_active(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_oneshot_node_set_filter_path(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  NodePath *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_oneshot_node_set_filter_path(arg1,(String const &)*arg2,(NodePath const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_mix_node_set_amount(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_mix_node_set_amount(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_mix_node_get_amount(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_mix_node_get_amount(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend2_node_set_amount(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_blend2_node_set_amount(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_blend2_node_get_amount(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_blend2_node_get_amount(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend2_node_set_filter_path(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  NodePath *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_blend2_node_set_filter_path(arg1,(String const &)*arg2,(NodePath const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend3_node_set_amount(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_blend3_node_set_amount(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_blend3_node_get_amount(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_blend3_node_get_amount(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_blend4_node_set_amount(void * jarg1, char * jarg2, void * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_blend4_node_set_amount(arg1,(String const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_blend4_node_get_amount(void * jarg1, char * jarg2) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_blend4_node_get_amount(arg1,(String const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_timescale_node_set_scale(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_timescale_node_set_scale(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_timescale_node_get_scale(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_timescale_node_get_scale(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_timeseek_node_seek(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_timeseek_node_seek(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_input_count(void * jarg1, char * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_transition_node_set_input_count(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_get_input_count(void * jarg1, char * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_transition_node_get_input_count(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_delete_input(void * jarg1, char * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_transition_node_delete_input(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_input_auto_advance(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  AnimationTreePlayer_transition_node_set_input_auto_advance(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_has_input_auto_advance(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (bool)AnimationTreePlayer_transition_node_has_input_auto_advance(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_xfade_time(void * jarg1, char * jarg2, float jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  AnimationTreePlayer_transition_node_set_xfade_time(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_get_xfade_time(void * jarg1, char * jarg2) {
  float jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  float result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (float)AnimationTreePlayer_transition_node_get_xfade_time(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_set_current(void * jarg1, char * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_transition_node_set_current(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_transition_node_get_current(void * jarg1, char * jarg2) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)AnimationTreePlayer_transition_node_get_current(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_node_set_pos(void * jarg1, char * jarg2, void * jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_node_set_pos(arg1,(String const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_node_get_pos(void * jarg1, char * jarg2) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = AnimationTreePlayer_node_get_pos(arg1,(String const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_remove_node(void * jarg1, char * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimationTreePlayer_remove_node(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_connect(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (int)AnimationTreePlayer_connect(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_is_connected(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (bool)AnimationTreePlayer_is_connected(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_disconnect(void * jarg1, char * jarg2, int jarg3) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  AnimationTreePlayer_disconnect(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_active(void * jarg1, unsigned int jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimationTreePlayer_set_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimationTreePlayer_is_active(void * jarg1) {
  unsigned int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  bool result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = (bool)AnimationTreePlayer_is_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_base_path(void * jarg1, void * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_set_base_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_get_base_path(void * jarg1) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = AnimationTreePlayer_get_base_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_master_player(void * jarg1, void * jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  AnimationTreePlayer_set_master_player(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_get_master_player(void * jarg1) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  NodePath result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = AnimationTreePlayer_get_master_player(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimationTreePlayer_get_node_list(void * jarg1) {
  void * jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  StringArray result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = AnimationTreePlayer_get_node_list(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_set_animation_process_mode(void * jarg1, int jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  int arg2 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (int)jarg2; 
  AnimationTreePlayer_set_animation_process_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimationTreePlayer_get_animation_process_mode(void * jarg1) {
  int jresult ;
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  int result;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  result = (int)AnimationTreePlayer_get_animation_process_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_advance(void * jarg1, float jarg2) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  float arg2 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  arg2 = (float)jarg2; 
  AnimationTreePlayer_advance(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_reset(void * jarg1) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  AnimationTreePlayer_reset(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimationTreePlayer_recompute_caches(void * jarg1) {
  AnimationTreePlayer *arg1 = (AnimationTreePlayer *) 0 ;
  
  arg1 = (AnimationTreePlayer *)jarg1; 
  AnimationTreePlayer_recompute_caches(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimationTreePlayer() {
  void * jresult ;
  AnimationTreePlayer *result = 0 ;
  
  result = (AnimationTreePlayer *)memnew(AnimationTreePlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLightInstance_set_baked_light(void * jarg1, void * jarg2) {
  BakedLightInstance *arg1 = (BakedLightInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (BakedLightInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  BakedLightInstance_set_baked_light(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLightInstance_get_baked_light(void * jarg1) {
  void * jresult ;
  BakedLightInstance *arg1 = (BakedLightInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (BakedLightInstance *)jarg1; 
  result = (Object *)BakedLightInstance_get_baked_light(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BakedLightInstance_get_baked_light_instance(void * jarg1) {
  void * jresult ;
  BakedLightInstance *arg1 = (BakedLightInstance *) 0 ;
  RID result;
  
  arg1 = (BakedLightInstance *)jarg1; 
  result = BakedLightInstance_get_baked_light_instance(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BakedLightInstance() {
  void * jresult ;
  BakedLightInstance *result = 0 ;
  
  result = (BakedLightInstance *)memnew(BakedLightInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLightSampler_set_param(void * jarg1, int jarg2, float jarg3) {
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (BakedLightSampler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  BakedLightSampler_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BakedLightSampler_get_param(void * jarg1, int jarg2) {
  float jresult ;
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (BakedLightSampler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)BakedLightSampler_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BakedLightSampler_set_resolution(void * jarg1, int jarg2) {
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int arg2 ;
  
  arg1 = (BakedLightSampler *)jarg1; 
  arg2 = (int)jarg2; 
  BakedLightSampler_set_resolution(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BakedLightSampler_get_resolution(void * jarg1) {
  int jresult ;
  BakedLightSampler *arg1 = (BakedLightSampler *) 0 ;
  int result;
  
  arg1 = (BakedLightSampler *)jarg1; 
  result = (int)BakedLightSampler_get_resolution(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BakedLightSampler() {
  void * jresult ;
  BakedLightSampler *result = 0 ;
  
  result = (BakedLightSampler *)memnew(BakedLightSampler());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapFont_create_from_fnt(void * jarg1, char * jarg2) {
  int jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (BitmapFont *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)BitmapFont_create_from_fnt(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_height(void * jarg1, float jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  float arg2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (float)jarg2; 
  BitmapFont_set_height(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_ascent(void * jarg1, float jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  float arg2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (float)jarg2; 
  BitmapFont_set_ascent(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_kerning_pair(void * jarg1, int jarg2, int jarg3, int jarg4) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  BitmapFont_add_kerning_pair(arg1,arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapFont_get_kerning_pair(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)BitmapFont_get_kerning_pair(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_texture(void * jarg1, void * jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  BitmapFont_add_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_char__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, float jarg6) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  BitmapFont_add_char__SWIG_0(arg1,arg2,arg3,(Rect2 const &)*arg4,(Vector2 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_char__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect2 *arg4 = 0 ;
  Vector2 *arg5 = 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  BitmapFont_add_char__SWIG_0(arg1,arg2,arg3,(Rect2 const &)*arg4,(Vector2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_add_char__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Rect2 *arg4 = 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  BitmapFont_add_char__SWIG_0(arg1,arg2,arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BitmapFont_get_texture_count(void * jarg1) {
  int jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int result;
  
  arg1 = (BitmapFont *)jarg1; 
  result = (int)BitmapFont_get_texture_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BitmapFont_get_texture(void * jarg1, int jarg2) {
  void * jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  result = BitmapFont_get_texture(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BitmapFont_get_char_size__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  int arg3 ;
  Vector2 result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = BitmapFont_get_char_size__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BitmapFont_get_char_size__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (int)jarg2; 
  result = BitmapFont_get_char_size__SWIG_0(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_distance_field_hint(void * jarg1, unsigned int jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  bool arg2 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BitmapFont_set_distance_field_hint(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_clear(void * jarg1) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  BitmapFont_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BitmapFont_set_fallback(void * jarg1, void * jarg2) {
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  arg2 = (Object *)jarg2; 
  BitmapFont_set_fallback(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BitmapFont_get_fallback(void * jarg1) {
  void * jresult ;
  BitmapFont *arg1 = (BitmapFont *) 0 ;
  Object *result = 0 ;
  
  arg1 = (BitmapFont *)jarg1; 
  result = (Object *)BitmapFont_get_fallback(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BitmapFont() {
  void * jresult ;
  BitmapFont *result = 0 ;
  
  result = (BitmapFont *)memnew(BitmapFont());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoneAttachment() {
  void * jresult ;
  BoneAttachment *result = 0 ;
  
  result = (BoneAttachment *)memnew(BoneAttachment());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_ray_normal(void * jarg1, void * jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_ray_normal(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_local_ray_normal(void * jarg1, void * jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_local_ray_normal(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_ray_origin(void * jarg1, void * jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_ray_origin(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_unproject_position(void * jarg1, void * jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Camera_unproject_position(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_is_position_behind(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Camera_is_position_behind(arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_project_position(void * jarg1, void * jarg2) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Camera_project_position(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_perspective(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Camera *arg1 = (Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  Camera_set_perspective(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_orthogonal(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Camera *arg1 = (Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  Camera_set_orthogonal(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_make_current(void * jarg1) {
  Camera *arg1 = (Camera *) 0 ;
  
  arg1 = (Camera *)jarg1; 
  Camera_make_current(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_clear_current(void * jarg1) {
  Camera *arg1 = (Camera *) 0 ;
  
  arg1 = (Camera *)jarg1; 
  Camera_clear_current(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera_is_current(void * jarg1) {
  unsigned int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  bool result;
  
  arg1 = (Camera *)jarg1; 
  result = (bool)Camera_is_current(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_get_camera_transform(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  Transform result;
  
  arg1 = (Camera *)jarg1; 
  result = Camera_get_camera_transform(arg1);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_fov(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_fov(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_size(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_zfar(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_zfar(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera_get_znear(void * jarg1) {
  float jresult ;
  Camera *arg1 = (Camera *) 0 ;
  float result;
  
  arg1 = (Camera *)jarg1; 
  result = (float)Camera_get_znear(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_get_projection(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  result = (int)Camera_get_projection(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_visible_layers(void * jarg1, int jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  Camera_set_visible_layers(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_get_visible_layers(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  result = (int)Camera_get_visible_layers(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_environment(void * jarg1, void * jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  SwigValueWrapper< Ref< Environment > > arg2 ;
  Ref< Environment > *argp2 ;
  
  arg1 = (Camera *)jarg1; 
  argp2 = (Ref< Environment > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Environment >", 0);
    return ;
  }
  arg2 = *argp2; 
  Camera_set_environment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera_get_environment(void * jarg1) {
  void * jresult ;
  Camera *arg1 = (Camera *) 0 ;
  SwigValueWrapper< Ref< Environment > > result;
  
  arg1 = (Camera *)jarg1; 
  result = Camera_get_environment(arg1);
  jresult = memnew(Ref< Environment >((const Ref< Environment > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera_set_keep_aspect_mode(void * jarg1, int jarg2) {
  Camera *arg1 = (Camera *) 0 ;
  int arg2 ;
  
  arg1 = (Camera *)jarg1; 
  arg2 = (int)jarg2; 
  Camera_set_keep_aspect_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera_get_keep_aspect_mode(void * jarg1) {
  int jresult ;
  Camera *arg1 = (Camera *) 0 ;
  int result;
  
  arg1 = (Camera *)jarg1; 
  result = (int)Camera_get_keep_aspect_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera() {
  void * jresult ;
  Camera *result = 0 ;
  
  result = (Camera *)memnew(Camera());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem__draw(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem__draw(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_set_state(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  CanvasItem_edit_set_state(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_get(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_edit_get(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_set_rect(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  CanvasItem_edit_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_edit_rotate(void * jarg1, float jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasItem_edit_rotate(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_item_rect(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_item_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_canvas_item(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  RID result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_canvas_item(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_visible(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_hidden(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_hidden(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_show(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_show(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_hide(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_hide(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_hidden(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_hidden(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_update(void * jarg1) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  CanvasItem_update(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_as_toplevel(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_as_toplevel(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_set_as_toplevel(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_set_as_toplevel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_blend_mode(void * jarg1, int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasItem_set_blend_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasItem_get_blend_mode(void * jarg1) {
  int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (int)CanvasItem_get_blend_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_light_mask(void * jarg1, int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasItem_set_light_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasItem_get_light_mask(void * jarg1) {
  int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  int result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (int)CanvasItem_get_light_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_opacity(void * jarg1, float jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasItem_set_opacity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_get_opacity(void * jarg1) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (float)CanvasItem_get_opacity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_self_opacity(void * jarg1, float jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasItem_set_self_opacity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_get_self_opacity(void * jarg1) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (float)CanvasItem_get_self_opacity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_draw_behind_parent(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_draw_behind_parent(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_is_draw_behind_parent_enabled(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_is_draw_behind_parent_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_line__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  float arg5 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg5 = (float)jarg5; 
  CanvasItem_draw_line__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_line__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_line__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_rect(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_rect(arg1,(Rect2 const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_circle(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  Color *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_circle(arg1,(Vector2 const &)*arg2,arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Vector2 *arg3 = 0 ;
  Color *arg4 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Vector2 *arg3 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture__SWIG_0(arg1,arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  CanvasItem_draw_texture_rect__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Color *arg5 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture_rect__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Rect2 *arg3 = 0 ;
  bool arg4 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  CanvasItem_draw_texture_rect__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect_region__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  CanvasItem_draw_texture_rect_region__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect_region__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Color *arg5 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture_rect_region__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_texture_rect_region__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Rect2 *arg3 = 0 ;
  Rect2 *arg4 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  arg4 = (Rect2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_texture_rect_region__SWIG_0(arg1,arg2,(Rect2 const &)*arg3,(Rect2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_style_box(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< StyleBox > > arg2 ;
  Rect2 *arg3 = 0 ;
  Ref< StyleBox > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< StyleBox > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StyleBox >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_style_box(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_primitive__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg5 ;
  float arg6 ;
  Ref< Texture > *argp5 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  argp5 = (Ref< Texture > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (float)jarg6; 
  CanvasItem_draw_primitive__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_primitive__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg5 ;
  Ref< Texture > *argp5 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  argp5 = (Ref< Texture > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg5 = *argp5; 
  CanvasItem_draw_primitive__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_primitive__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_primitive__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_polygon__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg5 ;
  Ref< Texture > *argp5 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  argp5 = (Ref< Texture > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg5 = *argp5; 
  CanvasItem_draw_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_polygon__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_polygon__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  ColorArray *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (ColorArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(ColorArray const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_colored_polygon__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  Color *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg5 ;
  Ref< Texture > *argp5 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  argp5 = (Ref< Texture > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg5 = *argp5; 
  CanvasItem_draw_colored_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(Color const &)*arg3,(Vector2Array const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_colored_polygon__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  Color *arg3 = 0 ;
  Vector2Array *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg4 = (Vector2Array *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_colored_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(Color const &)*arg3,(Vector2Array const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_colored_polygon__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2Array *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_colored_polygon__SWIG_0(arg1,(Vector2Array const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_string__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5, int jarg6) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Font > > arg2 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  int arg6 ;
  Ref< Font > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Font > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  CanvasItem_draw_string__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_string__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, void * jarg5) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Font > > arg2 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Color *arg5 = 0 ;
  Ref< Font > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Font > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_string__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(Color const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_string__SWIG_2(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Font > > arg2 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  Ref< Font > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Font > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  CanvasItem_draw_string__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_draw_char__SWIG_0(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, void * jarg6) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Font > > arg2 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  String *arg5 = 0 ;
  Color *arg6 = 0 ;
  Ref< Font > *argp2 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Font > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  arg6 = (Color *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return 0;
  } 
  result = (float)CanvasItem_draw_char__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(String const &)*arg5,(Color const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasItem_draw_char__SWIG_1(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  float jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< Font > > arg2 ;
  Vector2 *arg3 = 0 ;
  String *arg4 = 0 ;
  String *arg5 = 0 ;
  Ref< Font > *argp2 ;
  float result;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< Font > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg5_str = jarg5;
  arg5 = &arg5_str; 
  result = (float)CanvasItem_draw_char__SWIG_0(arg1,arg2,(Vector2 const &)*arg3,(String const &)*arg4,(String const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_draw_set_transform(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  Vector2 *arg4 = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Vector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasItem_draw_set_transform(arg1,(Vector2 const &)*arg2,arg3,(Vector2 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_global_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_global_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_global_transform_with_canvas(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_global_transform_with_canvas(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_viewport_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_viewport_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_viewport_rect(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Rect2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_viewport_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_canvas_transform(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_canvas_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_local_mouse_pos(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_local_mouse_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_global_mouse_pos(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_global_mouse_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_canvas(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  RID result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_canvas(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_world_2d(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  Object *result = 0 ;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (Object *)CanvasItem_get_world_2d(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_material(void * jarg1, void * jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< CanvasItemMaterial > > arg2 ;
  Ref< CanvasItemMaterial > *argp2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  argp2 = (Ref< CanvasItemMaterial > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< CanvasItemMaterial >", 0);
    return ;
  }
  arg2 = *argp2; 
  CanvasItem_set_material(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_get_material(void * jarg1) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  SwigValueWrapper< Ref< CanvasItemMaterial > > result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = CanvasItem_get_material(arg1);
  jresult = memnew(Ref< CanvasItemMaterial >((const Ref< CanvasItemMaterial > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasItem_set_use_parent_material(void * jarg1, unsigned int jarg2) {
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool arg2 ;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CanvasItem_set_use_parent_material(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CanvasItem_get_use_parent_material(void * jarg1) {
  unsigned int jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  bool result;
  
  arg1 = (CanvasItem *)jarg1; 
  result = (bool)CanvasItem_get_use_parent_material(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasItem_make_input_local(void * jarg1, void * jarg2) {
  void * jresult ;
  CanvasItem *arg1 = (CanvasItem *) 0 ;
  InputEvent *arg2 = 0 ;
  InputEvent result;
  
  arg1 = (CanvasItem *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = CanvasItem_make_input_local(arg1,(InputEvent const &)*arg2);
  jresult = memnew(InputEvent((const InputEvent &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_layer(void * jarg1, int jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  int arg2 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (int)jarg2; 
  CanvasLayer_set_layer(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CanvasLayer_get_layer(void * jarg1) {
  int jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  int result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = (int)CanvasLayer_get_layer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_transform(void * jarg1, void * jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CanvasLayer_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_transform(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Matrix32 result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_offset(void * jarg1, void * jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasLayer_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_offset(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_rotation(void * jarg1, float jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasLayer_set_rotation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasLayer_get_rotation(void * jarg1) {
  float jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = (float)CanvasLayer_get_rotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_rotationd(void * jarg1, float jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float arg2 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (float)jarg2; 
  CanvasLayer_set_rotationd(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CanvasLayer_get_rotationd(void * jarg1) {
  float jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  float result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = (float)CanvasLayer_get_rotationd(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasLayer_set_scale(void * jarg1, void * jarg2) {
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (CanvasLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  CanvasLayer_set_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_scale(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  Vector2 result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_world_2d(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  SwigValueWrapper< Ref< World2D > > result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_world_2d(arg1);
  jresult = memnew(Ref< World2D >((const Ref< World2D > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasLayer_get_viewport(void * jarg1) {
  void * jresult ;
  CanvasLayer *arg1 = (CanvasLayer *) 0 ;
  RID result;
  
  arg1 = (CanvasLayer *)jarg1; 
  result = CanvasLayer_get_viewport(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasLayer() {
  void * jresult ;
  CanvasLayer *result = 0 ;
  
  result = (CanvasLayer *)memnew(CanvasLayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject__input_event(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, int jarg6) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  Object *arg2 = (Object *) 0 ;
  InputEvent *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Vector3 *arg5 = 0 ;
  int arg6 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg5 = (Vector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg6 = (int)jarg6; 
  CollisionObject__input_event(arg1,arg2,(InputEvent const &)*arg3,(Vector3 const &)*arg4,(Vector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  SwigValueWrapper< Ref< Shape > > arg2 ;
  Transform *arg3 = 0 ;
  Ref< Shape > *argp2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  argp2 = (Ref< Shape > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  CollisionObject_add_shape__SWIG_0(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_add_shape__SWIG_1(void * jarg1, void * jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  SwigValueWrapper< Ref< Shape > > arg2 ;
  Ref< Shape > *argp2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  argp2 = (Ref< Shape > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape >", 0);
    return ;
  }
  arg2 = *argp2; 
  CollisionObject_add_shape__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionObject_get_shape_count(void * jarg1) {
  int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = (int)CollisionObject_get_shape_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_shape(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape > > arg3 ;
  Ref< Shape > *argp3 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Shape > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape >", 0);
    return ;
  }
  arg3 = *argp3; 
  CollisionObject_set_shape(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_shape_transform(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  CollisionObject_set_shape_transform(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_shape_as_trigger(void * jarg1, int jarg2, unsigned int jarg3) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  CollisionObject_set_shape_as_trigger(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject_is_shape_set_as_trigger(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)CollisionObject_is_shape_set_as_trigger(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject_get_shape(void * jarg1, int jarg2) {
  void * jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape > > result;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject_get_shape(arg1,arg2);
  jresult = memnew(Ref< Shape >((const Ref< Shape > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject_get_shape_transform(void * jarg1, int jarg2) {
  void * jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject_get_shape_transform(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_remove_shape(void * jarg1, int jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionObject_remove_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_clear_shapes(void * jarg1) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  
  arg1 = (CollisionObject *)jarg1; 
  CollisionObject_clear_shapes(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_ray_pickable(void * jarg1, unsigned int jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionObject_set_ray_pickable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject_is_ray_pickable(void * jarg1) {
  unsigned int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = (bool)CollisionObject_is_ray_pickable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject_set_capture_input_on_drag(void * jarg1, unsigned int jarg2) {
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionObject_set_capture_input_on_drag(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject_get_capture_input_on_drag(void * jarg1) {
  unsigned int jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  bool result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = (bool)CollisionObject_get_capture_input_on_drag(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject_get_rid(void * jarg1) {
  void * jresult ;
  CollisionObject *arg1 = (CollisionObject *) 0 ;
  RID result;
  
  arg1 = (CollisionObject *)jarg1; 
  result = CollisionObject_get_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon_set_build_mode(void * jarg1, int jarg2) {
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionPolygon *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionPolygon_set_build_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon_get_build_mode(void * jarg1) {
  int jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (int)CollisionPolygon_get_build_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon_set_depth(void * jarg1, float jarg2) {
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  float arg2 ;
  
  arg1 = (CollisionPolygon *)jarg1; 
  arg2 = (float)jarg2; 
  CollisionPolygon_set_depth(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CollisionPolygon_get_depth(void * jarg1) {
  float jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  float result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (float)CollisionPolygon_get_depth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon_set_polygon(void * jarg1, void * jarg2) {
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (CollisionPolygon *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CollisionPolygon_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionPolygon_get_polygon(void * jarg1) {
  void * jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  Vector2Array result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = CollisionPolygon_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon_get_collision_object_first_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (int)CollisionPolygon_get_collision_object_first_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon_get_collision_object_last_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon *arg1 = (CollisionPolygon *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon *)jarg1; 
  result = (int)CollisionPolygon_get_collision_object_last_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionPolygon() {
  void * jresult ;
  CollisionPolygon *result = 0 ;
  
  result = (CollisionPolygon *)memnew(CollisionPolygon());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_resource_changed(void * jarg1, void * jarg2) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  arg2 = (Object *)jarg2; 
  CollisionShape_resource_changed(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_set_shape(void * jarg1, void * jarg2) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  arg2 = (Object *)jarg2; 
  CollisionShape_set_shape(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionShape_get_shape(void * jarg1) {
  void * jresult ;
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  Object *result = 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  result = (Object *)CollisionShape_get_shape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_set_trigger(void * jarg1, unsigned int jarg2) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionShape *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionShape_set_trigger(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionShape_is_trigger(void * jarg1) {
  unsigned int jresult ;
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  bool result;
  
  arg1 = (CollisionShape *)jarg1; 
  result = (bool)CollisionShape_is_trigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape_make_convex_from_brothers(void * jarg1) {
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  
  arg1 = (CollisionShape *)jarg1; 
  CollisionShape_make_convex_from_brothers(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionShape_get_collision_object_shape_index(void * jarg1) {
  int jresult ;
  CollisionShape *arg1 = (CollisionShape *) 0 ;
  int result;
  
  arg1 = (CollisionShape *)jarg1; 
  result = (int)CollisionShape_get_collision_object_shape_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionShape() {
  void * jresult ;
  CollisionShape *result = 0 ;
  
  result = (CollisionShape *)memnew(CollisionShape());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control__input_event(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  InputEvent *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  Control__input_event(arg1,(InputEvent const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_can_drop_data(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  Variant *arg3 = 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return 0;
  } 
  result = (bool)Control_can_drop_data(arg1,(Vector2 const &)*arg2,(Variant const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_drop_data(void * jarg1, void * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  Control_drop_data(arg1,(Vector2 const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_drag_data(void * jarg1, void * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Object *)Control_get_drag_data(arg1,(Vector2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_minimum_size(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_minimum_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_accept_event(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_accept_event(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_combined_minimum_size(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_combined_minimum_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_anchor__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  Control_set_anchor__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_anchor__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Control_set_anchor__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_anchor(void * jarg1, int jarg2) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Control_get_anchor(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_margin(void * jarg1, int jarg2, float jarg3) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Control_set_margin(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_anchor_and_margin(void * jarg1, int jarg2, int jarg3, float jarg4) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  Control_set_anchor_and_margin(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_begin(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_begin(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_end(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_end(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_pos(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_size(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_custom_minimum_size(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_custom_minimum_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_global_pos(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_global_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_rotation(void * jarg1, float jarg2) {
  Control *arg1 = (Control *) 0 ;
  float arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (float)jarg2; 
  Control_set_rotation(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_rotation_deg(void * jarg1, float jarg2) {
  Control *arg1 = (Control *) 0 ;
  float arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (float)jarg2; 
  Control_set_rotation_deg(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_scale(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_set_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_margin(void * jarg1, int jarg2) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Control_get_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_begin(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_begin(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_end(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_end(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_pos(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_size(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_rotation(void * jarg1) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  result = (float)Control_get_rotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_rotation_deg(void * jarg1) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  result = (float)Control_get_rotation_deg(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_scale(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_custom_minimum_size(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_custom_minimum_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_parent_area_size(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_parent_area_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_global_pos(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_global_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_rect(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Rect2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_global_rect(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Rect2 result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_global_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_area_as_parent_rect__SWIG_0(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_area_as_parent_rect__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_area_as_parent_rect__SWIG_1(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_set_area_as_parent_rect__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_show_modal__SWIG_0(void * jarg1, unsigned int jarg2) {
  Control *arg1 = (Control *) 0 ;
  bool arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Control_show_modal__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_show_modal__SWIG_1(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_show_modal__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_focus_mode(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_focus_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_has_focus(void * jarg1) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  result = (bool)Control_has_focus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_grab_focus(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_grab_focus(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_release_focus(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_release_focus(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_focus_owner(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Control *result = 0 ;
  
  arg1 = (Control *)jarg1; 
  result = (Control *)Control_get_focus_owner(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_h_size_flags(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_h_size_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_h_size_flags(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_h_size_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_stretch_ratio(void * jarg1, float jarg2) {
  Control *arg1 = (Control *) 0 ;
  float arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (float)jarg2; 
  Control_set_stretch_ratio(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Control_get_stretch_ratio(void * jarg1) {
  float jresult ;
  Control *arg1 = (Control *) 0 ;
  float result;
  
  arg1 = (Control *)jarg1; 
  result = (float)Control_get_stretch_ratio(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_v_size_flags(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_v_size_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_v_size_flags(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_v_size_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_theme(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  SwigValueWrapper< Ref< Theme > > arg2 ;
  Ref< Theme > *argp2 ;
  
  arg1 = (Control *)jarg1; 
  argp2 = (Ref< Theme > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Theme >", 0);
    return ;
  }
  arg2 = *argp2; 
  Control_set_theme(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_theme(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  SwigValueWrapper< Ref< Theme > > result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_theme(arg1);
  jresult = memnew(Ref< Theme >((const Ref< Theme > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_icon_override(void * jarg1, char * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  Control_add_icon_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_shader_override(void * jarg1, char * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Shader > > arg3 ;
  Ref< Shader > *argp3 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Shader > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shader >", 0);
    return ;
  }
  arg3 = *argp3; 
  Control_add_shader_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_style_override(void * jarg1, char * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< StyleBox > > arg3 ;
  Ref< StyleBox > *argp3 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< StyleBox > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< StyleBox >", 0);
    return ;
  }
  arg3 = *argp3; 
  Control_add_style_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_font_override(void * jarg1, char * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Font > > arg3 ;
  Ref< Font > *argp3 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Font > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Font >", 0);
    return ;
  }
  arg3 = *argp3; 
  Control_add_font_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_color_override(void * jarg1, char * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Control_add_color_override(arg1,(String const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_add_constant_override(void * jarg1, char * jarg2, int jarg3) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  Control_add_constant_override(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_icon__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_icon__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_icon__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_icon__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_stylebox__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< StyleBox > > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_stylebox__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< StyleBox >((const Ref< StyleBox > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_stylebox__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< StyleBox > > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_stylebox__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Ref< StyleBox >((const Ref< StyleBox > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_font__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Font > > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_font__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Ref< Font >((const Ref< Font > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_font__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Font > > result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_font__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Ref< Font >((const Ref< Font > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_color__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = Control_get_color__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_color__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  Color result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = Control_get_color__SWIG_0(arg1,(String const &)*arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_constant__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  result = (int)Control_get_constant__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_constant__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Control_get_constant__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_parent_control(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Control *result = 0 ;
  
  arg1 = (Control *)jarg1; 
  result = (Control *)Control_get_parent_control(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_tooltip(void * jarg1, char * jarg2) {
  Control *arg1 = (Control *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Control_set_tooltip(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_tooltip__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  String result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Control_get_tooltip__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_tooltip__SWIG_1(void * jarg1) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  String result;
  
  arg1 = (Control *)jarg1; 
  result = Control_get_tooltip__SWIG_0(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_default_cursor_shape(void * jarg1, int jarg2) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  Control_set_default_cursor_shape(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_default_cursor_shape(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_default_cursor_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_cursor_shape__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)Control_get_cursor_shape__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Control_get_cursor_shape__SWIG_1(void * jarg1) {
  int jresult ;
  Control *arg1 = (Control *) 0 ;
  int result;
  
  arg1 = (Control *)jarg1; 
  result = (int)Control_get_cursor_shape__SWIG_0(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_focus_neighbour(void * jarg1, int jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  NodePath *arg3 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NodePath *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Control_set_focus_neighbour(arg1,arg2,(NodePath const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Control_get_focus_neighbour(void * jarg1, int jarg2) {
  void * jresult ;
  Control *arg1 = (Control *) 0 ;
  int arg2 ;
  NodePath result;
  
  arg1 = (Control *)jarg1; 
  arg2 = (int)jarg2; 
  result = Control_get_focus_neighbour(arg1,arg2);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_ignore_mouse(void * jarg1, unsigned int jarg2) {
  Control *arg1 = (Control *) 0 ;
  bool arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Control_set_ignore_mouse(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_is_ignoring_mouse(void * jarg1) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  result = (bool)Control_is_ignoring_mouse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_force_drag(void * jarg1, void * jarg2, void * jarg3) {
  Control *arg1 = (Control *) 0 ;
  Variant *arg2 = 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  arg3 = (Object *)jarg3; 
  Control_force_drag(arg1,(Variant const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_stop_mouse(void * jarg1, unsigned int jarg2) {
  Control *arg1 = (Control *) 0 ;
  bool arg2 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Control_set_stop_mouse(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Control_is_stopping_mouse(void * jarg1) {
  unsigned int jresult ;
  Control *arg1 = (Control *) 0 ;
  bool result;
  
  arg1 = (Control *)jarg1; 
  result = (bool)Control_is_stopping_mouse(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_grab_click_focus(void * jarg1) {
  Control *arg1 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  Control_grab_click_focus(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_drag_forwarding(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Control *)jarg2; 
  Control_set_drag_forwarding(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_set_drag_preview(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Control *)jarg2; 
  Control_set_drag_preview(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Control_warp_mouse(void * jarg1, void * jarg2) {
  Control *arg1 = (Control *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Control *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Control_warp_mouse(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Control() {
  void * jresult ;
  Control *result = 0 ;
  
  result = (Control *)memnew(Control());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_set_font_data(void * jarg1, void * jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  SwigValueWrapper< Ref< DynamicFontData > > arg2 ;
  Ref< DynamicFontData > *argp2 ;
  
  arg1 = (DynamicFont *)jarg1; 
  argp2 = (Ref< DynamicFontData > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< DynamicFontData >", 0);
    return ;
  }
  arg2 = *argp2; 
  DynamicFont_set_font_data(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicFont_get_font_data(void * jarg1) {
  void * jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  SwigValueWrapper< Ref< DynamicFontData > > result;
  
  arg1 = (DynamicFont *)jarg1; 
  result = DynamicFont_get_font_data(arg1);
  jresult = memnew(Ref< DynamicFontData >((const Ref< DynamicFontData > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_set_size(void * jarg1, int jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  DynamicFont_set_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicFont_get_size(void * jarg1) {
  int jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int result;
  
  arg1 = (DynamicFont *)jarg1; 
  result = (int)DynamicFont_get_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_add_fallback(void * jarg1, void * jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  SwigValueWrapper< Ref< DynamicFontData > > arg2 ;
  Ref< DynamicFontData > *argp2 ;
  
  arg1 = (DynamicFont *)jarg1; 
  argp2 = (Ref< DynamicFontData > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< DynamicFontData >", 0);
    return ;
  }
  arg2 = *argp2; 
  DynamicFont_add_fallback(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_set_fallback(void * jarg1, int jarg2, void * jarg3) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< DynamicFontData > > arg3 ;
  Ref< DynamicFontData > *argp3 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< DynamicFontData > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< DynamicFontData >", 0);
    return ;
  }
  arg3 = *argp3; 
  DynamicFont_set_fallback(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicFont_get_fallback(void * jarg1, int jarg2) {
  void * jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< DynamicFontData > > result;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  result = DynamicFont_get_fallback(arg1,arg2);
  jresult = memnew(Ref< DynamicFontData >((const Ref< DynamicFontData > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DynamicFont_remove_fallback(void * jarg1, int jarg2) {
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int arg2 ;
  
  arg1 = (DynamicFont *)jarg1; 
  arg2 = (int)jarg2; 
  DynamicFont_remove_fallback(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicFont_get_fallback_count(void * jarg1) {
  int jresult ;
  DynamicFont *arg1 = (DynamicFont *) 0 ;
  int result;
  
  arg1 = (DynamicFont *)jarg1; 
  result = (int)DynamicFont_get_fallback_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DynamicFont() {
  void * jresult ;
  DynamicFont *result = 0 ;
  
  result = (DynamicFont *)memnew(DynamicFont());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_apply_changes(void * jarg1) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  EditorPlugin_apply_changes(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_clear(void * jarg1) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  EditorPlugin_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_create_spatial_gizmo(void * jarg1, void * jarg2) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Spatial *arg2 = (Spatial *) 0 ;
  SwigValueWrapper< Ref< EditorSpatialGizmo > > result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Spatial *)jarg2; 
  result = EditorPlugin_create_spatial_gizmo(arg1,arg2);
  jresult = memnew(Ref< EditorSpatialGizmo >((const Ref< EditorSpatialGizmo > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_edit(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Object *)jarg2; 
  EditorPlugin_edit(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_forward_input_event(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  InputEvent *arg2 = 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (InputEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)EditorPlugin_forward_input_event(arg1,(InputEvent const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_forward_spatial_input_event(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Camera *arg2 = (Camera *) 0 ;
  InputEvent *arg3 = 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Camera *)jarg2; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return 0;
  } 
  result = (bool)EditorPlugin_forward_spatial_input_event(arg1,arg2,(InputEvent const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_breakpoints(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  StringArray result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_breakpoints(arg1);
  jresult = memnew(StringArray((const StringArray &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_name(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  String result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_state(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Dictionary result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_state(arg1);
  jresult = memnew(Dictionary((const Dictionary &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_handles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)EditorPlugin_handles(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorPlugin_has_main_screen(void * jarg1) {
  unsigned int jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  bool result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (bool)EditorPlugin_has_main_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_make_visible(void * jarg1, unsigned int jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  bool arg2 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EditorPlugin_make_visible(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_set_state(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Dictionary *arg2 = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Dictionary *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Dictionary const & type is null", 0);
    return ;
  } 
  EditorPlugin_set_state(arg1,(Dictionary const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_control_to_container(void * jarg1, int jarg2, void * jarg3) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  int arg2 ;
  Control *arg3 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Control *)jarg3; 
  EditorPlugin_add_control_to_container(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_control_to_bottom_panel(void * jarg1, void * jarg2, char * jarg3) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *arg2 = (Control *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Control *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  EditorPlugin_add_control_to_bottom_panel(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_control_to_dock(void * jarg1, int jarg2, void * jarg3) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  int arg2 ;
  Control *arg3 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Control *)jarg3; 
  EditorPlugin_add_control_to_dock(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_control_from_docks(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Control *)jarg2; 
  EditorPlugin_remove_control_from_docks(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_control_from_bottom_panel(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *arg2 = (Control *) 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  arg2 = (Control *)jarg2; 
  EditorPlugin_remove_control_from_bottom_panel(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_custom_type(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  SwigValueWrapper< Ref< Script > > arg4 ;
  SwigValueWrapper< Ref< Texture > > arg5 ;
  Ref< Script > *argp4 ;
  Ref< Texture > *argp5 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  argp4 = (Ref< Script > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Script >", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (Ref< Texture > *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg5 = *argp5; 
  EditorPlugin_add_custom_type(arg1,(String const &)*arg2,(String const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_custom_type(void * jarg1, char * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorPlugin_remove_custom_type(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_import_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  SwigValueWrapper< Ref< EditorImportPlugin > > arg2 ;
  Ref< EditorImportPlugin > *argp2 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  argp2 = (Ref< EditorImportPlugin > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< EditorImportPlugin >", 0);
    return ;
  }
  arg2 = *argp2; 
  EditorPlugin_add_import_plugin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_import_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  SwigValueWrapper< Ref< EditorImportPlugin > > arg2 ;
  Ref< EditorImportPlugin > *argp2 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  argp2 = (Ref< EditorImportPlugin > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< EditorImportPlugin >", 0);
    return ;
  }
  arg2 = *argp2; 
  EditorPlugin_remove_import_plugin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_add_export_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  SwigValueWrapper< Ref< EditorExportPlugin > > arg2 ;
  Ref< EditorExportPlugin > *argp2 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  argp2 = (Ref< EditorExportPlugin > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< EditorExportPlugin >", 0);
    return ;
  }
  arg2 = *argp2; 
  EditorPlugin_add_export_plugin(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorPlugin_remove_export_plugin(void * jarg1, void * jarg2) {
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  SwigValueWrapper< Ref< EditorExportPlugin > > arg2 ;
  Ref< EditorExportPlugin > *argp2 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  argp2 = (Ref< EditorExportPlugin > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< EditorExportPlugin >", 0);
    return ;
  }
  arg2 = *argp2; 
  EditorPlugin_remove_export_plugin(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_base_control(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  Control *result = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (Control *)EditorPlugin_get_base_control(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_undo_redo(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  UndoRedo *result = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (UndoRedo *)EditorPlugin_get_undo_redo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_selection(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  EditorSelection *result = 0 ;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = (EditorSelection *)EditorPlugin_get_selection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorPlugin_get_editor_settings(void * jarg1) {
  void * jresult ;
  EditorPlugin *arg1 = (EditorPlugin *) 0 ;
  SwigValueWrapper< Ref< EditorSettings > > result;
  
  arg1 = (EditorPlugin *)jarg1; 
  result = EditorPlugin_get_editor_settings(arg1);
  jresult = memnew(Ref< EditorSettings >((const Ref< EditorSettings > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorPlugin() {
  void * jresult ;
  EditorPlugin *result = 0 ;
  
  result = (EditorPlugin *)memnew(EditorPlugin());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_stream(void * jarg1, void * jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  SwigValueWrapper< Ref< EventStream > > arg2 ;
  Ref< EventStream > *argp2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  argp2 = (Ref< EventStream > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< EventStream >", 0);
    return ;
  }
  arg2 = *argp2; 
  EventPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventPlayer_get_stream(void * jarg1) {
  void * jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  SwigValueWrapper< Ref< EventStream > > result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = EventPlayer_get_stream(arg1);
  jresult = memnew(Ref< EventStream >((const Ref< EventStream > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_play(void * jarg1) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  
  arg1 = (EventPlayer *)jarg1; 
  EventPlayer_play(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_stop(void * jarg1) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  
  arg1 = (EventPlayer *)jarg1; 
  EventPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EventPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_loop(void * jarg1, unsigned int jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EventPlayer_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_has_loop(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_volume(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_volume(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_pitch_scale(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_pitch_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_pitch_scale(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_pitch_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_tempo_scale(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_tempo_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_tempo_scale(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_tempo_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_volume_db(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EventPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  String result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = EventPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EventPlayer_get_loop_count(void * jarg1) {
  int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (int)EventPlayer_get_loop_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_pos(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_seek_pos(void * jarg1, float jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  EventPlayer_seek_pos(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_length(void * jarg1) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (float)EventPlayer_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EventPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EventPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  bool result;
  
  arg1 = (EventPlayer *)jarg1; 
  result = (bool)EventPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventPlayer_set_channel_volume(void * jarg1, int jarg2, float jarg3) {
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  EventPlayer_set_channel_volume(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_channel_volume(void * jarg1, int jarg2) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)EventPlayer_get_channel_volume(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EventPlayer_get_channel_last_note_time(void * jarg1, int jarg2) {
  float jresult ;
  EventPlayer *arg1 = (EventPlayer *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (EventPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)EventPlayer_get_channel_last_note_time(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EventPlayer() {
  void * jresult ;
  EventPlayer *result = 0 ;
  
  result = (EventPlayer *)memnew(EventPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_parameter(void * jarg1, int jarg2, void * jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  FixedMaterial_set_parameter(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_get_parameter(void * jarg1, int jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  FixedMaterial_get_parameter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_texture(void * jarg1, int jarg2, void * jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  FixedMaterial_set_texture(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FixedMaterial_get_texture(void * jarg1, int jarg2) {
  void * jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = FixedMaterial_get_texture(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_texcoord_mode(void * jarg1, int jarg2, int jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  FixedMaterial_set_texcoord_mode(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FixedMaterial_get_texcoord_mode(void * jarg1, int jarg2) {
  int jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)FixedMaterial_get_texcoord_mode(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_fixed_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  FixedMaterial_set_fixed_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FixedMaterial_get_fixed_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)FixedMaterial_get_fixed_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_uv_transform(void * jarg1, void * jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  Transform *arg2 = 0 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  FixedMaterial_set_uv_transform(arg1,(Transform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FixedMaterial_get_uv_transform(void * jarg1) {
  void * jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  Transform result;
  
  arg1 = (FixedMaterial *)jarg1; 
  result = FixedMaterial_get_uv_transform(arg1);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_light_shader(void * jarg1, int jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int arg2 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (int)jarg2; 
  FixedMaterial_set_light_shader(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FixedMaterial_get_light_shader(void * jarg1) {
  int jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  int result;
  
  arg1 = (FixedMaterial *)jarg1; 
  result = (int)FixedMaterial_get_light_shader(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FixedMaterial_set_point_size(void * jarg1, float jarg2) {
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  float arg2 ;
  
  arg1 = (FixedMaterial *)jarg1; 
  arg2 = (float)jarg2; 
  FixedMaterial_set_point_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_FixedMaterial_get_point_size(void * jarg1) {
  float jresult ;
  FixedMaterial *arg1 = (FixedMaterial *) 0 ;
  float result;
  
  arg1 = (FixedMaterial *)jarg1; 
  result = (float)FixedMaterial_get_point_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FixedMaterial() {
  void * jresult ;
  FixedMaterial *result = 0 ;
  
  result = (FixedMaterial *)memnew(FixedMaterial());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_material_override(void * jarg1, void * jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  GeometryInstance_set_material_override(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GeometryInstance_get_material_override(void * jarg1) {
  void * jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (Object *)GeometryInstance_get_material_override(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  GeometryInstance_set_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GeometryInstance_get_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GeometryInstance_get_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_cast_shadows_setting(void * jarg1, int jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  GeometryInstance_set_cast_shadows_setting(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeometryInstance_get_cast_shadows_setting(void * jarg1) {
  int jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (int)GeometryInstance_get_cast_shadows_setting(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_draw_range_begin(void * jarg1, float jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (float)jarg2; 
  GeometryInstance_set_draw_range_begin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeometryInstance_get_draw_range_begin(void * jarg1) {
  float jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (float)GeometryInstance_get_draw_range_begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_draw_range_end(void * jarg1, float jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (float)jarg2; 
  GeometryInstance_set_draw_range_end(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeometryInstance_get_draw_range_end(void * jarg1) {
  float jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (float)GeometryInstance_get_draw_range_end(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_baked_light_texture_id(void * jarg1, int jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (int)jarg2; 
  GeometryInstance_set_baked_light_texture_id(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GeometryInstance_get_baked_light_texture_id(void * jarg1) {
  int jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  int result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (int)GeometryInstance_get_baked_light_texture_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GeometryInstance_set_extra_cull_margin(void * jarg1, float jarg2) {
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float arg2 ;
  
  arg1 = (GeometryInstance *)jarg1; 
  arg2 = (float)jarg2; 
  GeometryInstance_set_extra_cull_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GeometryInstance_get_extra_cull_margin(void * jarg1) {
  float jresult ;
  GeometryInstance *arg1 = (GeometryInstance *) 0 ;
  float result;
  
  arg1 = (GeometryInstance *)jarg1; 
  result = (float)GeometryInstance_get_extra_cull_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphEdit_connect_node(void * jarg1, char * jarg2, int jarg3, char * jarg4, int jarg5) {
  int jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int arg5 ;
  int result;
  
  arg1 = (GraphEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  result = (int)GraphEdit_connect_node(arg1,(String const &)*arg2,arg3,(String const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphEdit_is_node_connected(void * jarg1, char * jarg2, int jarg3, char * jarg4, int jarg5) {
  unsigned int jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (GraphEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  result = (bool)GraphEdit_is_node_connected(arg1,(String const &)*arg2,arg3,(String const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphEdit_disconnect_node(void * jarg1, char * jarg2, int jarg3, char * jarg4, int jarg5) {
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  String *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (GraphEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  GraphEdit_disconnect_node(arg1,(String const &)*arg2,arg3,(String const &)*arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphEdit_get_connection_list(void * jarg1) {
  void * jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  Array result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = GraphEdit_get_connection_list(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphEdit_get_scroll_ofs(void * jarg1) {
  void * jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  Vector2 result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = GraphEdit_get_scroll_ofs(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphEdit_set_zoom(void * jarg1, float jarg2) {
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  float arg2 ;
  
  arg1 = (GraphEdit *)jarg1; 
  arg2 = (float)jarg2; 
  GraphEdit_set_zoom(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GraphEdit_get_zoom(void * jarg1) {
  float jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  float result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = (float)GraphEdit_get_zoom(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphEdit_set_right_disconnects(void * jarg1, unsigned int jarg2) {
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (GraphEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GraphEdit_set_right_disconnects(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphEdit_is_right_disconnects_enabled(void * jarg1) {
  unsigned int jresult ;
  GraphEdit *arg1 = (GraphEdit *) 0 ;
  bool result;
  
  arg1 = (GraphEdit *)jarg1; 
  result = (bool)GraphEdit_is_right_disconnects_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GraphEdit() {
  void * jresult ;
  GraphEdit *result = 0 ;
  
  result = (GraphEdit *)memnew(GraphEdit());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_theme(void * jarg1, void * jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  SwigValueWrapper< Ref< MeshLibrary > > arg2 ;
  Ref< MeshLibrary > *argp2 ;
  
  arg1 = (GridMap *)jarg1; 
  argp2 = (Ref< MeshLibrary > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< MeshLibrary >", 0);
    return ;
  }
  arg2 = *argp2; 
  GridMap_set_theme(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_get_theme(void * jarg1) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  SwigValueWrapper< Ref< MeshLibrary > > result;
  
  arg1 = (GridMap *)jarg1; 
  result = GridMap_get_theme(arg1);
  jresult = memnew(Ref< MeshLibrary >((const Ref< MeshLibrary > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_bake(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_bake(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_is_baking_enabled(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_is_baking_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_cell_size(void * jarg1, float jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  float arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (float)jarg2; 
  GridMap_set_cell_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GridMap_get_cell_size(void * jarg1) {
  float jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  float result;
  
  arg1 = (GridMap *)jarg1; 
  result = (float)GridMap_get_cell_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_octant_size(void * jarg1, int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  GridMap_set_octant_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_octant_size(void * jarg1) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  result = (int)GridMap_get_octant_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_cell_item__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  GridMap_set_cell_item__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_cell_item__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  GridMap_set_cell_item__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_cell_item(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)GridMap_get_cell_item(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_cell_item_orientation(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)GridMap_get_cell_item_orientation(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_resource_changed(void * jarg1, void * jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (Object *)jarg2; 
  GridMap_resource_changed(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_center_x(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_center_x(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_get_center_x(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_get_center_x(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_center_y(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_center_y(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_get_center_y(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_get_center_y(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_center_z(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_center_z(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_get_center_z(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_get_center_z(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  GridMap_set_clip__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  GridMap_set_clip__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  GridMap_set_clip__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_clip__SWIG_3(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_clip__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_create_area(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  AABB *arg3 = 0 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (AABB *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return 0;
  } 
  result = (int)GridMap_create_area(arg1,arg2,(AABB const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_area_get_bounds(void * jarg1, int jarg2) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  AABB result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = GridMap_area_get_bounds(arg1,arg2);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_exterior_portal(void * jarg1, int jarg2, unsigned int jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  GridMap_area_set_exterior_portal(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_name(void * jarg1, int jarg2, char * jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  GridMap_area_set_name(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_area_get_name(void * jarg1, int jarg2) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = GridMap_area_get_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_area_is_exterior_portal(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GridMap_area_is_exterior_portal(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_portal_disable_distance(void * jarg1, int jarg2, float jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  GridMap_area_set_portal_disable_distance(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GridMap_area_get_portal_disable_distance(void * jarg1, int jarg2) {
  float jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)GridMap_area_get_portal_disable_distance(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_area_set_portal_disable_color(void * jarg1, int jarg2, void * jarg3) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  GridMap_area_set_portal_disable_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GridMap_area_get_portal_disable_color(void * jarg1, int jarg2) {
  void * jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  result = GridMap_area_get_portal_disable_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_erase_area(void * jarg1, int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  int arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = (int)jarg2; 
  GridMap_erase_area(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridMap_get_unused_area_id(void * jarg1) {
  int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  int result;
  
  arg1 = (GridMap *)jarg1; 
  result = (int)GridMap_get_unused_area_id(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_bake_geometry(void * jarg1) {
  GridMap *arg1 = (GridMap *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  GridMap_bake_geometry(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_set_use_baked_light(void * jarg1, unsigned int jarg2) {
  GridMap *arg1 = (GridMap *) 0 ;
  bool arg2 ;
  
  arg1 = (GridMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GridMap_set_use_baked_light(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GridMap_is_using_baked_light(void * jarg1) {
  unsigned int jresult ;
  GridMap *arg1 = (GridMap *) 0 ;
  bool result;
  
  arg1 = (GridMap *)jarg1; 
  result = (bool)GridMap_is_using_baked_light(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridMap_clear(void * jarg1) {
  GridMap *arg1 = (GridMap *) 0 ;
  
  arg1 = (GridMap *)jarg1; 
  GridMap_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GridMap() {
  void * jresult ;
  GridMap *result = 0 ;
  
  result = (GridMap *)memnew(GridMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_request__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (int)HTTPRequest_request__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_request__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  StringArray *arg3 = 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (StringArray *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StringArray const & type is null", 0);
    return 0;
  } 
  result = (int)HTTPRequest_request__SWIG_0(arg1,(String const &)*arg2,(StringArray const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_request__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)HTTPRequest_request__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_cancel_request(void * jarg1) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  HTTPRequest_cancel_request(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_http_client_status(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_http_client_status(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_use_threads(void * jarg1, unsigned int jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  bool arg2 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  HTTPRequest_set_use_threads(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTTPRequest_is_using_threads(void * jarg1) {
  unsigned int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  bool result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (bool)HTTPRequest_is_using_threads(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_body_size_limit(void * jarg1, int jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int arg2 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  arg2 = (int)jarg2; 
  HTTPRequest_set_body_size_limit(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_body_size_limit(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_body_size_limit(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_max_redirects(void * jarg1, int jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int arg2 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  arg2 = (int)jarg2; 
  HTTPRequest_set_max_redirects(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_max_redirects(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_max_redirects(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTTPRequest_set_download_file(void * jarg1, char * jarg2) {
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (HTTPRequest *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  HTTPRequest_set_download_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTTPRequest_get_download_file(void * jarg1) {
  void * jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  String result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = HTTPRequest_get_download_file(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_downloaded_bytes(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_downloaded_bytes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTTPRequest_get_body_size(void * jarg1) {
  int jresult ;
  HTTPRequest *arg1 = (HTTPRequest *) 0 ;
  int result;
  
  arg1 = (HTTPRequest *)jarg1; 
  result = (int)HTTPRequest_get_body_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTTPRequest() {
  void * jresult ;
  HTTPRequest *result = 0 ;
  
  result = (HTTPRequest *)memnew(HTTPRequest());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_begin(void * jarg1, int jarg2, void * jarg3) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  ImmediateGeometry_begin(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_normal(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_normal(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_tangent(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Plane *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Plane const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_tangent(arg1,(Plane const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_color(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_uv(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_uv(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_set_uv2(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_set_uv2(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_add_vertex(void * jarg1, void * jarg2) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ImmediateGeometry_add_vertex(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_add_sphere(void * jarg1, int jarg2, int jarg3, float jarg4) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  ImmediateGeometry_add_sphere(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_end(void * jarg1) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  ImmediateGeometry_end(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImmediateGeometry_clear(void * jarg1) {
  ImmediateGeometry *arg1 = (ImmediateGeometry *) 0 ;
  
  arg1 = (ImmediateGeometry *)jarg1; 
  ImmediateGeometry_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImmediateGeometry() {
  void * jresult ;
  ImmediateGeometry *result = 0 ;
  
  result = (ImmediateGeometry *)memnew(ImmediateGeometry());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstancePlaceholder_replace_by_instance__SWIG_0(void * jarg1, void * jarg2) {
  InstancePlaceholder *arg1 = (InstancePlaceholder *) 0 ;
  SwigValueWrapper< Ref< PackedScene > > arg2 ;
  Ref< PackedScene > *argp2 ;
  
  arg1 = (InstancePlaceholder *)jarg1; 
  argp2 = (Ref< PackedScene > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< PackedScene >", 0);
    return ;
  }
  arg2 = *argp2; 
  InstancePlaceholder_replace_by_instance__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InstancePlaceholder_replace_by_instance__SWIG_1(void * jarg1) {
  InstancePlaceholder *arg1 = (InstancePlaceholder *) 0 ;
  
  arg1 = (InstancePlaceholder *)jarg1; 
  InstancePlaceholder_replace_by_instance__SWIG_0(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InstancePlaceholder_get_instance_path(void * jarg1) {
  void * jresult ;
  InstancePlaceholder *arg1 = (InstancePlaceholder *) 0 ;
  String result;
  
  arg1 = (InstancePlaceholder *)jarg1; 
  result = InstancePlaceholder_get_instance_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_target_path(void * jarg1, void * jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  InterpolatedCamera_set_target_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InterpolatedCamera_get_target_path(void * jarg1) {
  void * jresult ;
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  NodePath result;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  result = InterpolatedCamera_get_target_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_target(void * jarg1, void * jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  Camera *arg2 = (Camera *) 0 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = (Camera *)jarg2; 
  InterpolatedCamera_set_target(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_speed(void * jarg1, float jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  float arg2 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = (float)jarg2; 
  InterpolatedCamera_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_InterpolatedCamera_get_speed(void * jarg1) {
  float jresult ;
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  float result;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  result = (float)InterpolatedCamera_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InterpolatedCamera_set_interpolation_enabled(void * jarg1, unsigned int jarg2) {
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  InterpolatedCamera_set_interpolation_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InterpolatedCamera_is_interpolation_enabled(void * jarg1) {
  unsigned int jresult ;
  InterpolatedCamera *arg1 = (InterpolatedCamera *) 0 ;
  bool result;
  
  arg1 = (InterpolatedCamera *)jarg1; 
  result = (bool)InterpolatedCamera_is_interpolation_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InterpolatedCamera() {
  void * jresult ;
  InterpolatedCamera *result = 0 ;
  
  result = (InterpolatedCamera *)memnew(InterpolatedCamera());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_bone_name(void * jarg1, char * jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  InverseKinematics_set_bone_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InverseKinematics_get_bone_name(void * jarg1) {
  void * jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  String result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = InverseKinematics_get_bone_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_iterations(void * jarg1, int jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (int)jarg2; 
  InverseKinematics_set_iterations(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_InverseKinematics_get_iterations(void * jarg1) {
  int jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (int)InverseKinematics_get_iterations(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_chain_size(void * jarg1, int jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (int)jarg2; 
  InverseKinematics_set_chain_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_InverseKinematics_get_chain_size(void * jarg1) {
  int jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  int result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (int)InverseKinematics_get_chain_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_precision(void * jarg1, float jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (float)jarg2; 
  InverseKinematics_set_precision(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_InverseKinematics_get_precision(void * jarg1) {
  float jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (float)InverseKinematics_get_precision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InverseKinematics_set_speed(void * jarg1, float jarg2) {
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float arg2 ;
  
  arg1 = (InverseKinematics *)jarg1; 
  arg2 = (float)jarg2; 
  InverseKinematics_set_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_InverseKinematics_get_speed(void * jarg1) {
  float jresult ;
  InverseKinematics *arg1 = (InverseKinematics *) 0 ;
  float result;
  
  arg1 = (InverseKinematics *)jarg1; 
  result = (float)InverseKinematics_get_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InverseKinematics() {
  void * jresult ;
  InverseKinematics *result = 0 ;
  
  result = (InverseKinematics *)memnew(InverseKinematics());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_item__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  ItemList *arg1 = (ItemList *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  bool arg4 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (ItemList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  ItemList_add_item__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_item__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (ItemList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  ItemList_add_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_item__SWIG_2(void * jarg1, char * jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ItemList_add_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_icon_item__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  bool arg3 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (ItemList *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  ItemList_add_icon_item__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_add_icon_item__SWIG_1(void * jarg1, void * jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (ItemList *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  ItemList_add_icon_item__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_text(void * jarg1, int jarg2, char * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ItemList_set_item_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_text(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_icon(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  ItemList_set_item_icon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_icon(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_icon(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_icon_region(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  ItemList_set_item_icon_region(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_icon_region(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Rect2 result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_icon_region(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_selectable(void * jarg1, int jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_set_item_selectable(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_is_item_selectable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ItemList_is_item_selectable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_disabled(void * jarg1, int jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_set_item_disabled(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_is_item_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ItemList_is_item_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_metadata(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ItemList_set_item_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_get_item_metadata(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_get_item_metadata(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_custom_bg_color(void * jarg1, int jarg2, void * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ItemList_set_item_custom_bg_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_custom_bg_color(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_custom_bg_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_item_tooltip(void * jarg1, int jarg2, char * jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ItemList_set_item_tooltip(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_item_tooltip(void * jarg1, int jarg2) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = ItemList_get_item_tooltip(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_select__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ItemList_select__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_select__SWIG_1(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_select__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_unselect(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_unselect(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_is_selected(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ItemList_is_selected(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_item_count(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_item_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_remove_item(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_remove_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_clear(void * jarg1) {
  ItemList *arg1 = (ItemList *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  ItemList_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_sort_items_by_text(void * jarg1) {
  ItemList *arg1 = (ItemList *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  ItemList_sort_items_by_text(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_fixed_column_width(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_fixed_column_width(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_fixed_column_width(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_fixed_column_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_same_column_width(void * jarg1, unsigned int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  bool arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ItemList_set_same_column_width(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_is_same_column_width(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_is_same_column_width(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_max_text_lines(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_max_text_lines(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_max_text_lines(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_max_text_lines(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_max_columns(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_max_columns(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_max_columns(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_max_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_select_mode(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_select_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_select_mode(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_select_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_icon_mode(void * jarg1, int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  int arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (int)jarg2; 
  ItemList_set_icon_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_icon_mode(void * jarg1) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  result = (int)ItemList_get_icon_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_min_icon_size(void * jarg1, void * jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ItemList_set_min_icon_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_min_icon_size(void * jarg1) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 result;
  
  arg1 = (ItemList *)jarg1; 
  result = ItemList_get_min_icon_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_max_icon_size(void * jarg1, void * jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ItemList_set_max_icon_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemList_get_max_icon_size(void * jarg1) {
  void * jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 result;
  
  arg1 = (ItemList *)jarg1; 
  result = ItemList_get_max_icon_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_icon_scale(void * jarg1, float jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  float arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (float)jarg2; 
  ItemList_set_icon_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemList_get_icon_scale(void * jarg1) {
  float jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  float result;
  
  arg1 = (ItemList *)jarg1; 
  result = (float)ItemList_get_icon_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_set_allow_rmb_select(void * jarg1, unsigned int jarg2) {
  ItemList *arg1 = (ItemList *) 0 ;
  bool arg2 ;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ItemList_set_allow_rmb_select(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemList_get_allow_rmb_select(void * jarg1) {
  unsigned int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  bool result;
  
  arg1 = (ItemList *)jarg1; 
  result = (bool)ItemList_get_allow_rmb_select(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_item_at_pos__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)ItemList_get_item_at_pos__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemList_get_item_at_pos__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  ItemList *arg1 = (ItemList *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (ItemList *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)ItemList_get_item_at_pos__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemList_ensure_current_is_visible(void * jarg1) {
  ItemList *arg1 = (ItemList *) 0 ;
  
  arg1 = (ItemList *)jarg1; 
  ItemList_ensure_current_is_visible(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemList() {
  void * jresult ;
  ItemList *result = 0 ;
  
  result = (ItemList *)memnew(ItemList());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_node_a(void * jarg1, void * jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint_set_node_a(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_get_node_a(void * jarg1) {
  void * jresult ;
  Joint *arg1 = (Joint *) 0 ;
  NodePath result;
  
  arg1 = (Joint *)jarg1; 
  result = Joint_get_node_a(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_node_b(void * jarg1, void * jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint_set_node_b(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint_get_node_b(void * jarg1) {
  void * jresult ;
  Joint *arg1 = (Joint *) 0 ;
  NodePath result;
  
  arg1 = (Joint *)jarg1; 
  result = Joint_get_node_b(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_solver_priority(void * jarg1, int jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  int arg2 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = (int)jarg2; 
  Joint_set_solver_priority(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Joint_get_solver_priority(void * jarg1) {
  int jresult ;
  Joint *arg1 = (Joint *) 0 ;
  int result;
  
  arg1 = (Joint *)jarg1; 
  result = (int)Joint_get_solver_priority(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint_set_exclude_nodes_from_collision(void * jarg1, unsigned int jarg2) {
  Joint *arg1 = (Joint *) 0 ;
  bool arg2 ;
  
  arg1 = (Joint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Joint_set_exclude_nodes_from_collision(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Joint_get_exclude_nodes_from_collision(void * jarg1) {
  unsigned int jresult ;
  Joint *arg1 = (Joint *) 0 ;
  bool result;
  
  arg1 = (Joint *)jarg1; 
  result = (bool)Joint_get_exclude_nodes_from_collision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_align(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_align(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_valign(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_valign(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_valign(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_valign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_text(void * jarg1, char * jarg2) {
  Label *arg1 = (Label *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Label *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Label_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Label_get_text(void * jarg1) {
  void * jresult ;
  Label *arg1 = (Label *) 0 ;
  String result;
  
  arg1 = (Label *)jarg1; 
  result = Label_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_autowrap(void * jarg1, unsigned int jarg2) {
  Label *arg1 = (Label *) 0 ;
  bool arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Label_set_autowrap(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Label_has_autowrap(void * jarg1) {
  unsigned int jresult ;
  Label *arg1 = (Label *) 0 ;
  bool result;
  
  arg1 = (Label *)jarg1; 
  result = (bool)Label_has_autowrap(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_clip_text(void * jarg1, unsigned int jarg2) {
  Label *arg1 = (Label *) 0 ;
  bool arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Label_set_clip_text(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Label_is_clipping_text(void * jarg1) {
  unsigned int jresult ;
  Label *arg1 = (Label *) 0 ;
  bool result;
  
  arg1 = (Label *)jarg1; 
  result = (bool)Label_is_clipping_text(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_uppercase(void * jarg1, unsigned int jarg2) {
  Label *arg1 = (Label *) 0 ;
  bool arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Label_set_uppercase(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Label_is_uppercase(void * jarg1) {
  unsigned int jresult ;
  Label *arg1 = (Label *) 0 ;
  bool result;
  
  arg1 = (Label *)jarg1; 
  result = (bool)Label_is_uppercase(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_line_height(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_line_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_line_count(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_line_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_total_character_count(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_total_character_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_visible_characters(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_visible_characters(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_visible_characters(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_visible_characters(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_percent_visible(void * jarg1, float jarg2) {
  Label *arg1 = (Label *) 0 ;
  float arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (float)jarg2; 
  Label_set_percent_visible(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Label_get_percent_visible(void * jarg1) {
  float jresult ;
  Label *arg1 = (Label *) 0 ;
  float result;
  
  arg1 = (Label *)jarg1; 
  result = (float)Label_get_percent_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_lines_skipped(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_lines_skipped(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_lines_skipped(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_lines_skipped(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Label_set_max_lines_visible(void * jarg1, int jarg2) {
  Label *arg1 = (Label *) 0 ;
  int arg2 ;
  
  arg1 = (Label *)jarg1; 
  arg2 = (int)jarg2; 
  Label_set_max_lines_visible(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Label_get_max_lines_visible(void * jarg1) {
  int jresult ;
  Label *arg1 = (Label *) 0 ;
  int result;
  
  arg1 = (Label *)jarg1; 
  result = (int)Label_get_max_lines_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Label() {
  void * jresult ;
  Label *result = 0 ;
  
  result = (Label *)memnew(Label());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_parameter(void * jarg1, int jarg2, float jarg3) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Light_set_parameter(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light_get_parameter(void * jarg1, int jarg2) {
  float jresult ;
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Light_get_parameter(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_color(void * jarg1, int jarg2, void * jarg3) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Light_set_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_get_color(void * jarg1, int jarg2) {
  void * jresult ;
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  result = Light_get_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_project_shadows(void * jarg1, unsigned int jarg2) {
  Light *arg1 = (Light *) 0 ;
  bool arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light_set_project_shadows(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_has_project_shadows(void * jarg1) {
  unsigned int jresult ;
  Light *arg1 = (Light *) 0 ;
  bool result;
  
  arg1 = (Light *)jarg1; 
  result = (bool)Light_has_project_shadows(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_projector(void * jarg1, void * jarg2) {
  Light *arg1 = (Light *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (Light *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  Light_set_projector(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light_get_projector(void * jarg1) {
  void * jresult ;
  Light *arg1 = (Light *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Light *)jarg1; 
  result = Light_get_projector(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_operator(void * jarg1, int jarg2) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  Light_set_operator(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_get_operator(void * jarg1) {
  int jresult ;
  Light *arg1 = (Light *) 0 ;
  int result;
  
  arg1 = (Light *)jarg1; 
  result = (int)Light_get_operator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_bake_mode(void * jarg1, int jarg2) {
  Light *arg1 = (Light *) 0 ;
  int arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = (int)jarg2; 
  Light_set_bake_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light_get_bake_mode(void * jarg1) {
  int jresult ;
  Light *arg1 = (Light *) 0 ;
  int result;
  
  arg1 = (Light *)jarg1; 
  result = (int)Light_get_bake_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_enabled(void * jarg1, unsigned int jarg2) {
  Light *arg1 = (Light *) 0 ;
  bool arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_is_enabled(void * jarg1) {
  unsigned int jresult ;
  Light *arg1 = (Light *) 0 ;
  bool result;
  
  arg1 = (Light *)jarg1; 
  result = (bool)Light_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light_set_editor_only(void * jarg1, unsigned int jarg2) {
  Light *arg1 = (Light *) 0 ;
  bool arg2 ;
  
  arg1 = (Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light_set_editor_only(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light_is_editor_only(void * jarg1) {
  unsigned int jresult ;
  Light *arg1 = (Light *) 0 ;
  bool result;
  
  arg1 = (Light *)jarg1; 
  result = (bool)Light_is_editor_only(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_align(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_set_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineEdit_get_align(void * jarg1) {
  int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  int result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (int)LineEdit_get_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_clear(void * jarg1) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  LineEdit_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select_all(void * jarg1) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  LineEdit_select_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_text(void * jarg1, char * jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  LineEdit_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineEdit_get_text(void * jarg1) {
  void * jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  String result;
  
  arg1 = (LineEdit *)jarg1; 
  result = LineEdit_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_cursor_pos(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_set_cursor_pos(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineEdit_get_cursor_pos(void * jarg1) {
  int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  int result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (int)LineEdit_get_cursor_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_max_length(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_set_max_length(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LineEdit_get_max_length(void * jarg1) {
  int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  int result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (int)LineEdit_get_max_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_append_at_cursor(void * jarg1, char * jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  LineEdit_append_at_cursor(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_editable(void * jarg1, unsigned int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  LineEdit_set_editable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LineEdit_is_editable(void * jarg1) {
  unsigned int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (bool)LineEdit_is_editable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_set_secret(void * jarg1, unsigned int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  LineEdit_set_secret(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LineEdit_is_secret(void * jarg1) {
  unsigned int jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  bool result;
  
  arg1 = (LineEdit *)jarg1; 
  result = (bool)LineEdit_is_secret(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  LineEdit_select__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select__SWIG_1(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_select__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_select__SWIG_2(void * jarg1) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  LineEdit_select__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LineEdit_menu_option(void * jarg1, int jarg2) {
  LineEdit *arg1 = (LineEdit *) 0 ;
  int arg2 ;
  
  arg1 = (LineEdit *)jarg1; 
  arg2 = (int)jarg2; 
  LineEdit_menu_option(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LineEdit_get_menu(void * jarg1) {
  void * jresult ;
  LineEdit *arg1 = (LineEdit *) 0 ;
  PopupMenu *result = 0 ;
  
  arg1 = (LineEdit *)jarg1; 
  result = (PopupMenu *)LineEdit_get_menu(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LineEdit() {
  void * jresult ;
  LineEdit *result = 0 ;
  
  result = (LineEdit *)memnew(LineEdit());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_set_mesh(void * jarg1, void * jarg2) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  SwigValueWrapper< Ref< Mesh > > arg2 ;
  Ref< Mesh > *argp2 ;
  
  arg1 = (MeshInstance *)jarg1; 
  argp2 = (Ref< Mesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Mesh >", 0);
    return ;
  }
  arg2 = *argp2; 
  MeshInstance_set_mesh(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshInstance_get_mesh(void * jarg1) {
  void * jresult ;
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  SwigValueWrapper< Ref< Mesh > > result;
  
  arg1 = (MeshInstance *)jarg1; 
  result = MeshInstance_get_mesh(arg1);
  jresult = memnew(Ref< Mesh >((const Ref< Mesh > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_set_skeleton_path(void * jarg1, void * jarg2) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  MeshInstance_set_skeleton_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshInstance_get_skeleton_path(void * jarg1) {
  void * jresult ;
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  NodePath result;
  
  arg1 = (MeshInstance *)jarg1; 
  result = MeshInstance_get_skeleton_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshInstance_get_aabb(void * jarg1) {
  void * jresult ;
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  AABB result;
  
  arg1 = (MeshInstance *)jarg1; 
  result = MeshInstance_get_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_create_trimesh_collision(void * jarg1) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  MeshInstance_create_trimesh_collision(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshInstance_create_convex_collision(void * jarg1) {
  MeshInstance *arg1 = (MeshInstance *) 0 ;
  
  arg1 = (MeshInstance *)jarg1; 
  MeshInstance_create_convex_collision(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshInstance() {
  void * jresult ;
  MeshInstance *result = 0 ;
  
  result = (MeshInstance *)memnew(MeshInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultiMeshInstance_set_multimesh(void * jarg1, void * jarg2) {
  MultiMeshInstance *arg1 = (MultiMeshInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (MultiMeshInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  MultiMeshInstance_set_multimesh(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultiMeshInstance_get_multimesh(void * jarg1) {
  void * jresult ;
  MultiMeshInstance *arg1 = (MultiMeshInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (MultiMeshInstance *)jarg1; 
  result = (Object *)MultiMeshInstance_get_multimesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultiMeshInstance() {
  void * jresult ;
  MultiMeshInstance *result = 0 ;
  
  result = (MultiMeshInstance *)memnew(MultiMeshInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation_navmesh_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  SwigValueWrapper< Ref< NavigationMesh > > arg2 ;
  Transform *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  Ref< NavigationMesh > *argp2 ;
  int result;
  
  arg1 = (Navigation *)jarg1; 
  argp2 = (Ref< NavigationMesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationMesh >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  arg4 = (Object *)jarg4; 
  result = (int)Navigation_navmesh_create__SWIG_0(arg1,arg2,(Transform const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation_navmesh_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  SwigValueWrapper< Ref< NavigationMesh > > arg2 ;
  Transform *arg3 = 0 ;
  Ref< NavigationMesh > *argp2 ;
  int result;
  
  arg1 = (Navigation *)jarg1; 
  argp2 = (Ref< NavigationMesh > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationMesh >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return 0;
  } 
  result = (int)Navigation_navmesh_create__SWIG_0(arg1,arg2,(Transform const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation_navmesh_set_transform(void * jarg1, int jarg2, void * jarg3) {
  Navigation *arg1 = (Navigation *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Navigation_navmesh_set_transform(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation_navmesh_remove(void * jarg1, int jarg2) {
  Navigation *arg1 = (Navigation *) 0 ;
  int arg2 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (int)jarg2; 
  Navigation_navmesh_remove(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_simple_path__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  bool arg4 ;
  Vector3Array result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = Navigation_get_simple_path__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_simple_path__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3Array result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_simple_path__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_to_segment__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  bool arg4 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = Navigation_get_closest_point_to_segment__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_to_segment__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_closest_point_to_segment__SWIG_0(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_closest_point(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_normal(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Navigation_get_closest_point_normal(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_closest_point_owner(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (Object *)Navigation_get_closest_point_owner(arg1,(Vector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation_set_up_vector(void * jarg1, void * jarg2) {
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Navigation *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Navigation_set_up_vector(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation_get_up_vector(void * jarg1) {
  void * jresult ;
  Navigation *arg1 = (Navigation *) 0 ;
  Vector3 result;
  
  arg1 = (Navigation *)jarg1; 
  result = Navigation_get_up_vector(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Navigation() {
  void * jresult ;
  Navigation *result = 0 ;
  
  result = (Navigation *)memnew(Navigation());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMeshInstance_set_navigation_mesh(void * jarg1, void * jarg2) {
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  arg2 = (Object *)jarg2; 
  NavigationMeshInstance_set_navigation_mesh(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationMeshInstance_get_navigation_mesh(void * jarg1) {
  void * jresult ;
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  result = (Object *)NavigationMeshInstance_get_navigation_mesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationMeshInstance_set_enabled(void * jarg1, unsigned int jarg2) {
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  NavigationMeshInstance_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NavigationMeshInstance_is_enabled(void * jarg1) {
  unsigned int jresult ;
  NavigationMeshInstance *arg1 = (NavigationMeshInstance *) 0 ;
  bool result;
  
  arg1 = (NavigationMeshInstance *)jarg1; 
  result = (bool)NavigationMeshInstance_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationMeshInstance() {
  void * jresult ;
  NavigationMeshInstance *result = 0 ;
  
  result = (NavigationMeshInstance *)memnew(NavigationMeshInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_pos(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_set_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_rot(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_set_rot(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_rotd(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_set_rotd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_scale(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_set_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node2D_get_pos(void * jarg1) {
  void * jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 result;
  
  arg1 = (Node2D *)jarg1; 
  result = Node2D_get_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node2D_get_rot(void * jarg1) {
  float jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  float result;
  
  arg1 = (Node2D *)jarg1; 
  result = (float)Node2D_get_rot(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node2D_get_rotd(void * jarg1) {
  float jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  float result;
  
  arg1 = (Node2D *)jarg1; 
  result = (float)Node2D_get_rotd(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node2D_get_scale(void * jarg1) {
  void * jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 result;
  
  arg1 = (Node2D *)jarg1; 
  result = Node2D_get_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_rotate(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_rotate(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_x__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node2D_move_local_x__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_x__SWIG_1(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_move_local_x__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_y__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  Node2D_move_local_y__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_move_local_y__SWIG_1(void * jarg1, float jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  float arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (float)jarg2; 
  Node2D_move_local_y__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_translate(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_translate(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_global_translate(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_global_translate(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_scale(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_global_pos(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_set_global_pos(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node2D_get_global_pos(void * jarg1) {
  void * jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 result;
  
  arg1 = (Node2D *)jarg1; 
  result = Node2D_get_global_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_transform(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Node2D_set_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_global_transform(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Node2D_set_global_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_look_at(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_look_at(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Node2D_get_angle_to(void * jarg1, void * jarg2) {
  float jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)Node2D_get_angle_to(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_z(void * jarg1, int jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  int arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (int)jarg2; 
  Node2D_set_z(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node2D_get_z(void * jarg1) {
  int jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  int result;
  
  arg1 = (Node2D *)jarg1; 
  result = (int)Node2D_get_z(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_set_z_as_relative(void * jarg1, unsigned int jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Node2D_set_z_as_relative(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Node2D_is_z_relative(void * jarg1) {
  unsigned int jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  bool result;
  
  arg1 = (Node2D *)jarg1; 
  result = (bool)Node2D_is_z_relative(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node2D_edit_set_pivot(void * jarg1, void * jarg2) {
  Node2D *arg1 = (Node2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Node2D_edit_set_pivot(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node2D_get_relative_transform_to_parent(void * jarg1, void * jarg2) {
  void * jresult ;
  Node2D *arg1 = (Node2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  Matrix32 result;
  
  arg1 = (Node2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = Node2D_get_relative_transform_to_parent(arg1,arg2);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node2D() {
  void * jresult ;
  Node2D *result = 0 ;
  
  result = (Node2D *)memnew(Node2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OmniLight() {
  void * jresult ;
  OmniLight *result = 0 ;
  
  result = (OmniLight *)memnew(OmniLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Panel() {
  void * jresult ;
  Panel *result = 0 ;
  
  result = (Panel *)memnew(Panel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_scroll_offset(void * jarg1, void * jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_scroll_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxBackground_get_scroll_offset(void * jarg1) {
  void * jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_scroll_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_scroll_base_offset(void * jarg1, void * jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_scroll_base_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxBackground_get_scroll_base_offset(void * jarg1) {
  void * jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_scroll_base_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_scroll_base_scale(void * jarg1, void * jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_scroll_base_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxBackground_get_scroll_base_scale(void * jarg1) {
  void * jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_scroll_base_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_limit_begin(void * jarg1, void * jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_limit_begin(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxBackground_get_limit_begin(void * jarg1) {
  void * jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_limit_begin(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_limit_end(void * jarg1, void * jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxBackground_set_limit_end(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxBackground_get_limit_end(void * jarg1) {
  void * jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = ParallaxBackground_get_limit_end(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxBackground_set_ignore_camera_zoom(void * jarg1, unsigned int jarg2) {
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  bool arg2 ;
  
  arg1 = (ParallaxBackground *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ParallaxBackground_set_ignore_camera_zoom(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParallaxBackground_is_ignore_camera_zoom(void * jarg1) {
  unsigned int jresult ;
  ParallaxBackground *arg1 = (ParallaxBackground *) 0 ;
  bool result;
  
  arg1 = (ParallaxBackground *)jarg1; 
  result = (bool)ParallaxBackground_is_ignore_camera_zoom(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParallaxBackground() {
  void * jresult ;
  ParallaxBackground *result = 0 ;
  
  result = (ParallaxBackground *)memnew(ParallaxBackground());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxLayer_set_motion_scale(void * jarg1, void * jarg2) {
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxLayer_set_motion_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxLayer_get_motion_scale(void * jarg1) {
  void * jresult ;
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxLayer *)jarg1; 
  result = ParallaxLayer_get_motion_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParallaxLayer_set_mirroring(void * jarg1, void * jarg2) {
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ParallaxLayer *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ParallaxLayer_set_mirroring(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParallaxLayer_get_mirroring(void * jarg1) {
  void * jresult ;
  ParallaxLayer *arg1 = (ParallaxLayer *) 0 ;
  Vector2 result;
  
  arg1 = (ParallaxLayer *)jarg1; 
  result = ParallaxLayer_get_mirroring(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParallaxLayer() {
  void * jresult ;
  ParallaxLayer *result = 0 ;
  
  result = (ParallaxLayer *)memnew(ParallaxLayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_enabled(void * jarg1, unsigned int jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  bool arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ParticleAttractor2D_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParticleAttractor2D_is_enabled(void * jarg1) {
  unsigned int jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  bool result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (bool)ParticleAttractor2D_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_radius(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_radius(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_disable_radius(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_disable_radius(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_disable_radius(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_disable_radius(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_gravity(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_gravity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_gravity(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_gravity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_absorption(void * jarg1, float jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float arg2 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (float)jarg2; 
  ParticleAttractor2D_set_absorption(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ParticleAttractor2D_get_absorption(void * jarg1) {
  float jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  float result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = (float)ParticleAttractor2D_get_absorption(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParticleAttractor2D_set_particles_path(void * jarg1, void * jarg2) {
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  ParticleAttractor2D_set_particles_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParticleAttractor2D_get_particles_path(void * jarg1) {
  void * jresult ;
  ParticleAttractor2D *arg1 = (ParticleAttractor2D *) 0 ;
  NodePath result;
  
  arg1 = (ParticleAttractor2D *)jarg1; 
  result = ParticleAttractor2D_get_particles_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParticleAttractor2D() {
  void * jresult ;
  ParticleAttractor2D *result = 0 ;
  
  result = (ParticleAttractor2D *)memnew(ParticleAttractor2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_amount(void * jarg1, int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  Particles_set_amount(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles_get_amount(void * jarg1) {
  int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int result;
  
  arg1 = (Particles *)jarg1; 
  result = (int)Particles_get_amount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emitting(void * jarg1, unsigned int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles_set_emitting(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles_is_emitting(void * jarg1) {
  unsigned int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  bool result;
  
  arg1 = (Particles *)jarg1; 
  result = (bool)Particles_is_emitting(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_visibility_aabb(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  AABB *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (AABB *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AABB const & type is null", 0);
    return ;
  } 
  Particles_set_visibility_aabb(arg1,(AABB const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_visibility_aabb(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  AABB result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_visibility_aabb(arg1);
  jresult = memnew(AABB((const AABB &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emission_half_extents(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Particles_set_emission_half_extents(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_emission_half_extents(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3 result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_emission_half_extents(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emission_base_velocity(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Particles_set_emission_base_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_emission_base_velocity(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3 result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_emission_base_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emission_points(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3Array *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3Array const & type is null", 0);
    return ;
  } 
  Particles_set_emission_points(arg1,(Vector3Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_emission_points(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3Array result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_emission_points(arg1);
  jresult = memnew(Vector3Array((const Vector3Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_gravity_normal(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Particles_set_gravity_normal(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_gravity_normal(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  Vector3 result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_gravity_normal(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_variable(void * jarg1, int jarg2, float jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles_set_variable(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_variable(void * jarg1, int jarg2) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles_get_variable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_randomness(void * jarg1, int jarg2, float jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles_set_randomness(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_randomness(void * jarg1, int jarg2) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles_get_randomness(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_color_phase_pos(void * jarg1, int jarg2, float jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles_set_color_phase_pos(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_color_phase_pos(void * jarg1, int jarg2) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles_get_color_phase_pos(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_color_phase_color(void * jarg1, int jarg2, void * jarg3) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Particles_set_color_phase_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_color_phase_color(void * jarg1, int jarg2) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  result = Particles_get_color_phase_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_material(void * jarg1, void * jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  SwigValueWrapper< Ref< Material > > arg2 ;
  Ref< Material > *argp2 ;
  
  arg1 = (Particles *)jarg1; 
  argp2 = (Ref< Material > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Material >", 0);
    return ;
  }
  arg2 = *argp2; 
  Particles_set_material(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles_get_material(void * jarg1) {
  void * jresult ;
  Particles *arg1 = (Particles *) 0 ;
  SwigValueWrapper< Ref< Material > > result;
  
  arg1 = (Particles *)jarg1; 
  result = Particles_get_material(arg1);
  jresult = memnew(Ref< Material >((const Ref< Material > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_emit_timeout(void * jarg1, float jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  float arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (float)jarg2; 
  Particles_set_emit_timeout(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles_get_emit_timeout(void * jarg1) {
  float jresult ;
  Particles *arg1 = (Particles *) 0 ;
  float result;
  
  arg1 = (Particles *)jarg1; 
  result = (float)Particles_get_emit_timeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_height_from_velocity(void * jarg1, unsigned int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles_set_height_from_velocity(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles_has_height_from_velocity(void * jarg1) {
  unsigned int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  bool result;
  
  arg1 = (Particles *)jarg1; 
  result = (bool)Particles_has_height_from_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_use_local_coordinates(void * jarg1, unsigned int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles_set_use_local_coordinates(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles_is_using_local_coordinates(void * jarg1) {
  unsigned int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  bool result;
  
  arg1 = (Particles *)jarg1; 
  result = (bool)Particles_is_using_local_coordinates(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles_set_color_phases(void * jarg1, int jarg2) {
  Particles *arg1 = (Particles *) 0 ;
  int arg2 ;
  
  arg1 = (Particles *)jarg1; 
  arg2 = (int)jarg2; 
  Particles_set_color_phases(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles_get_color_phases(void * jarg1) {
  int jresult ;
  Particles *arg1 = (Particles *) 0 ;
  int result;
  
  arg1 = (Particles *)jarg1; 
  result = (int)Particles_get_color_phases(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Particles() {
  void * jresult ;
  Particles *result = 0 ;
  
  result = (Particles *)memnew(Particles());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emitting(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_emitting(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_emitting(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_emitting(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_amount(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_amount(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_amount(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_amount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_lifetime(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_lifetime(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_lifetime(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_lifetime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_time_scale(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_time_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_time_scale(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_time_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_pre_process_time(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_pre_process_time(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_pre_process_time(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_pre_process_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emit_timeout(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_emit_timeout(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_emit_timeout(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_emit_timeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_param(void * jarg1, int jarg2, float jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles2D_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_param(void * jarg1, int jarg2) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles2D_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_randomness(void * jarg1, int jarg2, float jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles2D_set_randomness(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_randomness(void * jarg1, int jarg2) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles2D_get_randomness(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_set_texture(void * jarg1, void * jarg2) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = Particles2D_set_texture(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_texture(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Particles2D_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_color(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Color result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_set_color_ramp(void * jarg1, void * jarg2) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  SwigValueWrapper< Ref< ColorRamp > > result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = Particles2D_set_color_ramp(arg1,arg2);
  jresult = memnew(Ref< ColorRamp >((const Ref< ColorRamp > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_color_ramp(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  SwigValueWrapper< Ref< ColorRamp > > result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_color_ramp(arg1);
  jresult = memnew(Ref< ColorRamp >((const Ref< ColorRamp > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emissor_offset(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Particles2D_set_emissor_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_emissor_offset(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_emissor_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_flip_h(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_flip_v(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_h_frames(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_h_frames(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_h_frames(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_h_frames(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_v_frames(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_v_frames(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_v_frames(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_v_frames(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emission_half_extents(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Particles2D_set_emission_half_extents(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_emission_half_extents(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_emission_half_extents(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color_phases(void * jarg1, int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  Particles2D_set_color_phases(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Particles2D_get_color_phases(void * jarg1) {
  int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (int)Particles2D_get_color_phases(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color_phase_color(void * jarg1, int jarg2, void * jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  Color *arg3 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Particles2D_set_color_phase_color(arg1,arg2,(Color const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_color_phase_color(void * jarg1, int jarg2) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = Particles2D_get_color_phase_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_color_phase_pos(void * jarg1, int jarg2, float jarg3) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Particles2D_set_color_phase_pos(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_color_phase_pos(void * jarg1, int jarg2) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Particles2D_get_color_phase_pos(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_pre_process(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_pre_process(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_reset(void * jarg1) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  Particles2D_reset(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_use_local_space(void * jarg1, unsigned int jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Particles2D_set_use_local_space(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Particles2D_is_using_local_space(void * jarg1) {
  unsigned int jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  bool result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (bool)Particles2D_is_using_local_space(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_initial_velocity(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Particles2D_set_initial_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_initial_velocity(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2 result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_initial_velocity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_explosiveness(void * jarg1, float jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  float arg2 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (float)jarg2; 
  Particles2D_set_explosiveness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Particles2D_get_explosiveness(void * jarg1) {
  float jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  float result;
  
  arg1 = (Particles2D *)jarg1; 
  result = (float)Particles2D_get_explosiveness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Particles2D_set_emission_points(void * jarg1, void * jarg2) {
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Particles2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Particles2D_set_emission_points(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particles2D_get_emission_points(void * jarg1) {
  void * jresult ;
  Particles2D *arg1 = (Particles2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Particles2D *)jarg1; 
  result = Particles2D_get_emission_points(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Particles2D() {
  void * jresult ;
  Particles2D *result = 0 ;
  
  result = (Particles2D *)memnew(Particles2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_texture(void * jarg1, void * jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (Object *)jarg2; 
  Patch9Frame_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patch9Frame_get_texture(void * jarg1) {
  void * jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = (Object *)Patch9Frame_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_modulate(void * jarg1, void * jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Patch9Frame_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patch9Frame_get_modulate(void * jarg1) {
  void * jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  Color result;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = Patch9Frame_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_patch_margin(void * jarg1, int jarg2, int jarg3) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Patch9Frame_set_patch_margin(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Patch9Frame_get_patch_margin(void * jarg1, int jarg2) {
  int jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Patch9Frame_get_patch_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Patch9Frame_set_draw_center(void * jarg1, unsigned int jarg2) {
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  bool arg2 ;
  
  arg1 = (Patch9Frame *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Patch9Frame_set_draw_center(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Patch9Frame_get_draw_center(void * jarg1) {
  unsigned int jresult ;
  Patch9Frame *arg1 = (Patch9Frame *) 0 ;
  bool result;
  
  arg1 = (Patch9Frame *)jarg1; 
  result = (bool)Patch9Frame_get_draw_center(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Patch9Frame() {
  void * jresult ;
  Patch9Frame *result = 0 ;
  
  result = (Patch9Frame *)memnew(Patch9Frame());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Path_set_curve(void * jarg1, void * jarg2) {
  Path *arg1 = (Path *) 0 ;
  SwigValueWrapper< Ref< Curve3D > > arg2 ;
  Ref< Curve3D > *argp2 ;
  
  arg1 = (Path *)jarg1; 
  argp2 = (Ref< Curve3D > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Curve3D >", 0);
    return ;
  }
  arg2 = *argp2; 
  Path_set_curve(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Path_get_curve(void * jarg1) {
  void * jresult ;
  Path *arg1 = (Path *) 0 ;
  SwigValueWrapper< Ref< Curve3D > > result;
  
  arg1 = (Path *)jarg1; 
  result = Path_get_curve(arg1);
  jresult = memnew(Ref< Curve3D >((const Ref< Curve3D > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Path() {
  void * jresult ;
  Path *result = 0 ;
  
  result = (Path *)memnew(Path());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Path2D_set_curve(void * jarg1, void * jarg2) {
  Path2D *arg1 = (Path2D *) 0 ;
  SwigValueWrapper< Ref< Curve2D > > arg2 ;
  Ref< Curve2D > *argp2 ;
  
  arg1 = (Path2D *)jarg1; 
  argp2 = (Ref< Curve2D > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Curve2D >", 0);
    return ;
  }
  arg2 = *argp2; 
  Path2D_set_curve(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Path2D_get_curve(void * jarg1) {
  void * jresult ;
  Path2D *arg1 = (Path2D *) 0 ;
  SwigValueWrapper< Ref< Curve2D > > result;
  
  arg1 = (Path2D *)jarg1; 
  result = Path2D_get_curve(arg1);
  jresult = memnew(Ref< Curve2D >((const Ref< Curve2D > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Path2D() {
  void * jresult ;
  Path2D *result = 0 ;
  
  result = (Path2D *)memnew(Path2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_h_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_h_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_h_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_h_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_v_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_v_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_v_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_v_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_unit_offset(void * jarg1, float jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow_set_unit_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow_get_unit_offset(void * jarg1) {
  float jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  float result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (float)PathFollow_get_unit_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_rotation_mode(void * jarg1, int jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  int arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = (int)jarg2; 
  PathFollow_set_rotation_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PathFollow_get_rotation_mode(void * jarg1) {
  int jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  int result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (int)PathFollow_get_rotation_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_cubic_interpolation(void * jarg1, unsigned int jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow_set_cubic_interpolation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow_get_cubic_interpolation(void * jarg1) {
  unsigned int jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (bool)PathFollow_get_cubic_interpolation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow_set_loop(void * jarg1, unsigned int jarg2) {
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow_has_loop(void * jarg1) {
  unsigned int jresult ;
  PathFollow *arg1 = (PathFollow *) 0 ;
  bool result;
  
  arg1 = (PathFollow *)jarg1; 
  result = (bool)PathFollow_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathFollow() {
  void * jresult ;
  PathFollow *result = 0 ;
  
  result = (PathFollow *)memnew(PathFollow());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_h_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_h_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_h_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_h_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_v_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_v_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_v_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_v_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_unit_offset(void * jarg1, float jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = (float)jarg2; 
  PathFollow2D_set_unit_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PathFollow2D_get_unit_offset(void * jarg1) {
  float jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  float result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (float)PathFollow2D_get_unit_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_rotate(void * jarg1, unsigned int jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow2D_set_rotate(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow2D_is_rotating(void * jarg1) {
  unsigned int jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (bool)PathFollow2D_is_rotating(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_cubic_interpolation(void * jarg1, unsigned int jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow2D_set_cubic_interpolation(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow2D_get_cubic_interpolation(void * jarg1) {
  unsigned int jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (bool)PathFollow2D_get_cubic_interpolation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathFollow2D_set_loop(void * jarg1, unsigned int jarg2) {
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool arg2 ;
  
  arg1 = (PathFollow2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  PathFollow2D_set_loop(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathFollow2D_has_loop(void * jarg1) {
  unsigned int jresult ;
  PathFollow2D *arg1 = (PathFollow2D *) 0 ;
  bool result;
  
  arg1 = (PathFollow2D *)jarg1; 
  result = (bool)PathFollow2D_has_loop(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathFollow2D() {
  void * jresult ;
  PathFollow2D *result = 0 ;
  
  result = (PathFollow2D *)memnew(PathFollow2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_layer_mask(void * jarg1, int jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody_get_layer_mask(void * jarg1) {
  int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int result;
  
  arg1 = (PhysicsBody *)jarg1; 
  result = (int)PhysicsBody_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_collision_mask(void * jarg1, int jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody_get_collision_mask(void * jarg1) {
  int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int result;
  
  arg1 = (PhysicsBody *)jarg1; 
  result = (int)PhysicsBody_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_add_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  PhysicsBody *arg2 = (PhysicsBody *) 0 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (PhysicsBody *)jarg2; 
  PhysicsBody_add_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody_remove_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody *arg1 = (PhysicsBody *) 0 ;
  PhysicsBody *arg2 = (PhysicsBody *) 0 ;
  
  arg1 = (PhysicsBody *)jarg1; 
  arg2 = (PhysicsBody *)jarg2; 
  PhysicsBody_remove_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PinJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  PinJoint *arg1 = (PinJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (PinJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  PinJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PinJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  PinJoint *arg1 = (PinJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (PinJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)PinJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PinJoint() {
  void * jresult ;
  PinJoint *result = 0 ;
  
  result = (PinJoint *)memnew(PinJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_polygon(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Polygon2D_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_polygon(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_uv(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Polygon2D_set_uv(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_uv(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_uv(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_color(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Polygon2D_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_color(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Color result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_vertex_colors(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  ColorArray *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (ColorArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ColorArray const & type is null", 0);
    return ;
  } 
  Polygon2D_set_vertex_colors(arg1,(ColorArray const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_vertex_colors(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  ColorArray result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_vertex_colors(arg1);
  jresult = memnew(ColorArray((const ColorArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  Polygon2D_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_texture(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (Object *)Polygon2D_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture_offset(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Polygon2D_set_texture_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_texture_offset(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_texture_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture_rotation(void * jarg1, float jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float arg2 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (float)jarg2; 
  Polygon2D_set_texture_rotation(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Polygon2D_get_texture_rotation(void * jarg1) {
  float jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (float)Polygon2D_get_texture_rotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_texture_scale(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Polygon2D_set_texture_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_texture_scale(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_texture_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_invert(void * jarg1, unsigned int jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Polygon2D_set_invert(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Polygon2D_get_invert(void * jarg1) {
  unsigned int jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  bool result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (bool)Polygon2D_get_invert(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_invert_border(void * jarg1, float jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float arg2 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (float)jarg2; 
  Polygon2D_set_invert_border(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Polygon2D_get_invert_border(void * jarg1) {
  float jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  float result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = (float)Polygon2D_get_invert_border(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Polygon2D_set_offset(void * jarg1, void * jarg2) {
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Polygon2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Polygon2D_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon2D_get_offset(void * jarg1) {
  void * jresult ;
  Polygon2D *arg1 = (Polygon2D *) 0 ;
  Vector2 result;
  
  arg1 = (Polygon2D *)jarg1; 
  result = Polygon2D_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon2D() {
  void * jresult ;
  Polygon2D *result = 0 ;
  
  result = (Polygon2D *)memnew(Polygon2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered__SWIG_0(void * jarg1, void * jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Popup_popup_centered__SWIG_0(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered__SWIG_1(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup_centered__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_ratio__SWIG_0(void * jarg1, float jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  float arg2 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = (float)jarg2; 
  Popup_popup_centered_ratio__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_ratio__SWIG_1(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup_centered_ratio__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_minsize__SWIG_0(void * jarg1, void * jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Popup_popup_centered_minsize__SWIG_0(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup_centered_minsize__SWIG_1(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup_centered_minsize__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_popup(void * jarg1) {
  Popup *arg1 = (Popup *) 0 ;
  
  arg1 = (Popup *)jarg1; 
  Popup_popup(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Popup_set_exclusive(void * jarg1, unsigned int jarg2) {
  Popup *arg1 = (Popup *) 0 ;
  bool arg2 ;
  
  arg1 = (Popup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Popup_set_exclusive(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Popup_is_exclusive(void * jarg1) {
  unsigned int jresult ;
  Popup *arg1 = (Popup *) 0 ;
  bool result;
  
  arg1 = (Popup *)jarg1; 
  result = (bool)Popup_is_exclusive(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Popup() {
  void * jresult ;
  Popup *result = 0 ;
  
  result = (Popup *)memnew(Popup());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PopupDialog() {
  void * jresult ;
  PopupDialog *result = 0 ;
  
  result = (PopupDialog *)memnew(PopupDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_item__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  PopupMenu_add_icon_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_item__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  PopupMenu_add_icon_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_item__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_add_icon_item__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_item__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  PopupMenu_add_item__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_item__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  PopupMenu_add_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_item__SWIG_2(void * jarg1, char * jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  PopupMenu_add_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_item__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4, int jarg5) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  PopupMenu_add_icon_check_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_item__SWIG_1(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  PopupMenu_add_icon_check_item__SWIG_0(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_icon_check_item__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  Object *arg2 = (Object *) 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (Object *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_add_icon_check_item__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_item__SWIG_0(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  PopupMenu_add_check_item__SWIG_0(arg1,(String const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_item__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  PopupMenu_add_check_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_check_item__SWIG_2(void * jarg1, char * jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  PopupMenu_add_check_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_submenu_item__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  PopupMenu_add_submenu_item__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_submenu_item__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_add_submenu_item__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_text(void * jarg1, int jarg2, char * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_set_item_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_icon(void * jarg1, int jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Object *)jarg3; 
  PopupMenu_set_item_icon(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_accelerator(void * jarg1, int jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  PopupMenu_set_item_accelerator(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_metadata(void * jarg1, int jarg2, void * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  PopupMenu_set_item_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_checked(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_checked(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_disabled(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_disabled(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_submenu(void * jarg1, int jarg2, char * jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  PopupMenu_set_item_submenu(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_as_separator(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_as_separator(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_as_checkable(void * jarg1, int jarg2, unsigned int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PopupMenu_set_item_as_checkable(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_set_item_ID(void * jarg1, int jarg2, int jarg3) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  PopupMenu_set_item_ID(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PopupMenu_get_item_text(void * jarg1, int jarg2) {
  void * jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = PopupMenu_get_item_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PopupMenu_get_item_icon(void * jarg1, int jarg2) {
  void * jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  Object *result = 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Object *)PopupMenu_get_item_icon(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_get_item_metadata(void * jarg1, int jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  PopupMenu_get_item_metadata(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_accelerator(void * jarg1, int jarg2) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PopupMenu_get_item_accelerator(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PopupMenu_get_item_submenu(void * jarg1, int jarg2) {
  void * jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = PopupMenu_get_item_submenu(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_separator(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_separator(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_checkable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_checkable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_checked(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_checked(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PopupMenu_is_item_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PopupMenu_is_item_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_ID(void * jarg1, int jarg2) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PopupMenu_get_item_ID(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_index(void * jarg1, int jarg2) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)PopupMenu_get_item_index(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PopupMenu_get_item_count(void * jarg1) {
  int jresult ;
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int result;
  
  arg1 = (PopupMenu *)jarg1; 
  result = (int)PopupMenu_get_item_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_add_separator(void * jarg1) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  PopupMenu_add_separator(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_remove_item(void * jarg1, int jarg2) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  int arg2 ;
  
  arg1 = (PopupMenu *)jarg1; 
  arg2 = (int)jarg2; 
  PopupMenu_remove_item(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupMenu_clear(void * jarg1) {
  PopupMenu *arg1 = (PopupMenu *) 0 ;
  
  arg1 = (PopupMenu *)jarg1; 
  PopupMenu_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PopupMenu() {
  void * jresult ;
  PopupMenu *result = 0 ;
  
  result = (PopupMenu *)memnew(PopupMenu());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PopupPanel() {
  void * jresult ;
  PopupPanel *result = 0 ;
  
  result = (PopupPanel *)memnew(PopupPanel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_shape(void * jarg1, void * jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  Portal_set_shape(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Portal_get_shape(void * jarg1) {
  void * jresult ;
  Portal *arg1 = (Portal *) 0 ;
  Vector2Array result;
  
  arg1 = (Portal *)jarg1; 
  result = Portal_get_shape(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_enabled(void * jarg1, unsigned int jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  bool arg2 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Portal_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Portal_is_enabled(void * jarg1) {
  unsigned int jresult ;
  Portal *arg1 = (Portal *) 0 ;
  bool result;
  
  arg1 = (Portal *)jarg1; 
  result = (bool)Portal_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_disable_distance(void * jarg1, float jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  float arg2 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (float)jarg2; 
  Portal_set_disable_distance(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Portal_get_disable_distance(void * jarg1) {
  float jresult ;
  Portal *arg1 = (Portal *) 0 ;
  float result;
  
  arg1 = (Portal *)jarg1; 
  result = (float)Portal_get_disable_distance(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_disabled_color(void * jarg1, void * jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Portal_set_disabled_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Portal_get_disabled_color(void * jarg1) {
  void * jresult ;
  Portal *arg1 = (Portal *) 0 ;
  Color result;
  
  arg1 = (Portal *)jarg1; 
  result = Portal_get_disabled_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Portal_set_connect_range(void * jarg1, float jarg2) {
  Portal *arg1 = (Portal *) 0 ;
  float arg2 ;
  
  arg1 = (Portal *)jarg1; 
  arg2 = (float)jarg2; 
  Portal_set_connect_range(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Portal_get_connect_range(void * jarg1) {
  float jresult ;
  Portal *arg1 = (Portal *) 0 ;
  float result;
  
  arg1 = (Portal *)jarg1; 
  result = (float)Portal_get_connect_range(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Portal() {
  void * jresult ;
  Portal *result = 0 ;
  
  result = (Portal *)memnew(Portal());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position2D() {
  void * jresult ;
  Position2D *result = 0 ;
  
  result = (Position2D *)memnew(Position2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position3D() {
  void * jresult ;
  Position3D *result = 0 ;
  
  result = (Position3D *)memnew(Position3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_set_group_name(void * jarg1, char * jarg2) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ProximityGroup_set_group_name(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_broadcast(void * jarg1, char * jarg2, void * jarg3) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  String *arg2 = 0 ;
  Variant *arg3 = 0 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  ProximityGroup_broadcast(arg1,(String const &)*arg2,(Variant const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_set_dispatch_mode(void * jarg1, int jarg2) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  int arg2 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  arg2 = (int)jarg2; 
  ProximityGroup_set_dispatch_mode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityGroup_set_grid_radius(void * jarg1, void * jarg2) {
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (ProximityGroup *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  ProximityGroup_set_grid_radius(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityGroup_get_grid_radius(void * jarg1) {
  void * jresult ;
  ProximityGroup *arg1 = (ProximityGroup *) 0 ;
  Vector3 result;
  
  arg1 = (ProximityGroup *)jarg1; 
  result = ProximityGroup_get_grid_radius(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProximityGroup() {
  void * jresult ;
  ProximityGroup *result = 0 ;
  
  result = (ProximityGroup *)memnew(ProximityGroup());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_axis(void * jarg1, int jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  int arg2 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = (int)jarg2; 
  Quad_set_axis(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Quad_get_axis(void * jarg1) {
  int jresult ;
  Quad *arg1 = (Quad *) 0 ;
  int result;
  
  arg1 = (Quad *)jarg1; 
  result = (int)Quad_get_axis(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_size(void * jarg1, void * jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Quad_set_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quad_get_size(void * jarg1) {
  void * jresult ;
  Quad *arg1 = (Quad *) 0 ;
  Vector2 result;
  
  arg1 = (Quad *)jarg1; 
  result = Quad_get_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_centered(void * jarg1, unsigned int jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  bool arg2 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Quad_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Quad_is_centered(void * jarg1) {
  unsigned int jresult ;
  Quad *arg1 = (Quad *) 0 ;
  bool result;
  
  arg1 = (Quad *)jarg1; 
  result = (bool)Quad_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Quad_set_offset(void * jarg1, void * jarg2) {
  Quad *arg1 = (Quad *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Quad *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Quad_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Quad_get_offset(void * jarg1) {
  void * jresult ;
  Quad *arg1 = (Quad *) 0 ;
  Vector2 result;
  
  arg1 = (Quad *)jarg1; 
  result = Quad_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Quad() {
  void * jresult ;
  Quad *result = 0 ;
  
  result = (Quad *)memnew(Quad());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_val(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_val(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_value(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_min(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_min(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_max(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_max(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_step(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_page(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_page(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Range_get_unit_value(void * jarg1) {
  float jresult ;
  Range *arg1 = (Range *) 0 ;
  float result;
  
  arg1 = (Range *)jarg1; 
  result = (float)Range_get_unit_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_val(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_val(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_value(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_value(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_min(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_min(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_max(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_max(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_step(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_step(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_page(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_page(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_unit_value(void * jarg1, float jarg2) {
  Range *arg1 = (Range *) 0 ;
  float arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (float)jarg2; 
  Range_set_unit_value(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_rounded_values(void * jarg1, unsigned int jarg2) {
  Range *arg1 = (Range *) 0 ;
  bool arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Range_set_rounded_values(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_is_rounded_values(void * jarg1) {
  unsigned int jresult ;
  Range *arg1 = (Range *) 0 ;
  bool result;
  
  arg1 = (Range *)jarg1; 
  result = (bool)Range_is_rounded_values(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_set_exp_unit_value(void * jarg1, unsigned int jarg2) {
  Range *arg1 = (Range *) 0 ;
  bool arg2 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Range_set_exp_unit_value(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Range_is_unit_value_exp(void * jarg1) {
  unsigned int jresult ;
  Range *arg1 = (Range *) 0 ;
  bool result;
  
  arg1 = (Range *)jarg1; 
  result = (bool)Range_is_unit_value_exp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_share(void * jarg1, void * jarg2) {
  Range *arg1 = (Range *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Range *)jarg1; 
  arg2 = (Object *)jarg2; 
  Range_share(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Range_unshare(void * jarg1) {
  Range *arg1 = (Range *) 0 ;
  
  arg1 = (Range *)jarg1; 
  Range_unshare(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Range() {
  void * jresult ;
  Range *result = 0 ;
  
  result = (Range *)memnew(Range());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_enabled(void * jarg1, unsigned int jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  bool arg2 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RayCast_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast_is_enabled(void * jarg1) {
  unsigned int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  bool result;
  
  arg1 = (RayCast *)jarg1; 
  result = (bool)RayCast_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_cast_to(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RayCast_set_cast_to(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_cast_to(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 result;
  
  arg1 = (RayCast *)jarg1; 
  result = RayCast_get_cast_to(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast_is_colliding(void * jarg1) {
  unsigned int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  bool result;
  
  arg1 = (RayCast *)jarg1; 
  result = (bool)RayCast_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_collider(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Object *result = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  result = (Object *)RayCast_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast_get_collider_shape(void * jarg1) {
  int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  int result;
  
  arg1 = (RayCast *)jarg1; 
  result = (int)RayCast_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_collision_point(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 result;
  
  arg1 = (RayCast *)jarg1; 
  result = RayCast_get_collision_point(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast_get_collision_normal(void * jarg1) {
  void * jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  Vector3 result;
  
  arg1 = (RayCast *)jarg1; 
  result = RayCast_get_collision_normal(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_add_exception_rid(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast_add_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_add_exception(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast_add_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_remove_exception_rid(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast_remove_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_remove_exception(void * jarg1, void * jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast_remove_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_clear_exceptions(void * jarg1) {
  RayCast *arg1 = (RayCast *) 0 ;
  
  arg1 = (RayCast *)jarg1; 
  RayCast_clear_exceptions(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_layer_mask(void * jarg1, int jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast_get_layer_mask(void * jarg1) {
  int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  int result;
  
  arg1 = (RayCast *)jarg1; 
  result = (int)RayCast_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast_set_type_mask(void * jarg1, int jarg2) {
  RayCast *arg1 = (RayCast *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast_set_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast_get_type_mask(void * jarg1) {
  int jresult ;
  RayCast *arg1 = (RayCast *) 0 ;
  int result;
  
  arg1 = (RayCast *)jarg1; 
  result = (int)RayCast_get_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayCast() {
  void * jresult ;
  RayCast *result = 0 ;
  
  result = (RayCast *)memnew(RayCast());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_enabled(void * jarg1, unsigned int jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RayCast2D_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast2D_is_enabled(void * jarg1) {
  unsigned int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  bool result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (bool)RayCast2D_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_cast_to(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RayCast2D_set_cast_to(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast2D_get_cast_to(void * jarg1) {
  void * jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = RayCast2D_get_cast_to(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RayCast2D_is_colliding(void * jarg1) {
  unsigned int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  bool result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (bool)RayCast2D_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast2D_get_collider(void * jarg1) {
  void * jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (Object *)RayCast2D_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast2D_get_collider_shape(void * jarg1) {
  int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (int)RayCast2D_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast2D_get_collision_point(void * jarg1) {
  void * jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = RayCast2D_get_collision_point(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RayCast2D_get_collision_normal(void * jarg1) {
  void * jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Vector2 result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = RayCast2D_get_collision_normal(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_add_exception_rid(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast2D_add_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_add_exception(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast2D_add_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_remove_exception_rid(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  RID *arg2 = 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (RID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RID const & type is null", 0);
    return ;
  } 
  RayCast2D_remove_exception_rid(arg1,(RID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_remove_exception(void * jarg1, void * jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  RayCast2D_remove_exception(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_clear_exceptions(void * jarg1) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  
  arg1 = (RayCast2D *)jarg1; 
  RayCast2D_clear_exceptions(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_layer_mask(void * jarg1, int jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast2D_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast2D_get_layer_mask(void * jarg1) {
  int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (int)RayCast2D_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RayCast2D_set_type_mask(void * jarg1, int jarg2) {
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int arg2 ;
  
  arg1 = (RayCast2D *)jarg1; 
  arg2 = (int)jarg2; 
  RayCast2D_set_type_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RayCast2D_get_type_mask(void * jarg1) {
  int jresult ;
  RayCast2D *arg1 = (RayCast2D *) 0 ;
  int result;
  
  arg1 = (RayCast2D *)jarg1; 
  result = (int)RayCast2D_get_type_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RayCast2D() {
  void * jresult ;
  RayCast2D *result = 0 ;
  
  result = (RayCast2D *)memnew(RayCast2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReferenceFrame() {
  void * jresult ;
  ReferenceFrame *result = 0 ;
  
  result = (ReferenceFrame *)memnew(ReferenceFrame());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteTransform2D_set_remote_node(void * jarg1, void * jarg2) {
  RemoteTransform2D *arg1 = (RemoteTransform2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (RemoteTransform2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  RemoteTransform2D_set_remote_node(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemoteTransform2D_get_remote_node(void * jarg1) {
  void * jresult ;
  RemoteTransform2D *arg1 = (RemoteTransform2D *) 0 ;
  NodePath result;
  
  arg1 = (RemoteTransform2D *)jarg1; 
  result = RemoteTransform2D_get_remote_node(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteTransform2D() {
  void * jresult ;
  RemoteTransform2D *result = 0 ;
  
  result = (RemoteTransform2D *)memnew(RemoteTransform2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_add_text(void * jarg1, char * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  RichTextLabel_add_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_add_image(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  RichTextLabel_add_image(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_newline(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_newline(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_font(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Object *)jarg2; 
  RichTextLabel_push_font(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_color(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  RichTextLabel_push_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_align(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_align(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_indent(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_indent(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_list(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_list(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_meta(void * jarg1, void * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Variant *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (Variant *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  RichTextLabel_push_meta(arg1,(Variant const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_underline(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_push_underline(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_table(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_push_table(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_table_column_expand(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  RichTextLabel_set_table_column_expand(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_push_cell(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_push_cell(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_pop(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_pop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_clear(void * jarg1) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  RichTextLabel_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_meta_underline(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_meta_underline(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_meta_underlined(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_meta_underlined(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_scroll_active(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_scroll_active(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_scroll_active(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_scroll_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_scroll_follow(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_scroll_follow(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_scroll_following(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_scroll_following(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RichTextLabel_get_v_scroll(void * jarg1) {
  void * jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  Object *result = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (Object *)RichTextLabel_get_v_scroll(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_scroll_to_line(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_scroll_to_line(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_tab_size(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_set_tab_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_get_tab_size(void * jarg1) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (int)RichTextLabel_get_tab_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_selection_enabled(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_selection_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_selection_enabled(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_selection_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_parse_bbcode(void * jarg1, char * jarg2) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RichTextLabel_parse_bbcode(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_append_bbcode(void * jarg1, char * jarg2) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)RichTextLabel_append_bbcode(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_bbcode(void * jarg1, char * jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  RichTextLabel_set_bbcode(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RichTextLabel_get_bbcode(void * jarg1) {
  void * jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  String result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = RichTextLabel_get_bbcode(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_visible_characters(void * jarg1, int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = (int)jarg2; 
  RichTextLabel_set_visible_characters(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_get_visible_characters(void * jarg1) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (int)RichTextLabel_get_visible_characters(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RichTextLabel_get_total_character_count(void * jarg1) {
  int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  int result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (int)RichTextLabel_get_total_character_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RichTextLabel_set_use_bbcode(void * jarg1, unsigned int jarg2) {
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool arg2 ;
  
  arg1 = (RichTextLabel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RichTextLabel_set_use_bbcode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RichTextLabel_is_using_bbcode(void * jarg1) {
  unsigned int jresult ;
  RichTextLabel *arg1 = (RichTextLabel *) 0 ;
  bool result;
  
  arg1 = (RichTextLabel *)jarg1; 
  result = (bool)RichTextLabel_is_using_bbcode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RichTextLabel() {
  void * jresult ;
  RichTextLabel *result = 0 ;
  
  result = (RichTextLabel *)memnew(RichTextLabel());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody__integrate_forces(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  PhysicsDirectBodyState *arg2 = (PhysicsDirectBodyState *) 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (PhysicsDirectBodyState *)jarg2; 
  RigidBody__integrate_forces(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_mode(void * jarg1, int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody_get_mode(void * jarg1) {
  int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  int result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (int)RigidBody_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_mass(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_mass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_mass(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_weight(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_weight(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_weight(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_weight(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_friction(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_friction(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_bounce(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_bounce(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_linear_velocity(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_set_linear_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody_get_linear_velocity(void * jarg1) {
  void * jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 result;
  
  arg1 = (RigidBody *)jarg1; 
  result = RigidBody_get_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_angular_velocity(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_set_angular_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody_get_angular_velocity(void * jarg1) {
  void * jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 result;
  
  arg1 = (RigidBody *)jarg1; 
  result = RigidBody_get_angular_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_gravity_scale(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_gravity_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_gravity_scale(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_gravity_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_linear_damp(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_linear_damp(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_angular_damp(void * jarg1, float jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody_get_angular_damp(void * jarg1) {
  float jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  float result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (float)RigidBody_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_max_contacts_reported(void * jarg1, int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody_set_max_contacts_reported(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody_get_max_contacts_reported(void * jarg1) {
  int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  int result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (int)RigidBody_get_max_contacts_reported(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_use_custom_integrator(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_use_custom_integrator(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_using_custom_integrator(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_using_custom_integrator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_contact_monitor(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_contact_monitor(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_contact_monitor_enabled(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_contact_monitor_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_use_continuous_collision_detection(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_use_continuous_collision_detection(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_using_continuous_collision_detection(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_using_continuous_collision_detection(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_axis_velocity(void * jarg1, void * jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_set_axis_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_apply_impulse(void * jarg1, void * jarg2, void * jarg3) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  RigidBody_apply_impulse(arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_sleeping(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_sleeping(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_can_sleep(void * jarg1, unsigned int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody_set_can_sleep(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody_is_able_to_sleep(void * jarg1) {
  unsigned int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  bool result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (bool)RigidBody_is_able_to_sleep(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody_set_axis_lock(void * jarg1, int jarg2) {
  RigidBody *arg1 = (RigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody_set_axis_lock(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody_get_axis_lock(void * jarg1) {
  int jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  int result;
  
  arg1 = (RigidBody *)jarg1; 
  result = (int)RigidBody_get_axis_lock(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody_get_colliding_bodies(void * jarg1) {
  void * jresult ;
  RigidBody *arg1 = (RigidBody *) 0 ;
  Array result;
  
  arg1 = (RigidBody *)jarg1; 
  result = RigidBody_get_colliding_bodies(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidBody() {
  void * jresult ;
  RigidBody *result = 0 ;
  
  result = (RigidBody *)memnew(RigidBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_set_room(void * jarg1, void * jarg2) {
  Room *arg1 = (Room *) 0 ;
  Room *arg2 = (Room *) 0 ;
  
  arg1 = (Room *)jarg1; 
  arg2 = (Room *)jarg2; 
  Room_set_room(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Room_get_room(void * jarg1) {
  void * jresult ;
  Room *arg1 = (Room *) 0 ;
  Room *result = 0 ;
  
  arg1 = (Room *)jarg1; 
  result = (Room *)Room_get_room(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_compute_room_from_subtree(void * jarg1) {
  Room *arg1 = (Room *) 0 ;
  
  arg1 = (Room *)jarg1; 
  Room_compute_room_from_subtree(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Room_set_simulate_acoustics(void * jarg1, unsigned int jarg2) {
  Room *arg1 = (Room *) 0 ;
  bool arg2 ;
  
  arg1 = (Room *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Room_set_simulate_acoustics(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Room_is_simulating_acoustics(void * jarg1) {
  unsigned int jresult ;
  Room *arg1 = (Room *) 0 ;
  bool result;
  
  arg1 = (Room *)jarg1; 
  result = (bool)Room_is_simulating_acoustics(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Room() {
  void * jresult ;
  Room *result = 0 ;
  
  result = (Room *)memnew(Room());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollBar_set_custom_step(void * jarg1, float jarg2) {
  ScrollBar *arg1 = (ScrollBar *) 0 ;
  float arg2 ;
  
  arg1 = (ScrollBar *)jarg1; 
  arg2 = (float)jarg2; 
  ScrollBar_set_custom_step(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ScrollBar_get_custom_step(void * jarg1) {
  float jresult ;
  ScrollBar *arg1 = (ScrollBar *) 0 ;
  float result;
  
  arg1 = (ScrollBar *)jarg1; 
  result = (float)ScrollBar_get_custom_step(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_add_bone(void * jarg1, char * jarg2) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Skeleton_add_bone(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_find_bone(void * jarg1, char * jarg2) {
  int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (Skeleton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)Skeleton_find_bone(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_name(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_name(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_get_bone_parent(void * jarg1, int jarg2) {
  int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Skeleton_get_bone_parent(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_parent(void * jarg1, int jarg2, int jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Skeleton_set_bone_parent(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Skeleton_get_bone_count(void * jarg1) {
  int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int result;
  
  arg1 = (Skeleton *)jarg1; 
  result = (int)Skeleton_get_bone_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_unparent_bone_and_rest(void * jarg1, int jarg2) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  Skeleton_unparent_bone_and_rest(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_rest(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_rest(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_rest(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_rest(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_disable_rest(void * jarg1, int jarg2, unsigned int jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Skeleton_set_bone_disable_rest(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Skeleton_is_bone_rest_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Skeleton_is_bone_rest_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_bind_child_node_to_bone(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Node *arg3 = (Node *) 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3; 
  Skeleton_bind_child_node_to_bone(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_unbind_child_node_from_bone(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Node *arg3 = (Node *) 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3; 
  Skeleton_unbind_child_node_from_bone(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bound_child_nodes_to_bone(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Array result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bound_child_nodes_to_bone(arg1,arg2);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_clear_bones(void * jarg1) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  Skeleton_clear_bones(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_pose(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_pose(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_pose(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_pose(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_global_pose(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_global_pose(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_global_pose(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_global_pose(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_custom_pose(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_custom_pose(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skeleton_set_bone_custom_pose(void * jarg1, int jarg2, void * jarg3) {
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform *arg3 = 0 ;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Transform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Transform const & type is null", 0);
    return ;
  } 
  Skeleton_set_bone_custom_pose(arg1,arg2,(Transform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Skeleton_get_bone_transform(void * jarg1, int jarg2) {
  void * jresult ;
  Skeleton *arg1 = (Skeleton *) 0 ;
  int arg2 ;
  Transform result;
  
  arg1 = (Skeleton *)jarg1; 
  arg2 = (int)jarg2; 
  result = Skeleton_get_bone_transform(arg1,arg2);
  jresult = memnew(Transform((const Transform &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Skeleton() {
  void * jresult ;
  Skeleton *result = 0 ;
  
  result = (Skeleton *)memnew(Skeleton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Slider_set_ticks(void * jarg1, int jarg2) {
  Slider *arg1 = (Slider *) 0 ;
  int arg2 ;
  
  arg1 = (Slider *)jarg1; 
  arg2 = (int)jarg2; 
  Slider_set_ticks(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Slider_get_ticks(void * jarg1) {
  int jresult ;
  Slider *arg1 = (Slider *) 0 ;
  int result;
  
  arg1 = (Slider *)jarg1; 
  result = (int)Slider_get_ticks(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Slider_get_ticks_on_borders(void * jarg1) {
  unsigned int jresult ;
  Slider *arg1 = (Slider *) 0 ;
  bool result;
  
  arg1 = (Slider *)jarg1; 
  result = (bool)Slider_get_ticks_on_borders(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Slider_set_ticks_on_borders(void * jarg1, unsigned int jarg2) {
  Slider *arg1 = (Slider *) 0 ;
  bool arg2 ;
  
  arg1 = (Slider *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Slider_set_ticks_on_borders(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SliderJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  SliderJoint *arg1 = (SliderJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SliderJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SliderJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SliderJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SliderJoint *arg1 = (SliderJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SliderJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SliderJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SliderJoint() {
  void * jresult ;
  SliderJoint *result = 0 ;
  
  result = (SliderJoint *)memnew(SliderJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundPlayer2D_set_param(void * jarg1, int jarg2, float jarg3) {
  SoundPlayer2D *arg1 = (SoundPlayer2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SoundPlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SoundPlayer2D_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundPlayer2D_get_param(void * jarg1, int jarg2) {
  float jresult ;
  SoundPlayer2D *arg1 = (SoundPlayer2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (SoundPlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)SoundPlayer2D_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpinBox_set_suffix(void * jarg1, char * jarg2) {
  SpinBox *arg1 = (SpinBox *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpinBox *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpinBox_set_suffix(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpinBox_get_suffix(void * jarg1) {
  void * jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  String result;
  
  arg1 = (SpinBox *)jarg1; 
  result = SpinBox_get_suffix(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpinBox_set_prefix(void * jarg1, char * jarg2) {
  SpinBox *arg1 = (SpinBox *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (SpinBox *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  SpinBox_set_prefix(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpinBox_get_prefix(void * jarg1) {
  void * jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  String result;
  
  arg1 = (SpinBox *)jarg1; 
  result = SpinBox_get_prefix(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpinBox_set_editable(void * jarg1, unsigned int jarg2) {
  SpinBox *arg1 = (SpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = (SpinBox *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpinBox_set_editable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpinBox_is_editable(void * jarg1) {
  unsigned int jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  bool result;
  
  arg1 = (SpinBox *)jarg1; 
  result = (bool)SpinBox_is_editable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpinBox_get_line_edit(void * jarg1) {
  void * jresult ;
  SpinBox *arg1 = (SpinBox *) 0 ;
  Object *result = 0 ;
  
  arg1 = (SpinBox *)jarg1; 
  result = (Object *)SpinBox_get_line_edit(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpinBox() {
  void * jresult ;
  SpinBox *result = 0 ;
  
  result = (SpinBox *)memnew(SpinBox());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpotLight() {
  void * jresult ;
  SpotLight *result = 0 ;
  
  result = (SpotLight *)memnew(SpotLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_texture(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (Sprite *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  Sprite_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_get_texture(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_centered(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_centered(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_offset(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Sprite_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_get_offset(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Vector2 result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_flip_h(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_flip_v(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_region(void * jarg1, unsigned int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite_set_region(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite_is_region(void * jarg1) {
  unsigned int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  bool result;
  
  arg1 = (Sprite *)jarg1; 
  result = (bool)Sprite_is_region(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_region_rect(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Sprite_set_region_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_get_region_rect(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Rect2 result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_region_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_frame(void * jarg1, int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite_get_frame(void * jarg1) {
  int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  int result;
  
  arg1 = (Sprite *)jarg1; 
  result = (int)Sprite_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_vframes(void * jarg1, int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite_set_vframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite_get_vframes(void * jarg1) {
  int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  int result;
  
  arg1 = (Sprite *)jarg1; 
  result = (int)Sprite_get_vframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_hframes(void * jarg1, int jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite_set_hframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite_get_hframes(void * jarg1) {
  int jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  int result;
  
  arg1 = (Sprite *)jarg1; 
  result = (int)Sprite_get_hframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite_set_modulate(void * jarg1, void * jarg2) {
  Sprite *arg1 = (Sprite *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Sprite *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Sprite_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite_get_modulate(void * jarg1) {
  void * jresult ;
  Sprite *arg1 = (Sprite *) 0 ;
  Color result;
  
  arg1 = (Sprite *)jarg1; 
  result = Sprite_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sprite() {
  void * jresult ;
  Sprite *result = 0 ;
  
  result = (Sprite *)memnew(Sprite());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_centered(void * jarg1, unsigned int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpriteBase3D_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_is_centered(void * jarg1) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (bool)SpriteBase3D_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_offset(void * jarg1, void * jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  SpriteBase3D_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteBase3D_get_offset(void * jarg1) {
  void * jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Vector2 result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = SpriteBase3D_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_flip_h(void * jarg1, unsigned int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpriteBase3D_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (bool)SpriteBase3D_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_flip_v(void * jarg1, unsigned int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SpriteBase3D_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (bool)SpriteBase3D_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_modulate(void * jarg1, void * jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  SpriteBase3D_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteBase3D_get_modulate(void * jarg1) {
  void * jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Color result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = SpriteBase3D_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_opacity(void * jarg1, float jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (float)jarg2; 
  SpriteBase3D_set_opacity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpriteBase3D_get_opacity(void * jarg1) {
  float jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (float)SpriteBase3D_get_opacity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_pixel_size(void * jarg1, float jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (float)jarg2; 
  SpriteBase3D_set_pixel_size(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpriteBase3D_get_pixel_size(void * jarg1) {
  float jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  float result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (float)SpriteBase3D_get_pixel_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_axis(void * jarg1, int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  SpriteBase3D_set_axis(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpriteBase3D_get_axis(void * jarg1) {
  int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (int)SpriteBase3D_get_axis(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_draw_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  SpriteBase3D_set_draw_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpriteBase3D_get_draw_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SpriteBase3D_get_draw_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpriteBase3D_set_alpha_cut_mode(void * jarg1, int jarg2) {
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int arg2 ;
  
  arg1 = (SpriteBase3D *)jarg1; 
  arg2 = (int)jarg2; 
  SpriteBase3D_set_alpha_cut_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpriteBase3D_get_alpha_cut_mode(void * jarg1) {
  int jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  int result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = (int)SpriteBase3D_get_alpha_cut_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpriteBase3D_get_item_rect(void * jarg1) {
  void * jresult ;
  SpriteBase3D *arg1 = (SpriteBase3D *) 0 ;
  Rect2 result;
  
  arg1 = (SpriteBase3D *)jarg1; 
  result = SpriteBase3D_get_item_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_constant_linear_velocity(void * jarg1, void * jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  StaticBody_set_constant_linear_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_constant_angular_velocity(void * jarg1, void * jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  StaticBody_set_constant_angular_velocity(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticBody_get_constant_linear_velocity(void * jarg1) {
  void * jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 result;
  
  arg1 = (StaticBody *)jarg1; 
  result = StaticBody_get_constant_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticBody_get_constant_angular_velocity(void * jarg1) {
  void * jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  Vector3 result;
  
  arg1 = (StaticBody *)jarg1; 
  result = StaticBody_get_constant_angular_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_friction(void * jarg1, float jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody_get_friction(void * jarg1) {
  float jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  float result;
  
  arg1 = (StaticBody *)jarg1; 
  result = (float)StaticBody_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody_set_bounce(void * jarg1, float jarg2) {
  StaticBody *arg1 = (StaticBody *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody_get_bounce(void * jarg1) {
  float jresult ;
  StaticBody *arg1 = (StaticBody *) 0 ;
  float result;
  
  arg1 = (StaticBody *)jarg1; 
  result = (float)StaticBody_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StaticBody() {
  void * jresult ;
  StaticBody *result = 0 ;
  
  result = (StaticBody *)memnew(StaticBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TabContainer_get_tab_count(void * jarg1) {
  int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (int)TabContainer_get_tab_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_current_tab(void * jarg1, int jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  TabContainer_set_current_tab(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TabContainer_get_current_tab(void * jarg1) {
  int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (int)TabContainer_get_current_tab(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_current_tab_control(void * jarg1) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  Control *result = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  result = (Control *)TabContainer_get_current_tab_control(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_tab_control(void * jarg1, int jarg2) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  Control *result = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Control *)TabContainer_get_tab_control(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tab_align(void * jarg1, int jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  TabContainer_set_tab_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TabContainer_get_tab_align(void * jarg1) {
  int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (int)TabContainer_get_tab_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tabs_visible(void * jarg1, unsigned int jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TabContainer_set_tabs_visible(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TabContainer_are_tabs_visible(void * jarg1) {
  unsigned int jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  bool result;
  
  arg1 = (TabContainer *)jarg1; 
  result = (bool)TabContainer_are_tabs_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tab_title(void * jarg1, int jarg2, char * jarg3) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  TabContainer_set_tab_title(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_tab_title(void * jarg1, int jarg2) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = TabContainer_get_tab_title(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_tab_icon(void * jarg1, int jarg2, void * jarg3) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  TabContainer_set_tab_icon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_tab_icon(void * jarg1, int jarg2) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = TabContainer_get_tab_icon(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TabContainer_set_popup(void * jarg1, void * jarg2) {
  TabContainer *arg1 = (TabContainer *) 0 ;
  Popup *arg2 = (Popup *) 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  arg2 = (Popup *)jarg2; 
  TabContainer_set_popup(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TabContainer_get_popup(void * jarg1) {
  void * jresult ;
  TabContainer *arg1 = (TabContainer *) 0 ;
  Popup *result = 0 ;
  
  arg1 = (TabContainer *)jarg1; 
  result = (Popup *)TabContainer_get_popup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TabContainer() {
  void * jresult ;
  TabContainer *result = 0 ;
  
  result = (TabContainer *)memnew(TabContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tabs_get_tab_count(void * jarg1) {
  int jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int result;
  
  arg1 = (Tabs *)jarg1; 
  result = (int)Tabs_get_tab_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_current_tab(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_set_current_tab(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tabs_get_current_tab(void * jarg1) {
  int jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int result;
  
  arg1 = (Tabs *)jarg1; 
  result = (int)Tabs_get_current_tab(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_tab_title(void * jarg1, int jarg2, char * jarg3) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Tabs_set_tab_title(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tabs_get_tab_title(void * jarg1, int jarg2) {
  void * jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  result = Tabs_get_tab_title(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_tab_icon(void * jarg1, int jarg2, void * jarg3) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  Tabs_set_tab_icon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tabs_get_tab_icon(void * jarg1, int jarg2) {
  void * jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  result = Tabs_get_tab_icon(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_remove_tab(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_remove_tab(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_add_tab(void * jarg1, char * jarg2, void * jarg3) {
  Tabs *arg1 = (Tabs *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (Tabs *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  Tabs_add_tab(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_set_tab_align(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_set_tab_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tabs_get_tab_align(void * jarg1) {
  int jresult ;
  Tabs *arg1 = (Tabs *) 0 ;
  int result;
  
  arg1 = (Tabs *)jarg1; 
  result = (int)Tabs_get_tab_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tabs_ensure_tab_visible(void * jarg1, int jarg2) {
  Tabs *arg1 = (Tabs *) 0 ;
  int arg2 ;
  
  arg1 = (Tabs *)jarg1; 
  arg2 = (int)jarg2; 
  Tabs_ensure_tab_visible(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tabs() {
  void * jresult ;
  Tabs *result = 0 ;
  
  result = (Tabs *)memnew(Tabs());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TestCube() {
  void * jresult ;
  TestCube *result = 0 ;
  
  result = (TestCube *)memnew(TestCube());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_text(void * jarg1, char * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TextEdit_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_insert_text_at_cursor(void * jarg1, char * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TextEdit_insert_text_at_cursor(arg1,(String const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_line_count(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_line_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_text(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  result = TextEdit_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_line(void * jarg1, int jarg2) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  result = TextEdit_get_line(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_column__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TextEdit_cursor_set_column__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_column__SWIG_1(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_cursor_set_column__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_line__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  TextEdit_cursor_set_line__SWIG_0(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_line__SWIG_1(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_cursor_set_line__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_cursor_get_column(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_cursor_get_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_cursor_get_line(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_cursor_get_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_blink_enabled(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_cursor_set_blink_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextEdit_cursor_get_blink_enabled(void * jarg1) {
  unsigned int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (bool)TextEdit_cursor_get_blink_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cursor_set_blink_speed(void * jarg1, float jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  float arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (float)jarg2; 
  TextEdit_cursor_set_blink_speed(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TextEdit_cursor_get_blink_speed(void * jarg1) {
  float jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  float result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (float)TextEdit_cursor_get_blink_speed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_readonly(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_set_readonly(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_wrap(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_set_wrap(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_max_chars(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_set_max_chars(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_cut(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_cut(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_copy(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_copy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_paste(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_paste(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_select_all(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_select_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_select(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  TextEdit_select(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextEdit_is_selection_active(void * jarg1) {
  unsigned int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (bool)TextEdit_is_selection_active(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_from_line(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_from_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_from_column(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_from_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_to_line(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_to_line(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextEdit_get_selection_to_column(void * jarg1) {
  int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  int result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (int)TextEdit_get_selection_to_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_selection_text(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  result = TextEdit_get_selection_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_word_under_cursor(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String result;
  
  arg1 = (TextEdit *)jarg1; 
  result = TextEdit_get_word_under_cursor(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_search(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  IntArray result;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = TextEdit_search(arg1,(String const &)*arg2,arg3,arg4,arg5);
  jresult = memnew(IntArray((const IntArray &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_undo(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_undo(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_redo(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_redo(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_clear_undo_history(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_clear_undo_history(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_syntax_coloring(void * jarg1, unsigned int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextEdit_set_syntax_coloring(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextEdit_is_syntax_coloring_enabled(void * jarg1) {
  unsigned int jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  bool result;
  
  arg1 = (TextEdit *)jarg1; 
  result = (bool)TextEdit_is_syntax_coloring_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_add_keyword_color(void * jarg1, char * jarg2, void * jarg3) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  Color *arg3 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (Color *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_add_keyword_color(arg1,(String const &)*arg2,(Color const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_add_color_region__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4, unsigned int jarg5) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  TextEdit_add_color_region__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(Color const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_add_color_region__SWIG_1(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  String *arg2 = 0 ;
  String *arg3 = 0 ;
  Color *arg4 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (Color *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_add_color_region__SWIG_0(arg1,(String const &)*arg2,(String const &)*arg3,(Color const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_symbol_color(void * jarg1, void * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_set_symbol_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_set_custom_bg_color(void * jarg1, void * jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextEdit_set_custom_bg_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_clear_colors(void * jarg1) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  TextEdit_clear_colors(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextEdit_menu_option(void * jarg1, int jarg2) {
  TextEdit *arg1 = (TextEdit *) 0 ;
  int arg2 ;
  
  arg1 = (TextEdit *)jarg1; 
  arg2 = (int)jarg2; 
  TextEdit_menu_option(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextEdit_get_menu(void * jarg1) {
  void * jresult ;
  TextEdit *arg1 = (TextEdit *) 0 ;
  PopupMenu *result = 0 ;
  
  arg1 = (TextEdit *)jarg1; 
  result = (PopupMenu *)TextEdit_get_menu(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextEdit() {
  void * jresult ;
  TextEdit *result = 0 ;
  
  result = (TextEdit *)memnew(TextEdit());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_texture(void * jarg1, void * jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureFrame_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureFrame_get_texture(void * jarg1) {
  void * jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureFrame *)jarg1; 
  result = (Object *)TextureFrame_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_modulate(void * jarg1, void * jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextureFrame_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureFrame_get_modulate(void * jarg1) {
  void * jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  Color result;
  
  arg1 = (TextureFrame *)jarg1; 
  result = TextureFrame_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_expand(void * jarg1, unsigned int jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  bool arg2 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TextureFrame_set_expand(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TextureFrame_has_expand(void * jarg1) {
  unsigned int jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  bool result;
  
  arg1 = (TextureFrame *)jarg1; 
  result = (bool)TextureFrame_has_expand(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureFrame_set_stretch_mode(void * jarg1, int jarg2) {
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  int arg2 ;
  
  arg1 = (TextureFrame *)jarg1; 
  arg2 = (int)jarg2; 
  TextureFrame_set_stretch_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextureFrame_get_stretch_mode(void * jarg1) {
  int jresult ;
  TextureFrame *arg1 = (TextureFrame *) 0 ;
  int result;
  
  arg1 = (TextureFrame *)jarg1; 
  result = (int)TextureFrame_get_stretch_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureFrame() {
  void * jresult ;
  TextureFrame *result = 0 ;
  
  result = (TextureFrame *)memnew(TextureFrame());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_under_texture(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureProgress_set_under_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_under_texture(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (Object *)TextureProgress_get_under_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_progress_texture(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureProgress_set_progress_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_progress_texture(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (Object *)TextureProgress_get_progress_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_over_texture(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Object *)jarg2; 
  TextureProgress_set_over_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_over_texture(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (Object *)TextureProgress_get_over_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_fill_mode(void * jarg1, int jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  int arg2 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (int)jarg2; 
  TextureProgress_set_fill_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TextureProgress_get_fill_mode(void * jarg1) {
  int jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  int result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (int)TextureProgress_get_fill_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_radial_initial_angle(void * jarg1, float jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float arg2 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (float)jarg2; 
  TextureProgress_set_radial_initial_angle(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TextureProgress_get_radial_initial_angle(void * jarg1) {
  float jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (float)TextureProgress_get_radial_initial_angle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_radial_center_offset(void * jarg1, void * jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TextureProgress_set_radial_center_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureProgress_get_radial_center_offset(void * jarg1) {
  void * jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  Vector2 result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = TextureProgress_get_radial_center_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureProgress_set_fill_degrees(void * jarg1, float jarg2) {
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float arg2 ;
  
  arg1 = (TextureProgress *)jarg1; 
  arg2 = (float)jarg2; 
  TextureProgress_set_fill_degrees(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TextureProgress_get_fill_degrees(void * jarg1) {
  float jresult ;
  TextureProgress *arg1 = (TextureProgress *) 0 ;
  float result;
  
  arg1 = (TextureProgress *)jarg1; 
  result = (float)TextureProgress_get_fill_degrees(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureProgress() {
  void * jresult ;
  TextureProgress *result = 0 ;
  
  result = (TextureProgress *)memnew(TextureProgress());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_tileset(void * jarg1, void * jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  SwigValueWrapper< Ref< TileSet > > arg2 ;
  Ref< TileSet > *argp2 ;
  
  arg1 = (TileMap *)jarg1; 
  argp2 = (Ref< TileSet > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< TileSet >", 0);
    return ;
  }
  arg2 = *argp2; 
  TileMap_set_tileset(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_get_tileset(void * jarg1) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  SwigValueWrapper< Ref< TileSet > > result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_tileset(arg1);
  jresult = memnew(Ref< TileSet >((const Ref< TileSet > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_mode(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_mode(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_half_offset(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_half_offset(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_half_offset(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_half_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_custom_transform(void * jarg1, void * jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  Matrix32 *arg2 = 0 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Matrix32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  TileMap_set_custom_transform(arg1,(Matrix32 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_get_custom_transform(void * jarg1) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Matrix32 result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_custom_transform(arg1);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell_size(void * jarg1, void * jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TileMap_set_cell_size(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_get_cell_size(void * jarg1) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_cell_size(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_quadrant_size(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_quadrant_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_quadrant_size(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_quadrant_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_tile_origin(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_tile_origin(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_tile_origin(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_tile_origin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_center_x(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_center_x(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_get_center_x(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_get_center_x(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_center_y(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_center_y(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_get_center_y(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_get_center_y(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_y_sort_mode(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_y_sort_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_y_sort_mode_enabled(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_is_y_sort_mode_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_use_kinematic(void * jarg1, unsigned int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  bool arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TileMap_set_collision_use_kinematic(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_get_collision_use_kinematic(void * jarg1) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  result = (bool)TileMap_get_collision_use_kinematic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_layer(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_collision_layer(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_collision_layer(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_collision_layer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_mask(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_collision_mask(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_friction(void * jarg1, float jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  float arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (float)jarg2; 
  TileMap_set_collision_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TileMap_get_collision_friction(void * jarg1) {
  float jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  float result;
  
  arg1 = (TileMap *)jarg1; 
  result = (float)TileMap_get_collision_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_collision_bounce(void * jarg1, float jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  float arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (float)jarg2; 
  TileMap_set_collision_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TileMap_get_collision_bounce(void * jarg1) {
  float jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  float result;
  
  arg1 = (TileMap *)jarg1; 
  result = (float)TileMap_get_collision_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_occluder_light_mask(void * jarg1, int jarg2) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  TileMap_set_occluder_light_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_occluder_light_mask(void * jarg1) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  result = (int)TileMap_get_occluder_light_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cell__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4) {
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  TileMap_set_cell__SWIG_0(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_set_cellv__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  TileMap_set_cellv__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_cell(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)TileMap_get_cell(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TileMap_get_cellv(void * jarg1, void * jarg2) {
  int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)TileMap_get_cellv(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_cell_x_flipped(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TileMap_is_cell_x_flipped(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_cell_y_flipped(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TileMap_is_cell_y_flipped(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TileMap_is_cell_transposed(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)TileMap_is_cell_transposed(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TileMap_clear(void * jarg1) {
  TileMap *arg1 = (TileMap *) 0 ;
  
  arg1 = (TileMap *)jarg1; 
  TileMap_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_get_used_cells(void * jarg1) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Array result;
  
  arg1 = (TileMap *)jarg1; 
  result = TileMap_get_used_cells(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_map_to_world__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  bool arg3 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = TileMap_map_to_world__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_map_to_world__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = TileMap_map_to_world__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TileMap_world_to_map(void * jarg1, void * jarg2) {
  void * jresult ;
  TileMap *arg1 = (TileMap *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (TileMap *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = TileMap_world_to_map(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TileMap() {
  void * jresult ;
  TileMap *result = 0 ;
  
  result = (TileMap *)memnew(TileMap());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_texture(void * jarg1, void * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  TouchScreenButton_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_texture(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (Object *)TouchScreenButton_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_texture_pressed(void * jarg1, void * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  TouchScreenButton_set_texture_pressed(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_texture_pressed(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (Object *)TouchScreenButton_get_texture_pressed(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_bitmask(void * jarg1, void * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (Object *)jarg2; 
  TouchScreenButton_set_bitmask(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_bitmask(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  Object *result = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (Object *)TouchScreenButton_get_bitmask(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_action(void * jarg1, char * jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  TouchScreenButton_set_action(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TouchScreenButton_get_action(void * jarg1) {
  void * jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  String result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = TouchScreenButton_get_action(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_visibility_mode(void * jarg1, int jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  int arg2 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = (int)jarg2; 
  TouchScreenButton_set_visibility_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TouchScreenButton_get_visibility_mode(void * jarg1) {
  int jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  int result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (int)TouchScreenButton_get_visibility_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TouchScreenButton_set_passby_press(void * jarg1, unsigned int jarg2) {
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  bool arg2 ;
  
  arg1 = (TouchScreenButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  TouchScreenButton_set_passby_press(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TouchScreenButton_is_passby_press_enabled(void * jarg1) {
  unsigned int jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  bool result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (bool)TouchScreenButton_is_passby_press_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TouchScreenButton_is_pressed(void * jarg1) {
  unsigned int jresult ;
  TouchScreenButton *arg1 = (TouchScreenButton *) 0 ;
  bool result;
  
  arg1 = (TouchScreenButton *)jarg1; 
  result = (bool)TouchScreenButton_is_pressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TouchScreenButton() {
  void * jresult ;
  TouchScreenButton *result = 0 ;
  
  result = (TouchScreenButton *)memnew(TouchScreenButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_clear(void * jarg1) {
  Tree *arg1 = (Tree *) 0 ;
  
  arg1 = (Tree *)jarg1; 
  Tree_clear(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_create_item__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  result = (TreeItem *)Tree_create_item__SWIG_0(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_create_item__SWIG_1(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_create_item__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_root(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_get_root(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_min_width(void * jarg1, int jarg2, int jarg3) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Tree_set_column_min_width(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_expand(void * jarg1, int jarg2, unsigned int jarg3) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Tree_set_column_expand(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_column_width(void * jarg1, int jarg2) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Tree_get_column_width(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_hide_root(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_hide_root(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_next_selected(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  result = (TreeItem *)Tree_get_next_selected(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_selected(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_get_selected(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_selected_column(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_selected_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_pressed_button(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_pressed_button(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_select_mode(void * jarg1, int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  Tree_set_select_mode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_columns(void * jarg1, int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  Tree_set_columns(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_columns(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_edited(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  result = (TreeItem *)Tree_get_edited(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_edited_column(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_edited_column(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_custom_popup_rect(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Rect2 result;
  
  arg1 = (Tree *)jarg1; 
  result = Tree_get_custom_popup_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_item_area_rect__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  int arg3 ;
  Rect2 result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  arg3 = (int)jarg3; 
  result = Tree_get_item_area_rect__SWIG_0(arg1,arg2,arg3);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_item_area_rect__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  TreeItem *arg2 = (TreeItem *) 0 ;
  Rect2 result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (TreeItem *)jarg2; 
  result = Tree_get_item_area_rect__SWIG_0(arg1,arg2);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_item_at_pos(void * jarg1, void * jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Vector2 *arg2 = 0 ;
  TreeItem *result = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (TreeItem *)Tree_get_item_at_pos(arg1,(Vector2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_column_at_pos(void * jarg1, void * jarg2) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Vector2 *arg2 = 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (int)Tree_get_column_at_pos(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_ensure_cursor_is_visible(void * jarg1) {
  Tree *arg1 = (Tree *) 0 ;
  
  arg1 = (Tree *)jarg1; 
  Tree_ensure_cursor_is_visible(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_titles_visible(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_column_titles_visible(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_are_column_titles_visible(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_are_column_titles_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_column_title(void * jarg1, int jarg2, char * jarg3) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  Tree_set_column_title(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_column_title(void * jarg1, int jarg2) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  result = Tree_get_column_title(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tree_get_scroll(void * jarg1) {
  void * jresult ;
  Tree *arg1 = (Tree *) 0 ;
  Vector2 result;
  
  arg1 = (Tree *)jarg1; 
  result = Tree_get_scroll(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_hide_folding(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_hide_folding(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_is_folding_hidden(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_is_folding_hidden(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_drop_mode_flags(void * jarg1, int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = (int)jarg2; 
  Tree_set_drop_mode_flags(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Tree_get_drop_mode_flags(void * jarg1) {
  int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  int result;
  
  arg1 = (Tree *)jarg1; 
  result = (int)Tree_get_drop_mode_flags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_allow_rmb_select(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_allow_rmb_select(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_get_allow_rmb_select(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_get_allow_rmb_select(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Tree_set_single_select_cell_editing_only_when_already_selected(void * jarg1, unsigned int jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  bool arg2 ;
  
  arg1 = (Tree *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Tree_set_single_select_cell_editing_only_when_already_selected(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Tree_get_single_select_cell_editing_only_when_already_selected(void * jarg1) {
  unsigned int jresult ;
  Tree *arg1 = (Tree *) 0 ;
  bool result;
  
  arg1 = (Tree *)jarg1; 
  result = (bool)Tree_get_single_select_cell_editing_only_when_already_selected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Tree() {
  void * jresult ;
  Tree *result = 0 ;
  
  result = (Tree *)memnew(Tree());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VScrollBar() {
  void * jresult ;
  VScrollBar *result = 0 ;
  
  result = (VScrollBar *)memnew(VScrollBar());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VSeparator() {
  void * jresult ;
  VSeparator *result = 0 ;
  
  result = (VSeparator *)memnew(VSeparator());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VSlider() {
  void * jresult ;
  VSlider *result = 0 ;
  
  result = (VSlider *)memnew(VSlider());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_mass(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_mass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_mass(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_friction(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_friction(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_engine_force(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_engine_force(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_engine_force(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_engine_force(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_brake(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_brake(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_brake(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_brake(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VehicleBody_set_steering(void * jarg1, float jarg2) {
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float arg2 ;
  
  arg1 = (VehicleBody *)jarg1; 
  arg2 = (float)jarg2; 
  VehicleBody_set_steering(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VehicleBody_get_steering(void * jarg1) {
  float jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  float result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = (float)VehicleBody_get_steering(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VehicleBody_get_linear_velocity(void * jarg1) {
  void * jresult ;
  VehicleBody *arg1 = (VehicleBody *) 0 ;
  Vector3 result;
  
  arg1 = (VehicleBody *)jarg1; 
  result = VehicleBody_get_linear_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VehicleBody() {
  void * jresult ;
  VehicleBody *result = 0 ;
  
  result = (VehicleBody *)memnew(VehicleBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_stream(void * jarg1, void * jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  SwigValueWrapper< Ref< VideoStream > > arg2 ;
  Ref< VideoStream > *argp2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  argp2 = (Ref< VideoStream > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< VideoStream >", 0);
    return ;
  }
  arg2 = *argp2; 
  VideoPlayer_set_stream(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPlayer_get_stream(void * jarg1) {
  void * jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  SwigValueWrapper< Ref< VideoStream > > result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = VideoPlayer_get_stream(arg1);
  jresult = memnew(Ref< VideoStream >((const Ref< VideoStream > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_play(void * jarg1) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  VideoPlayer_play(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_stop(void * jarg1) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  VideoPlayer_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_is_playing(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_paused(void * jarg1, unsigned int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VideoPlayer_set_paused(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_is_paused(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_is_paused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_volume(void * jarg1, float jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  VideoPlayer_set_volume(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VideoPlayer_get_volume(void * jarg1) {
  float jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (float)VideoPlayer_get_volume(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_volume_db(void * jarg1, float jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (float)jarg2; 
  VideoPlayer_set_volume_db(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_VideoPlayer_get_volume_db(void * jarg1) {
  float jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (float)VideoPlayer_get_volume_db(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_audio_track(void * jarg1, int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  VideoPlayer_set_audio_track(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoPlayer_get_audio_track(void * jarg1) {
  int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (int)VideoPlayer_get_audio_track(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPlayer_get_stream_name(void * jarg1) {
  void * jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  String result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = VideoPlayer_get_stream_name(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_VideoPlayer_get_stream_pos(void * jarg1) {
  float jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  float result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (float)VideoPlayer_get_stream_pos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_autoplay(void * jarg1, unsigned int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VideoPlayer_set_autoplay(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_has_autoplay(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_has_autoplay(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_expand(void * jarg1, unsigned int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  VideoPlayer_set_expand(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VideoPlayer_has_expand(void * jarg1) {
  unsigned int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  bool result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (bool)VideoPlayer_has_expand(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VideoPlayer_set_buffering_msec(void * jarg1, int jarg2) {
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int arg2 ;
  
  arg1 = (VideoPlayer *)jarg1; 
  arg2 = (int)jarg2; 
  VideoPlayer_set_buffering_msec(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_VideoPlayer_get_buffering_msec(void * jarg1) {
  int jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  int result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = (int)VideoPlayer_get_buffering_msec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VideoPlayer_get_video_texture(void * jarg1) {
  void * jresult ;
  VideoPlayer *arg1 = (VideoPlayer *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (VideoPlayer *)jarg1; 
  result = VideoPlayer_get_video_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VideoPlayer() {
  void * jresult ;
  VideoPlayer *result = 0 ;
  
  result = (VideoPlayer *)memnew(VideoPlayer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_viewport_path(void * jarg1, void * jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  ViewportSprite_set_viewport_path(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSprite_get_viewport_path(void * jarg1) {
  void * jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  NodePath result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = ViewportSprite_get_viewport_path(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_centered(void * jarg1, unsigned int jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ViewportSprite_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ViewportSprite_is_centered(void * jarg1) {
  unsigned int jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  bool result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = (bool)ViewportSprite_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_offset(void * jarg1, void * jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  ViewportSprite_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSprite_get_offset(void * jarg1) {
  void * jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Vector2 result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = ViewportSprite_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ViewportSprite_set_modulate(void * jarg1, void * jarg2) {
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ViewportSprite *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ViewportSprite_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ViewportSprite_get_modulate(void * jarg1) {
  void * jresult ;
  ViewportSprite *arg1 = (ViewportSprite *) 0 ;
  Color result;
  
  arg1 = (ViewportSprite *)jarg1; 
  result = ViewportSprite_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ViewportSprite() {
  void * jresult ;
  ViewportSprite *result = 0 ;
  
  result = (ViewportSprite *)memnew(ViewportSprite());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityEnabler_set_enabler(void * jarg1, int jarg2, unsigned int jarg3) {
  VisibilityEnabler *arg1 = (VisibilityEnabler *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (VisibilityEnabler *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  VisibilityEnabler_set_enabler(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityEnabler_is_enabler_enabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VisibilityEnabler *arg1 = (VisibilityEnabler *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (VisibilityEnabler *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)VisibilityEnabler_is_enabler_enabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityEnabler() {
  void * jresult ;
  VisibilityEnabler *result = 0 ;
  
  result = (VisibilityEnabler *)memnew(VisibilityEnabler());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityNotifier2D_set_rect(void * jarg1, void * jarg2) {
  VisibilityNotifier2D *arg1 = (VisibilityNotifier2D *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (VisibilityNotifier2D *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  VisibilityNotifier2D_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VisibilityNotifier2D_get_rect(void * jarg1) {
  void * jresult ;
  VisibilityNotifier2D *arg1 = (VisibilityNotifier2D *) 0 ;
  Rect2 result;
  
  arg1 = (VisibilityNotifier2D *)jarg1; 
  result = VisibilityNotifier2D_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityNotifier2D_is_on_screen(void * jarg1) {
  unsigned int jresult ;
  VisibilityNotifier2D *arg1 = (VisibilityNotifier2D *) 0 ;
  bool result;
  
  arg1 = (VisibilityNotifier2D *)jarg1; 
  result = (bool)VisibilityNotifier2D_is_on_screen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityNotifier2D() {
  void * jresult ;
  VisibilityNotifier2D *result = 0 ;
  
  result = (VisibilityNotifier2D *)memnew(VisibilityNotifier2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WindowDialog_set_title(void * jarg1, char * jarg2) {
  WindowDialog *arg1 = (WindowDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (WindowDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  WindowDialog_set_title(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WindowDialog_get_title(void * jarg1) {
  void * jresult ;
  WindowDialog *arg1 = (WindowDialog *) 0 ;
  String result;
  
  arg1 = (WindowDialog *)jarg1; 
  result = WindowDialog_get_title(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WindowDialog_get_close_button(void * jarg1) {
  void * jresult ;
  WindowDialog *arg1 = (WindowDialog *) 0 ;
  TextureButton *result = 0 ;
  
  arg1 = (WindowDialog *)jarg1; 
  result = (TextureButton *)WindowDialog_get_close_button(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WindowDialog() {
  void * jresult ;
  WindowDialog *result = 0 ;
  
  result = (WindowDialog *)memnew(WindowDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_YSort_set_sort_enabled(void * jarg1, unsigned int jarg2) {
  YSort *arg1 = (YSort *) 0 ;
  bool arg2 ;
  
  arg1 = (YSort *)jarg1; 
  arg2 = jarg2 ? true : false; 
  YSort_set_sort_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_YSort_is_sort_enabled(void * jarg1) {
  unsigned int jresult ;
  YSort *arg1 = (YSort *) 0 ;
  bool result;
  
  arg1 = (YSort *)jarg1; 
  result = (bool)YSort_is_sort_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_YSort() {
  void * jresult ;
  YSort *result = 0 ;
  
  result = (YSort *)memnew(YSort());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_get_ok(void * jarg1) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  Object *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = (Object *)AcceptDialog_get_ok(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_get_label(void * jarg1) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  Object *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = (Object *)AcceptDialog_get_label(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AcceptDialog_set_hide_on_ok(void * jarg1, unsigned int jarg2) {
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AcceptDialog_set_hide_on_ok(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AcceptDialog_get_hide_on_ok(void * jarg1) {
  unsigned int jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  bool result;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = (bool)AcceptDialog_get_hide_on_ok(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_button__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  String *arg4 = 0 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg4_str = jarg4;
  arg4 = &arg4_str; 
  result = (Button *)AcceptDialog_add_button__SWIG_0(arg1,(String const &)*arg2,arg3,(String const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_button__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (Button *)AcceptDialog_add_button__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_button__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Button *)AcceptDialog_add_button__SWIG_0(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_add_cancel(void * jarg1, char * jarg2) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  Button *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (Button *)AcceptDialog_add_cancel(arg1,(String const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_register_text_enter(void * jarg1, void * jarg2) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  Object *arg2 = (Object *) 0 ;
  LineEdit *result = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (LineEdit *)AcceptDialog_register_text_enter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AcceptDialog_set_text(void * jarg1, char * jarg2) {
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AcceptDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AcceptDialog_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDialog_get_text(void * jarg1) {
  void * jresult ;
  AcceptDialog *arg1 = (AcceptDialog *) 0 ;
  String result;
  
  arg1 = (AcceptDialog *)jarg1; 
  result = AcceptDialog_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AcceptDialog() {
  void * jresult ;
  AcceptDialog *result = 0 ;
  
  result = (AcceptDialog *)memnew(AcceptDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_sprite_frames(void * jarg1, void * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  SwigValueWrapper< Ref< SpriteFrames > > arg2 ;
  Ref< SpriteFrames > *argp2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  argp2 = (Ref< SpriteFrames > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< SpriteFrames >", 0);
    return ;
  }
  arg2 = *argp2; 
  AnimatedSprite_set_sprite_frames(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite_get_sprite_frames(void * jarg1) {
  void * jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  SwigValueWrapper< Ref< SpriteFrames > > result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_sprite_frames(arg1);
  jresult = memnew(Ref< SpriteFrames >((const Ref< SpriteFrames > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_animation(void * jarg1, char * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimatedSprite_set_animation(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite_get_animation(void * jarg1) {
  void * jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  String result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_animation(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_play__SWIG_0(void * jarg1, char * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  AnimatedSprite_play__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_play__SWIG_1(void * jarg1) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  AnimatedSprite_play__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_stop(void * jarg1) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  AnimatedSprite_stop(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_playing(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_playing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_centered(void * jarg1, unsigned int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimatedSprite_set_centered(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_centered(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_centered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_offset(void * jarg1, void * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  AnimatedSprite_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite_get_offset(void * jarg1) {
  void * jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Vector2 result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_flip_h(void * jarg1, unsigned int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimatedSprite_set_flip_h(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_flipped_h(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_flipped_h(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_flip_v(void * jarg1, unsigned int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = jarg2 ? true : false; 
  AnimatedSprite_set_flip_v(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AnimatedSprite_is_flipped_v(void * jarg1) {
  unsigned int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  bool result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (bool)AnimatedSprite_is_flipped_v(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_frame(void * jarg1, int jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  int arg2 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (int)jarg2; 
  AnimatedSprite_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimatedSprite_get_frame(void * jarg1) {
  int jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  int result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = (int)AnimatedSprite_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite_set_modulate(void * jarg1, void * jarg2) {
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (AnimatedSprite *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  AnimatedSprite_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite_get_modulate(void * jarg1) {
  void * jresult ;
  AnimatedSprite *arg1 = (AnimatedSprite *) 0 ;
  Color result;
  
  arg1 = (AnimatedSprite *)jarg1; 
  result = AnimatedSprite_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimatedSprite() {
  void * jresult ;
  AnimatedSprite *result = 0 ;
  
  result = (AnimatedSprite *)memnew(AnimatedSprite());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_set_sprite_frames(void * jarg1, void * jarg2) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  SwigValueWrapper< Ref< SpriteFrames > > arg2 ;
  Ref< SpriteFrames > *argp2 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  argp2 = (Ref< SpriteFrames > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< SpriteFrames >", 0);
    return ;
  }
  arg2 = *argp2; 
  AnimatedSprite3D_set_sprite_frames(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AnimatedSprite3D_get_sprite_frames(void * jarg1) {
  void * jresult ;
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  result = AnimatedSprite3D_get_sprite_frames(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AnimatedSprite3D_set_frame(void * jarg1, int jarg2) {
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  AnimatedSprite3D_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_AnimatedSprite3D_get_frame(void * jarg1) {
  int jresult ;
  AnimatedSprite3D *arg1 = (AnimatedSprite3D *) 0 ;
  int result;
  
  arg1 = (AnimatedSprite3D *)jarg1; 
  result = (int)AnimatedSprite3D_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AnimatedSprite3D() {
  void * jresult ;
  AnimatedSprite3D *result = 0 ;
  
  result = (AnimatedSprite3D *)memnew(AnimatedSprite3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_space_override_mode(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  Area_set_space_override_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_get_space_override_mode(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int)Area_get_space_override_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity_is_point(void * jarg1, unsigned int jarg2) {
  Area *arg1 = (Area *) 0 ;
  bool arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area_set_gravity_is_point(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_is_gravity_a_point(void * jarg1) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  result = (bool)Area_is_gravity_a_point(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity_distance_scale(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_gravity_distance_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_gravity_distance_scale(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_gravity_distance_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity_vector(void * jarg1, void * jarg2) {
  Area *arg1 = (Area *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  Area_set_gravity_vector(arg1,(Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area_get_gravity_vector(void * jarg1) {
  void * jresult ;
  Area *arg1 = (Area *) 0 ;
  Vector3 result;
  
  arg1 = (Area *)jarg1; 
  result = Area_get_gravity_vector(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_gravity(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_gravity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_gravity(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_gravity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_angular_damp(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_angular_damp(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_linear_damp(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_linear_damp(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_priority(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  Area_set_priority(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_get_priority(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float)Area_get_priority(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_collision_mask(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  Area_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_get_collision_mask(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int)Area_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_layer_mask(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  Area_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_get_layer_mask(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int)Area_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_monitorable(void * jarg1, unsigned int jarg2) {
  Area *arg1 = (Area *) 0 ;
  bool arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area_set_monitorable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_is_monitorable(void * jarg1) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  result = (bool)Area_is_monitorable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_set_enable_monitoring(void * jarg1, unsigned int jarg2) {
  Area *arg1 = (Area *) 0 ;
  bool arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area_set_enable_monitoring(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_is_monitoring_enabled(void * jarg1) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  result = (bool)Area_is_monitoring_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area_get_overlapping_bodies(void * jarg1) {
  void * jresult ;
  Area *arg1 = (Area *) 0 ;
  Array result;
  
  arg1 = (Area *)jarg1; 
  result = Area_get_overlapping_bodies(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area_get_overlapping_areas(void * jarg1) {
  void * jresult ;
  Area *arg1 = (Area *) 0 ;
  Array result;
  
  arg1 = (Area *)jarg1; 
  result = Area_get_overlapping_areas(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_overlaps_body(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area_overlaps_body(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area_overlaps_area(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area *arg1 = (Area *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area_overlaps_area(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Area() {
  void * jresult ;
  Area *result = 0 ;
  
  result = (Area *)memnew(Area());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackBufferCopy_set_rect(void * jarg1, void * jarg2) {
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (BackBufferCopy *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  BackBufferCopy_set_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BackBufferCopy_get_rect(void * jarg1) {
  void * jresult ;
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  Rect2 result;
  
  arg1 = (BackBufferCopy *)jarg1; 
  result = BackBufferCopy_get_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BackBufferCopy_set_copy_mode(void * jarg1, int jarg2) {
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  int arg2 ;
  
  arg1 = (BackBufferCopy *)jarg1; 
  arg2 = (int)jarg2; 
  BackBufferCopy_set_copy_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BackBufferCopy_get_copy_mode(void * jarg1) {
  int jresult ;
  BackBufferCopy *arg1 = (BackBufferCopy *) 0 ;
  int result;
  
  arg1 = (BackBufferCopy *)jarg1; 
  result = (int)BackBufferCopy_get_copy_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BackBufferCopy() {
  void * jresult ;
  BackBufferCopy *result = 0 ;
  
  result = (BackBufferCopy *)memnew(BackBufferCopy());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton__pressed(void * jarg1) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  
  arg1 = (BaseButton *)jarg1; 
  BaseButton__pressed(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton__toggled(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton__toggled(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_pressed(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_pressed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_pressed(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_pressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_hovered(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_hovered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_toggle_mode(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_toggle_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_toggle_mode(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_toggle_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_disabled(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_disabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_is_disabled(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_is_disabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseButton_set_click_on_press(void * jarg1, unsigned int jarg2) {
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool arg2 ;
  
  arg1 = (BaseButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BaseButton_set_click_on_press(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseButton_get_click_on_press(void * jarg1) {
  unsigned int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  bool result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (bool)BaseButton_get_click_on_press(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseButton_get_draw_mode(void * jarg1) {
  int jresult ;
  BaseButton *arg1 = (BaseButton *) 0 ;
  int result;
  
  arg1 = (BaseButton *)jarg1; 
  result = (int)BaseButton_get_draw_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_text(void * jarg1, char * jarg2) {
  Button *arg1 = (Button *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (Button *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  Button_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Button_get_text(void * jarg1) {
  void * jresult ;
  Button *arg1 = (Button *) 0 ;
  String result;
  
  arg1 = (Button *)jarg1; 
  result = Button_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_button_icon(void * jarg1, void * jarg2) {
  Button *arg1 = (Button *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (Button *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  Button_set_button_icon(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Button_get_button_icon(void * jarg1) {
  void * jresult ;
  Button *arg1 = (Button *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Button *)jarg1; 
  result = Button_get_button_icon(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_flat(void * jarg1, unsigned int jarg2) {
  Button *arg1 = (Button *) 0 ;
  bool arg2 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Button_set_flat(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_clip_text(void * jarg1, unsigned int jarg2) {
  Button *arg1 = (Button *) 0 ;
  bool arg2 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Button_set_clip_text(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Button_get_clip_text(void * jarg1) {
  unsigned int jresult ;
  Button *arg1 = (Button *) 0 ;
  bool result;
  
  arg1 = (Button *)jarg1; 
  result = (bool)Button_get_clip_text(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Button_set_text_align(void * jarg1, int jarg2) {
  Button *arg1 = (Button *) 0 ;
  int arg2 ;
  
  arg1 = (Button *)jarg1; 
  arg2 = (int)jarg2; 
  Button_set_text_align(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Button_get_text_align(void * jarg1) {
  int jresult ;
  Button *arg1 = (Button *) 0 ;
  int result;
  
  arg1 = (Button *)jarg1; 
  result = (int)Button_get_text_align(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Button_is_flat(void * jarg1) {
  unsigned int jresult ;
  Button *arg1 = (Button *) 0 ;
  bool result;
  
  arg1 = (Button *)jarg1; 
  result = (bool)Button_is_flat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Button() {
  void * jresult ;
  Button *result = 0 ;
  
  result = (Button *)memnew(Button());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_add_button(void * jarg1, char * jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  ButtonArray_add_button(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_add_icon_button__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  String *arg3 = 0 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (ButtonArray *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ButtonArray_add_icon_button__SWIG_0(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_add_icon_button__SWIG_1(void * jarg1, void * jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (ButtonArray *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  ButtonArray_add_icon_button__SWIG_0(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_set_button_text(void * jarg1, int jarg2, char * jarg3) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  ButtonArray_set_button_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_set_button_icon(void * jarg1, int jarg2, void * jarg3) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  ButtonArray_set_button_icon(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonArray_get_button_text(void * jarg1, int jarg2) {
  void * jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = ButtonArray_get_button_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonArray_get_button_icon(void * jarg1, int jarg2) {
  void * jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = ButtonArray_get_button_icon(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonArray_get_button_count(void * jarg1) {
  int jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int result;
  
  arg1 = (ButtonArray *)jarg1; 
  result = (int)ButtonArray_get_button_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonArray_get_selected(void * jarg1) {
  int jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int result;
  
  arg1 = (ButtonArray *)jarg1; 
  result = (int)ButtonArray_get_selected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonArray_get_hovered(void * jarg1) {
  int jresult ;
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int result;
  
  arg1 = (ButtonArray *)jarg1; 
  result = (int)ButtonArray_get_hovered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_set_selected(void * jarg1, int jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  ButtonArray_set_selected(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_erase_button(void * jarg1, int jarg2) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  int arg2 ;
  
  arg1 = (ButtonArray *)jarg1; 
  arg2 = (int)jarg2; 
  ButtonArray_erase_button(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonArray_clear(void * jarg1) {
  ButtonArray *arg1 = (ButtonArray *) 0 ;
  
  arg1 = (ButtonArray *)jarg1; 
  ButtonArray_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_offset(void * jarg1, void * jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Camera2D_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera2D_get_offset(void * jarg1) {
  void * jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_anchor_mode(void * jarg1, int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  Camera2D_set_anchor_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera2D_get_anchor_mode(void * jarg1) {
  int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  int result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (int)Camera2D_get_anchor_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_rotating(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_rotating(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_rotating(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_rotating(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_make_current(void * jarg1) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  Camera2D_make_current(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_clear_current(void * jarg1) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  Camera2D_clear_current(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_current(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_current(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_limit(void * jarg1, int jarg2, int jarg3) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  Camera2D_set_limit(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Camera2D_get_limit(void * jarg1, int jarg2) {
  int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Camera2D_get_limit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_v_drag_enabled(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_v_drag_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_v_drag_enabled(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_v_drag_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_h_drag_enabled(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_h_drag_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_h_drag_enabled(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_h_drag_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_v_offset(void * jarg1, float jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  float arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (float)jarg2; 
  Camera2D_set_v_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_v_offset(void * jarg1) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (float)Camera2D_get_v_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_h_offset(void * jarg1, float jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  float arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (float)jarg2; 
  Camera2D_set_h_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_h_offset(void * jarg1) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (float)Camera2D_get_h_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_drag_margin(void * jarg1, int jarg2, float jarg3) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Camera2D_set_drag_margin(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_drag_margin(void * jarg1, int jarg2) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Camera2D_get_drag_margin(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera2D_get_camera_pos(void * jarg1) {
  void * jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_camera_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera2D_get_camera_screen_center(void * jarg1) {
  void * jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_camera_screen_center(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_zoom(void * jarg1, void * jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Camera2D_set_zoom(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Camera2D_get_zoom(void * jarg1) {
  void * jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  Vector2 result;
  
  arg1 = (Camera2D *)jarg1; 
  result = Camera2D_get_zoom(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_follow_smoothing(void * jarg1, float jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  float arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = (float)jarg2; 
  Camera2D_set_follow_smoothing(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Camera2D_get_follow_smoothing(void * jarg1) {
  float jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  float result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (float)Camera2D_get_follow_smoothing(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_set_enable_follow_smoothing(void * jarg1, unsigned int jarg2) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Camera2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Camera2D_set_enable_follow_smoothing(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Camera2D_is_follow_smoothing_enabled(void * jarg1) {
  unsigned int jresult ;
  Camera2D *arg1 = (Camera2D *) 0 ;
  bool result;
  
  arg1 = (Camera2D *)jarg1; 
  result = (bool)Camera2D_is_follow_smoothing_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Camera2D_force_update_scroll(void * jarg1) {
  Camera2D *arg1 = (Camera2D *) 0 ;
  
  arg1 = (Camera2D *)jarg1; 
  Camera2D_force_update_scroll(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Camera2D() {
  void * jresult ;
  Camera2D *result = 0 ;
  
  result = (Camera2D *)memnew(Camera2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CanvasModulate_set_color(void * jarg1, void * jarg2) {
  CanvasModulate *arg1 = (CanvasModulate *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (CanvasModulate *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  CanvasModulate_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CanvasModulate_get_color(void * jarg1) {
  void * jresult ;
  CanvasModulate *arg1 = (CanvasModulate *) 0 ;
  Color result;
  
  arg1 = (CanvasModulate *)jarg1; 
  result = CanvasModulate_get_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CanvasModulate() {
  void * jresult ;
  CanvasModulate *result = 0 ;
  
  result = (CanvasModulate *)memnew(CanvasModulate());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CheckBox() {
  void * jresult ;
  CheckBox *result = 0 ;
  
  result = (CheckBox *)memnew(CheckBox());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CheckButton() {
  void * jresult ;
  CheckButton *result = 0 ;
  
  result = (CheckButton *)memnew(CheckButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D__input_event(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  InputEvent *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = (InputEvent *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InputEvent const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  CollisionObject2D__input_event(arg1,arg2,(InputEvent const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_add_shape__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg2 ;
  Matrix32 *arg3 = 0 ;
  Ref< Shape2D > *argp2 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  argp2 = (Ref< Shape2D > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CollisionObject2D_add_shape__SWIG_0(arg1,arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_add_shape__SWIG_1(void * jarg1, void * jarg2) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  SwigValueWrapper< Ref< Shape2D > > arg2 ;
  Ref< Shape2D > *argp2 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  argp2 = (Ref< Shape2D > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape2D >", 0);
    return ;
  }
  arg2 = *argp2; 
  CollisionObject2D_add_shape__SWIG_0(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionObject2D_get_shape_count(void * jarg1) {
  int jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  result = (int)CollisionObject2D_get_shape_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_shape(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape > > arg3 ;
  Ref< Shape > *argp3 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Shape > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Shape >", 0);
    return ;
  }
  arg3 = *argp3; 
  CollisionObject2D_set_shape(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_shape_transform(void * jarg1, int jarg2, void * jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  CollisionObject2D_set_shape_transform(arg1,arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_shape_as_trigger(void * jarg1, int jarg2, unsigned int jarg3) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  CollisionObject2D_set_shape_as_trigger(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject2D_get_shape(void * jarg1, int jarg2) {
  void * jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Shape2D > > result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject2D_get_shape(arg1,arg2);
  jresult = memnew(Ref< Shape2D >((const Ref< Shape2D > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject2D_get_shape_transform(void * jarg1, int jarg2) {
  void * jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  Matrix32 result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = CollisionObject2D_get_shape_transform(arg1,arg2);
  jresult = memnew(Matrix32((const Matrix32 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject2D_is_shape_set_as_trigger(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)CollisionObject2D_is_shape_set_as_trigger(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_remove_shape(void * jarg1, int jarg2) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionObject2D_remove_shape(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_clear_shapes(void * jarg1) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  CollisionObject2D_clear_shapes(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionObject2D_get_rid(void * jarg1) {
  void * jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  RID result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  result = CollisionObject2D_get_rid(arg1);
  jresult = memnew(RID((const RID &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionObject2D_set_pickable(void * jarg1, unsigned int jarg2) {
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionObject2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionObject2D_set_pickable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionObject2D_is_pickable(void * jarg1) {
  unsigned int jresult ;
  CollisionObject2D *arg1 = (CollisionObject2D *) 0 ;
  bool result;
  
  arg1 = (CollisionObject2D *)jarg1; 
  result = (bool)CollisionObject2D_is_pickable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon2D_set_polygon(void * jarg1, void * jarg2) {
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  Vector2Array *arg2 = 0 ;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  arg2 = (Vector2Array *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2Array const & type is null", 0);
    return ;
  } 
  CollisionPolygon2D_set_polygon(arg1,(Vector2Array const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionPolygon2D_get_polygon(void * jarg1) {
  void * jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  Vector2Array result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = CollisionPolygon2D_get_polygon(arg1);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon2D_set_build_mode(void * jarg1, int jarg2) {
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int arg2 ;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  arg2 = (int)jarg2; 
  CollisionPolygon2D_set_build_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon2D_get_build_mode(void * jarg1) {
  int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (int)CollisionPolygon2D_get_build_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionPolygon2D_set_trigger(void * jarg1, unsigned int jarg2) {
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionPolygon2D_set_trigger(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionPolygon2D_is_trigger(void * jarg1) {
  unsigned int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  bool result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (bool)CollisionPolygon2D_is_trigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon2D_get_collision_object_first_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (int)CollisionPolygon2D_get_collision_object_first_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionPolygon2D_get_collision_object_last_shape(void * jarg1) {
  int jresult ;
  CollisionPolygon2D *arg1 = (CollisionPolygon2D *) 0 ;
  int result;
  
  arg1 = (CollisionPolygon2D *)jarg1; 
  result = (int)CollisionPolygon2D_get_collision_object_last_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionPolygon2D() {
  void * jresult ;
  CollisionPolygon2D *result = 0 ;
  
  result = (CollisionPolygon2D *)memnew(CollisionPolygon2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape2D_set_shape(void * jarg1, void * jarg2) {
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (CollisionShape2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  CollisionShape2D_set_shape(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CollisionShape2D_get_shape(void * jarg1) {
  void * jresult ;
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (CollisionShape2D *)jarg1; 
  result = (Object *)CollisionShape2D_get_shape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CollisionShape2D_set_trigger(void * jarg1, unsigned int jarg2) {
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  bool arg2 ;
  
  arg1 = (CollisionShape2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CollisionShape2D_set_trigger(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollisionShape2D_is_trigger(void * jarg1) {
  unsigned int jresult ;
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  bool result;
  
  arg1 = (CollisionShape2D *)jarg1; 
  result = (bool)CollisionShape2D_is_trigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CollisionShape2D_get_collision_object_shape_index(void * jarg1) {
  int jresult ;
  CollisionShape2D *arg1 = (CollisionShape2D *) 0 ;
  int result;
  
  arg1 = (CollisionShape2D *)jarg1; 
  result = (int)CollisionShape2D_get_collision_object_shape_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CollisionShape2D() {
  void * jresult ;
  CollisionShape2D *result = 0 ;
  
  result = (CollisionShape2D *)memnew(CollisionShape2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPickerButton_set_color(void * jarg1, void * jarg2) {
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ColorPickerButton *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorPickerButton_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPickerButton_get_color(void * jarg1) {
  void * jresult ;
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  Color result;
  
  arg1 = (ColorPickerButton *)jarg1; 
  result = ColorPickerButton_get_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPickerButton_set_edit_alpha(void * jarg1, unsigned int jarg2) {
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPickerButton *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ColorPickerButton_set_edit_alpha(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPickerButton_is_editing_alpha(void * jarg1) {
  unsigned int jresult ;
  ColorPickerButton *arg1 = (ColorPickerButton *) 0 ;
  bool result;
  
  arg1 = (ColorPickerButton *)jarg1; 
  result = (bool)ColorPickerButton_is_editing_alpha(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorPickerButton() {
  void * jresult ;
  ColorPickerButton *result = 0 ;
  
  result = (ColorPickerButton *)memnew(ColorPickerButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConeTwistJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  ConeTwistJoint *arg1 = (ConeTwistJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (ConeTwistJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  ConeTwistJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ConeTwistJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  ConeTwistJoint *arg1 = (ConeTwistJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (ConeTwistJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)ConeTwistJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConeTwistJoint() {
  void * jresult ;
  ConeTwistJoint *result = 0 ;
  
  result = (ConeTwistJoint *)memnew(ConeTwistJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConfirmationDialog_get_cancel(void * jarg1) {
  void * jresult ;
  ConfirmationDialog *arg1 = (ConfirmationDialog *) 0 ;
  Button *result = 0 ;
  
  arg1 = (ConfirmationDialog *)jarg1; 
  result = (Button *)ConfirmationDialog_get_cancel(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConfirmationDialog() {
  void * jresult ;
  ConfirmationDialog *result = 0 ;
  
  result = (ConfirmationDialog *)memnew(ConfirmationDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Container_queue_sort(void * jarg1) {
  Container *arg1 = (Container *) 0 ;
  
  arg1 = (Container *)jarg1; 
  Container_queue_sort(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Container_fit_child_in_rect(void * jarg1, void * jarg2, void * jarg3) {
  Container *arg1 = (Container *) 0 ;
  Control *arg2 = (Control *) 0 ;
  Rect2 *arg3 = 0 ;
  
  arg1 = (Container *)jarg1; 
  arg2 = (Control *)jarg2; 
  arg3 = (Rect2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Container_fit_child_in_rect(arg1,arg2,(Rect2 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Container() {
  void * jresult ;
  Container *result = 0 ;
  
  result = (Container *)memnew(Container());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectionalLight_set_shadow_mode(void * jarg1, int jarg2) {
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int arg2 ;
  
  arg1 = (DirectionalLight *)jarg1; 
  arg2 = (int)jarg2; 
  DirectionalLight_set_shadow_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DirectionalLight_get_shadow_mode(void * jarg1) {
  int jresult ;
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int result;
  
  arg1 = (DirectionalLight *)jarg1; 
  result = (int)DirectionalLight_get_shadow_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectionalLight_set_shadow_param(void * jarg1, int jarg2, float jarg3) {
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (DirectionalLight *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  DirectionalLight_set_shadow_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DirectionalLight_get_shadow_param(void * jarg1, int jarg2) {
  float jresult ;
  DirectionalLight *arg1 = (DirectionalLight *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (DirectionalLight *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)DirectionalLight_get_shadow_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectionalLight() {
  void * jresult ;
  DirectionalLight *result = 0 ;
  
  result = (DirectionalLight *)memnew(DirectionalLight());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_clear_filters(void * jarg1) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  EditorFileDialog_clear_filters(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_add_filter(void * jarg1, char * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_add_filter(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_current_dir(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = EditorFileDialog_get_current_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_current_file(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = EditorFileDialog_get_current_file(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_current_path(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = EditorFileDialog_get_current_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_current_dir(void * jarg1, char * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_set_current_dir(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_current_file(void * jarg1, char * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_set_current_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_current_path(void * jarg1, char * jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  EditorFileDialog_set_current_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_mode(void * jarg1, int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  EditorFileDialog_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorFileDialog_get_mode(void * jarg1) {
  int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (int)EditorFileDialog_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EditorFileDialog_get_vbox(void * jarg1) {
  void * jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  VBoxContainer *result = 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (VBoxContainer *)EditorFileDialog_get_vbox(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_access(void * jarg1, int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  EditorFileDialog_set_access(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorFileDialog_get_access(void * jarg1) {
  int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (int)EditorFileDialog_get_access(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_show_hidden_files(void * jarg1, unsigned int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  EditorFileDialog_set_show_hidden_files(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EditorFileDialog_is_showing_hidden_files(void * jarg1) {
  unsigned int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  bool result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (bool)EditorFileDialog_is_showing_hidden_files(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_set_display_mode(void * jarg1, int jarg2) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  EditorFileDialog_set_display_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EditorFileDialog_get_display_mode(void * jarg1) {
  int jresult ;
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  int result;
  
  arg1 = (EditorFileDialog *)jarg1; 
  result = (int)EditorFileDialog_get_display_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EditorFileDialog_invalidate(void * jarg1) {
  EditorFileDialog *arg1 = (EditorFileDialog *) 0 ;
  
  arg1 = (EditorFileDialog *)jarg1; 
  EditorFileDialog_invalidate(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EditorFileDialog() {
  void * jresult ;
  EditorFileDialog *result = 0 ;
  
  result = (EditorFileDialog *)memnew(EditorFileDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_clear_filters(void * jarg1) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  FileDialog_clear_filters(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_add_filter(void * jarg1, char * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_add_filter(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_current_dir(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  String result;
  
  arg1 = (FileDialog *)jarg1; 
  result = FileDialog_get_current_dir(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_current_file(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  String result;
  
  arg1 = (FileDialog *)jarg1; 
  result = FileDialog_get_current_file(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_current_path(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  String result;
  
  arg1 = (FileDialog *)jarg1; 
  result = FileDialog_get_current_path(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_current_dir(void * jarg1, char * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_set_current_dir(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_current_file(void * jarg1, char * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_set_current_file(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_current_path(void * jarg1, char * jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  FileDialog_set_current_path(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_mode(void * jarg1, int jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (FileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  FileDialog_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileDialog_get_mode(void * jarg1) {
  int jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  int result;
  
  arg1 = (FileDialog *)jarg1; 
  result = (int)FileDialog_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileDialog_get_vbox(void * jarg1) {
  void * jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  VBoxContainer *result = 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  result = (VBoxContainer *)FileDialog_get_vbox(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_access(void * jarg1, int jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  int arg2 ;
  
  arg1 = (FileDialog *)jarg1; 
  arg2 = (int)jarg2; 
  FileDialog_set_access(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FileDialog_get_access(void * jarg1) {
  int jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  int result;
  
  arg1 = (FileDialog *)jarg1; 
  result = (int)FileDialog_get_access(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_set_show_hidden_files(void * jarg1, unsigned int jarg2) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = (FileDialog *)jarg1; 
  arg2 = jarg2 ? true : false; 
  FileDialog_set_show_hidden_files(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FileDialog_is_showing_hidden_files(void * jarg1) {
  unsigned int jresult ;
  FileDialog *arg1 = (FileDialog *) 0 ;
  bool result;
  
  arg1 = (FileDialog *)jarg1; 
  result = (bool)FileDialog_is_showing_hidden_files(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileDialog_invalidate(void * jarg1) {
  FileDialog *arg1 = (FileDialog *) 0 ;
  
  arg1 = (FileDialog *)jarg1; 
  FileDialog_invalidate(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileDialog() {
  void * jresult ;
  FileDialog *result = 0 ;
  
  result = (FileDialog *)memnew(FileDialog());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_param_x(void * jarg1, int jarg2, float jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Generic6DOFJoint_set_param_x(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Generic6DOFJoint_get_param_x(void * jarg1, int jarg2) {
  float jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Generic6DOFJoint_get_param_x(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_param_y(void * jarg1, int jarg2, float jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Generic6DOFJoint_set_param_y(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Generic6DOFJoint_get_param_y(void * jarg1, int jarg2) {
  float jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Generic6DOFJoint_get_param_y(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_param_z(void * jarg1, int jarg2, float jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  Generic6DOFJoint_set_param_z(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Generic6DOFJoint_get_param_z(void * jarg1, int jarg2) {
  float jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)Generic6DOFJoint_get_param_z(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_flag_x(void * jarg1, int jarg2, unsigned int jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Generic6DOFJoint_set_flag_x(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Generic6DOFJoint_get_flag_x(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Generic6DOFJoint_get_flag_x(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_flag_y(void * jarg1, int jarg2, unsigned int jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Generic6DOFJoint_set_flag_y(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Generic6DOFJoint_get_flag_y(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Generic6DOFJoint_get_flag_y(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Generic6DOFJoint_set_flag_z(void * jarg1, int jarg2, unsigned int jarg3) {
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Generic6DOFJoint_set_flag_z(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Generic6DOFJoint_get_flag_z(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Generic6DOFJoint *arg1 = (Generic6DOFJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Generic6DOFJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Generic6DOFJoint_get_flag_z(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Generic6DOFJoint() {
  void * jresult ;
  Generic6DOFJoint *result = 0 ;
  
  result = (Generic6DOFJoint *)memnew(Generic6DOFJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_title(void * jarg1, char * jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  GraphNode_set_title(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_title(void * jarg1) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  String result;
  
  arg1 = (GraphNode *)jarg1; 
  result = GraphNode_get_title(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_slot(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  Color *arg5 = 0 ;
  bool arg6 ;
  int arg7 ;
  Color *arg8 = 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (Color *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (Color *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  GraphNode_set_slot(arg1,arg2,arg3,arg4,(Color const &)*arg5,arg6,arg7,(Color const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_clear_slot(void * jarg1, int jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  GraphNode_clear_slot(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_clear_all_slots(void * jarg1) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  GraphNode_clear_all_slots(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphNode_is_slot_enabled_left(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GraphNode_is_slot_enabled_left(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_slot_type_left(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_slot_type_left(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_slot_color_left(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_slot_color_left(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphNode_is_slot_enabled_right(void * jarg1, int jarg2) {
  unsigned int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)GraphNode_is_slot_enabled_right(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_slot_type_right(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_slot_type_right(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_slot_color_right(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_slot_color_right(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_offset(void * jarg1, void * jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  GraphNode_set_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_offset(void * jarg1) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  Vector2 result;
  
  arg1 = (GraphNode *)jarg1; 
  result = GraphNode_get_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_output_count(void * jarg1) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  result = (int)GraphNode_get_connection_output_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_input_count(void * jarg1) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  result = (int)GraphNode_get_connection_input_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_connection_output_pos(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_output_pos(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_output_type(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_connection_output_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_connection_output_color(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_output_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_connection_input_pos(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Vector2 result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_input_pos(arg1,arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GraphNode_get_connection_input_type(void * jarg1, int jarg2) {
  int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)GraphNode_get_connection_input_type(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GraphNode_get_connection_input_color(void * jarg1, int jarg2) {
  void * jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  int arg2 ;
  Color result;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = (int)jarg2; 
  result = GraphNode_get_connection_input_color(arg1,arg2);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GraphNode_set_show_close_button(void * jarg1, unsigned int jarg2) {
  GraphNode *arg1 = (GraphNode *) 0 ;
  bool arg2 ;
  
  arg1 = (GraphNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  GraphNode_set_show_close_button(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GraphNode_is_close_button_visible(void * jarg1) {
  unsigned int jresult ;
  GraphNode *arg1 = (GraphNode *) 0 ;
  bool result;
  
  arg1 = (GraphNode *)jarg1; 
  result = (bool)GraphNode_is_close_button_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GraphNode() {
  void * jresult ;
  GraphNode *result = 0 ;
  
  result = (GraphNode *)memnew(GraphNode());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GridContainer_set_columns(void * jarg1, int jarg2) {
  GridContainer *arg1 = (GridContainer *) 0 ;
  int arg2 ;
  
  arg1 = (GridContainer *)jarg1; 
  arg2 = (int)jarg2; 
  GridContainer_set_columns(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridContainer_get_columns(void * jarg1) {
  int jresult ;
  GridContainer *arg1 = (GridContainer *) 0 ;
  int result;
  
  arg1 = (GridContainer *)jarg1; 
  result = (int)GridContainer_get_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GridContainer() {
  void * jresult ;
  GridContainer *result = 0 ;
  
  result = (GridContainer *)memnew(GridContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HButtonArray() {
  void * jresult ;
  HButtonArray *result = 0 ;
  
  result = (HButtonArray *)memnew(HButtonArray());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HScrollBar() {
  void * jresult ;
  HScrollBar *result = 0 ;
  
  result = (HScrollBar *)memnew(HScrollBar());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSeparator() {
  void * jresult ;
  HSeparator *result = 0 ;
  
  result = (HSeparator *)memnew(HSeparator());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSlider() {
  void * jresult ;
  HSlider *result = 0 ;
  
  result = (HSlider *)memnew(HSlider());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HingeJoint_set_param(void * jarg1, int jarg2, float jarg3) {
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  HingeJoint_set_param(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HingeJoint_get_param(void * jarg1, int jarg2) {
  float jresult ;
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)HingeJoint_get_param(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HingeJoint_set_flag(void * jarg1, int jarg2, unsigned int jarg3) {
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  HingeJoint_set_flag(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HingeJoint_get_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  HingeJoint *arg1 = (HingeJoint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HingeJoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)HingeJoint_get_flag(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HingeJoint() {
  void * jresult ;
  HingeJoint *result = 0 ;
  
  result = (HingeJoint *)memnew(HingeJoint());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_node_a(void * jarg1, void * jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint2D_set_node_a(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint2D_get_node_a(void * jarg1) {
  void * jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath result;
  
  arg1 = (Joint2D *)jarg1; 
  result = Joint2D_get_node_a(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_node_b(void * jarg1, void * jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath *arg2 = 0 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = (NodePath *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NodePath const & type is null", 0);
    return ;
  } 
  Joint2D_set_node_b(arg1,(NodePath const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Joint2D_get_node_b(void * jarg1) {
  void * jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  NodePath result;
  
  arg1 = (Joint2D *)jarg1; 
  result = Joint2D_get_node_b(arg1);
  jresult = memnew(NodePath((const NodePath &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_bias(void * jarg1, float jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  float arg2 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = (float)jarg2; 
  Joint2D_set_bias(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Joint2D_get_bias(void * jarg1) {
  float jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  float result;
  
  arg1 = (Joint2D *)jarg1; 
  result = (float)Joint2D_get_bias(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Joint2D_set_exclude_nodes_from_collision(void * jarg1, unsigned int jarg2) {
  Joint2D *arg1 = (Joint2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Joint2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Joint2D_set_exclude_nodes_from_collision(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Joint2D_get_exclude_nodes_from_collision(void * jarg1) {
  unsigned int jresult ;
  Joint2D *arg1 = (Joint2D *) 0 ;
  bool result;
  
  arg1 = (Joint2D *)jarg1; 
  result = (bool)Joint2D_get_exclude_nodes_from_collision(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_move(void * jarg1, void * jarg2) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = KinematicBody_move(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_move_to(void * jarg1, void * jarg2) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = KinematicBody_move_to(arg1,(Vector3 const &)*arg2);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_teleport_to(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)KinematicBody_can_teleport_to(arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_is_colliding(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collision_pos(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = KinematicBody_get_collision_pos(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collision_normal(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = KinematicBody_get_collision_normal(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collider_velocity(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Vector3 result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = KinematicBody_get_collider_velocity(arg1);
  jresult = memnew(Vector3((const Vector3 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody_get_collider(void * jarg1) {
  void * jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  Object *result = 0 ;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (Object *)KinematicBody_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinematicBody_get_collider_shape(void * jarg1) {
  int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  int result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (int)KinematicBody_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_static_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_static_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_static_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_static_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_kinematic_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_kinematic_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_kinematic_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_kinematic_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_rigid_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_rigid_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_rigid_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_rigid_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collide_with_character_bodies(void * jarg1, unsigned int jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = jarg2 ? true : false; 
  KinematicBody_set_collide_with_character_bodies(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody_can_collide_with_character_bodies(void * jarg1) {
  unsigned int jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  bool result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (bool)KinematicBody_can_collide_with_character_bodies(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody_set_collision_margin(void * jarg1, float jarg2) {
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  float arg2 ;
  
  arg1 = (KinematicBody *)jarg1; 
  arg2 = (float)jarg2; 
  KinematicBody_set_collision_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_KinematicBody_get_collision_margin(void * jarg1) {
  float jresult ;
  KinematicBody *arg1 = (KinematicBody *) 0 ;
  float result;
  
  arg1 = (KinematicBody *)jarg1; 
  result = (float)KinematicBody_get_collision_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinematicBody() {
  void * jresult ;
  KinematicBody *result = 0 ;
  
  result = (KinematicBody *)memnew(KinematicBody());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_enabled(void * jarg1, unsigned int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light2D_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light2D_is_enabled(void * jarg1) {
  unsigned int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  bool result;
  
  arg1 = (Light2D *)jarg1; 
  result = (bool)Light2D_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_texture(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  Light2D_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_texture(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  result = (Object *)Light2D_get_texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_texture_offset(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Light2D_set_texture_offset(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_texture_offset(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Vector2 result;
  
  arg1 = (Light2D *)jarg1; 
  result = Light2D_get_texture_offset(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_color(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Light2D_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_color(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Color result;
  
  arg1 = (Light2D *)jarg1; 
  result = Light2D_get_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_height(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_height(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_height(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_height(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_energy(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_energy(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_energy(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_energy(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_texture_scale(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_texture_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_texture_scale(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_texture_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_z_range_min(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_z_range_min(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_z_range_min(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_z_range_min(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_z_range_max(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_z_range_max(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_z_range_max(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_z_range_max(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_layer_range_min(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_layer_range_min(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_layer_range_min(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_layer_range_min(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_layer_range_max(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_layer_range_max(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_layer_range_max(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_layer_range_max(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_item_mask(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_item_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_item_mask(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_item_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_item_shadow_mask(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_item_shadow_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_item_shadow_mask(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_item_shadow_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_mode(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_mode(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_enabled(void * jarg1, unsigned int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Light2D_set_shadow_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Light2D_is_shadow_enabled(void * jarg1) {
  unsigned int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  bool result;
  
  arg1 = (Light2D *)jarg1; 
  result = (bool)Light2D_is_shadow_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_buffer_size(void * jarg1, int jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  int arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (int)jarg2; 
  Light2D_set_shadow_buffer_size(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Light2D_get_shadow_buffer_size(void * jarg1) {
  int jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  int result;
  
  arg1 = (Light2D *)jarg1; 
  result = (int)Light2D_get_shadow_buffer_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_esm_multiplier(void * jarg1, float jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  float arg2 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (float)jarg2; 
  Light2D_set_shadow_esm_multiplier(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Light2D_get_shadow_esm_multiplier(void * jarg1) {
  float jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  float result;
  
  arg1 = (Light2D *)jarg1; 
  result = (float)Light2D_get_shadow_esm_multiplier(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Light2D_set_shadow_color(void * jarg1, void * jarg2) {
  Light2D *arg1 = (Light2D *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (Light2D *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  Light2D_set_shadow_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Light2D_get_shadow_color(void * jarg1) {
  void * jresult ;
  Light2D *arg1 = (Light2D *) 0 ;
  Color result;
  
  arg1 = (Light2D *)jarg1; 
  result = Light2D_get_shadow_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Light2D() {
  void * jresult ;
  Light2D *result = 0 ;
  
  result = (Light2D *)memnew(Light2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightOccluder2D_set_occluder_polygon(void * jarg1, void * jarg2) {
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  SwigValueWrapper< Ref< OccluderPolygon2D > > arg2 ;
  Ref< OccluderPolygon2D > *argp2 ;
  
  arg1 = (LightOccluder2D *)jarg1; 
  argp2 = (Ref< OccluderPolygon2D > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< OccluderPolygon2D >", 0);
    return ;
  }
  arg2 = *argp2; 
  LightOccluder2D_set_occluder_polygon(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LightOccluder2D_get_occluder_polygon(void * jarg1) {
  void * jresult ;
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  SwigValueWrapper< Ref< OccluderPolygon2D > > result;
  
  arg1 = (LightOccluder2D *)jarg1; 
  result = LightOccluder2D_get_occluder_polygon(arg1);
  jresult = memnew(Ref< OccluderPolygon2D >((const Ref< OccluderPolygon2D > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightOccluder2D_set_occluder_light_mask(void * jarg1, int jarg2) {
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  int arg2 ;
  
  arg1 = (LightOccluder2D *)jarg1; 
  arg2 = (int)jarg2; 
  LightOccluder2D_set_occluder_light_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LightOccluder2D_get_occluder_light_mask(void * jarg1) {
  int jresult ;
  LightOccluder2D *arg1 = (LightOccluder2D *) 0 ;
  int result;
  
  arg1 = (LightOccluder2D *)jarg1; 
  result = (int)LightOccluder2D_get_occluder_light_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LightOccluder2D() {
  void * jresult ;
  LightOccluder2D *result = 0 ;
  
  result = (LightOccluder2D *)memnew(LightOccluder2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkButton_set_text(void * jarg1, char * jarg2) {
  LinkButton *arg1 = (LinkButton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (LinkButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  LinkButton_set_text(arg1,(String const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkButton_get_text(void * jarg1) {
  void * jresult ;
  LinkButton *arg1 = (LinkButton *) 0 ;
  String result;
  
  arg1 = (LinkButton *)jarg1; 
  result = LinkButton_get_text(arg1);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkButton_set_underline_mode(void * jarg1, int jarg2) {
  LinkButton *arg1 = (LinkButton *) 0 ;
  int arg2 ;
  
  arg1 = (LinkButton *)jarg1; 
  arg2 = (int)jarg2; 
  LinkButton_set_underline_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LinkButton_get_underline_mode(void * jarg1) {
  int jresult ;
  LinkButton *arg1 = (LinkButton *) 0 ;
  int result;
  
  arg1 = (LinkButton *)jarg1; 
  result = (int)LinkButton_get_underline_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkButton() {
  void * jresult ;
  LinkButton *result = 0 ;
  
  result = (LinkButton *)memnew(LinkButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MarginContainer() {
  void * jresult ;
  MarginContainer *result = 0 ;
  
  result = (MarginContainer *)memnew(MarginContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MenuButton_get_popup(void * jarg1) {
  void * jresult ;
  MenuButton *arg1 = (MenuButton *) 0 ;
  PopupMenu *result = 0 ;
  
  arg1 = (MenuButton *)jarg1; 
  result = (PopupMenu *)MenuButton_get_popup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MenuButton() {
  void * jresult ;
  MenuButton *result = 0 ;
  
  result = (MenuButton *)memnew(MenuButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation2D_navpoly_create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  SwigValueWrapper< Ref< NavigationPolygon > > arg2 ;
  Matrix32 *arg3 = 0 ;
  Object *arg4 = (Object *) 0 ;
  Ref< NavigationPolygon > *argp2 ;
  int result;
  
  arg1 = (Navigation2D *)jarg1; 
  argp2 = (Ref< NavigationPolygon > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationPolygon >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  arg4 = (Object *)jarg4; 
  result = (int)Navigation2D_navpoly_create__SWIG_0(arg1,arg2,(Matrix32 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Navigation2D_navpoly_create__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  SwigValueWrapper< Ref< NavigationPolygon > > arg2 ;
  Matrix32 *arg3 = 0 ;
  Ref< NavigationPolygon > *argp2 ;
  int result;
  
  arg1 = (Navigation2D *)jarg1; 
  argp2 = (Ref< NavigationPolygon > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationPolygon >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return 0;
  } 
  result = (int)Navigation2D_navpoly_create__SWIG_0(arg1,arg2,(Matrix32 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation2D_navpoly_set_transform(void * jarg1, int jarg2, void * jarg3) {
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  int arg2 ;
  Matrix32 *arg3 = 0 ;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Matrix32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix32 const & type is null", 0);
    return ;
  } 
  Navigation2D_navpoly_set_transform(arg1,arg2,(Matrix32 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Navigation2D_navpoly_remove(void * jarg1, int jarg2) {
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  int arg2 ;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (int)jarg2; 
  Navigation2D_navpoly_remove(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_simple_path__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  bool arg4 ;
  Vector2Array result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = Navigation2D_get_simple_path__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3,arg4);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_simple_path__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  Vector2Array result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Navigation2D_get_simple_path__SWIG_0(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
  jresult = memnew(Vector2Array((const Vector2Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_closest_point(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = Navigation2D_get_closest_point(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Navigation2D_get_closest_point_owner(void * jarg1, void * jarg2) {
  void * jresult ;
  Navigation2D *arg1 = (Navigation2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Object *result = 0 ;
  
  arg1 = (Navigation2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (Object *)Navigation2D_get_closest_point_owner(arg1,(Vector2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Navigation2D() {
  void * jresult ;
  Navigation2D *result = 0 ;
  
  result = (Navigation2D *)memnew(Navigation2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygonInstance_set_navigation_polygon(void * jarg1, void * jarg2) {
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  SwigValueWrapper< Ref< NavigationPolygon > > arg2 ;
  Ref< NavigationPolygon > *argp2 ;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  argp2 = (Ref< NavigationPolygon > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< NavigationPolygon >", 0);
    return ;
  }
  arg2 = *argp2; 
  NavigationPolygonInstance_set_navigation_polygon(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NavigationPolygonInstance_get_navigation_polygon(void * jarg1) {
  void * jresult ;
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  SwigValueWrapper< Ref< NavigationPolygon > > result;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  result = NavigationPolygonInstance_get_navigation_polygon(arg1);
  jresult = memnew(Ref< NavigationPolygon >((const Ref< NavigationPolygon > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NavigationPolygonInstance_set_enabled(void * jarg1, unsigned int jarg2) {
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  NavigationPolygonInstance_set_enabled(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NavigationPolygonInstance_is_enabled(void * jarg1) {
  unsigned int jresult ;
  NavigationPolygonInstance *arg1 = (NavigationPolygonInstance *) 0 ;
  bool result;
  
  arg1 = (NavigationPolygonInstance *)jarg1; 
  result = (bool)NavigationPolygonInstance_is_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NavigationPolygonInstance() {
  void * jresult ;
  NavigationPolygonInstance *result = 0 ;
  
  result = (NavigationPolygonInstance *)memnew(NavigationPolygonInstance());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_item__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (OptionButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  OptionButton_add_item__SWIG_0(arg1,(String const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_item__SWIG_1(void * jarg1, char * jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  String *arg2 = 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  OptionButton_add_item__SWIG_0(arg1,(String const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_icon_item(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  String *arg3 = 0 ;
  int arg4 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (OptionButton *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  OptionButton_add_icon_item(arg1,arg2,(String const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_text(void * jarg1, int jarg2, char * jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  String *arg3 = 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return ;
  }
  String arg3_str = jarg3;
  arg3 = &arg3_str; 
  OptionButton_set_item_text(arg1,arg2,(String const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_icon(void * jarg1, int jarg2, void * jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > arg3 ;
  Ref< Texture > *argp3 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (Ref< Texture > *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg3 = *argp3; 
  OptionButton_set_item_icon(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_disabled(void * jarg1, int jarg2, unsigned int jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  OptionButton_set_item_disabled(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_ID(void * jarg1, int jarg2, int jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  OptionButton_set_item_ID(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_set_item_metadata(void * jarg1, int jarg2, void * jarg3) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  Variant *arg3 = 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Variant *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Variant const & type is null", 0);
    return ;
  } 
  OptionButton_set_item_metadata(arg1,arg2,(Variant const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OptionButton_get_item_text(void * jarg1, int jarg2) {
  void * jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  String result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = OptionButton_get_item_text(arg1,arg2);
  jresult = SWIG_csharp_wstring_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OptionButton_get_item_icon(void * jarg1, int jarg2) {
  void * jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = OptionButton_get_item_icon(arg1,arg2);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_item_ID(void * jarg1, int jarg2) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)OptionButton_get_item_ID(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_get_item_metadata(void * jarg1, int jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  OptionButton_get_item_metadata(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OptionButton_is_item_disabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)OptionButton_is_item_disabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_item_count(void * jarg1) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  result = (int)OptionButton_get_item_count(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_add_separator(void * jarg1) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  OptionButton_add_separator(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_clear(void * jarg1) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  OptionButton_clear(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_select(void * jarg1, int jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  OptionButton_select(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_selected(void * jarg1) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  result = (int)OptionButton_get_selected(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionButton_get_selected_ID(void * jarg1) {
  int jresult ;
  OptionButton *arg1 = (OptionButton *) 0 ;
  int result;
  
  arg1 = (OptionButton *)jarg1; 
  result = (int)OptionButton_get_selected_ID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_get_selected_metadata(void * jarg1) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  
  arg1 = (OptionButton *)jarg1; 
  OptionButton_get_selected_metadata(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OptionButton_remove_item(void * jarg1, int jarg2) {
  OptionButton *arg1 = (OptionButton *) 0 ;
  int arg2 ;
  
  arg1 = (OptionButton *)jarg1; 
  arg2 = (int)jarg2; 
  OptionButton_remove_item(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OptionButton() {
  void * jresult ;
  OptionButton *result = 0 ;
  
  result = (OptionButton *)memnew(OptionButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PanelContainer() {
  void * jresult ;
  PanelContainer *result = 0 ;
  
  result = (PanelContainer *)memnew(PanelContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_layer_mask(void * jarg1, int jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody2D_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody2D_get_layer_mask(void * jarg1) {
  int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = (int)PhysicsBody2D_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_collision_mask(void * jarg1, int jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  PhysicsBody2D_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsBody2D_get_collision_mask(void * jarg1) {
  int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = (int)PhysicsBody2D_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody2D_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody2D_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody2D_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  PhysicsBody2D_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBody2D_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)PhysicsBody2D_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_one_way_collision_direction(void * jarg1, void * jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  PhysicsBody2D_set_one_way_collision_direction(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsBody2D_get_one_way_collision_direction(void * jarg1) {
  void * jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = PhysicsBody2D_get_one_way_collision_direction(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_set_one_way_collision_max_depth(void * jarg1, float jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  PhysicsBody2D_set_one_way_collision_max_depth(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsBody2D_get_one_way_collision_max_depth(void * jarg1) {
  float jresult ;
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  float result;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  result = (float)PhysicsBody2D_get_one_way_collision_max_depth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_add_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  PhysicsBody2D *arg2 = (PhysicsBody2D *) 0 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (PhysicsBody2D *)jarg2; 
  PhysicsBody2D_add_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBody2D_remove_collision_exception_with(void * jarg1, void * jarg2) {
  PhysicsBody2D *arg1 = (PhysicsBody2D *) 0 ;
  PhysicsBody2D *arg2 = (PhysicsBody2D *) 0 ;
  
  arg1 = (PhysicsBody2D *)jarg1; 
  arg2 = (PhysicsBody2D *)jarg2; 
  PhysicsBody2D_remove_collision_exception_with(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PinJoint2D_set_softness(void * jarg1, float jarg2) {
  PinJoint2D *arg1 = (PinJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (PinJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  PinJoint2D_set_softness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PinJoint2D_get_softness(void * jarg1) {
  float jresult ;
  PinJoint2D *arg1 = (PinJoint2D *) 0 ;
  float result;
  
  arg1 = (PinJoint2D *)jarg1; 
  result = (float)PinJoint2D_get_softness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PinJoint2D() {
  void * jresult ;
  PinJoint2D *result = 0 ;
  
  result = (PinJoint2D *)memnew(PinJoint2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressBar_set_percent_visible(void * jarg1, unsigned int jarg2) {
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  bool arg2 ;
  
  arg1 = (ProgressBar *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ProgressBar_set_percent_visible(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProgressBar_is_percent_visible(void * jarg1) {
  unsigned int jresult ;
  ProgressBar *arg1 = (ProgressBar *) 0 ;
  bool result;
  
  arg1 = (ProgressBar *)jarg1; 
  result = (bool)ProgressBar_is_percent_visible(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProgressBar() {
  void * jresult ;
  ProgressBar *result = 0 ;
  
  result = (ProgressBar *)memnew(ProgressBar());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D__integrate_forces(void * jarg1, void * jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Physics2DDirectBodyState *arg2 = (Physics2DDirectBodyState *) 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Physics2DDirectBodyState *)jarg2; 
  RigidBody2D__integrate_forces(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_mode(void * jarg1, int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody2D_set_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody2D_get_mode(void * jarg1) {
  int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (int)RigidBody2D_get_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_mass(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_mass(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_mass(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_mass(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_inertia(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_inertia(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_inertia(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_inertia(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_weight(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_weight(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_weight(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_weight(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_friction(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_friction(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_bounce(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_bounce(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_gravity_scale(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_gravity_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_gravity_scale(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_gravity_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_linear_damp(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_linear_damp(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_angular_damp(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_angular_damp(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_linear_velocity(void * jarg1, void * jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_set_linear_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody2D_get_linear_velocity(void * jarg1) {
  void * jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = RigidBody2D_get_linear_velocity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_angular_velocity(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_angular_velocity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_angular_velocity(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_angular_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_max_contacts_reported(void * jarg1, int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody2D_set_max_contacts_reported(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody2D_get_max_contacts_reported(void * jarg1) {
  int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (int)RigidBody2D_get_max_contacts_reported(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_use_custom_integrator(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_use_custom_integrator(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_using_custom_integrator(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_using_custom_integrator(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_contact_monitor(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_contact_monitor(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_contact_monitor_enabled(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_contact_monitor_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_continuous_collision_detection_mode(void * jarg1, int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (int)jarg2; 
  RigidBody2D_set_continuous_collision_detection_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_RigidBody2D_get_continuous_collision_detection_mode(void * jarg1) {
  int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  int result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (int)RigidBody2D_get_continuous_collision_detection_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_axis_velocity(void * jarg1, void * jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_set_axis_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_apply_impulse(void * jarg1, void * jarg2, void * jarg3) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_apply_impulse(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_applied_force(void * jarg1, void * jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_set_applied_force(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody2D_get_applied_force(void * jarg1) {
  void * jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = RigidBody2D_get_applied_force(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_applied_torque(void * jarg1, float jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  RigidBody2D_set_applied_torque(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_RigidBody2D_get_applied_torque(void * jarg1) {
  float jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  float result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (float)RigidBody2D_get_applied_torque(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_add_force(void * jarg1, void * jarg2, void * jarg3) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  arg3 = (Vector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  RigidBody2D_add_force(arg1,(Vector2 const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_sleeping(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_sleeping(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_sleeping(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_sleeping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RigidBody2D_set_can_sleep(void * jarg1, unsigned int jarg2) {
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool arg2 ;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  RigidBody2D_set_can_sleep(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_is_able_to_sleep(void * jarg1) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = (bool)RigidBody2D_is_able_to_sleep(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_test_motion__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  SwigValueWrapper< Ref< Physics2DTestMotionResult > > arg4 ;
  Ref< Physics2DTestMotionResult > *argp4 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  argp4 = (Ref< Physics2DTestMotionResult > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Physics2DTestMotionResult >", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)RigidBody2D_test_motion__SWIG_0(arg1,(Vector2 const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_test_motion__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (bool)RigidBody2D_test_motion__SWIG_0(arg1,(Vector2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RigidBody2D_test_motion__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (RigidBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)RigidBody2D_test_motion__SWIG_0(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RigidBody2D_get_colliding_bodies(void * jarg1) {
  void * jresult ;
  RigidBody2D *arg1 = (RigidBody2D *) 0 ;
  Array result;
  
  arg1 = (RigidBody2D *)jarg1; 
  result = RigidBody2D_get_colliding_bodies(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RigidBody2D() {
  void * jresult ;
  RigidBody2D *result = 0 ;
  
  result = (RigidBody2D *)memnew(RigidBody2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_set_sample_library(void * jarg1, void * jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  SwigValueWrapper< Ref< SampleLibrary > > arg2 ;
  Ref< SampleLibrary > *argp2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  argp2 = (Ref< SampleLibrary > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< SampleLibrary >", 0);
    return ;
  }
  arg2 = *argp2; 
  SamplePlayer2D_set_sample_library(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SamplePlayer2D_get_sample_library(void * jarg1) {
  void * jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  SwigValueWrapper< Ref< SampleLibrary > > result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  result = SamplePlayer2D_get_sample_library(arg1);
  jresult = memnew(Ref< SampleLibrary >((const Ref< SampleLibrary > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_set_polyphony(void * jarg1, int jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer2D_set_polyphony(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer2D_get_polyphony(void * jarg1) {
  int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  result = (int)SamplePlayer2D_get_polyphony(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer2D_play__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  String *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (int)SamplePlayer2D_play__SWIG_0(arg1,(String const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SamplePlayer2D_play__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  String *arg2 = 0 ;
  int result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null String", 0);
    return 0;
  }
  String arg2_str = jarg2;
  arg2 = &arg2_str; 
  result = (int)SamplePlayer2D_play__SWIG_0(arg1,(String const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_voice_set_pitch_scale(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer2D_voice_set_pitch_scale(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_voice_set_volume_scale_db(void * jarg1, int jarg2, float jarg3) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  SamplePlayer2D_voice_set_volume_scale_db(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SamplePlayer2D_is_voice_active(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)SamplePlayer2D_is_voice_active(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_stop_voice(void * jarg1, int jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  int arg2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (int)jarg2; 
  SamplePlayer2D_stop_voice(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_stop_all(void * jarg1) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  SamplePlayer2D_stop_all(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SamplePlayer2D_set_random_pitch_scale(void * jarg1, float jarg2) {
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  float arg2 ;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  arg2 = (float)jarg2; 
  SamplePlayer2D_set_random_pitch_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_SamplePlayer2D_get_random_pitch_scale(void * jarg1) {
  float jresult ;
  SamplePlayer2D *arg1 = (SamplePlayer2D *) 0 ;
  float result;
  
  arg1 = (SamplePlayer2D *)jarg1; 
  result = (float)SamplePlayer2D_get_random_pitch_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SamplePlayer2D() {
  void * jresult ;
  SamplePlayer2D *result = 0 ;
  
  result = (SamplePlayer2D *)memnew(SamplePlayer2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_enable_h_scroll(void * jarg1, unsigned int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ScrollContainer_set_enable_h_scroll(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScrollContainer_is_h_scroll_enabled(void * jarg1) {
  unsigned int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (bool)ScrollContainer_is_h_scroll_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_enable_v_scroll(void * jarg1, unsigned int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ScrollContainer_set_enable_v_scroll(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ScrollContainer_is_v_scroll_enabled(void * jarg1) {
  unsigned int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  bool result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (bool)ScrollContainer_is_v_scroll_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_h_scroll(void * jarg1, int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = (int)jarg2; 
  ScrollContainer_set_h_scroll(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScrollContainer_get_h_scroll(void * jarg1) {
  int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (int)ScrollContainer_get_h_scroll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScrollContainer_set_v_scroll(void * jarg1, int jarg2) {
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int arg2 ;
  
  arg1 = (ScrollContainer *)jarg1; 
  arg2 = (int)jarg2; 
  ScrollContainer_set_v_scroll(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ScrollContainer_get_v_scroll(void * jarg1) {
  int jresult ;
  ScrollContainer *arg1 = (ScrollContainer *) 0 ;
  int result;
  
  arg1 = (ScrollContainer *)jarg1; 
  result = (int)ScrollContainer_get_v_scroll(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScrollContainer() {
  void * jresult ;
  ScrollContainer *result = 0 ;
  
  result = (ScrollContainer *)memnew(ScrollContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplitContainer_set_split_offset(void * jarg1, int jarg2) {
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int arg2 ;
  
  arg1 = (SplitContainer *)jarg1; 
  arg2 = (int)jarg2; 
  SplitContainer_set_split_offset(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplitContainer_get_split_offset(void * jarg1) {
  int jresult ;
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int result;
  
  arg1 = (SplitContainer *)jarg1; 
  result = (int)SplitContainer_get_split_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplitContainer_set_collapsed(void * jarg1, unsigned int jarg2) {
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (SplitContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  SplitContainer_set_collapsed(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SplitContainer_is_collapsed(void * jarg1) {
  unsigned int jresult ;
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  bool result;
  
  arg1 = (SplitContainer *)jarg1; 
  result = (bool)SplitContainer_is_collapsed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SplitContainer_set_dragger_visibility(void * jarg1, int jarg2) {
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int arg2 ;
  
  arg1 = (SplitContainer *)jarg1; 
  arg2 = (int)jarg2; 
  SplitContainer_set_dragger_visibility(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SplitContainer_get_dragger_visibility(void * jarg1) {
  int jresult ;
  SplitContainer *arg1 = (SplitContainer *) 0 ;
  int result;
  
  arg1 = (SplitContainer *)jarg1; 
  result = (int)SplitContainer_get_dragger_visibility(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_texture(void * jarg1, void * jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  Sprite3D_set_texture(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite3D_get_texture(void * jarg1) {
  void * jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = Sprite3D_get_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_region(void * jarg1, unsigned int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  bool arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Sprite3D_set_region(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Sprite3D_is_region(void * jarg1) {
  unsigned int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  bool result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (bool)Sprite3D_is_region(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_region_rect(void * jarg1, void * jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  Rect2 *arg2 = 0 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (Rect2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rect2 const & type is null", 0);
    return ;
  } 
  Sprite3D_set_region_rect(arg1,(Rect2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sprite3D_get_region_rect(void * jarg1) {
  void * jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  Rect2 result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = Sprite3D_get_region_rect(arg1);
  jresult = memnew(Rect2((const Rect2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_frame(void * jarg1, int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite3D_set_frame(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite3D_get_frame(void * jarg1) {
  int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (int)Sprite3D_get_frame(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_vframes(void * jarg1, int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite3D_set_vframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite3D_get_vframes(void * jarg1) {
  int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (int)Sprite3D_get_vframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Sprite3D_set_hframes(void * jarg1, int jarg2) {
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int arg2 ;
  
  arg1 = (Sprite3D *)jarg1; 
  arg2 = (int)jarg2; 
  Sprite3D_set_hframes(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Sprite3D_get_hframes(void * jarg1) {
  int jresult ;
  Sprite3D *arg1 = (Sprite3D *) 0 ;
  int result;
  
  arg1 = (Sprite3D *)jarg1; 
  result = (int)Sprite3D_get_hframes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Sprite3D() {
  void * jresult ;
  Sprite3D *result = 0 ;
  
  result = (Sprite3D *)memnew(Sprite3D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_constant_linear_velocity(void * jarg1, void * jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  StaticBody2D_set_constant_linear_velocity(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_constant_angular_velocity(void * jarg1, float jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody2D_set_constant_angular_velocity(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StaticBody2D_get_constant_linear_velocity(void * jarg1) {
  void * jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = StaticBody2D_get_constant_linear_velocity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody2D_get_constant_angular_velocity(void * jarg1) {
  float jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = (float)StaticBody2D_get_constant_angular_velocity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_friction(void * jarg1, float jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody2D_set_friction(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody2D_get_friction(void * jarg1) {
  float jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = (float)StaticBody2D_get_friction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StaticBody2D_set_bounce(void * jarg1, float jarg2) {
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (StaticBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  StaticBody2D_set_bounce(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_StaticBody2D_get_bounce(void * jarg1) {
  float jresult ;
  StaticBody2D *arg1 = (StaticBody2D *) 0 ;
  float result;
  
  arg1 = (StaticBody2D *)jarg1; 
  result = (float)StaticBody2D_get_bounce(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StaticBody2D() {
  void * jresult ;
  StaticBody2D *result = 0 ;
  
  result = (StaticBody2D *)memnew(StaticBody2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_normal_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (TextureButton *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  TextureButton_set_normal_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_pressed_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (TextureButton *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  TextureButton_set_pressed_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_hover_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (TextureButton *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  TextureButton_set_hover_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_disabled_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (TextureButton *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  TextureButton_set_disabled_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_focused_texture(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > arg2 ;
  Ref< Texture > *argp2 ;
  
  arg1 = (TextureButton *)jarg1; 
  argp2 = (Ref< Texture > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< Texture >", 0);
    return ;
  }
  arg2 = *argp2; 
  TextureButton_set_focused_texture(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_click_mask(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< BitMap > > arg2 ;
  Ref< BitMap > *argp2 ;
  
  arg1 = (TextureButton *)jarg1; 
  argp2 = (Ref< BitMap > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Ref< BitMap >", 0);
    return ;
  }
  arg2 = *argp2; 
  TextureButton_set_click_mask(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_texture_scale(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  TextureButton_set_texture_scale(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextureButton_set_modulate(void * jarg1, void * jarg2) {
  TextureButton *arg1 = (TextureButton *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (TextureButton *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  TextureButton_set_modulate(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_normal_texture(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_normal_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_pressed_texture(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_pressed_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_hover_texture(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_hover_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_disabled_texture(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_disabled_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_focused_texture(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< Texture > > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_focused_texture(arg1);
  jresult = memnew(Ref< Texture >((const Ref< Texture > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_click_mask(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  SwigValueWrapper< Ref< BitMap > > result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_click_mask(arg1);
  jresult = memnew(Ref< BitMap >((const Ref< BitMap > &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_texture_scale(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Vector2 result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_texture_scale(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TextureButton_get_modulate(void * jarg1) {
  void * jresult ;
  TextureButton *arg1 = (TextureButton *) 0 ;
  Color result;
  
  arg1 = (TextureButton *)jarg1; 
  result = TextureButton_get_modulate(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TextureButton() {
  void * jresult ;
  TextureButton *result = 0 ;
  
  result = (TextureButton *)memnew(TextureButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ToolButton() {
  void * jresult ;
  ToolButton *result = 0 ;
  
  result = (ToolButton *)memnew(ToolButton());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VButtonArray() {
  void * jresult ;
  VButtonArray *result = 0 ;
  
  result = (VButtonArray *)memnew(VButtonArray());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VSplitContainer() {
  void * jresult ;
  VSplitContainer *result = 0 ;
  
  result = (VSplitContainer *)memnew(VSplitContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VisibilityEnabler2D_set_enabler(void * jarg1, int jarg2, unsigned int jarg3) {
  VisibilityEnabler2D *arg1 = (VisibilityEnabler2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (VisibilityEnabler2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  VisibilityEnabler2D_set_enabler(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VisibilityEnabler2D_is_enabler_enabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  VisibilityEnabler2D *arg1 = (VisibilityEnabler2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (VisibilityEnabler2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)VisibilityEnabler2D_is_enabler_enabled(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VisibilityEnabler2D() {
  void * jresult ;
  VisibilityEnabler2D *result = 0 ;
  
  result = (VisibilityEnabler2D *)memnew(VisibilityEnabler2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_space_override_mode(void * jarg1, int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  Area2D_set_space_override_mode(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area2D_get_space_override_mode(void * jarg1) {
  int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int result;
  
  arg1 = (Area2D *)jarg1; 
  result = (int)Area2D_get_space_override_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity_is_point(void * jarg1, unsigned int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area2D_set_gravity_is_point(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_is_gravity_a_point(void * jarg1) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  result = (bool)Area2D_is_gravity_a_point(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity_distance_scale(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_gravity_distance_scale(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_gravity_distance_scale(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_gravity_distance_scale(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity_vector(void * jarg1, void * jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  Vector2 *arg2 = 0 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return ;
  } 
  Area2D_set_gravity_vector(arg1,(Vector2 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area2D_get_gravity_vector(void * jarg1) {
  void * jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Vector2 result;
  
  arg1 = (Area2D *)jarg1; 
  result = Area2D_get_gravity_vector(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_gravity(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_gravity(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_gravity(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_gravity(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_linear_damp(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_linear_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_linear_damp(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_linear_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_angular_damp(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_angular_damp(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_angular_damp(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_angular_damp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_priority(void * jarg1, float jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  float arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (float)jarg2; 
  Area2D_set_priority(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area2D_get_priority(void * jarg1) {
  float jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  float result;
  
  arg1 = (Area2D *)jarg1; 
  result = (float)Area2D_get_priority(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_collision_mask(void * jarg1, int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  Area2D_set_collision_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area2D_get_collision_mask(void * jarg1) {
  int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int result;
  
  arg1 = (Area2D *)jarg1; 
  result = (int)Area2D_get_collision_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_layer_mask(void * jarg1, int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  Area2D_set_layer_mask(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area2D_get_layer_mask(void * jarg1) {
  int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int result;
  
  arg1 = (Area2D *)jarg1; 
  result = (int)Area2D_get_layer_mask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_collision_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area2D_set_collision_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_get_collision_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area2D_get_collision_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_layer_mask_bit(void * jarg1, int jarg2, unsigned int jarg3) {
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  Area2D_set_layer_mask_bit(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_get_layer_mask_bit(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)Area2D_get_layer_mask_bit(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_enable_monitoring(void * jarg1, unsigned int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area2D_set_enable_monitoring(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_is_monitoring_enabled(void * jarg1) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  result = (bool)Area2D_is_monitoring_enabled(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area2D_set_monitorable(void * jarg1, unsigned int jarg2) {
  Area2D *arg1 = (Area2D *) 0 ;
  bool arg2 ;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  Area2D_set_monitorable(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_is_monitorable(void * jarg1) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  result = (bool)Area2D_is_monitorable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area2D_get_overlapping_bodies(void * jarg1) {
  void * jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Array result;
  
  arg1 = (Area2D *)jarg1; 
  result = Area2D_get_overlapping_bodies(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Area2D_get_overlapping_areas(void * jarg1) {
  void * jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Array result;
  
  arg1 = (Area2D *)jarg1; 
  result = Area2D_get_overlapping_areas(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_overlaps_body(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area2D_overlaps_body(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Area2D_overlaps_area(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Area2D *arg1 = (Area2D *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool result;
  
  arg1 = (Area2D *)jarg1; 
  arg2 = (Object *)jarg2; 
  result = (bool)Area2D_overlaps_area(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Area2D() {
  void * jresult ;
  Area2D *result = 0 ;
  
  result = (Area2D *)memnew(Area2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxContainer_add_spacer(void * jarg1, unsigned int jarg2) {
  BoxContainer *arg1 = (BoxContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (BoxContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  BoxContainer_add_spacer(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BoxContainer_get_alignment(void * jarg1) {
  int jresult ;
  BoxContainer *arg1 = (BoxContainer *) 0 ;
  int result;
  
  arg1 = (BoxContainer *)jarg1; 
  result = (int)BoxContainer_get_alignment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoxContainer_set_alignment(void * jarg1, int jarg2) {
  BoxContainer *arg1 = (BoxContainer *) 0 ;
  int arg2 ;
  
  arg1 = (BoxContainer *)jarg1; 
  arg2 = (int)jarg2; 
  BoxContainer_set_alignment(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonGroup_get_pressed_button(void * jarg1) {
  void * jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  BaseButton *result = 0 ;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = (BaseButton *)ButtonGroup_get_pressed_button(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ButtonGroup_get_pressed_button_index(void * jarg1) {
  int jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  int result;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = (int)ButtonGroup_get_pressed_button_index(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonGroup_get_focused_button(void * jarg1) {
  void * jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  BaseButton *result = 0 ;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = (BaseButton *)ButtonGroup_get_focused_button(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ButtonGroup_get_button_list(void * jarg1) {
  void * jresult ;
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  Array result;
  
  arg1 = (ButtonGroup *)jarg1; 
  result = ButtonGroup_get_button_list(arg1);
  jresult = memnew(Array((const Array &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ButtonGroup_set_pressed_button(void * jarg1, void * jarg2) {
  ButtonGroup *arg1 = (ButtonGroup *) 0 ;
  BaseButton *arg2 = (BaseButton *) 0 ;
  
  arg1 = (ButtonGroup *)jarg1; 
  arg2 = (BaseButton *)jarg2; 
  ButtonGroup_set_pressed_button(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ButtonGroup() {
  void * jresult ;
  ButtonGroup *result = 0 ;
  
  result = (ButtonGroup *)memnew(ButtonGroup());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CenterContainer_set_use_top_left(void * jarg1, unsigned int jarg2) {
  CenterContainer *arg1 = (CenterContainer *) 0 ;
  bool arg2 ;
  
  arg1 = (CenterContainer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  CenterContainer_set_use_top_left(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CenterContainer_is_using_top_left(void * jarg1) {
  unsigned int jresult ;
  CenterContainer *arg1 = (CenterContainer *) 0 ;
  bool result;
  
  arg1 = (CenterContainer *)jarg1; 
  result = (bool)CenterContainer_is_using_top_left(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CenterContainer() {
  void * jresult ;
  CenterContainer *result = 0 ;
  
  result = (CenterContainer *)memnew(CenterContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_set_color(void * jarg1, void * jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorPicker_set_color(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPicker_get_color(void * jarg1) {
  void * jresult ;
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  Color result;
  
  arg1 = (ColorPicker *)jarg1; 
  result = ColorPicker_get_color(arg1);
  jresult = memnew(Color((const Color &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_set_raw_mode(void * jarg1, unsigned int jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ColorPicker_set_raw_mode(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker_is_raw_mode(void * jarg1) {
  unsigned int jresult ;
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool result;
  
  arg1 = (ColorPicker *)jarg1; 
  result = (bool)ColorPicker_is_raw_mode(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_set_edit_alpha(void * jarg1, unsigned int jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ColorPicker_set_edit_alpha(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker_is_editing_alpha(void * jarg1) {
  unsigned int jresult ;
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  bool result;
  
  arg1 = (ColorPicker *)jarg1; 
  result = (bool)ColorPicker_is_editing_alpha(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPicker_add_preset(void * jarg1, void * jarg2) {
  ColorPicker *arg1 = (ColorPicker *) 0 ;
  Color *arg2 = 0 ;
  
  arg1 = (ColorPicker *)jarg1; 
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Color const & type is null", 0);
    return ;
  } 
  ColorPicker_add_preset(arg1,(Color const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorPicker() {
  void * jresult ;
  ColorPicker *result = 0 ;
  
  result = (ColorPicker *)memnew(ColorPicker());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_length(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_length(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_rest_length(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_rest_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_rest_length(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_rest_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_stiffness(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_stiffness(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_stiffness(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_stiffness(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DampedSpringJoint2D_set_damping(void * jarg1, float jarg2) {
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  DampedSpringJoint2D_set_damping(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_DampedSpringJoint2D_get_damping(void * jarg1) {
  float jresult ;
  DampedSpringJoint2D *arg1 = (DampedSpringJoint2D *) 0 ;
  float result;
  
  arg1 = (DampedSpringJoint2D *)jarg1; 
  result = (float)DampedSpringJoint2D_get_damping(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DampedSpringJoint2D() {
  void * jresult ;
  DampedSpringJoint2D *result = 0 ;
  
  result = (DampedSpringJoint2D *)memnew(DampedSpringJoint2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrooveJoint2D_set_length(void * jarg1, float jarg2) {
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  GrooveJoint2D_set_length(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GrooveJoint2D_get_length(void * jarg1) {
  float jresult ;
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float result;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  result = (float)GrooveJoint2D_get_length(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GrooveJoint2D_set_initial_offset(void * jarg1, float jarg2) {
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float arg2 ;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  arg2 = (float)jarg2; 
  GrooveJoint2D_set_initial_offset(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GrooveJoint2D_get_initial_offset(void * jarg1) {
  float jresult ;
  GrooveJoint2D *arg1 = (GrooveJoint2D *) 0 ;
  float result;
  
  arg1 = (GrooveJoint2D *)jarg1; 
  result = (float)GrooveJoint2D_get_initial_offset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GrooveJoint2D() {
  void * jresult ;
  GrooveJoint2D *result = 0 ;
  
  result = (GrooveJoint2D *)memnew(GrooveJoint2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBoxContainer() {
  void * jresult ;
  HBoxContainer *result = 0 ;
  
  result = (HBoxContainer *)memnew(HBoxContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSplitContainer() {
  void * jresult ;
  HSplitContainer *result = 0 ;
  
  result = (HSplitContainer *)memnew(HSplitContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_move(void * jarg1, void * jarg2) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = KinematicBody2D_move(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_move_to(void * jarg1, void * jarg2) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = KinematicBody2D_move_to(arg1,(Vector2 const &)*arg2);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody2D_test_move(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 *arg2 = 0 ;
  bool result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)KinematicBody2D_test_move(arg1,(Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_travel(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_travel(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody2D_revert_motion(void * jarg1) {
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  
  arg1 = (KinematicBody2D *)jarg1; 
  KinematicBody2D_revert_motion(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KinematicBody2D_is_colliding(void * jarg1) {
  unsigned int jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  bool result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (bool)KinematicBody2D_is_colliding(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collision_pos(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collision_pos(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collision_normal(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collision_normal(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collider_velocity(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Vector2 result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collider_velocity(arg1);
  jresult = memnew(Vector2((const Vector2 &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collider(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Object *result = 0 ;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (Object *)KinematicBody2D_get_collider(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KinematicBody2D_get_collider_shape(void * jarg1) {
  int jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  int result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (int)KinematicBody2D_get_collider_shape(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KinematicBody2D_get_collider_metadata(void * jarg1) {
  void * jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  Variant result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = KinematicBody2D_get_collider_metadata(arg1);
  jresult = memnew(Variant((const Variant &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KinematicBody2D_set_collision_margin(void * jarg1, float jarg2) {
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  float arg2 ;
  
  arg1 = (KinematicBody2D *)jarg1; 
  arg2 = (float)jarg2; 
  KinematicBody2D_set_collision_margin(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_KinematicBody2D_get_collision_margin(void * jarg1) {
  float jresult ;
  KinematicBody2D *arg1 = (KinematicBody2D *) 0 ;
  float result;
  
  arg1 = (KinematicBody2D *)jarg1; 
  result = (float)KinematicBody2D_get_collision_margin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KinematicBody2D() {
  void * jresult ;
  KinematicBody2D *result = 0 ;
  
  result = (KinematicBody2D *)memnew(KinematicBody2D());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VBoxContainer() {
  void * jresult ;
  VBoxContainer *result = 0 ;
  
  result = (VBoxContainer *)memnew(VBoxContainer());
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Object * SWIGSTDCALL CSharp_PathRemap_SWIGUpcast(PathRemap *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Performance_SWIGUpcast(Performance *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Physics2DDirectBodyState_SWIGUpcast(Physics2DDirectBodyState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Physics2DDirectBodyState * SWIGSTDCALL CSharp_Physics2DDirectBodyStateSW_SWIGUpcast(Physics2DDirectBodyStateSW *jarg1) {
    return (Physics2DDirectBodyState *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Physics2DDirectSpaceState_SWIGUpcast(Physics2DDirectSpaceState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Physics2DServer_SWIGUpcast(Physics2DServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Physics2DServer * SWIGSTDCALL CSharp_Physics2DServerSW_SWIGUpcast(Physics2DServerSW *jarg1) {
    return (Physics2DServer *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_PhysicsDirectBodyState_SWIGUpcast(PhysicsDirectBodyState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT PhysicsDirectBodyState * SWIGSTDCALL CSharp_PhysicsDirectBodyStateSW_SWIGUpcast(PhysicsDirectBodyStateSW *jarg1) {
    return (PhysicsDirectBodyState *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_PhysicsDirectSpaceState_SWIGUpcast(PhysicsDirectSpaceState *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_PhysicsServer_SWIGUpcast(PhysicsServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT PhysicsServer * SWIGSTDCALL CSharp_PhysicsServerSW_SWIGUpcast(PhysicsServerSW *jarg1) {
    return (PhysicsServer *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Reference_SWIGUpcast(Reference *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_RegEx_SWIGUpcast(RegEx *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Resource_SWIGUpcast(Resource *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_ResourceImportMetadata_SWIGUpcast(ResourceImportMetadata *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_ResourceInteractiveLoader_SWIGUpcast(ResourceInteractiveLoader *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_RoomBounds_SWIGUpcast(RoomBounds *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Sample_SWIGUpcast(Sample *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_SampleLibrary_SWIGUpcast(SampleLibrary *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_SceneState_SWIGUpcast(SceneState *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Script_SWIGUpcast(Script *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Shader_SWIGUpcast(Shader *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shader * SWIGSTDCALL CSharp_ShaderGraph_SWIGUpcast(ShaderGraph *jarg1) {
    return (Shader *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Shape_SWIGUpcast(Shape *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Shape2D_SWIGUpcast(Shape2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_SpatialGizmo_SWIGUpcast(SpatialGizmo *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_SpatialSound2DServer_SWIGUpcast(SpatialSound2DServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT SpatialSound2DServer * SWIGSTDCALL CSharp_SpatialSound2DServerSW_SWIGUpcast(SpatialSound2DServerSW *jarg1) {
    return (SpatialSound2DServer *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_SpatialSoundServer_SWIGUpcast(SpatialSoundServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT SpatialSoundServer * SWIGSTDCALL CSharp_SpatialSoundServerSW_SWIGUpcast(SpatialSoundServerSW *jarg1) {
    return (SpatialSoundServer *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_SphereShape_SWIGUpcast(SphereShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_SpriteFrames_SWIGUpcast(SpriteFrames *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_StreamPeer_SWIGUpcast(StreamPeer *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT StreamPeer * SWIGSTDCALL CSharp_StreamPeerSSL_SWIGUpcast(StreamPeerSSL *jarg1) {
    return (StreamPeer *)jarg1;
}

SWIGEXPORT StreamPeer * SWIGSTDCALL CSharp_StreamPeerTCP_SWIGUpcast(StreamPeerTCP *jarg1) {
    return (StreamPeer *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_StyleBox_SWIGUpcast(StyleBox *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxEmpty_SWIGUpcast(StyleBoxEmpty *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxFlat_SWIGUpcast(StyleBoxFlat *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxImageMask_SWIGUpcast(StyleBoxImageMask *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT StyleBox * SWIGSTDCALL CSharp_StyleBoxTexture_SWIGUpcast(StyleBoxTexture *jarg1) {
    return (StyleBox *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_SurfaceTool_SWIGUpcast(SurfaceTool *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_TCP_Server_SWIGUpcast(TCP_Server *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Texture_SWIGUpcast(Texture *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Theme_SWIGUpcast(Theme *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_TileSet_SWIGUpcast(TileSet *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Translation_SWIGUpcast(Translation *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_TranslationServer_SWIGUpcast(TranslationServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_TreeItem_SWIGUpcast(TreeItem *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_UndoRedo_SWIGUpcast(UndoRedo *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_VideoStream_SWIGUpcast(VideoStream *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT VideoStream * SWIGSTDCALL CSharp_VideoStreamTheora_SWIGUpcast(VideoStreamTheora *jarg1) {
    return (VideoStream *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_VisualServer_SWIGUpcast(VisualServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_WeakRef_SWIGUpcast(WeakRef *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_World_SWIGUpcast(World *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_World2D_SWIGUpcast(World2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_XMLParser_SWIGUpcast(XMLParser *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Directory_SWIGUpcast(_Directory *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_File_SWIGUpcast(_File *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Geometry_SWIGUpcast(_Geometry *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Marshalls_SWIGUpcast(_Marshalls *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Mutex_SWIGUpcast(_Mutex *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_OS_SWIGUpcast(_OS *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_ResourceLoader_SWIGUpcast(_ResourceLoader *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_ResourceSaver_SWIGUpcast(_ResourceSaver *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Semaphore_SWIGUpcast(_Semaphore *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Thread_SWIGUpcast(_Thread *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Animation_SWIGUpcast(Animation *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_AtlasTexture_SWIGUpcast(AtlasTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_AudioServer_SWIGUpcast(AudioServer *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT AudioServer * SWIGSTDCALL CSharp_AudioServerSW_SWIGUpcast(AudioServerSW *jarg1) {
    return (AudioServer *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_AudioStream_SWIGUpcast(AudioStream *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamMPC_SWIGUpcast(AudioStreamMPC *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamOGGVorbis_SWIGUpcast(AudioStreamOGGVorbis *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamOpus_SWIGUpcast(AudioStreamOpus *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_AudioStreamPlayback_SWIGUpcast(AudioStreamPlayback *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT AudioStream * SWIGSTDCALL CSharp_AudioStreamSpeex_SWIGUpcast(AudioStreamSpeex *jarg1) {
    return (AudioStream *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_BakedLight_SWIGUpcast(BakedLight *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_BitMap_SWIGUpcast(BitMap *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_BoxShape_SWIGUpcast(BoxShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Script * SWIGSTDCALL CSharp_CSharpScript_SWIGUpcast(CSharpScript *jarg1) {
    return (Script *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_CanvasItemMaterial_SWIGUpcast(CanvasItemMaterial *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shader * SWIGSTDCALL CSharp_CanvasItemShader_SWIGUpcast(CanvasItemShader *jarg1) {
    return (Shader *)jarg1;
}

SWIGEXPORT ShaderGraph * SWIGSTDCALL CSharp_CanvasItemShaderGraph_SWIGUpcast(CanvasItemShaderGraph *jarg1) {
    return (ShaderGraph *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_CapsuleShape_SWIGUpcast(CapsuleShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_CapsuleShape2D_SWIGUpcast(CapsuleShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_CircleShape2D_SWIGUpcast(CircleShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_ColorRamp_SWIGUpcast(ColorRamp *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_ConcavePolygonShape_SWIGUpcast(ConcavePolygonShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_ConcavePolygonShape2D_SWIGUpcast(ConcavePolygonShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_ConfigFile_SWIGUpcast(ConfigFile *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_ConvexPolygonShape_SWIGUpcast(ConvexPolygonShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_ConvexPolygonShape2D_SWIGUpcast(ConvexPolygonShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_CubeMap_SWIGUpcast(CubeMap *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Curve2D_SWIGUpcast(Curve2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Curve3D_SWIGUpcast(Curve3D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_DynamicFontData_SWIGUpcast(DynamicFontData *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorExportPlugin_SWIGUpcast(EditorExportPlugin *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorImportPlugin_SWIGUpcast(EditorImportPlugin *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorScenePostImport_SWIGUpcast(EditorScenePostImport *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_EditorScript_SWIGUpcast(EditorScript *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_EditorSelection_SWIGUpcast(EditorSelection *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_EditorSettings_SWIGUpcast(EditorSettings *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT SpatialGizmo * SWIGSTDCALL CSharp_EditorSpatialGizmo_SWIGUpcast(EditorSpatialGizmo *jarg1) {
    return (SpatialGizmo *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Environment_SWIGUpcast(Environment *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_EventStream_SWIGUpcast(EventStream *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT EventStream * SWIGSTDCALL CSharp_EventStreamChibi_SWIGUpcast(EventStreamChibi *jarg1) {
    return (EventStream *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Font_SWIGUpcast(Font *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_FuncRef_SWIGUpcast(FuncRef *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_GDFunctionState_SWIGUpcast(GDFunctionState *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Script * SWIGSTDCALL CSharp_GDScript_SWIGUpcast(GDScript *jarg1) {
    return (Script *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Globals_SWIGUpcast(Globals *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_HTTPClient_SWIGUpcast(HTTPClient *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_IP_SWIGUpcast(IP *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT IP * SWIGSTDCALL CSharp_IP_Unix_SWIGUpcast(IP_Unix *jarg1) {
    return (IP *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_ImageTexture_SWIGUpcast(ImageTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Input_SWIGUpcast(Input *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Input * SWIGSTDCALL CSharp_InputDefault_SWIGUpcast(InputDefault *jarg1) {
    return (Input *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_InputMap_SWIGUpcast(InputMap *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_LargeTexture_SWIGUpcast(LargeTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_LineShape2D_SWIGUpcast(LineShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_MainLoop_SWIGUpcast(MainLoop *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Material_SWIGUpcast(Material *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shader * SWIGSTDCALL CSharp_MaterialShader_SWIGUpcast(MaterialShader *jarg1) {
    return (Shader *)jarg1;
}

SWIGEXPORT ShaderGraph * SWIGSTDCALL CSharp_MaterialShaderGraph_SWIGUpcast(MaterialShaderGraph *jarg1) {
    return (ShaderGraph *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_Mesh_SWIGUpcast(Mesh *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_MeshDataTool_SWIGUpcast(MeshDataTool *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_MeshLibrary_SWIGUpcast(MeshLibrary *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_MultiMesh_SWIGUpcast(MultiMesh *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_NavigationMesh_SWIGUpcast(NavigationMesh *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_NavigationPolygon_SWIGUpcast(NavigationPolygon *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Object * SWIGSTDCALL CSharp_Node_SWIGUpcast(Node *jarg1) {
    return (Object *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_OccluderPolygon2D_SWIGUpcast(OccluderPolygon2D *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PCKPacker_SWIGUpcast(PCKPacker *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Translation * SWIGSTDCALL CSharp_PHashTranslation_SWIGUpcast(PHashTranslation *jarg1) {
    return (Translation *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_PackedDataContainer_SWIGUpcast(PackedDataContainer *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PackedDataContainerRef_SWIGUpcast(PackedDataContainerRef *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_PackedScene_SWIGUpcast(PackedScene *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PacketPeer_SWIGUpcast(PacketPeer *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT PacketPeer * SWIGSTDCALL CSharp_PacketPeerStream_SWIGUpcast(PacketPeerStream *jarg1) {
    return (PacketPeer *)jarg1;
}

SWIGEXPORT PacketPeer * SWIGSTDCALL CSharp_PacketPeerUDP_SWIGUpcast(PacketPeerUDP *jarg1) {
    return (PacketPeer *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Physics2DShapeQueryParameters_SWIGUpcast(Physics2DShapeQueryParameters *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Physics2DShapeQueryResult_SWIGUpcast(Physics2DShapeQueryResult *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_Physics2DTestMotionResult_SWIGUpcast(Physics2DTestMotionResult *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PhysicsShapeQueryParameters_SWIGUpcast(PhysicsShapeQueryParameters *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Reference * SWIGSTDCALL CSharp_PhysicsShapeQueryResult_SWIGUpcast(PhysicsShapeQueryResult *jarg1) {
    return (Reference *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_PlaneShape_SWIGUpcast(PlaneShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Resource * SWIGSTDCALL CSharp_PolygonPathFinder_SWIGUpcast(PolygonPathFinder *jarg1) {
    return (Resource *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_RayShape_SWIGUpcast(RayShape *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_RayShape2D_SWIGUpcast(RayShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_RectangleShape2D_SWIGUpcast(RectangleShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Texture * SWIGSTDCALL CSharp_RenderTargetTexture_SWIGUpcast(RenderTargetTexture *jarg1) {
    return (Texture *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_ResourcePreloader_SWIGUpcast(ResourcePreloader *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_SamplePlayer_SWIGUpcast(SamplePlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT MainLoop * SWIGSTDCALL CSharp_SceneTree_SWIGUpcast(SceneTree *jarg1) {
    return (MainLoop *)jarg1;
}

SWIGEXPORT Shape2D * SWIGSTDCALL CSharp_SegmentShape2D_SWIGUpcast(SegmentShape2D *jarg1) {
    return (Shape2D *)jarg1;
}

SWIGEXPORT Material * SWIGSTDCALL CSharp_ShaderMaterial_SWIGUpcast(ShaderMaterial *jarg1) {
    return (Material *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_SoundRoomParams_SWIGUpcast(SoundRoomParams *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Spatial_SWIGUpcast(Spatial *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_SpatialPlayer_SWIGUpcast(SpatialPlayer *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT SpatialPlayer * SWIGSTDCALL CSharp_SpatialSamplePlayer_SWIGUpcast(SpatialSamplePlayer *jarg1) {
    return (SpatialPlayer *)jarg1;
}

SWIGEXPORT SpatialPlayer * SWIGSTDCALL CSharp_SpatialStreamPlayer_SWIGUpcast(SpatialStreamPlayer *jarg1) {
    return (SpatialPlayer *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_StreamPlayer_SWIGUpcast(StreamPlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Timer_SWIGUpcast(Timer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Tween_SWIGUpcast(Tween *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_VehicleWheel_SWIGUpcast(VehicleWheel *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_Viewport_SWIGUpcast(Viewport *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_VisibilityNotifier_SWIGUpcast(VisibilityNotifier *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_VisualInstance_SWIGUpcast(VisualInstance *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_WorldEnvironment_SWIGUpcast(WorldEnvironment *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_AnimationPlayer_SWIGUpcast(AnimationPlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_AnimationTreePlayer_SWIGUpcast(AnimationTreePlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_BakedLightInstance_SWIGUpcast(BakedLightInstance *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_BakedLightSampler_SWIGUpcast(BakedLightSampler *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Font * SWIGSTDCALL CSharp_BitmapFont_SWIGUpcast(BitmapFont *jarg1) {
    return (Font *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_BoneAttachment_SWIGUpcast(BoneAttachment *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Camera_SWIGUpcast(Camera *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_CanvasItem_SWIGUpcast(CanvasItem *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_CanvasLayer_SWIGUpcast(CanvasLayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_CollisionObject_SWIGUpcast(CollisionObject *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_CollisionPolygon_SWIGUpcast(CollisionPolygon *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_CollisionShape_SWIGUpcast(CollisionShape *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT CanvasItem * SWIGSTDCALL CSharp_Control_SWIGUpcast(Control *jarg1) {
    return (CanvasItem *)jarg1;
}

SWIGEXPORT Font * SWIGSTDCALL CSharp_DynamicFont_SWIGUpcast(DynamicFont *jarg1) {
    return (Font *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_EditorPlugin_SWIGUpcast(EditorPlugin *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_EventPlayer_SWIGUpcast(EventPlayer *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Material * SWIGSTDCALL CSharp_FixedMaterial_SWIGUpcast(FixedMaterial *jarg1) {
    return (Material *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_GeometryInstance_SWIGUpcast(GeometryInstance *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_GraphEdit_SWIGUpcast(GraphEdit *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_GridMap_SWIGUpcast(GridMap *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_HTTPRequest_SWIGUpcast(HTTPRequest *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_ImmediateGeometry_SWIGUpcast(ImmediateGeometry *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Node * SWIGSTDCALL CSharp_InstancePlaceholder_SWIGUpcast(InstancePlaceholder *jarg1) {
    return (Node *)jarg1;
}

SWIGEXPORT Camera * SWIGSTDCALL CSharp_InterpolatedCamera_SWIGUpcast(InterpolatedCamera *jarg1) {
    return (Camera *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_InverseKinematics_SWIGUpcast(InverseKinematics *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_ItemList_SWIGUpcast(ItemList *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Joint_SWIGUpcast(Joint *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Label_SWIGUpcast(Label *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_Light_SWIGUpcast(Light *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_LineEdit_SWIGUpcast(LineEdit *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_MeshInstance_SWIGUpcast(MeshInstance *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_MultiMeshInstance_SWIGUpcast(MultiMeshInstance *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Navigation_SWIGUpcast(Navigation *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_NavigationMeshInstance_SWIGUpcast(NavigationMeshInstance *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT CanvasItem * SWIGSTDCALL CSharp_Node2D_SWIGUpcast(Node2D *jarg1) {
    return (CanvasItem *)jarg1;
}

SWIGEXPORT Light * SWIGSTDCALL CSharp_OmniLight_SWIGUpcast(OmniLight *jarg1) {
    return (Light *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Panel_SWIGUpcast(Panel *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT CanvasLayer * SWIGSTDCALL CSharp_ParallaxBackground_SWIGUpcast(ParallaxBackground *jarg1) {
    return (CanvasLayer *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_ParallaxLayer_SWIGUpcast(ParallaxLayer *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_ParticleAttractor2D_SWIGUpcast(ParticleAttractor2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_Particles_SWIGUpcast(Particles *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Particles2D_SWIGUpcast(Particles2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Patch9Frame_SWIGUpcast(Patch9Frame *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Path_SWIGUpcast(Path *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Path2D_SWIGUpcast(Path2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_PathFollow_SWIGUpcast(PathFollow *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_PathFollow2D_SWIGUpcast(PathFollow2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT CollisionObject * SWIGSTDCALL CSharp_PhysicsBody_SWIGUpcast(PhysicsBody *jarg1) {
    return (CollisionObject *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_PinJoint_SWIGUpcast(PinJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Polygon2D_SWIGUpcast(Polygon2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Popup_SWIGUpcast(Popup *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_PopupDialog_SWIGUpcast(PopupDialog *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_PopupMenu_SWIGUpcast(PopupMenu *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_PopupPanel_SWIGUpcast(PopupPanel *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_Portal_SWIGUpcast(Portal *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Position2D_SWIGUpcast(Position2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Position3D_SWIGUpcast(Position3D *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_ProximityGroup_SWIGUpcast(ProximityGroup *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_Quad_SWIGUpcast(Quad *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Range_SWIGUpcast(Range *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_RayCast_SWIGUpcast(RayCast *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_RayCast2D_SWIGUpcast(RayCast2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_ReferenceFrame_SWIGUpcast(ReferenceFrame *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_RemoteTransform2D_SWIGUpcast(RemoteTransform2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_RichTextLabel_SWIGUpcast(RichTextLabel *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_RigidBody_SWIGUpcast(RigidBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT VisualInstance * SWIGSTDCALL CSharp_Room_SWIGUpcast(Room *jarg1) {
    return (VisualInstance *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_ScrollBar_SWIGUpcast(ScrollBar *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Separator_SWIGUpcast(Separator *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Spatial * SWIGSTDCALL CSharp_Skeleton_SWIGUpcast(Skeleton *jarg1) {
    return (Spatial *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_Slider_SWIGUpcast(Slider *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_SliderJoint_SWIGUpcast(SliderJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_SoundPlayer2D_SWIGUpcast(SoundPlayer2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_SpinBox_SWIGUpcast(SpinBox *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Light * SWIGSTDCALL CSharp_SpotLight_SWIGUpcast(SpotLight *jarg1) {
    return (Light *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Sprite_SWIGUpcast(Sprite *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_SpriteBase3D_SWIGUpcast(SpriteBase3D *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_StaticBody_SWIGUpcast(StaticBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_TabContainer_SWIGUpcast(TabContainer *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Tabs_SWIGUpcast(Tabs *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT GeometryInstance * SWIGSTDCALL CSharp_TestCube_SWIGUpcast(TestCube *jarg1) {
    return (GeometryInstance *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_TextEdit_SWIGUpcast(TextEdit *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_TextureFrame_SWIGUpcast(TextureFrame *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_TextureProgress_SWIGUpcast(TextureProgress *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_TileMap_SWIGUpcast(TileMap *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_TouchScreenButton_SWIGUpcast(TouchScreenButton *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Tree_SWIGUpcast(Tree *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT ScrollBar * SWIGSTDCALL CSharp_VScrollBar_SWIGUpcast(VScrollBar *jarg1) {
    return (ScrollBar *)jarg1;
}

SWIGEXPORT Separator * SWIGSTDCALL CSharp_VSeparator_SWIGUpcast(VSeparator *jarg1) {
    return (Separator *)jarg1;
}

SWIGEXPORT Slider * SWIGSTDCALL CSharp_VSlider_SWIGUpcast(VSlider *jarg1) {
    return (Slider *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_VehicleBody_SWIGUpcast(VehicleBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_VideoPlayer_SWIGUpcast(VideoPlayer *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_ViewportSprite_SWIGUpcast(ViewportSprite *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT VisibilityNotifier * SWIGSTDCALL CSharp_VisibilityEnabler_SWIGUpcast(VisibilityEnabler *jarg1) {
    return (VisibilityNotifier *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_VisibilityNotifier2D_SWIGUpcast(VisibilityNotifier2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Popup * SWIGSTDCALL CSharp_WindowDialog_SWIGUpcast(WindowDialog *jarg1) {
    return (Popup *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_YSort_SWIGUpcast(YSort *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT WindowDialog * SWIGSTDCALL CSharp_AcceptDialog_SWIGUpcast(AcceptDialog *jarg1) {
    return (WindowDialog *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_AnimatedSprite_SWIGUpcast(AnimatedSprite *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT SpriteBase3D * SWIGSTDCALL CSharp_AnimatedSprite3D_SWIGUpcast(AnimatedSprite3D *jarg1) {
    return (SpriteBase3D *)jarg1;
}

SWIGEXPORT CollisionObject * SWIGSTDCALL CSharp_Area_SWIGUpcast(Area *jarg1) {
    return (CollisionObject *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_BackBufferCopy_SWIGUpcast(BackBufferCopy *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_BaseButton_SWIGUpcast(BaseButton *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT BaseButton * SWIGSTDCALL CSharp_Button_SWIGUpcast(Button *jarg1) {
    return (BaseButton *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_ButtonArray_SWIGUpcast(ButtonArray *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Camera2D_SWIGUpcast(Camera2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CanvasModulate_SWIGUpcast(CanvasModulate *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_CheckBox_SWIGUpcast(CheckBox *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_CheckButton_SWIGUpcast(CheckButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CollisionObject2D_SWIGUpcast(CollisionObject2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CollisionPolygon2D_SWIGUpcast(CollisionPolygon2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_CollisionShape2D_SWIGUpcast(CollisionShape2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_ColorPickerButton_SWIGUpcast(ColorPickerButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_ConeTwistJoint_SWIGUpcast(ConeTwistJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT AcceptDialog * SWIGSTDCALL CSharp_ConfirmationDialog_SWIGUpcast(ConfirmationDialog *jarg1) {
    return (AcceptDialog *)jarg1;
}

SWIGEXPORT Control * SWIGSTDCALL CSharp_Container_SWIGUpcast(Container *jarg1) {
    return (Control *)jarg1;
}

SWIGEXPORT Light * SWIGSTDCALL CSharp_DirectionalLight_SWIGUpcast(DirectionalLight *jarg1) {
    return (Light *)jarg1;
}

SWIGEXPORT ConfirmationDialog * SWIGSTDCALL CSharp_EditorFileDialog_SWIGUpcast(EditorFileDialog *jarg1) {
    return (ConfirmationDialog *)jarg1;
}

SWIGEXPORT ConfirmationDialog * SWIGSTDCALL CSharp_FileDialog_SWIGUpcast(FileDialog *jarg1) {
    return (ConfirmationDialog *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_Generic6DOFJoint_SWIGUpcast(Generic6DOFJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_GraphNode_SWIGUpcast(GraphNode *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_GridContainer_SWIGUpcast(GridContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT ButtonArray * SWIGSTDCALL CSharp_HButtonArray_SWIGUpcast(HButtonArray *jarg1) {
    return (ButtonArray *)jarg1;
}

SWIGEXPORT ScrollBar * SWIGSTDCALL CSharp_HScrollBar_SWIGUpcast(HScrollBar *jarg1) {
    return (ScrollBar *)jarg1;
}

SWIGEXPORT Separator * SWIGSTDCALL CSharp_HSeparator_SWIGUpcast(HSeparator *jarg1) {
    return (Separator *)jarg1;
}

SWIGEXPORT Slider * SWIGSTDCALL CSharp_HSlider_SWIGUpcast(HSlider *jarg1) {
    return (Slider *)jarg1;
}

SWIGEXPORT Joint * SWIGSTDCALL CSharp_HingeJoint_SWIGUpcast(HingeJoint *jarg1) {
    return (Joint *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Joint2D_SWIGUpcast(Joint2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT PhysicsBody * SWIGSTDCALL CSharp_KinematicBody_SWIGUpcast(KinematicBody *jarg1) {
    return (PhysicsBody *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Light2D_SWIGUpcast(Light2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_LightOccluder2D_SWIGUpcast(LightOccluder2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT BaseButton * SWIGSTDCALL CSharp_LinkButton_SWIGUpcast(LinkButton *jarg1) {
    return (BaseButton *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_MarginContainer_SWIGUpcast(MarginContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_MenuButton_SWIGUpcast(MenuButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_Navigation2D_SWIGUpcast(Navigation2D *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Node2D * SWIGSTDCALL CSharp_NavigationPolygonInstance_SWIGUpcast(NavigationPolygonInstance *jarg1) {
    return (Node2D *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_OptionButton_SWIGUpcast(OptionButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_PanelContainer_SWIGUpcast(PanelContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT CollisionObject2D * SWIGSTDCALL CSharp_PhysicsBody2D_SWIGUpcast(PhysicsBody2D *jarg1) {
    return (CollisionObject2D *)jarg1;
}

SWIGEXPORT Joint2D * SWIGSTDCALL CSharp_PinJoint2D_SWIGUpcast(PinJoint2D *jarg1) {
    return (Joint2D *)jarg1;
}

SWIGEXPORT Range * SWIGSTDCALL CSharp_ProgressBar_SWIGUpcast(ProgressBar *jarg1) {
    return (Range *)jarg1;
}

SWIGEXPORT PhysicsBody2D * SWIGSTDCALL CSharp_RigidBody2D_SWIGUpcast(RigidBody2D *jarg1) {
    return (PhysicsBody2D *)jarg1;
}

SWIGEXPORT SoundPlayer2D * SWIGSTDCALL CSharp_SamplePlayer2D_SWIGUpcast(SamplePlayer2D *jarg1) {
    return (SoundPlayer2D *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_ScrollContainer_SWIGUpcast(ScrollContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_SplitContainer_SWIGUpcast(SplitContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT SpriteBase3D * SWIGSTDCALL CSharp_Sprite3D_SWIGUpcast(Sprite3D *jarg1) {
    return (SpriteBase3D *)jarg1;
}

SWIGEXPORT PhysicsBody2D * SWIGSTDCALL CSharp_StaticBody2D_SWIGUpcast(StaticBody2D *jarg1) {
    return (PhysicsBody2D *)jarg1;
}

SWIGEXPORT BaseButton * SWIGSTDCALL CSharp_TextureButton_SWIGUpcast(TextureButton *jarg1) {
    return (BaseButton *)jarg1;
}

SWIGEXPORT Button * SWIGSTDCALL CSharp_ToolButton_SWIGUpcast(ToolButton *jarg1) {
    return (Button *)jarg1;
}

SWIGEXPORT ButtonArray * SWIGSTDCALL CSharp_VButtonArray_SWIGUpcast(VButtonArray *jarg1) {
    return (ButtonArray *)jarg1;
}

SWIGEXPORT SplitContainer * SWIGSTDCALL CSharp_VSplitContainer_SWIGUpcast(VSplitContainer *jarg1) {
    return (SplitContainer *)jarg1;
}

SWIGEXPORT VisibilityNotifier2D * SWIGSTDCALL CSharp_VisibilityEnabler2D_SWIGUpcast(VisibilityEnabler2D *jarg1) {
    return (VisibilityNotifier2D *)jarg1;
}

SWIGEXPORT CollisionObject2D * SWIGSTDCALL CSharp_Area2D_SWIGUpcast(Area2D *jarg1) {
    return (CollisionObject2D *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_BoxContainer_SWIGUpcast(BoxContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_ButtonGroup_SWIGUpcast(ButtonGroup *jarg1) {
    return (BoxContainer *)jarg1;
}

SWIGEXPORT Container * SWIGSTDCALL CSharp_CenterContainer_SWIGUpcast(CenterContainer *jarg1) {
    return (Container *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_ColorPicker_SWIGUpcast(ColorPicker *jarg1) {
    return (BoxContainer *)jarg1;
}

SWIGEXPORT Joint2D * SWIGSTDCALL CSharp_DampedSpringJoint2D_SWIGUpcast(DampedSpringJoint2D *jarg1) {
    return (Joint2D *)jarg1;
}

SWIGEXPORT Joint2D * SWIGSTDCALL CSharp_GrooveJoint2D_SWIGUpcast(GrooveJoint2D *jarg1) {
    return (Joint2D *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_HBoxContainer_SWIGUpcast(HBoxContainer *jarg1) {
    return (BoxContainer *)jarg1;
}

SWIGEXPORT SplitContainer * SWIGSTDCALL CSharp_HSplitContainer_SWIGUpcast(HSplitContainer *jarg1) {
    return (SplitContainer *)jarg1;
}

SWIGEXPORT PhysicsBody2D * SWIGSTDCALL CSharp_KinematicBody2D_SWIGUpcast(KinematicBody2D *jarg1) {
    return (PhysicsBody2D *)jarg1;
}

SWIGEXPORT BoxContainer * SWIGSTDCALL CSharp_VBoxContainer_SWIGUpcast(VBoxContainer *jarg1) {
    return (BoxContainer *)jarg1;
}

#ifdef __cplusplus
}
#endif

