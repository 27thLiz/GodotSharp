/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Control : CanvasItem {
  public static readonly int ANCHOR_BEGIN = 0;
  public static readonly int ANCHOR_END = 1;
  public static readonly int ANCHOR_RATIO = 2;
  public static readonly int ANCHOR_CENTER = 3;
  public static readonly int FOCUS_NONE = 0;
  public static readonly int FOCUS_CLICK = 1;
  public static readonly int FOCUS_ALL = 2;
  public static readonly int NOTIFICATION_RESIZED = 40;
  public static readonly int NOTIFICATION_MOUSE_ENTER = 41;
  public static readonly int NOTIFICATION_MOUSE_EXIT = 42;
  public static readonly int NOTIFICATION_FOCUS_ENTER = 43;
  public static readonly int NOTIFICATION_FOCUS_EXIT = 44;
  public static readonly int NOTIFICATION_THEME_CHANGED = 45;
  public static readonly int NOTIFICATION_MODAL_CLOSE = 46;
  public static readonly int CURSOR_ARROW = 0;
  public static readonly int CURSOR_IBEAM = 1;
  public static readonly int CURSOR_POINTING_HAND = 2;
  public static readonly int CURSOR_CROSS = 3;
  public static readonly int CURSOR_WAIT = 4;
  public static readonly int CURSOR_BUSY = 5;
  public static readonly int CURSOR_DRAG = 6;
  public static readonly int CURSOR_CAN_DROP = 7;
  public static readonly int CURSOR_FORBIDDEN = 8;
  public static readonly int CURSOR_VSIZE = 9;
  public static readonly int CURSOR_HSIZE = 10;
  public static readonly int CURSOR_BDIAGSIZE = 11;
  public static readonly int CURSOR_FDIAGSIZE = 12;
  public static readonly int CURSOR_MOVE = 13;
  public static readonly int CURSOR_VSPLIT = 14;
  public static readonly int CURSOR_HSPLIT = 15;
  public static readonly int CURSOR_HELP = 16;
  public static readonly int SIZE_EXPAND = 1;
  public static readonly int SIZE_FILL = 2;
  public static readonly int SIZE_EXPAND_FILL = 3;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Control(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Control_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Control(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Control_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Control obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void _input_event(SWIGTYPE_p_InputEvent arg0) {
    GodotEnginePINVOKE.Control__input_event(swigCPtr, SWIGTYPE_p_InputEvent.getCPtr(arg0));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool can_drop_data(Vector2 pos, Variant data) {
    bool ret = GodotEnginePINVOKE.Control_can_drop_data(swigCPtr, ref pos, Variant.getCPtr(data));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void drop_data(Vector2 pos, Variant data) {
    GodotEnginePINVOKE.Control_drop_data(swigCPtr, ref pos, Variant.getCPtr(data));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Object get_drag_data(Vector2 pos) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_drag_data(swigCPtr, ref pos);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2 get_minimum_size() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_minimum_size(swigCPtr);
    return ret;
}

  public void accept_event() {
    GodotEnginePINVOKE.Control_accept_event(swigCPtr);
  }

  public Vector2 get_combined_minimum_size() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_combined_minimum_size(swigCPtr);
    return ret;
}

  public void set_anchor(int margin, int anchor_mode, bool keep_margin) {
    GodotEnginePINVOKE.Control_set_anchor__SWIG_0(swigCPtr, margin, anchor_mode, keep_margin);
  }

  public void set_anchor(int margin, int anchor_mode) {
    GodotEnginePINVOKE.Control_set_anchor__SWIG_1(swigCPtr, margin, anchor_mode);
  }

  public int get_anchor(int margin) {
    int ret = GodotEnginePINVOKE.Control_get_anchor(swigCPtr, margin);
    return ret;
  }

  public void set_margin(int margin, float offset) {
    GodotEnginePINVOKE.Control_set_margin(swigCPtr, margin, offset);
  }

  public void set_anchor_and_margin(int margin, int anchor_mode, float offset) {
    GodotEnginePINVOKE.Control_set_anchor_and_margin(swigCPtr, margin, anchor_mode, offset);
  }

  public void set_begin(Vector2 pos) {
    GodotEnginePINVOKE.Control_set_begin(swigCPtr, ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_end(Vector2 pos) {
    GodotEnginePINVOKE.Control_set_end(swigCPtr, ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_pos(Vector2 pos) {
    GodotEnginePINVOKE.Control_set_pos(swigCPtr, ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_size(Vector2 size) {
    GodotEnginePINVOKE.Control_set_size(swigCPtr, ref size);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_custom_minimum_size(Vector2 size) {
    GodotEnginePINVOKE.Control_set_custom_minimum_size(swigCPtr, ref size);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_global_pos(Vector2 pos) {
    GodotEnginePINVOKE.Control_set_global_pos(swigCPtr, ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_rotation(float radians) {
    GodotEnginePINVOKE.Control_set_rotation(swigCPtr, radians);
  }

  public void set_rotation_deg(float degrees) {
    GodotEnginePINVOKE.Control_set_rotation_deg(swigCPtr, degrees);
  }

  public void set_scale(Vector2 scale) {
    GodotEnginePINVOKE.Control_set_scale(swigCPtr, ref scale);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float get_margin(int margin) {
    float ret = GodotEnginePINVOKE.Control_get_margin(swigCPtr, margin);
    return ret;
  }

  public Vector2 get_begin() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_begin(swigCPtr);
    return ret;
}

  public Vector2 get_end() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_end(swigCPtr);
    return ret;
}

  public Vector2 get_pos() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_pos(swigCPtr);
    return ret;
}

  public Vector2 get_size() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_size(swigCPtr);
    return ret;
}

  public float get_rotation() {
    float ret = GodotEnginePINVOKE.Control_get_rotation(swigCPtr);
    return ret;
  }

  public float get_rotation_deg() {
    float ret = GodotEnginePINVOKE.Control_get_rotation_deg(swigCPtr);
    return ret;
  }

  public Vector2 get_scale() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_scale(swigCPtr);
    return ret;
}

  public Vector2 get_custom_minimum_size() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_custom_minimum_size(swigCPtr);
    return ret;
}

  public Vector2 get_parent_area_size() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_parent_area_size(swigCPtr);
    return ret;
}

  public Vector2 get_global_pos() {
    Vector2 ret = GodotEnginePINVOKE.Control_get_global_pos(swigCPtr);
    return ret;
}

  public SWIGTYPE_p_Rect2 get_rect() {
    SWIGTYPE_p_Rect2 ret = new SWIGTYPE_p_Rect2(GodotEnginePINVOKE.Control_get_rect(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Rect2 get_global_rect() {
    SWIGTYPE_p_Rect2 ret = new SWIGTYPE_p_Rect2(GodotEnginePINVOKE.Control_get_global_rect(swigCPtr), true);
    return ret;
  }

  public void set_area_as_parent_rect(int margin) {
    GodotEnginePINVOKE.Control_set_area_as_parent_rect__SWIG_0(swigCPtr, margin);
  }

  public void set_area_as_parent_rect() {
    GodotEnginePINVOKE.Control_set_area_as_parent_rect__SWIG_1(swigCPtr);
  }

  public void show_modal(bool exclusive) {
    GodotEnginePINVOKE.Control_show_modal__SWIG_0(swigCPtr, exclusive);
  }

  public void show_modal() {
    GodotEnginePINVOKE.Control_show_modal__SWIG_1(swigCPtr);
  }

  public void set_focus_mode(int mode) {
    GodotEnginePINVOKE.Control_set_focus_mode(swigCPtr, mode);
  }

  public int get_focus_mode() {
    int ret = GodotEnginePINVOKE.Control_get_focus_mode(swigCPtr);
    return ret;
  }

  public bool has_focus() {
    bool ret = GodotEnginePINVOKE.Control_has_focus(swigCPtr);
    return ret;
  }

  public void grab_focus() {
    GodotEnginePINVOKE.Control_grab_focus(swigCPtr);
  }

  public void release_focus() {
    GodotEnginePINVOKE.Control_release_focus(swigCPtr);
  }

  public Control get_focus_owner() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_focus_owner(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Control ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Control;
    return ret;
  }

  public void set_h_size_flags(int flags) {
    GodotEnginePINVOKE.Control_set_h_size_flags(swigCPtr, flags);
  }

  public int get_h_size_flags() {
    int ret = GodotEnginePINVOKE.Control_get_h_size_flags(swigCPtr);
    return ret;
  }

  public void set_stretch_ratio(float ratio) {
    GodotEnginePINVOKE.Control_set_stretch_ratio(swigCPtr, ratio);
  }

  public float get_stretch_ratio() {
    float ret = GodotEnginePINVOKE.Control_get_stretch_ratio(swigCPtr);
    return ret;
  }

  public void set_v_size_flags(int flags) {
    GodotEnginePINVOKE.Control_set_v_size_flags(swigCPtr, flags);
  }

  public int get_v_size_flags() {
    int ret = GodotEnginePINVOKE.Control_get_v_size_flags(swigCPtr);
    return ret;
  }

  public void set_theme(Theme theme) {
    GodotEnginePINVOKE.Control_set_theme(swigCPtr, Theme.getCPtr(theme));
  }

  public Theme get_theme() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_theme(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Theme ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Theme;
    return ret;
}

  public void add_icon_override(string name, Texture texture) {
    GodotEnginePINVOKE.Control_add_icon_override(swigCPtr, name, Texture.getCPtr(texture));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_shader_override(string name, Shader shader) {
    GodotEnginePINVOKE.Control_add_shader_override(swigCPtr, name, Shader.getCPtr(shader));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_style_override(string name, StyleBox stylebox) {
    GodotEnginePINVOKE.Control_add_style_override(swigCPtr, name, StyleBox.getCPtr(stylebox));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_font_override(string name, Font font) {
    GodotEnginePINVOKE.Control_add_font_override(swigCPtr, name, Font.getCPtr(font));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_color_override(string name, SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.Control_add_color_override(swigCPtr, name, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_constant_override(string name, int constant) {
    GodotEnginePINVOKE.Control_add_constant_override(swigCPtr, name, constant);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Texture get_icon(string name, string type) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_icon__SWIG_0(swigCPtr, name, type);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Texture get_icon(string name) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_icon__SWIG_1(swigCPtr, name);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public StyleBox get_stylebox(string name, string type) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_stylebox__SWIG_0(swigCPtr, name, type);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    StyleBox ret = InternalHelpers.UnmanagedGetManaged(cPtr) as StyleBox;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public StyleBox get_stylebox(string name) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_stylebox__SWIG_1(swigCPtr, name);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    StyleBox ret = InternalHelpers.UnmanagedGetManaged(cPtr) as StyleBox;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Font get_font(string name, string type) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_font__SWIG_0(swigCPtr, name, type);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Font ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Font;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Font get_font(string name) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_font__SWIG_1(swigCPtr, name);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Font ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Font;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public SWIGTYPE_p_Color get_color(string name, string type) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.Control_get_color__SWIG_0(swigCPtr, name, type), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Color get_color(string name) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.Control_get_color__SWIG_1(swigCPtr, name), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_constant(string name, string type) {
    int ret = GodotEnginePINVOKE.Control_get_constant__SWIG_0(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_constant(string name) {
    int ret = GodotEnginePINVOKE.Control_get_constant__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_icon_override(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_icon_override(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_stylebox_override(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_stylebox_override(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_font_override(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_font_override(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_color_override(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_color_override(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_constant_override(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_constant_override(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_icon(string name, string type) {
    bool ret = GodotEnginePINVOKE.Control_has_icon__SWIG_0(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_icon(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_icon__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_stylebox(string name, string type) {
    bool ret = GodotEnginePINVOKE.Control_has_stylebox__SWIG_0(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_stylebox(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_stylebox__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_font(string name, string type) {
    bool ret = GodotEnginePINVOKE.Control_has_font__SWIG_0(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_font(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_font__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_color(string name, string type) {
    bool ret = GodotEnginePINVOKE.Control_has_color__SWIG_0(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_color(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_color__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_constant(string name, string type) {
    bool ret = GodotEnginePINVOKE.Control_has_constant__SWIG_0(swigCPtr, name, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_constant(string name) {
    bool ret = GodotEnginePINVOKE.Control_has_constant__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Control get_parent_control() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Control_get_parent_control(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Control ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Control;
    return ret;
  }

  public void set_tooltip(string tooltip) {
    GodotEnginePINVOKE.Control_set_tooltip(swigCPtr, tooltip);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_tooltip(Vector2 atpos) {
    string ret = GodotEnginePINVOKE.Control_get_tooltip__SWIG_0(swigCPtr, ref atpos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_tooltip() {
    string ret = GodotEnginePINVOKE.Control_get_tooltip__SWIG_1(swigCPtr);
    return ret;
  }

  public void set_default_cursor_shape(int shape) {
    GodotEnginePINVOKE.Control_set_default_cursor_shape(swigCPtr, shape);
  }

  public int get_default_cursor_shape() {
    int ret = GodotEnginePINVOKE.Control_get_default_cursor_shape(swigCPtr);
    return ret;
  }

  public int get_cursor_shape(Vector2 pos) {
    int ret = GodotEnginePINVOKE.Control_get_cursor_shape__SWIG_0(swigCPtr, ref pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_cursor_shape() {
    int ret = GodotEnginePINVOKE.Control_get_cursor_shape__SWIG_1(swigCPtr);
    return ret;
  }

  public void set_focus_neighbour(int margin, NodePath neighbour) {
    GodotEnginePINVOKE.Control_set_focus_neighbour(swigCPtr, margin, NodePath.getCPtr(neighbour));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodePath get_focus_neighbour(int margin) {
    NodePath ret = new NodePath(GodotEnginePINVOKE.Control_get_focus_neighbour(swigCPtr, margin), true);
    return ret;
  }

  public void set_ignore_mouse(bool ignore) {
    GodotEnginePINVOKE.Control_set_ignore_mouse(swigCPtr, ignore);
  }

  public bool is_ignoring_mouse() {
    bool ret = GodotEnginePINVOKE.Control_is_ignoring_mouse(swigCPtr);
    return ret;
  }

  public void force_drag(Variant data, Object preview) {
    GodotEnginePINVOKE.Control_force_drag(swigCPtr, Variant.getCPtr(data), Object.getCPtr(preview));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_stop_mouse(bool stop) {
    GodotEnginePINVOKE.Control_set_stop_mouse(swigCPtr, stop);
  }

  public bool is_stopping_mouse() {
    bool ret = GodotEnginePINVOKE.Control_is_stopping_mouse(swigCPtr);
    return ret;
  }

  public void grab_click_focus() {
    GodotEnginePINVOKE.Control_grab_click_focus(swigCPtr);
  }

  public void set_drag_forwarding(Control target) {
    GodotEnginePINVOKE.Control_set_drag_forwarding(swigCPtr, Control.getCPtr(target));
  }

  public void set_drag_preview(Control control) {
    GodotEnginePINVOKE.Control_set_drag_preview(swigCPtr, Control.getCPtr(control));
  }

  public void warp_mouse(Vector2 to_pos) {
    GodotEnginePINVOKE.Control_warp_mouse(swigCPtr, ref to_pos);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void minimum_size_changed() {
    GodotEnginePINVOKE.Control_minimum_size_changed(swigCPtr);
  }

  public Control() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Control());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
