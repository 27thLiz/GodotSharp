/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Spatial : Node {
  public static readonly int NOTIFICATION_TRANSFORM_CHANGED = 29;
  public static readonly int NOTIFICATION_ENTER_WORLD = 41;
  public static readonly int NOTIFICATION_EXIT_WORLD = 42;
  public static readonly int NOTIFICATION_VISIBILITY_CHANGED = 43;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Spatial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Spatial_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Spatial(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Spatial_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Spatial obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public Spatial() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Spatial());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void set_transform(Transform local) {
    GodotEnginePINVOKE.Spatial_set_transform(swigCPtr, ref local);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Transform get_transform() {
    Transform ret = GodotEnginePINVOKE.Spatial_get_transform(swigCPtr);
    return ret;
}

  public void set_translation(Vector3 translation) {
    GodotEnginePINVOKE.Spatial_set_translation(swigCPtr, ref translation);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_translation() {
    Vector3 ret = GodotEnginePINVOKE.Spatial_get_translation(swigCPtr);
    return ret;
}

  public void set_rotation(Vector3 rotation_rad) {
    GodotEnginePINVOKE.Spatial_set_rotation(swigCPtr, ref rotation_rad);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_rotation() {
    Vector3 ret = GodotEnginePINVOKE.Spatial_get_rotation(swigCPtr);
    return ret;
}

  public void set_rotation_deg(Vector3 rotation_deg) {
    GodotEnginePINVOKE.Spatial_set_rotation_deg(swigCPtr, ref rotation_deg);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_rotation_deg() {
    Vector3 ret = GodotEnginePINVOKE.Spatial_get_rotation_deg(swigCPtr);
    return ret;
}

  public void set_scale(Vector3 scale) {
    GodotEnginePINVOKE.Spatial_set_scale(swigCPtr, ref scale);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_scale() {
    Vector3 ret = GodotEnginePINVOKE.Spatial_get_scale(swigCPtr);
    return ret;
}

  public void set_global_transform(Transform global) {
    GodotEnginePINVOKE.Spatial_set_global_transform(swigCPtr, ref global);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Transform get_global_transform() {
    Transform ret = GodotEnginePINVOKE.Spatial_get_global_transform(swigCPtr);
    return ret;
}

  public Object get_parent_spatial() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Spatial_get_parent_spatial(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void set_ignore_transform_notification(bool enabled) {
    GodotEnginePINVOKE.Spatial_set_ignore_transform_notification(swigCPtr, enabled);
  }

  public void set_as_toplevel(bool enable) {
    GodotEnginePINVOKE.Spatial_set_as_toplevel(swigCPtr, enable);
  }

  public bool is_set_as_toplevel() {
    bool ret = GodotEnginePINVOKE.Spatial_is_set_as_toplevel(swigCPtr);
    return ret;
  }

  public World get_world() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Spatial_get_world(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    World ret = InternalHelpers.UnmanagedGetManaged(cPtr) as World;
    return ret;
}

  public void update_gizmo() {
    GodotEnginePINVOKE.Spatial_update_gizmo(swigCPtr);
  }

  public void set_gizmo(SpatialGizmo gizmo) {
    GodotEnginePINVOKE.Spatial_set_gizmo(swigCPtr, SpatialGizmo.getCPtr(gizmo));
  }

  public SpatialGizmo get_gizmo() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Spatial_get_gizmo(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    SpatialGizmo ret = InternalHelpers.UnmanagedGetManaged(cPtr) as SpatialGizmo;
    return ret;
}

  public void show() {
    GodotEnginePINVOKE.Spatial_show(swigCPtr);
  }

  public void hide() {
    GodotEnginePINVOKE.Spatial_hide(swigCPtr);
  }

  public bool is_visible() {
    bool ret = GodotEnginePINVOKE.Spatial_is_visible(swigCPtr);
    return ret;
  }

  public bool is_hidden() {
    bool ret = GodotEnginePINVOKE.Spatial_is_hidden(swigCPtr);
    return ret;
  }

  public void set_hidden(bool hidden) {
    GodotEnginePINVOKE.Spatial_set_hidden(swigCPtr, hidden);
  }

  public void set_notify_local_transform(bool enable) {
    GodotEnginePINVOKE.Spatial_set_notify_local_transform(swigCPtr, enable);
  }

  public bool is_local_transform_notification_enabled() {
    bool ret = GodotEnginePINVOKE.Spatial_is_local_transform_notification_enabled(swigCPtr);
    return ret;
  }

  public void rotate(Vector3 normal, float radians) {
    GodotEnginePINVOKE.Spatial_rotate(swigCPtr, ref normal, radians);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void global_rotate(Vector3 normal, float radians) {
    GodotEnginePINVOKE.Spatial_global_rotate(swigCPtr, ref normal, radians);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void rotate_x(float radians) {
    GodotEnginePINVOKE.Spatial_rotate_x(swigCPtr, radians);
  }

  public void rotate_y(float radians) {
    GodotEnginePINVOKE.Spatial_rotate_y(swigCPtr, radians);
  }

  public void rotate_z(float radians) {
    GodotEnginePINVOKE.Spatial_rotate_z(swigCPtr, radians);
  }

  public void translate(Vector3 offset) {
    GodotEnginePINVOKE.Spatial_translate(swigCPtr, ref offset);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void global_translate(Vector3 offset) {
    GodotEnginePINVOKE.Spatial_global_translate(swigCPtr, ref offset);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void orthonormalize() {
    GodotEnginePINVOKE.Spatial_orthonormalize(swigCPtr);
  }

  public void set_identity() {
    GodotEnginePINVOKE.Spatial_set_identity(swigCPtr);
  }

  public void look_at(Vector3 target, Vector3 up) {
    GodotEnginePINVOKE.Spatial_look_at(swigCPtr, ref target, ref up);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void look_at_from_pos(Vector3 pos, Vector3 target, Vector3 up) {
    GodotEnginePINVOKE.Spatial_look_at_from_pos(swigCPtr, ref pos, ref target, ref up);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
