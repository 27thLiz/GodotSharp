/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class TCP_Server : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal TCP_Server(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.TCP_Server_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected TCP_Server(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.TCP_Server_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TCP_Server obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int listen(int port, SWIGTYPE_p_StringArray accepted_hosts) {
    int ret = GodotEnginePINVOKE.TCP_Server_listen__SWIG_0(swigCPtr, port, SWIGTYPE_p_StringArray.getCPtr(accepted_hosts));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int listen(int port) {
    int ret = GodotEnginePINVOKE.TCP_Server_listen__SWIG_1(swigCPtr, port);
    return ret;
  }

  public bool is_connection_available() {
    bool ret = GodotEnginePINVOKE.TCP_Server_is_connection_available(swigCPtr);
    return ret;
  }

  public Object take_connection() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TCP_Server_take_connection(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
    	return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void stop() {
    GodotEnginePINVOKE.TCP_Server_stop(swigCPtr);
  }

  public TCP_Server() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_TCP_Server());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
