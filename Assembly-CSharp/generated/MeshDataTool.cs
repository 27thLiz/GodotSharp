/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class MeshDataTool : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal MeshDataTool(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.MeshDataTool_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected MeshDataTool(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.MeshDataTool_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshDataTool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MeshDataTool() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_MeshDataTool(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public MeshDataTool() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_MeshDataTool());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void clear() {
    GodotEnginePINVOKE.MeshDataTool_clear(swigCPtr);
  }

  public int create_from_surface(Object mesh, int surface) {
    int ret = GodotEnginePINVOKE.MeshDataTool_create_from_surface(swigCPtr, Object.getCPtr(mesh), surface);
    return ret;
  }

  public int commit_to_surface(Object mesh) {
    int ret = GodotEnginePINVOKE.MeshDataTool_commit_to_surface(swigCPtr, Object.getCPtr(mesh));
    return ret;
  }

  public int get_format() {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_format(swigCPtr);
    return ret;
  }

  public int get_vertex_count() {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_vertex_count(swigCPtr);
    return ret;
  }

  public int get_edge_count() {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_edge_count(swigCPtr);
    return ret;
  }

  public int get_face_count() {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_face_count(swigCPtr);
    return ret;
  }

  public void set_vertex(int idx, SWIGTYPE_p_Vector3 vertex) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex(swigCPtr, idx, SWIGTYPE_p_Vector3.getCPtr(vertex));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector3 get_vertex(int idx) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.MeshDataTool_get_vertex(swigCPtr, idx), true);
    return ret;
  }

  public void set_vertex_normal(int idx, SWIGTYPE_p_Vector3 normal) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_normal(swigCPtr, idx, SWIGTYPE_p_Vector3.getCPtr(normal));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector3 get_vertex_normal(int idx) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.MeshDataTool_get_vertex_normal(swigCPtr, idx), true);
    return ret;
  }

  public void set_vertex_tangent(int idx, SWIGTYPE_p_Plane tangent) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_tangent(swigCPtr, idx, SWIGTYPE_p_Plane.getCPtr(tangent));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Plane get_vertex_tangent(int idx) {
    SWIGTYPE_p_Plane ret = new SWIGTYPE_p_Plane(GodotEnginePINVOKE.MeshDataTool_get_vertex_tangent(swigCPtr, idx), true);
    return ret;
  }

  public void set_vertex_uv(int idx, Vector2 uv) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_uv(swigCPtr, idx, ref uv);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_vertex_uv(int idx) {
    Vector2 ret = GodotEnginePINVOKE.MeshDataTool_get_vertex_uv(swigCPtr, idx);
    return ret;
}

  public void set_vertex_uv2(int idx, Vector2 uv2) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_uv2(swigCPtr, idx, ref uv2);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_vertex_uv2(int idx) {
    Vector2 ret = GodotEnginePINVOKE.MeshDataTool_get_vertex_uv2(swigCPtr, idx);
    return ret;
}

  public void set_vertex_color(int idx, SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_color(swigCPtr, idx, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_vertex_color(int idx) {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.MeshDataTool_get_vertex_color(swigCPtr, idx), true);
    return ret;
  }

  public void set_vertex_bones(int idx, SWIGTYPE_p_IntArray bones) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_bones(swigCPtr, idx, SWIGTYPE_p_IntArray.getCPtr(bones));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_IntArray get_vertex_bones(int idx) {
    SWIGTYPE_p_IntArray ret = new SWIGTYPE_p_IntArray(GodotEnginePINVOKE.MeshDataTool_get_vertex_bones(swigCPtr, idx), true);
    return ret;
  }

  public void set_vertex_weights(int idx, SWIGTYPE_p_RealArray weights) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_weights(swigCPtr, idx, SWIGTYPE_p_RealArray.getCPtr(weights));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RealArray get_vertex_weights(int idx) {
    SWIGTYPE_p_RealArray ret = new SWIGTYPE_p_RealArray(GodotEnginePINVOKE.MeshDataTool_get_vertex_weights(swigCPtr, idx), true);
    return ret;
  }

  public void set_vertex_meta(int idx, Variant meta) {
    GodotEnginePINVOKE.MeshDataTool_set_vertex_meta(swigCPtr, idx, Variant.getCPtr(meta));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_vertex_meta(int idx) {
    GodotEnginePINVOKE.MeshDataTool_get_vertex_meta(swigCPtr, idx);
  }

  public SWIGTYPE_p_IntArray get_vertex_edges(int idx) {
    SWIGTYPE_p_IntArray ret = new SWIGTYPE_p_IntArray(GodotEnginePINVOKE.MeshDataTool_get_vertex_edges(swigCPtr, idx), true);
    return ret;
  }

  public SWIGTYPE_p_IntArray get_vertex_faces(int idx) {
    SWIGTYPE_p_IntArray ret = new SWIGTYPE_p_IntArray(GodotEnginePINVOKE.MeshDataTool_get_vertex_faces(swigCPtr, idx), true);
    return ret;
  }

  public int get_edge_vertex(int idx, int vertex) {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_edge_vertex(swigCPtr, idx, vertex);
    return ret;
  }

  public SWIGTYPE_p_IntArray get_edge_faces(int idx) {
    SWIGTYPE_p_IntArray ret = new SWIGTYPE_p_IntArray(GodotEnginePINVOKE.MeshDataTool_get_edge_faces(swigCPtr, idx), true);
    return ret;
  }

  public void set_edge_meta(int idx, Variant meta) {
    GodotEnginePINVOKE.MeshDataTool_set_edge_meta(swigCPtr, idx, Variant.getCPtr(meta));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_edge_meta(int idx) {
    GodotEnginePINVOKE.MeshDataTool_get_edge_meta(swigCPtr, idx);
  }

  public int get_face_vertex(int idx, int vertex) {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_face_vertex(swigCPtr, idx, vertex);
    return ret;
  }

  public int get_face_edge(int idx, int edge) {
    int ret = GodotEnginePINVOKE.MeshDataTool_get_face_edge(swigCPtr, idx, edge);
    return ret;
  }

  public void set_face_meta(int idx, Variant meta) {
    GodotEnginePINVOKE.MeshDataTool_set_face_meta(swigCPtr, idx, Variant.getCPtr(meta));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_face_meta(int idx) {
    GodotEnginePINVOKE.MeshDataTool_get_face_meta(swigCPtr, idx);
  }

  public SWIGTYPE_p_Vector3 get_face_normal(int idx) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(GodotEnginePINVOKE.MeshDataTool_get_face_normal(swigCPtr, idx), true);
    return ret;
  }

  public void set_material(Material material) {
    GodotEnginePINVOKE.MeshDataTool_set_material(swigCPtr, Material.getCPtr(material));
  }

  public Object get_material() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.MeshDataTool_get_material(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

}

}
