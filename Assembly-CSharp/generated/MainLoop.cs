/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class MainLoop : Object {
  public static readonly int NOTIFICATION_WM_MOUSE_ENTER = 3;
  public static readonly int NOTIFICATION_WM_MOUSE_EXIT = 4;
  public static readonly int NOTIFICATION_WM_FOCUS_IN = 5;
  public static readonly int NOTIFICATION_WM_FOCUS_OUT = 6;
  public static readonly int NOTIFICATION_WM_QUIT_REQUEST = 7;
  public static readonly int NOTIFICATION_WM_UNFOCUS_REQUEST = 8;
  public static readonly int NOTIFICATION_OS_MEMORY_WARNING = 9;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal MainLoop(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.MainLoop_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected MainLoop(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.MainLoop_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MainLoop obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public MainLoop() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_MainLoop());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void _drop_files(SWIGTYPE_p_StringArray files, int screen) {
    GodotEnginePINVOKE.MainLoop__drop_files(swigCPtr, SWIGTYPE_p_StringArray.getCPtr(files), screen);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _finalize() {
    GodotEnginePINVOKE.MainLoop__finalize(swigCPtr);
  }

  public void _idle(float delta) {
    GodotEnginePINVOKE.MainLoop__idle(swigCPtr, delta);
  }

  public void _initialize() {
    GodotEnginePINVOKE.MainLoop__initialize(swigCPtr);
  }

  public void _input_event(SWIGTYPE_p_InputEvent ev) {
    GodotEnginePINVOKE.MainLoop__input_event(swigCPtr, SWIGTYPE_p_InputEvent.getCPtr(ev));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _input_text(string text) {
    GodotEnginePINVOKE.MainLoop__input_text(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _iteration(float delta) {
    GodotEnginePINVOKE.MainLoop__iteration(swigCPtr, delta);
  }

  public void input_event(SWIGTYPE_p_InputEvent ev) {
    GodotEnginePINVOKE.MainLoop_input_event(swigCPtr, SWIGTYPE_p_InputEvent.getCPtr(ev));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void input_text(string text) {
    GodotEnginePINVOKE.MainLoop_input_text(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void init() {
    GodotEnginePINVOKE.MainLoop_init(swigCPtr);
  }

  public bool iteration(float delta) {
    bool ret = GodotEnginePINVOKE.MainLoop_iteration(swigCPtr, delta);
    return ret;
  }

  public bool idle(float delta) {
    bool ret = GodotEnginePINVOKE.MainLoop_idle(swigCPtr, delta);
    return ret;
  }

  public void finish() {
    GodotEnginePINVOKE.MainLoop_finish(swigCPtr);
  }

}

}
