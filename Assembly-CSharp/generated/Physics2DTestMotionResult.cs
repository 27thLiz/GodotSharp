/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Physics2DTestMotionResult : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Physics2DTestMotionResult(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Physics2DTestMotionResult_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Physics2DTestMotionResult(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Physics2DTestMotionResult_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Physics2DTestMotionResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Physics2DTestMotionResult() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Physics2DTestMotionResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public Physics2DTestMotionResult() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Physics2DTestMotionResult());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public Vector2 get_motion() {
    Vector2 ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_motion(swigCPtr);
    return ret;
}

  public Vector2 get_motion_remainder() {
    Vector2 ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_motion_remainder(swigCPtr);
    return ret;
}

  public Vector2 get_collision_point() {
    Vector2 ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_collision_point(swigCPtr);
    return ret;
}

  public Vector2 get_collision_normal() {
    Vector2 ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_collision_normal(swigCPtr);
    return ret;
}

  public Vector2 get_collider_velocity() {
    Vector2 ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_collider_velocity(swigCPtr);
    return ret;
}

  public int get_collider_id() {
    int ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_collider_id(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_RID get_collider_rid() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.Physics2DTestMotionResult_get_collider_rid(swigCPtr), true);
    return ret;
  }

  public Object get_collider() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Physics2DTestMotionResult_get_collider(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public int get_collider_shape() {
    int ret = GodotEnginePINVOKE.Physics2DTestMotionResult_get_collider_shape(swigCPtr);
    return ret;
  }

}

}
