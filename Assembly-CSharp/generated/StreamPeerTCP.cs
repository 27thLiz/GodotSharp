/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class StreamPeerTCP : StreamPeer {
  public static readonly int STATUS_NONE = 0;
  public static readonly int STATUS_CONNECTING = 1;
  public static readonly int STATUS_CONNECTED = 2;
  public static readonly int STATUS_ERROR = 3;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal StreamPeerTCP(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.StreamPeerTCP_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected StreamPeerTCP(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.StreamPeerTCP_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StreamPeerTCP obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StreamPeerTCP() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_StreamPeerTCP(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int connect(string host, int port) {
    int ret = GodotEnginePINVOKE.StreamPeerTCP_connect(swigCPtr, host, port);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_connected() {
    bool ret = GodotEnginePINVOKE.StreamPeerTCP_is_connected(swigCPtr);
    return ret;
  }

  public int get_status() {
    int ret = GodotEnginePINVOKE.StreamPeerTCP_get_status(swigCPtr);
    return ret;
  }

  public string get_connected_host() {
    string ret = GodotEnginePINVOKE.StreamPeerTCP_get_connected_host(swigCPtr);
    return ret;
  }

  public int get_connected_port() {
    int ret = GodotEnginePINVOKE.StreamPeerTCP_get_connected_port(swigCPtr);
    return ret;
  }

  public void disconnect() {
    GodotEnginePINVOKE.StreamPeerTCP_disconnect(swigCPtr);
  }

  public StreamPeerTCP() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_StreamPeerTCP());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
