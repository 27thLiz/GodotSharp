/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Navigation : Spatial {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Navigation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Navigation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Navigation(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Navigation_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Navigation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public Navigation() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Navigation());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public int navmesh_create(NavigationMesh mesh, Transform xform, Object owner) {
    int ret = GodotEnginePINVOKE.Navigation_navmesh_create__SWIG_0(swigCPtr, NavigationMesh.getCPtr(mesh), ref xform, Object.getCPtr(owner));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int navmesh_create(NavigationMesh mesh, Transform xform) {
    int ret = GodotEnginePINVOKE.Navigation_navmesh_create__SWIG_1(swigCPtr, NavigationMesh.getCPtr(mesh), ref xform);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void navmesh_set_transform(int id, Transform xform) {
    GodotEnginePINVOKE.Navigation_navmesh_set_transform(swigCPtr, id, ref xform);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void navmesh_remove(int id) {
    GodotEnginePINVOKE.Navigation_navmesh_remove(swigCPtr, id);
  }

  public SWIGTYPE_p_Vector3Array get_simple_path(Vector3 start, Vector3 end, bool optimize) {
    SWIGTYPE_p_Vector3Array ret = new SWIGTYPE_p_Vector3Array(GodotEnginePINVOKE.Navigation_get_simple_path__SWIG_0(swigCPtr, ref start, ref end, optimize), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Vector3Array get_simple_path(Vector3 start, Vector3 end) {
    SWIGTYPE_p_Vector3Array ret = new SWIGTYPE_p_Vector3Array(GodotEnginePINVOKE.Navigation_get_simple_path__SWIG_1(swigCPtr, ref start, ref end), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 get_closest_point_to_segment(Vector3 start, Vector3 end, bool use_collision) {
    Vector3 ret = GodotEnginePINVOKE.Navigation_get_closest_point_to_segment__SWIG_0(swigCPtr, ref start, ref end, use_collision);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Vector3 get_closest_point_to_segment(Vector3 start, Vector3 end) {
    Vector3 ret = GodotEnginePINVOKE.Navigation_get_closest_point_to_segment__SWIG_1(swigCPtr, ref start, ref end);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Vector3 get_closest_point(Vector3 to_point) {
    Vector3 ret = GodotEnginePINVOKE.Navigation_get_closest_point(swigCPtr, ref to_point);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Vector3 get_closest_point_normal(Vector3 to_point) {
    Vector3 ret = GodotEnginePINVOKE.Navigation_get_closest_point_normal(swigCPtr, ref to_point);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
}

  public Object get_closest_point_owner(Vector3 to_point) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Navigation_get_closest_point_owner(swigCPtr, ref to_point);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_up_vector(Vector3 up) {
    GodotEnginePINVOKE.Navigation_set_up_vector(swigCPtr, ref up);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 get_up_vector() {
    Vector3 ret = GodotEnginePINVOKE.Navigation_get_up_vector(swigCPtr);
    return ret;
}

}

}
