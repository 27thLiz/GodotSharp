/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class CanvasLayer : Node {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal CanvasLayer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.CanvasLayer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected CanvasLayer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.CanvasLayer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CanvasLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_layer(int layer) {
    GodotEnginePINVOKE.CanvasLayer_set_layer(swigCPtr, layer);
  }

  public int get_layer() {
    int ret = GodotEnginePINVOKE.CanvasLayer_get_layer(swigCPtr);
    return ret;
  }

  public void set_transform(Matrix32 transform) {
    GodotEnginePINVOKE.CanvasLayer_set_transform(swigCPtr, ref transform.elements);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix32 get_transform() {
    Matrix32 ret = new Matrix32(GodotEnginePINVOKE.CanvasLayer_get_transform(swigCPtr));
    return ret;
}

  public void set_offset(Vector2 offset) {
    GodotEnginePINVOKE.CanvasLayer_set_offset(swigCPtr, ref offset);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_offset() {
    Vector2 ret = GodotEnginePINVOKE.CanvasLayer_get_offset(swigCPtr);
    return ret;
}

  public void set_rotation(float radians) {
    GodotEnginePINVOKE.CanvasLayer_set_rotation(swigCPtr, radians);
  }

  public float get_rotation() {
    float ret = GodotEnginePINVOKE.CanvasLayer_get_rotation(swigCPtr);
    return ret;
  }

  public void set_rotationd(float degrees) {
    GodotEnginePINVOKE.CanvasLayer_set_rotationd(swigCPtr, degrees);
  }

  public float get_rotationd() {
    float ret = GodotEnginePINVOKE.CanvasLayer_get_rotationd(swigCPtr);
    return ret;
  }

  public void set_scale(Vector2 scale) {
    GodotEnginePINVOKE.CanvasLayer_set_scale(swigCPtr, ref scale);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_scale() {
    Vector2 ret = GodotEnginePINVOKE.CanvasLayer_get_scale(swigCPtr);
    return ret;
}

  public World2D get_world_2d() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.CanvasLayer_get_world_2d(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    World2D ret = InternalHelpers.UnmanagedGetManaged(cPtr) as World2D;
    return ret;
}

  public SWIGTYPE_p_RID get_viewport() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.CanvasLayer_get_viewport(swigCPtr), true);
    return ret;
  }

  public CanvasLayer() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_CanvasLayer());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
