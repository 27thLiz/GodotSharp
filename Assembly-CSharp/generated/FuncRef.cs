/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class FuncRef : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal FuncRef(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.FuncRef_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected FuncRef(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.FuncRef_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FuncRef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_, Variant arg6_, Variant arg7_, Variant arg8_, Variant arg9_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_0(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_), Variant.getCPtr(arg6_), Variant.getCPtr(arg7_), Variant.getCPtr(arg8_), Variant.getCPtr(arg9_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_, Variant arg6_, Variant arg7_, Variant arg8_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_1(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_), Variant.getCPtr(arg6_), Variant.getCPtr(arg7_), Variant.getCPtr(arg8_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_, Variant arg6_, Variant arg7_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_2(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_), Variant.getCPtr(arg6_), Variant.getCPtr(arg7_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_, Variant arg6_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_3(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_), Variant.getCPtr(arg6_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_4(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_5(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_, Variant arg3_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_6(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_, Variant arg2_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_7(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_), Variant.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_, Variant arg1_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_8(swigCPtr, Variant.getCPtr(arg0_), Variant.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func(Variant arg0_) {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_9(swigCPtr, Variant.getCPtr(arg0_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void call_func() {
    GodotEnginePINVOKE.FuncRef_call_func__SWIG_10(swigCPtr);
  }

  public void set_instance(Object instance) {
    GodotEnginePINVOKE.FuncRef_set_instance(swigCPtr, Object.getCPtr(instance));
  }

  public void set_function(string name) {
    GodotEnginePINVOKE.FuncRef_set_function(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public FuncRef() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_FuncRef());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
