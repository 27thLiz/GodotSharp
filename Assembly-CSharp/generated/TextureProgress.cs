/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class TextureProgress : Range {
  public static readonly int FILL_LEFT_TO_RIGHT = 0;
  public static readonly int FILL_RIGHT_TO_LEFT = 1;
  public static readonly int FILL_TOP_TO_BOTTOM = 2;
  public static readonly int FILL_BOTTOM_TO_TOP = 3;
  public static readonly int FILL_CLOCKWISE = 4;
  public static readonly int FILL_COUNTER_CLOCKWISE = 5;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal TextureProgress(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.TextureProgress_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected TextureProgress(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.TextureProgress_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureProgress obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public TextureProgress() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_TextureProgress());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void set_under_texture(Object tex) {
    GodotEnginePINVOKE.TextureProgress_set_under_texture(swigCPtr, Object.getCPtr(tex));
  }

  public Object get_under_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureProgress_get_under_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void set_progress_texture(Object tex) {
    GodotEnginePINVOKE.TextureProgress_set_progress_texture(swigCPtr, Object.getCPtr(tex));
  }

  public Object get_progress_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureProgress_get_progress_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void set_over_texture(Object tex) {
    GodotEnginePINVOKE.TextureProgress_set_over_texture(swigCPtr, Object.getCPtr(tex));
  }

  public Object get_over_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureProgress_get_over_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void set_fill_mode(int mode) {
    GodotEnginePINVOKE.TextureProgress_set_fill_mode(swigCPtr, mode);
  }

  public int get_fill_mode() {
    int ret = GodotEnginePINVOKE.TextureProgress_get_fill_mode(swigCPtr);
    return ret;
  }

  public void set_radial_initial_angle(float mode) {
    GodotEnginePINVOKE.TextureProgress_set_radial_initial_angle(swigCPtr, mode);
  }

  public float get_radial_initial_angle() {
    float ret = GodotEnginePINVOKE.TextureProgress_get_radial_initial_angle(swigCPtr);
    return ret;
  }

  public void set_radial_center_offset(Vector2 mode) {
    GodotEnginePINVOKE.TextureProgress_set_radial_center_offset(swigCPtr, ref mode);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_radial_center_offset() {
    Vector2 ret = GodotEnginePINVOKE.TextureProgress_get_radial_center_offset(swigCPtr);
    return ret;
}

  public void set_fill_degrees(float mode) {
    GodotEnginePINVOKE.TextureProgress_set_fill_degrees(swigCPtr, mode);
  }

  public float get_fill_degrees() {
    float ret = GodotEnginePINVOKE.TextureProgress_get_fill_degrees(swigCPtr);
    return ret;
  }

}

}
