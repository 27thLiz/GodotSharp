/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Font : Resource {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Font(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Font_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Font(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Font_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Font obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal Font() {}


  public void draw(SWIGTYPE_p_RID canvas_item, Vector2 pos, string arg2, SWIGTYPE_p_Color modulate, int clip_w) {
    GodotEnginePINVOKE.Font_draw__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), Vector2.getCPtr(pos), arg2, SWIGTYPE_p_Color.getCPtr(modulate), clip_w);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw(SWIGTYPE_p_RID canvas_item, Vector2 pos, string arg2, SWIGTYPE_p_Color modulate) {
    GodotEnginePINVOKE.Font_draw__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), Vector2.getCPtr(pos), arg2, SWIGTYPE_p_Color.getCPtr(modulate));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void draw(SWIGTYPE_p_RID canvas_item, Vector2 pos, string arg2) {
    GodotEnginePINVOKE.Font_draw__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), Vector2.getCPtr(pos), arg2);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float get_ascent() {
    float ret = GodotEnginePINVOKE.Font_get_ascent(swigCPtr);
    return ret;
  }

  public float get_descent() {
    float ret = GodotEnginePINVOKE.Font_get_descent(swigCPtr);
    return ret;
  }

  public float get_height() {
    float ret = GodotEnginePINVOKE.Font_get_height(swigCPtr);
    return ret;
  }

  public bool is_distance_field_hint() {
    bool ret = GodotEnginePINVOKE.Font_is_distance_field_hint(swigCPtr);
    return ret;
  }

  public Vector2 get_string_size(string arg0) {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.Font_get_string_size(swigCPtr, arg0), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float draw_char(SWIGTYPE_p_RID canvas_item, Vector2 pos, int char_, int next, SWIGTYPE_p_Color modulate) {
    float ret = GodotEnginePINVOKE.Font_draw_char__SWIG_0(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), Vector2.getCPtr(pos), char_, next, SWIGTYPE_p_Color.getCPtr(modulate));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float draw_char(SWIGTYPE_p_RID canvas_item, Vector2 pos, int char_, int next) {
    float ret = GodotEnginePINVOKE.Font_draw_char__SWIG_1(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), Vector2.getCPtr(pos), char_, next);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float draw_char(SWIGTYPE_p_RID canvas_item, Vector2 pos, int char_) {
    float ret = GodotEnginePINVOKE.Font_draw_char__SWIG_2(swigCPtr, SWIGTYPE_p_RID.getCPtr(canvas_item), Vector2.getCPtr(pos), char_);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
