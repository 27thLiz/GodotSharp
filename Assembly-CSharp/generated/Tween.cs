/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Tween : Node {
  public static readonly int TWEEN_PROCESS_FIXED = 0;
  public static readonly int TWEEN_PROCESS_IDLE = 1;
  public static readonly int TRANS_LINEAR = 0;
  public static readonly int TRANS_SINE = 1;
  public static readonly int TRANS_QUINT = 2;
  public static readonly int TRANS_QUART = 3;
  public static readonly int TRANS_QUAD = 4;
  public static readonly int TRANS_EXPO = 5;
  public static readonly int TRANS_ELASTIC = 6;
  public static readonly int TRANS_CUBIC = 7;
  public static readonly int TRANS_CIRC = 8;
  public static readonly int TRANS_BOUNCE = 9;
  public static readonly int TRANS_BACK = 10;
  public static readonly int EASE_IN = 0;
  public static readonly int EASE_OUT = 1;
  public static readonly int EASE_IN_OUT = 2;
  public static readonly int EASE_OUT_IN = 3;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Tween(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Tween_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Tween(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Tween_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Tween obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public bool is_active() {
    bool ret = GodotEnginePINVOKE.Tween_is_active(swigCPtr);
    return ret;
  }

  public void set_active(bool active) {
    GodotEnginePINVOKE.Tween_set_active(swigCPtr, active);
  }

  public bool is_repeat() {
    bool ret = GodotEnginePINVOKE.Tween_is_repeat(swigCPtr);
    return ret;
  }

  public void set_repeat(bool repeat) {
    GodotEnginePINVOKE.Tween_set_repeat(swigCPtr, repeat);
  }

  public void set_speed(float speed) {
    GodotEnginePINVOKE.Tween_set_speed(swigCPtr, speed);
  }

  public float get_speed() {
    float ret = GodotEnginePINVOKE.Tween_get_speed(swigCPtr);
    return ret;
  }

  public void set_tween_process_mode(int mode) {
    GodotEnginePINVOKE.Tween_set_tween_process_mode(swigCPtr, mode);
  }

  public int get_tween_process_mode() {
    int ret = GodotEnginePINVOKE.Tween_get_tween_process_mode(swigCPtr);
    return ret;
  }

  public bool start() {
    bool ret = GodotEnginePINVOKE.Tween_start(swigCPtr);
    return ret;
  }

  public bool reset(Object arg0, string key) {
    bool ret = GodotEnginePINVOKE.Tween_reset(swigCPtr, Object.getCPtr(arg0), key);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool reset_all() {
    bool ret = GodotEnginePINVOKE.Tween_reset_all(swigCPtr);
    return ret;
  }

  public bool stop(Object arg0, string key) {
    bool ret = GodotEnginePINVOKE.Tween_stop(swigCPtr, Object.getCPtr(arg0), key);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool stop_all() {
    bool ret = GodotEnginePINVOKE.Tween_stop_all(swigCPtr);
    return ret;
  }

  public bool resume(Object arg0, string key) {
    bool ret = GodotEnginePINVOKE.Tween_resume(swigCPtr, Object.getCPtr(arg0), key);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool resume_all() {
    bool ret = GodotEnginePINVOKE.Tween_resume_all(swigCPtr);
    return ret;
  }

  public bool remove(Object arg0, string key) {
    bool ret = GodotEnginePINVOKE.Tween_remove(swigCPtr, Object.getCPtr(arg0), key);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool remove_all() {
    bool ret = GodotEnginePINVOKE.Tween_remove_all(swigCPtr);
    return ret;
  }

  public bool seek(float time) {
    bool ret = GodotEnginePINVOKE.Tween_seek(swigCPtr, time);
    return ret;
  }

  public float tell() {
    float ret = GodotEnginePINVOKE.Tween_tell(swigCPtr);
    return ret;
  }

  public float get_runtime() {
    float ret = GodotEnginePINVOKE.Tween_get_runtime(swigCPtr);
    return ret;
  }

  public bool interpolate_property(Object arg0, string property, Variant initial_val, Variant final_val, float times_in_sec, int trans_type, int ease_type, float delay) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_property__SWIG_0(swigCPtr, Object.getCPtr(arg0), property, Variant.getCPtr(initial_val), Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type, delay);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_property(Object arg0, string property, Variant initial_val, Variant final_val, float times_in_sec, int trans_type, int ease_type) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_property__SWIG_1(swigCPtr, Object.getCPtr(arg0), property, Variant.getCPtr(initial_val), Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_method(Object arg0, string method, Variant initial_val, Variant final_val, float times_in_sec, int trans_type, int ease_type, float delay) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_method__SWIG_0(swigCPtr, Object.getCPtr(arg0), method, Variant.getCPtr(initial_val), Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type, delay);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_method(Object arg0, string method, Variant initial_val, Variant final_val, float times_in_sec, int trans_type, int ease_type) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_method__SWIG_1(swigCPtr, Object.getCPtr(arg0), method, Variant.getCPtr(initial_val), Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_callback__SWIG_0(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_callback__SWIG_1(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_, Variant arg3_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_callback__SWIG_2(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_callback__SWIG_3(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_callback(Object arg0, float times_in_sec, string callback, Variant arg1_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_callback__SWIG_4(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_callback(Object arg0, float times_in_sec, string callback) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_callback__SWIG_5(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_deferred_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_, Variant arg5_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_deferred_callback__SWIG_0(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_), Variant.getCPtr(arg5_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_deferred_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_, Variant arg3_, Variant arg4_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_deferred_callback__SWIG_1(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_), Variant.getCPtr(arg4_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_deferred_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_, Variant arg3_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_deferred_callback__SWIG_2(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_), Variant.getCPtr(arg3_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_deferred_callback(Object arg0, float times_in_sec, string callback, Variant arg1_, Variant arg2_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_deferred_callback__SWIG_3(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_), Variant.getCPtr(arg2_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_deferred_callback(Object arg0, float times_in_sec, string callback, Variant arg1_) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_deferred_callback__SWIG_4(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback, Variant.getCPtr(arg1_));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool interpolate_deferred_callback(Object arg0, float times_in_sec, string callback) {
    bool ret = GodotEnginePINVOKE.Tween_interpolate_deferred_callback__SWIG_5(swigCPtr, Object.getCPtr(arg0), times_in_sec, callback);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool follow_property(Object arg0, string property, Variant initial_val, Object target, string target_property, float times_in_sec, int trans_type, int ease_type, float delay) {
    bool ret = GodotEnginePINVOKE.Tween_follow_property__SWIG_0(swigCPtr, Object.getCPtr(arg0), property, Variant.getCPtr(initial_val), Object.getCPtr(target), target_property, times_in_sec, trans_type, ease_type, delay);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool follow_property(Object arg0, string property, Variant initial_val, Object target, string target_property, float times_in_sec, int trans_type, int ease_type) {
    bool ret = GodotEnginePINVOKE.Tween_follow_property__SWIG_1(swigCPtr, Object.getCPtr(arg0), property, Variant.getCPtr(initial_val), Object.getCPtr(target), target_property, times_in_sec, trans_type, ease_type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool follow_method(Object arg0, string method, Variant initial_val, Object target, string target_method, float times_in_sec, int trans_type, int ease_type, float delay) {
    bool ret = GodotEnginePINVOKE.Tween_follow_method__SWIG_0(swigCPtr, Object.getCPtr(arg0), method, Variant.getCPtr(initial_val), Object.getCPtr(target), target_method, times_in_sec, trans_type, ease_type, delay);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool follow_method(Object arg0, string method, Variant initial_val, Object target, string target_method, float times_in_sec, int trans_type, int ease_type) {
    bool ret = GodotEnginePINVOKE.Tween_follow_method__SWIG_1(swigCPtr, Object.getCPtr(arg0), method, Variant.getCPtr(initial_val), Object.getCPtr(target), target_method, times_in_sec, trans_type, ease_type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool targeting_property(Object arg0, string property, Object initial, string initial_val, Variant final_val, float times_in_sec, int trans_type, int ease_type, float delay) {
    bool ret = GodotEnginePINVOKE.Tween_targeting_property__SWIG_0(swigCPtr, Object.getCPtr(arg0), property, Object.getCPtr(initial), initial_val, Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type, delay);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool targeting_property(Object arg0, string property, Object initial, string initial_val, Variant final_val, float times_in_sec, int trans_type, int ease_type) {
    bool ret = GodotEnginePINVOKE.Tween_targeting_property__SWIG_1(swigCPtr, Object.getCPtr(arg0), property, Object.getCPtr(initial), initial_val, Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool targeting_method(Object arg0, string method, Object initial, string initial_method, Variant final_val, float times_in_sec, int trans_type, int ease_type, float delay) {
    bool ret = GodotEnginePINVOKE.Tween_targeting_method__SWIG_0(swigCPtr, Object.getCPtr(arg0), method, Object.getCPtr(initial), initial_method, Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type, delay);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool targeting_method(Object arg0, string method, Object initial, string initial_method, Variant final_val, float times_in_sec, int trans_type, int ease_type) {
    bool ret = GodotEnginePINVOKE.Tween_targeting_method__SWIG_1(swigCPtr, Object.getCPtr(arg0), method, Object.getCPtr(initial), initial_method, Variant.getCPtr(final_val), times_in_sec, trans_type, ease_type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Tween() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Tween());
    }
  }

}

}
