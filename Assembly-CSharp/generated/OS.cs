/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class OS : Object {
  public static readonly int DAY_SUNDAY = 0;
  public static readonly int DAY_MONDAY = 1;
  public static readonly int DAY_TUESDAY = 2;
  public static readonly int DAY_WEDNESDAY = 3;
  public static readonly int DAY_THURSDAY = 4;
  public static readonly int DAY_FRIDAY = 5;
  public static readonly int DAY_SATURDAY = 6;
  public static readonly int MONTH_JANUARY = 1;
  public static readonly int MONTH_FEBRUARY = 2;
  public static readonly int MONTH_MARCH = 3;
  public static readonly int MONTH_APRIL = 4;
  public static readonly int MONTH_MAY = 5;
  public static readonly int MONTH_JUNE = 6;
  public static readonly int MONTH_JULY = 7;
  public static readonly int MONTH_AUGUST = 8;
  public static readonly int MONTH_SEPTEMBER = 9;
  public static readonly int MONTH_OCTOBER = 10;
  public static readonly int MONTH_NOVEMBER = 11;
  public static readonly int MONTH_DECEMBER = 12;
  public static readonly int SCREEN_ORIENTATION_LANDSCAPE = 0;
  public static readonly int SCREEN_ORIENTATION_PORTRAIT = 1;
  public static readonly int SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 2;
  public static readonly int SCREEN_ORIENTATION_REVERSE_PORTRAIT = 3;
  public static readonly int SCREEN_ORIENTATION_SENSOR_LANDSCAPE = 4;
  public static readonly int SCREEN_ORIENTATION_SENSOR_PORTRAIT = 5;
  public static readonly int SCREEN_ORIENTATION_SENSOR = 6;
  public static readonly int SYSTEM_DIR_DESKTOP = 0;
  public static readonly int SYSTEM_DIR_DCIM = 1;
  public static readonly int SYSTEM_DIR_DOCUMENTS = 2;
  public static readonly int SYSTEM_DIR_DOWNLOADS = 3;
  public static readonly int SYSTEM_DIR_MOVIES = 4;
  public static readonly int SYSTEM_DIR_MUSIC = 5;
  public static readonly int SYSTEM_DIR_PICTURES = 6;
  public static readonly int SYSTEM_DIR_RINGTONES = 7;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal OS(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.OS_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected OS(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.OS_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OS obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal OS() {}


  public void set_clipboard(string clipboard) {
    GodotEnginePINVOKE.OS_set_clipboard(swigCPtr, clipboard);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_clipboard() {
    string ret = GodotEnginePINVOKE.OS_get_clipboard(swigCPtr);
    return ret;
  }

  public void set_video_mode(Vector2 size, bool fullscreen, bool resizable, int screen) {
    GodotEnginePINVOKE.OS_set_video_mode__SWIG_0(swigCPtr, Vector2.getCPtr(size), fullscreen, resizable, screen);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_video_mode(Vector2 size, bool fullscreen, bool resizable) {
    GodotEnginePINVOKE.OS_set_video_mode__SWIG_1(swigCPtr, Vector2.getCPtr(size), fullscreen, resizable);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_video_mode_size(int screen) {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_video_mode_size__SWIG_0(swigCPtr, screen), true);
    return ret;
  }

  public Vector2 get_video_mode_size() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_video_mode_size__SWIG_1(swigCPtr), true);
    return ret;
  }

  public bool is_video_mode_fullscreen(int screen) {
    bool ret = GodotEnginePINVOKE.OS_is_video_mode_fullscreen__SWIG_0(swigCPtr, screen);
    return ret;
  }

  public bool is_video_mode_fullscreen() {
    bool ret = GodotEnginePINVOKE.OS_is_video_mode_fullscreen__SWIG_1(swigCPtr);
    return ret;
  }

  public bool is_video_mode_resizable(int screen) {
    bool ret = GodotEnginePINVOKE.OS_is_video_mode_resizable__SWIG_0(swigCPtr, screen);
    return ret;
  }

  public bool is_video_mode_resizable() {
    bool ret = GodotEnginePINVOKE.OS_is_video_mode_resizable__SWIG_1(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Array get_fullscreen_mode_list(int screen) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.OS_get_fullscreen_mode_list__SWIG_0(swigCPtr, screen), true);
    return ret;
  }

  public SWIGTYPE_p_Array get_fullscreen_mode_list() {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.OS_get_fullscreen_mode_list__SWIG_1(swigCPtr), true);
    return ret;
  }

  public int get_screen_count() {
    int ret = GodotEnginePINVOKE.OS_get_screen_count(swigCPtr);
    return ret;
  }

  public int get_current_screen() {
    int ret = GodotEnginePINVOKE.OS_get_current_screen(swigCPtr);
    return ret;
  }

  public void set_current_screen(int screen) {
    GodotEnginePINVOKE.OS_set_current_screen(swigCPtr, screen);
  }

  public Vector2 get_screen_position(int screen) {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_screen_position__SWIG_0(swigCPtr, screen), true);
    return ret;
  }

  public Vector2 get_screen_position() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_screen_position__SWIG_1(swigCPtr), true);
    return ret;
  }

  public Vector2 get_screen_size(int screen) {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_screen_size__SWIG_0(swigCPtr, screen), true);
    return ret;
  }

  public Vector2 get_screen_size() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_screen_size__SWIG_1(swigCPtr), true);
    return ret;
  }

  public int get_screen_dpi(int screen) {
    int ret = GodotEnginePINVOKE.OS_get_screen_dpi__SWIG_0(swigCPtr, screen);
    return ret;
  }

  public int get_screen_dpi() {
    int ret = GodotEnginePINVOKE.OS_get_screen_dpi__SWIG_1(swigCPtr);
    return ret;
  }

  public Vector2 get_window_position() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_window_position(swigCPtr), true);
    return ret;
  }

  public void set_window_position(Vector2 position) {
    GodotEnginePINVOKE.OS_set_window_position(swigCPtr, Vector2.getCPtr(position));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_window_size() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.OS_get_window_size(swigCPtr), true);
    return ret;
  }

  public void set_window_size(Vector2 size) {
    GodotEnginePINVOKE.OS_set_window_size(swigCPtr, Vector2.getCPtr(size));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_window_fullscreen(bool enabled) {
    GodotEnginePINVOKE.OS_set_window_fullscreen(swigCPtr, enabled);
  }

  public bool is_window_fullscreen() {
    bool ret = GodotEnginePINVOKE.OS_is_window_fullscreen(swigCPtr);
    return ret;
  }

  public void set_window_resizable(bool enabled) {
    GodotEnginePINVOKE.OS_set_window_resizable(swigCPtr, enabled);
  }

  public bool is_window_resizable() {
    bool ret = GodotEnginePINVOKE.OS_is_window_resizable(swigCPtr);
    return ret;
  }

  public void set_window_minimized(bool enabled) {
    GodotEnginePINVOKE.OS_set_window_minimized(swigCPtr, enabled);
  }

  public bool is_window_minimized() {
    bool ret = GodotEnginePINVOKE.OS_is_window_minimized(swigCPtr);
    return ret;
  }

  public void set_window_maximized(bool enabled) {
    GodotEnginePINVOKE.OS_set_window_maximized(swigCPtr, enabled);
  }

  public bool is_window_maximized() {
    bool ret = GodotEnginePINVOKE.OS_is_window_maximized(swigCPtr);
    return ret;
  }

  public void set_borderless_window(bool borderless) {
    GodotEnginePINVOKE.OS_set_borderless_window(swigCPtr, borderless);
  }

  public bool get_borderless_window() {
    bool ret = GodotEnginePINVOKE.OS_get_borderless_window(swigCPtr);
    return ret;
  }

  public void set_screen_orientation(int orientation) {
    GodotEnginePINVOKE.OS_set_screen_orientation(swigCPtr, orientation);
  }

  public int get_screen_orientation() {
    int ret = GodotEnginePINVOKE.OS_get_screen_orientation(swigCPtr);
    return ret;
  }

  public void set_keep_screen_on(bool enabled) {
    GodotEnginePINVOKE.OS_set_keep_screen_on(swigCPtr, enabled);
  }

  public bool is_keep_screen_on() {
    bool ret = GodotEnginePINVOKE.OS_is_keep_screen_on(swigCPtr);
    return ret;
  }

  public void set_iterations_per_second(int iterations_per_second) {
    GodotEnginePINVOKE.OS_set_iterations_per_second(swigCPtr, iterations_per_second);
  }

  public int get_iterations_per_second() {
    int ret = GodotEnginePINVOKE.OS_get_iterations_per_second(swigCPtr);
    return ret;
  }

  public void set_target_fps(int target_fps) {
    GodotEnginePINVOKE.OS_set_target_fps(swigCPtr, target_fps);
  }

  public float get_target_fps() {
    float ret = GodotEnginePINVOKE.OS_get_target_fps(swigCPtr);
    return ret;
  }

  public void set_time_scale(float time_scale) {
    GodotEnginePINVOKE.OS_set_time_scale(swigCPtr, time_scale);
  }

  public float get_time_scale() {
    float ret = GodotEnginePINVOKE.OS_get_time_scale(swigCPtr);
    return ret;
  }

  public bool has_touchscreen_ui_hint() {
    bool ret = GodotEnginePINVOKE.OS_has_touchscreen_ui_hint(swigCPtr);
    return ret;
  }

  public void set_window_title(string title) {
    GodotEnginePINVOKE.OS_set_window_title(swigCPtr, title);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_low_processor_usage_mode(bool enable) {
    GodotEnginePINVOKE.OS_set_low_processor_usage_mode(swigCPtr, enable);
  }

  public bool is_in_low_processor_usage_mode() {
    bool ret = GodotEnginePINVOKE.OS_is_in_low_processor_usage_mode(swigCPtr);
    return ret;
  }

  public int get_processor_count() {
    int ret = GodotEnginePINVOKE.OS_get_processor_count(swigCPtr);
    return ret;
  }

  public string get_executable_path() {
    string ret = GodotEnginePINVOKE.OS_get_executable_path(swigCPtr);
    return ret;
  }

  public int execute(string path, SWIGTYPE_p_StringArray arguments_, bool blocking, SWIGTYPE_p_Array output) {
    int ret = GodotEnginePINVOKE.OS_execute__SWIG_0(swigCPtr, path, SWIGTYPE_p_StringArray.getCPtr(arguments_), blocking, SWIGTYPE_p_Array.getCPtr(output));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int execute(string path, SWIGTYPE_p_StringArray arguments_, bool blocking) {
    int ret = GodotEnginePINVOKE.OS_execute__SWIG_1(swigCPtr, path, SWIGTYPE_p_StringArray.getCPtr(arguments_), blocking);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int kill(int pid) {
    int ret = GodotEnginePINVOKE.OS_kill(swigCPtr, pid);
    return ret;
  }

  public int shell_open(string uri) {
    int ret = GodotEnginePINVOKE.OS_shell_open(swigCPtr, uri);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_process_ID() {
    int ret = GodotEnginePINVOKE.OS_get_process_ID(swigCPtr);
    return ret;
  }

  public string get_environment(string environment) {
    string ret = GodotEnginePINVOKE.OS_get_environment(swigCPtr, environment);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool has_environment(string environment) {
    bool ret = GodotEnginePINVOKE.OS_has_environment(swigCPtr, environment);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_name() {
    string ret = GodotEnginePINVOKE.OS_get_name(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_StringArray get_cmdline_args() {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.OS_get_cmdline_args(swigCPtr), true);
    return ret;
  }

  public Object get_main_loop() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.OS_get_main_loop(swigCPtr);
    Object ret = InternalHelpers.GetManagedObjectFor(cPtr);
    if (ret == null) {
      ret = new Object(cPtr, false);
    }
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_datetime(bool utc) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_datetime__SWIG_0(swigCPtr, utc), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_datetime() {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_datetime__SWIG_1(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_date(bool utc) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_date__SWIG_0(swigCPtr, utc), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_date() {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_date__SWIG_1(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_time(bool utc) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_time__SWIG_0(swigCPtr, utc), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_time() {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_time__SWIG_1(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_time_zone_info() {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_time_zone_info(swigCPtr), true);
    return ret;
  }

  public int get_unix_time() {
    int ret = GodotEnginePINVOKE.OS_get_unix_time(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_datetime_from_unix_time(int unix_time_val) {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.OS_get_datetime_from_unix_time(swigCPtr, unix_time_val), true);
    return ret;
  }

  public int get_unix_time_from_datetime(SWIGTYPE_p_Dictionary datetime) {
    int ret = GodotEnginePINVOKE.OS_get_unix_time_from_datetime(swigCPtr, SWIGTYPE_p_Dictionary.getCPtr(datetime));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_system_time_secs() {
    int ret = GodotEnginePINVOKE.OS_get_system_time_secs(swigCPtr);
    return ret;
  }

  public void set_icon(SWIGTYPE_p_Image icon) {
    GodotEnginePINVOKE.OS_set_icon(swigCPtr, SWIGTYPE_p_Image.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void delay_usec(int usec) {
    GodotEnginePINVOKE.OS_delay_usec(swigCPtr, usec);
  }

  public void delay_msec(int msec) {
    GodotEnginePINVOKE.OS_delay_msec(swigCPtr, msec);
  }

  public int get_ticks_msec() {
    int ret = GodotEnginePINVOKE.OS_get_ticks_msec(swigCPtr);
    return ret;
  }

  public int get_splash_tick_msec() {
    int ret = GodotEnginePINVOKE.OS_get_splash_tick_msec(swigCPtr);
    return ret;
  }

  public string get_locale() {
    string ret = GodotEnginePINVOKE.OS_get_locale(swigCPtr);
    return ret;
  }

  public string get_model_name() {
    string ret = GodotEnginePINVOKE.OS_get_model_name(swigCPtr);
    return ret;
  }

  public string get_custom_level() {
    string ret = GodotEnginePINVOKE.OS_get_custom_level(swigCPtr);
    return ret;
  }

  public bool can_draw() {
    bool ret = GodotEnginePINVOKE.OS_can_draw(swigCPtr);
    return ret;
  }

  public int get_frames_drawn() {
    int ret = GodotEnginePINVOKE.OS_get_frames_drawn(swigCPtr);
    return ret;
  }

  public bool is_stdout_verbose() {
    bool ret = GodotEnginePINVOKE.OS_is_stdout_verbose(swigCPtr);
    return ret;
  }

  public bool can_use_threads() {
    bool ret = GodotEnginePINVOKE.OS_can_use_threads(swigCPtr);
    return ret;
  }

  public bool is_debug_build() {
    bool ret = GodotEnginePINVOKE.OS_is_debug_build(swigCPtr);
    return ret;
  }

  public void dump_memory_to_file(string file) {
    GodotEnginePINVOKE.OS_dump_memory_to_file(swigCPtr, file);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void dump_resources_to_file(string file) {
    GodotEnginePINVOKE.OS_dump_resources_to_file(swigCPtr, file);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void print_resources_in_use(bool short_) {
    GodotEnginePINVOKE.OS_print_resources_in_use__SWIG_0(swigCPtr, short_);
  }

  public void print_resources_in_use() {
    GodotEnginePINVOKE.OS_print_resources_in_use__SWIG_1(swigCPtr);
  }

  public void print_all_resources(string tofile) {
    GodotEnginePINVOKE.OS_print_all_resources__SWIG_0(swigCPtr, tofile);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void print_all_resources() {
    GodotEnginePINVOKE.OS_print_all_resources__SWIG_1(swigCPtr);
  }

  public int get_static_memory_usage() {
    int ret = GodotEnginePINVOKE.OS_get_static_memory_usage(swigCPtr);
    return ret;
  }

  public int get_static_memory_peak_usage() {
    int ret = GodotEnginePINVOKE.OS_get_static_memory_peak_usage(swigCPtr);
    return ret;
  }

  public int get_dynamic_memory_usage() {
    int ret = GodotEnginePINVOKE.OS_get_dynamic_memory_usage(swigCPtr);
    return ret;
  }

  public string get_data_dir() {
    string ret = GodotEnginePINVOKE.OS_get_data_dir(swigCPtr);
    return ret;
  }

  public string get_system_dir(int dir) {
    string ret = GodotEnginePINVOKE.OS_get_system_dir(swigCPtr, dir);
    return ret;
  }

  public string get_unique_ID() {
    string ret = GodotEnginePINVOKE.OS_get_unique_ID(swigCPtr);
    return ret;
  }

  public bool is_ok_left_and_cancel_right() {
    bool ret = GodotEnginePINVOKE.OS_is_ok_left_and_cancel_right(swigCPtr);
    return ret;
  }

  public float get_frames_per_second() {
    float ret = GodotEnginePINVOKE.OS_get_frames_per_second(swigCPtr);
    return ret;
  }

  public void print_all_textures_by_size() {
    GodotEnginePINVOKE.OS_print_all_textures_by_size(swigCPtr);
  }

  public void print_resources_by_type(SWIGTYPE_p_StringArray types) {
    GodotEnginePINVOKE.OS_print_resources_by_type(swigCPtr, SWIGTYPE_p_StringArray.getCPtr(types));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int native_video_play(string path, float volume, string audio_track, string subtitle_track) {
    int ret = GodotEnginePINVOKE.OS_native_video_play(swigCPtr, path, volume, audio_track, subtitle_track);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool native_video_is_playing() {
    bool ret = GodotEnginePINVOKE.OS_native_video_is_playing(swigCPtr);
    return ret;
  }

  public void native_video_stop() {
    GodotEnginePINVOKE.OS_native_video_stop(swigCPtr);
  }

  public void native_video_pause() {
    GodotEnginePINVOKE.OS_native_video_pause(swigCPtr);
  }

  public void native_video_unpause() {
    GodotEnginePINVOKE.OS_native_video_unpause(swigCPtr);
  }

  public string get_scancode_string(int code) {
    string ret = GodotEnginePINVOKE.OS_get_scancode_string(swigCPtr, code);
    return ret;
  }

  public bool is_scancode_unicode(int code) {
    bool ret = GodotEnginePINVOKE.OS_is_scancode_unicode(swigCPtr, code);
    return ret;
  }

  public int find_scancode_from_string(string arg0) {
    int ret = GodotEnginePINVOKE.OS_find_scancode_from_string(swigCPtr, arg0);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_use_file_access_save_and_swap(bool enabled) {
    GodotEnginePINVOKE.OS_set_use_file_access_save_and_swap(swigCPtr, enabled);
  }

  public void alert(string text, string title) {
    GodotEnginePINVOKE.OS_alert__SWIG_0(swigCPtr, text, title);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void alert(string text) {
    GodotEnginePINVOKE.OS_alert__SWIG_1(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public int set_thread_name(string name) {
    int ret = GodotEnginePINVOKE.OS_set_thread_name(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
