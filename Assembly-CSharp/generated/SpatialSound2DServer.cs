/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class SpatialSound2DServer : Object {
  private static SpatialSound2DServer instance;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal SpatialSound2DServer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.SpatialSound2DServer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected SpatialSound2DServer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.SpatialSound2DServer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpatialSound2DServer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static SpatialSound2DServer Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal SpatialSound2DServer() {}


  private static SpatialSound2DServer SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.SpatialSound2DServer_SingletonGetInstance();
    SpatialSound2DServer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SpatialSound2DServer(cPtr, false);
    return ret;
  }

}

}
