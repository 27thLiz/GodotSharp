/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Material : Resource {
  public static readonly int FLAG_VISIBLE = 0;
  public static readonly int FLAG_DOUBLE_SIDED = 1;
  public static readonly int FLAG_INVERT_FACES = 2;
  public static readonly int FLAG_UNSHADED = 3;
  public static readonly int FLAG_ONTOP = 4;
  public static readonly int FLAG_LIGHTMAP_ON_UV2 = 5;
  public static readonly int FLAG_COLOR_ARRAY_SRGB = 6;
  public static readonly int FLAG_MAX = 7;
  public static readonly int DEPTH_DRAW_ALWAYS = 0;
  public static readonly int DEPTH_DRAW_OPAQUE_ONLY = 1;
  public static readonly int DEPTH_DRAW_OPAQUE_PRE_PASS_ALPHA = 2;
  public static readonly int DEPTH_DRAW_NEVER = 3;
  public static readonly int BLEND_MODE_MIX = 0;
  public static readonly int BLEND_MODE_ADD = 1;
  public static readonly int BLEND_MODE_SUB = 2;
  public static readonly int BLEND_MODE_MUL = 3;
  public static readonly int BLEND_MODE_PREMULT_ALPHA = 4;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Material(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Material_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Material(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Material_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Material obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal Material() {}


  public void set_flag(int flag, bool enable) {
    GodotEnginePINVOKE.Material_set_flag(swigCPtr, flag, enable);
  }

  public bool get_flag(int flag) {
    bool ret = GodotEnginePINVOKE.Material_get_flag(swigCPtr, flag);
    return ret;
  }

  public void set_blend_mode(int mode) {
    GodotEnginePINVOKE.Material_set_blend_mode(swigCPtr, mode);
  }

  public int get_blend_mode() {
    int ret = GodotEnginePINVOKE.Material_get_blend_mode(swigCPtr);
    return ret;
  }

  public void set_line_width(float width) {
    GodotEnginePINVOKE.Material_set_line_width(swigCPtr, width);
  }

  public float get_line_width() {
    float ret = GodotEnginePINVOKE.Material_get_line_width(swigCPtr);
    return ret;
  }

  public void set_depth_draw_mode(int mode) {
    GodotEnginePINVOKE.Material_set_depth_draw_mode(swigCPtr, mode);
  }

  public int get_depth_draw_mode() {
    int ret = GodotEnginePINVOKE.Material_get_depth_draw_mode(swigCPtr);
    return ret;
  }

}

}
