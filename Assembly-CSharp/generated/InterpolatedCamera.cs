/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class InterpolatedCamera : Camera {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal InterpolatedCamera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.InterpolatedCamera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected InterpolatedCamera(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.InterpolatedCamera_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InterpolatedCamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_target_path(NodePath target_path) {
    GodotEnginePINVOKE.InterpolatedCamera_set_target_path(swigCPtr, NodePath.getCPtr(target_path));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodePath get_target_path() {
    NodePath ret = new NodePath(GodotEnginePINVOKE.InterpolatedCamera_get_target_path(swigCPtr), true);
    return ret;
  }

  public void set_target(Camera target) {
    GodotEnginePINVOKE.InterpolatedCamera_set_target(swigCPtr, Camera.getCPtr(target));
  }

  public void set_speed(float speed) {
    GodotEnginePINVOKE.InterpolatedCamera_set_speed(swigCPtr, speed);
  }

  public float get_speed() {
    float ret = GodotEnginePINVOKE.InterpolatedCamera_get_speed(swigCPtr);
    return ret;
  }

  public void set_interpolation_enabled(bool target_path) {
    GodotEnginePINVOKE.InterpolatedCamera_set_interpolation_enabled(swigCPtr, target_path);
  }

  public bool is_interpolation_enabled() {
    bool ret = GodotEnginePINVOKE.InterpolatedCamera_is_interpolation_enabled(swigCPtr);
    return ret;
  }

  public InterpolatedCamera() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_InterpolatedCamera());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
