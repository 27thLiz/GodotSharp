/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class GraphEdit : Control {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal GraphEdit(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.GraphEdit_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected GraphEdit(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.GraphEdit_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GraphEdit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int connect_node(string from, int from_port, string to, int to_port) {
    int ret = GodotEnginePINVOKE.GraphEdit_connect_node(swigCPtr, from, from_port, to, to_port);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool is_node_connected(string from, int from_port, string to, int to_port) {
    bool ret = GodotEnginePINVOKE.GraphEdit_is_node_connected(swigCPtr, from, from_port, to, to_port);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void disconnect_node(string from, int from_port, string to, int to_port) {
    GodotEnginePINVOKE.GraphEdit_disconnect_node(swigCPtr, from, from_port, to, to_port);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Array get_connection_list() {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.GraphEdit_get_connection_list(swigCPtr), true);
    return ret;
  }

  public Vector2 get_scroll_ofs() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.GraphEdit_get_scroll_ofs(swigCPtr), true);
    return ret;
  }

  public void set_zoom(float p_zoom) {
    GodotEnginePINVOKE.GraphEdit_set_zoom(swigCPtr, p_zoom);
  }

  public float get_zoom() {
    float ret = GodotEnginePINVOKE.GraphEdit_get_zoom(swigCPtr);
    return ret;
  }

  public void set_right_disconnects(bool enable) {
    GodotEnginePINVOKE.GraphEdit_set_right_disconnects(swigCPtr, enable);
  }

  public bool is_right_disconnects_enabled() {
    bool ret = GodotEnginePINVOKE.GraphEdit_is_right_disconnects_enabled(swigCPtr);
    return ret;
  }

  public GraphEdit() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_GraphEdit());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
