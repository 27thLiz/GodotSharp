/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Environment : Resource {
  public static readonly int BG_KEEP = 0;
  public static readonly int BG_DEFAULT_COLOR = 1;
  public static readonly int BG_COLOR = 2;
  public static readonly int BG_TEXTURE = 3;
  public static readonly int BG_CUBEMAP = 4;
  public static readonly int BG_CANVAS = 5;
  public static readonly int BG_MAX = 6;
  public static readonly int BG_PARAM_CANVAS_MAX_LAYER = 0;
  public static readonly int BG_PARAM_COLOR = 1;
  public static readonly int BG_PARAM_TEXTURE = 2;
  public static readonly int BG_PARAM_CUBEMAP = 3;
  public static readonly int BG_PARAM_ENERGY = 4;
  public static readonly int BG_PARAM_GLOW = 6;
  public static readonly int BG_PARAM_MAX = 7;
  public static readonly int FX_AMBIENT_LIGHT = 0;
  public static readonly int FX_FXAA = 1;
  public static readonly int FX_GLOW = 2;
  public static readonly int FX_DOF_BLUR = 3;
  public static readonly int FX_HDR = 4;
  public static readonly int FX_FOG = 5;
  public static readonly int FX_BCS = 6;
  public static readonly int FX_SRGB = 7;
  public static readonly int FX_MAX = 8;
  public static readonly int FX_BLUR_BLEND_MODE_ADDITIVE = 0;
  public static readonly int FX_BLUR_BLEND_MODE_SCREEN = 1;
  public static readonly int FX_BLUR_BLEND_MODE_SOFTLIGHT = 2;
  public static readonly int FX_HDR_TONE_MAPPER_LINEAR = 0;
  public static readonly int FX_HDR_TONE_MAPPER_LOG = 1;
  public static readonly int FX_HDR_TONE_MAPPER_REINHARDT = 2;
  public static readonly int FX_HDR_TONE_MAPPER_REINHARDT_AUTOWHITE = 3;
  public static readonly int FX_PARAM_AMBIENT_LIGHT_COLOR = 0;
  public static readonly int FX_PARAM_AMBIENT_LIGHT_ENERGY = 1;
  public static readonly int FX_PARAM_GLOW_BLUR_PASSES = 2;
  public static readonly int FX_PARAM_GLOW_BLUR_SCALE = 3;
  public static readonly int FX_PARAM_GLOW_BLUR_STRENGTH = 4;
  public static readonly int FX_PARAM_GLOW_BLUR_BLEND_MODE = 5;
  public static readonly int FX_PARAM_GLOW_BLOOM = 6;
  public static readonly int FX_PARAM_GLOW_BLOOM_TRESHOLD = 7;
  public static readonly int FX_PARAM_DOF_BLUR_PASSES = 8;
  public static readonly int FX_PARAM_DOF_BLUR_BEGIN = 9;
  public static readonly int FX_PARAM_DOF_BLUR_RANGE = 10;
  public static readonly int FX_PARAM_HDR_TONEMAPPER = 11;
  public static readonly int FX_PARAM_HDR_EXPOSURE = 12;
  public static readonly int FX_PARAM_HDR_WHITE = 13;
  public static readonly int FX_PARAM_HDR_GLOW_TRESHOLD = 14;
  public static readonly int FX_PARAM_HDR_GLOW_SCALE = 15;
  public static readonly int FX_PARAM_HDR_MIN_LUMINANCE = 16;
  public static readonly int FX_PARAM_HDR_MAX_LUMINANCE = 17;
  public static readonly int FX_PARAM_HDR_EXPOSURE_ADJUST_SPEED = 18;
  public static readonly int FX_PARAM_FOG_BEGIN = 19;
  public static readonly int FX_PARAM_FOG_ATTENUATION = 22;
  public static readonly int FX_PARAM_FOG_BEGIN_COLOR = 20;
  public static readonly int FX_PARAM_FOG_END_COLOR = 21;
  public static readonly int FX_PARAM_FOG_BG = 23;
  public static readonly int FX_PARAM_BCS_BRIGHTNESS = 24;
  public static readonly int FX_PARAM_BCS_CONTRAST = 25;
  public static readonly int FX_PARAM_BCS_SATURATION = 26;
  public static readonly int FX_PARAM_MAX = 27;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Environment(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Environment_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Environment(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Environment_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Environment obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_background(int bgmode) {
    GodotEnginePINVOKE.Environment_set_background(swigCPtr, bgmode);
  }

  public int get_background() {
    int ret = GodotEnginePINVOKE.Environment_get_background(swigCPtr);
    return ret;
  }

  public void set_background_param(int param, Variant value) {
    GodotEnginePINVOKE.Environment_set_background_param(swigCPtr, param, Variant.getCPtr(value));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void get_background_param(int param) {
    GodotEnginePINVOKE.Environment_get_background_param(swigCPtr, param);
  }

  public void set_enable_fx(int effect, bool enabled) {
    GodotEnginePINVOKE.Environment_set_enable_fx(swigCPtr, effect, enabled);
  }

  public bool is_fx_enabled(int effect) {
    bool ret = GodotEnginePINVOKE.Environment_is_fx_enabled(swigCPtr, effect);
    return ret;
  }

  public void fx_set_param(int param, Variant value) {
    GodotEnginePINVOKE.Environment_fx_set_param(swigCPtr, param, Variant.getCPtr(value));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void fx_get_param(int param) {
    GodotEnginePINVOKE.Environment_fx_get_param(swigCPtr, param);
  }

  public Environment() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Environment());
    }
  }

}

}
