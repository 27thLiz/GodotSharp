/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class EditorPlugin : Node {
  public static readonly int CONTAINER_TOOLBAR = 0;
  public static readonly int CONTAINER_SPATIAL_EDITOR_MENU = 1;
  public static readonly int CONTAINER_SPATIAL_EDITOR_SIDE = 2;
  public static readonly int CONTAINER_SPATIAL_EDITOR_BOTTOM = 3;
  public static readonly int CONTAINER_CANVAS_EDITOR_MENU = 4;
  public static readonly int CONTAINER_CANVAS_EDITOR_SIDE = 5;
  public static readonly int CONTAINER_PROPERTY_EDITOR_BOTTOM = 7;
  public static readonly int DOCK_SLOT_LEFT_UL = 0;
  public static readonly int DOCK_SLOT_LEFT_BL = 1;
  public static readonly int DOCK_SLOT_LEFT_UR = 2;
  public static readonly int DOCK_SLOT_LEFT_BR = 3;
  public static readonly int DOCK_SLOT_RIGHT_UL = 4;
  public static readonly int DOCK_SLOT_RIGHT_BL = 5;
  public static readonly int DOCK_SLOT_RIGHT_UR = 6;
  public static readonly int DOCK_SLOT_RIGHT_BR = 7;
  public static readonly int DOCK_SLOT_MAX = 8;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal EditorPlugin(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.EditorPlugin_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected EditorPlugin(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.EditorPlugin_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EditorPlugin obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void apply_changes() {
    GodotEnginePINVOKE.EditorPlugin_apply_changes(swigCPtr);
  }

  public void clear() {
    GodotEnginePINVOKE.EditorPlugin_clear(swigCPtr);
  }

  public SWIGTYPE_p_RefT_EditorSpatialGizmo_t create_spatial_gizmo(Spatial for_spatial) {
    SWIGTYPE_p_RefT_EditorSpatialGizmo_t ret = new SWIGTYPE_p_RefT_EditorSpatialGizmo_t(GodotEnginePINVOKE.EditorPlugin_create_spatial_gizmo(swigCPtr, Spatial.getCPtr(for_spatial)), true);
    return ret;
  }

  public void edit(Object arg0) {
    GodotEnginePINVOKE.EditorPlugin_edit(swigCPtr, Object.getCPtr(arg0));
  }

  public bool forward_input_event(SWIGTYPE_p_InputEvent arg0) {
    bool ret = GodotEnginePINVOKE.EditorPlugin_forward_input_event(swigCPtr, SWIGTYPE_p_InputEvent.getCPtr(arg0));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool forward_spatial_input_event(Camera camera, SWIGTYPE_p_InputEvent arg1) {
    bool ret = GodotEnginePINVOKE.EditorPlugin_forward_spatial_input_event(swigCPtr, Camera.getCPtr(camera), SWIGTYPE_p_InputEvent.getCPtr(arg1));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_StringArray get_breakpoints() {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.EditorPlugin_get_breakpoints(swigCPtr), true);
    return ret;
  }

  public new string get_name() {
    string ret = GodotEnginePINVOKE.EditorPlugin_get_name(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Dictionary get_state() {
    SWIGTYPE_p_Dictionary ret = new SWIGTYPE_p_Dictionary(GodotEnginePINVOKE.EditorPlugin_get_state(swigCPtr), true);
    return ret;
  }

  public bool handles(Object arg0) {
    bool ret = GodotEnginePINVOKE.EditorPlugin_handles(swigCPtr, Object.getCPtr(arg0));
    return ret;
  }

  public bool has_main_screen() {
    bool ret = GodotEnginePINVOKE.EditorPlugin_has_main_screen(swigCPtr);
    return ret;
  }

  public void make_visible(bool visible) {
    GodotEnginePINVOKE.EditorPlugin_make_visible(swigCPtr, visible);
  }

  public void set_state(SWIGTYPE_p_Dictionary state) {
    GodotEnginePINVOKE.EditorPlugin_set_state(swigCPtr, SWIGTYPE_p_Dictionary.getCPtr(state));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_control_to_container(int container, Control control) {
    GodotEnginePINVOKE.EditorPlugin_add_control_to_container(swigCPtr, container, Control.getCPtr(control));
  }

  public void add_control_to_bottom_panel(Control control, string title) {
    GodotEnginePINVOKE.EditorPlugin_add_control_to_bottom_panel(swigCPtr, Control.getCPtr(control), title);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_control_to_dock(int slot, Control control) {
    GodotEnginePINVOKE.EditorPlugin_add_control_to_dock(swigCPtr, slot, Control.getCPtr(control));
  }

  public void remove_control_from_docks(Control control) {
    GodotEnginePINVOKE.EditorPlugin_remove_control_from_docks(swigCPtr, Control.getCPtr(control));
  }

  public void remove_control_from_bottom_panel(Control control) {
    GodotEnginePINVOKE.EditorPlugin_remove_control_from_bottom_panel(swigCPtr, Control.getCPtr(control));
  }

  public void add_custom_type(string type, string arg1, SWIGTYPE_p_RefT_Script_t script, SWIGTYPE_p_RefT_Texture_t icon) {
    GodotEnginePINVOKE.EditorPlugin_add_custom_type(swigCPtr, type, arg1, SWIGTYPE_p_RefT_Script_t.getCPtr(script), SWIGTYPE_p_RefT_Texture_t.getCPtr(icon));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_custom_type(string type) {
    GodotEnginePINVOKE.EditorPlugin_remove_custom_type(swigCPtr, type);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_import_plugin(SWIGTYPE_p_RefT_EditorImportPlugin_t plugin) {
    GodotEnginePINVOKE.EditorPlugin_add_import_plugin(swigCPtr, SWIGTYPE_p_RefT_EditorImportPlugin_t.getCPtr(plugin));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_import_plugin(SWIGTYPE_p_RefT_EditorImportPlugin_t plugin) {
    GodotEnginePINVOKE.EditorPlugin_remove_import_plugin(swigCPtr, SWIGTYPE_p_RefT_EditorImportPlugin_t.getCPtr(plugin));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_export_plugin(SWIGTYPE_p_RefT_EditorExportPlugin_t plugin) {
    GodotEnginePINVOKE.EditorPlugin_add_export_plugin(swigCPtr, SWIGTYPE_p_RefT_EditorExportPlugin_t.getCPtr(plugin));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void remove_export_plugin(SWIGTYPE_p_RefT_EditorExportPlugin_t plugin) {
    GodotEnginePINVOKE.EditorPlugin_remove_export_plugin(swigCPtr, SWIGTYPE_p_RefT_EditorExportPlugin_t.getCPtr(plugin));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Control get_base_control() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.EditorPlugin_get_base_control(swigCPtr);
    Control ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Control;
    if (ret == null) {
      ret = new Control(cPtr, false);
    }
    return ret;
  }

  public UndoRedo get_undo_redo() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.EditorPlugin_get_undo_redo(swigCPtr);
    UndoRedo ret = (cPtr == global::System.IntPtr.Zero) ? null : new UndoRedo(cPtr, false);
    return ret;
  }

  public EditorSelection get_selection() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.EditorPlugin_get_selection(swigCPtr);
    EditorSelection ret = (cPtr == global::System.IntPtr.Zero) ? null : new EditorSelection(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_RefT_EditorSettings_t get_editor_settings() {
    SWIGTYPE_p_RefT_EditorSettings_t ret = new SWIGTYPE_p_RefT_EditorSettings_t(GodotEnginePINVOKE.EditorPlugin_get_editor_settings(swigCPtr), true);
    return ret;
  }

  public EditorPlugin() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_EditorPlugin());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
