/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Quad : GeometryInstance {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Quad(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Quad_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Quad(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Quad_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Quad obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public Quad() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Quad());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void set_axis(int axis) {
    GodotEnginePINVOKE.Quad_set_axis(swigCPtr, axis);
  }

  public int get_axis() {
    int ret = GodotEnginePINVOKE.Quad_get_axis(swigCPtr);
    return ret;
  }

  public void set_size(Vector2 size) {
    GodotEnginePINVOKE.Quad_set_size(swigCPtr, ref size);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_size() {
    Vector2 ret = GodotEnginePINVOKE.Quad_get_size(swigCPtr);
    return ret;
}

  public void set_centered(bool centered) {
    GodotEnginePINVOKE.Quad_set_centered(swigCPtr, centered);
  }

  public bool is_centered() {
    bool ret = GodotEnginePINVOKE.Quad_is_centered(swigCPtr);
    return ret;
  }

  public void set_offset(Vector2 offset) {
    GodotEnginePINVOKE.Quad_set_offset(swigCPtr, ref offset);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_offset() {
    Vector2 ret = GodotEnginePINVOKE.Quad_get_offset(swigCPtr);
    return ret;
}

}

}
