/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class StaticBody2D : PhysicsBody2D {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal StaticBody2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.StaticBody2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected StaticBody2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.StaticBody2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StaticBody2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_constant_linear_velocity(Vector2 vel) {
    GodotEnginePINVOKE.StaticBody2D_set_constant_linear_velocity(swigCPtr, ref vel);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_constant_angular_velocity(float vel) {
    GodotEnginePINVOKE.StaticBody2D_set_constant_angular_velocity(swigCPtr, vel);
  }

  public Vector2 get_constant_linear_velocity() {
    Vector2 ret = GodotEnginePINVOKE.StaticBody2D_get_constant_linear_velocity(swigCPtr);
    return ret;
}

  public float get_constant_angular_velocity() {
    float ret = GodotEnginePINVOKE.StaticBody2D_get_constant_angular_velocity(swigCPtr);
    return ret;
  }

  public void set_friction(float friction) {
    GodotEnginePINVOKE.StaticBody2D_set_friction(swigCPtr, friction);
  }

  public float get_friction() {
    float ret = GodotEnginePINVOKE.StaticBody2D_get_friction(swigCPtr);
    return ret;
  }

  public void set_bounce(float bounce) {
    GodotEnginePINVOKE.StaticBody2D_set_bounce(swigCPtr, bounce);
  }

  public float get_bounce() {
    float ret = GodotEnginePINVOKE.StaticBody2D_get_bounce(swigCPtr);
    return ret;
  }

  public StaticBody2D() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_StaticBody2D());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
