/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class AnimationPlayer : Node {
  public static readonly int ANIMATION_PROCESS_FIXED = 0;
  public static readonly int ANIMATION_PROCESS_IDLE = 1;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal AnimationPlayer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.AnimationPlayer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected AnimationPlayer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.AnimationPlayer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AnimationPlayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public int add_animation(string name, SWIGTYPE_p_RefT_Animation_t animation) {
    int ret = GodotEnginePINVOKE.AnimationPlayer_add_animation(swigCPtr, name, SWIGTYPE_p_RefT_Animation_t.getCPtr(animation));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void remove_animation(string name) {
    GodotEnginePINVOKE.AnimationPlayer_remove_animation(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void rename_animation(string name, string newname) {
    GodotEnginePINVOKE.AnimationPlayer_rename_animation(swigCPtr, name, newname);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool has_animation(string name) {
    bool ret = GodotEnginePINVOKE.AnimationPlayer_has_animation(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RefT_Animation_t get_animation(string name) {
    SWIGTYPE_p_RefT_Animation_t ret = new SWIGTYPE_p_RefT_Animation_t(GodotEnginePINVOKE.AnimationPlayer_get_animation(swigCPtr, name), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_StringArray get_animation_list() {
    SWIGTYPE_p_StringArray ret = new SWIGTYPE_p_StringArray(GodotEnginePINVOKE.AnimationPlayer_get_animation_list(swigCPtr), true);
    return ret;
  }

  public void animation_set_next(string anim_from, string anim_to) {
    GodotEnginePINVOKE.AnimationPlayer_animation_set_next(swigCPtr, anim_from, anim_to);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string animation_get_next(string anim_from) {
    string ret = GodotEnginePINVOKE.AnimationPlayer_animation_get_next(swigCPtr, anim_from);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_blend_time(string anim_from, string anim_to, float sec) {
    GodotEnginePINVOKE.AnimationPlayer_set_blend_time(swigCPtr, anim_from, anim_to, sec);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float get_blend_time(string anim_from, string anim_to) {
    float ret = GodotEnginePINVOKE.AnimationPlayer_get_blend_time(swigCPtr, anim_from, anim_to);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_default_blend_time(float sec) {
    GodotEnginePINVOKE.AnimationPlayer_set_default_blend_time(swigCPtr, sec);
  }

  public float get_default_blend_time() {
    float ret = GodotEnginePINVOKE.AnimationPlayer_get_default_blend_time(swigCPtr);
    return ret;
  }

  public void play(string name, float custom_blend, float custom_speed, bool from_end) {
    GodotEnginePINVOKE.AnimationPlayer_play__SWIG_0(swigCPtr, name, custom_blend, custom_speed, from_end);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play(string name, float custom_blend, float custom_speed) {
    GodotEnginePINVOKE.AnimationPlayer_play__SWIG_1(swigCPtr, name, custom_blend, custom_speed);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play(string name, float custom_blend) {
    GodotEnginePINVOKE.AnimationPlayer_play__SWIG_2(swigCPtr, name, custom_blend);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play(string name) {
    GodotEnginePINVOKE.AnimationPlayer_play__SWIG_3(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play() {
    GodotEnginePINVOKE.AnimationPlayer_play__SWIG_4(swigCPtr);
  }

  public void play_backwards(string name, float custom_blend) {
    GodotEnginePINVOKE.AnimationPlayer_play_backwards__SWIG_0(swigCPtr, name, custom_blend);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play_backwards(string name) {
    GodotEnginePINVOKE.AnimationPlayer_play_backwards__SWIG_1(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play_backwards() {
    GodotEnginePINVOKE.AnimationPlayer_play_backwards__SWIG_2(swigCPtr);
  }

  public void stop(bool reset) {
    GodotEnginePINVOKE.AnimationPlayer_stop__SWIG_0(swigCPtr, reset);
  }

  public void stop() {
    GodotEnginePINVOKE.AnimationPlayer_stop__SWIG_1(swigCPtr);
  }

  public void stop_all() {
    GodotEnginePINVOKE.AnimationPlayer_stop_all(swigCPtr);
  }

  public bool is_playing() {
    bool ret = GodotEnginePINVOKE.AnimationPlayer_is_playing(swigCPtr);
    return ret;
  }

  public void set_current_animation(string anim) {
    GodotEnginePINVOKE.AnimationPlayer_set_current_animation(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_current_animation() {
    string ret = GodotEnginePINVOKE.AnimationPlayer_get_current_animation(swigCPtr);
    return ret;
  }

  public void queue(string name) {
    GodotEnginePINVOKE.AnimationPlayer_queue(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear_queue() {
    GodotEnginePINVOKE.AnimationPlayer_clear_queue(swigCPtr);
  }

  public void set_active(bool active) {
    GodotEnginePINVOKE.AnimationPlayer_set_active(swigCPtr, active);
  }

  public bool is_active() {
    bool ret = GodotEnginePINVOKE.AnimationPlayer_is_active(swigCPtr);
    return ret;
  }

  public void set_speed(float speed) {
    GodotEnginePINVOKE.AnimationPlayer_set_speed(swigCPtr, speed);
  }

  public float get_speed() {
    float ret = GodotEnginePINVOKE.AnimationPlayer_get_speed(swigCPtr);
    return ret;
  }

  public void set_autoplay(string name) {
    GodotEnginePINVOKE.AnimationPlayer_set_autoplay(swigCPtr, name);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_autoplay() {
    string ret = GodotEnginePINVOKE.AnimationPlayer_get_autoplay(swigCPtr);
    return ret;
  }

  public void set_root(NodePath path) {
    GodotEnginePINVOKE.AnimationPlayer_set_root(swigCPtr, NodePath.getCPtr(path));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodePath get_root() {
    NodePath ret = new NodePath(GodotEnginePINVOKE.AnimationPlayer_get_root(swigCPtr), true);
    return ret;
  }

  public void seek(float pos_sec, bool update) {
    GodotEnginePINVOKE.AnimationPlayer_seek__SWIG_0(swigCPtr, pos_sec, update);
  }

  public void seek(float pos_sec) {
    GodotEnginePINVOKE.AnimationPlayer_seek__SWIG_1(swigCPtr, pos_sec);
  }

  public float get_pos() {
    float ret = GodotEnginePINVOKE.AnimationPlayer_get_pos(swigCPtr);
    return ret;
  }

  public string find_animation(SWIGTYPE_p_RefT_Animation_t animation) {
    string ret = GodotEnginePINVOKE.AnimationPlayer_find_animation(swigCPtr, SWIGTYPE_p_RefT_Animation_t.getCPtr(animation));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clear_caches() {
    GodotEnginePINVOKE.AnimationPlayer_clear_caches(swigCPtr);
  }

  public void set_animation_process_mode(int mode) {
    GodotEnginePINVOKE.AnimationPlayer_set_animation_process_mode(swigCPtr, mode);
  }

  public int get_animation_process_mode() {
    int ret = GodotEnginePINVOKE.AnimationPlayer_get_animation_process_mode(swigCPtr);
    return ret;
  }

  public float get_current_animation_pos() {
    float ret = GodotEnginePINVOKE.AnimationPlayer_get_current_animation_pos(swigCPtr);
    return ret;
  }

  public float get_current_animation_length() {
    float ret = GodotEnginePINVOKE.AnimationPlayer_get_current_animation_length(swigCPtr);
    return ret;
  }

  public void advance(float delta) {
    GodotEnginePINVOKE.AnimationPlayer_advance(swigCPtr, delta);
  }

  public AnimationPlayer() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_AnimationPlayer());
    }
  }

}

}
