/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Marshalls : Reference {
  private static Marshalls instance;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Marshalls(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Marshalls_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Marshalls(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Marshalls_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Marshalls obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Marshalls() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Marshalls(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static Marshalls Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal Marshalls() {}


  public string variant_to_base64(Variant variant) {
    string ret = GodotEnginePINVOKE.Marshalls_variant_to_base64(swigCPtr, Variant.getCPtr(variant));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Variant base64_to_variant(string base64_str) {
    Variant ret = new Variant(GodotEnginePINVOKE.Marshalls_base64_to_variant(swigCPtr, base64_str), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string raw_to_base64(SWIGTYPE_p_RawArray array) {
    string ret = GodotEnginePINVOKE.Marshalls_raw_to_base64(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(array));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RawArray base64_to_raw(string base64_str) {
    SWIGTYPE_p_RawArray ret = new SWIGTYPE_p_RawArray(GodotEnginePINVOKE.Marshalls_base64_to_raw(swigCPtr, base64_str), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string utf8_to_base64(string utf8_str) {
    string ret = GodotEnginePINVOKE.Marshalls_utf8_to_base64(swigCPtr, utf8_str);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string base64_to_utf8(string base64_str) {
    string ret = GodotEnginePINVOKE.Marshalls_base64_to_utf8(swigCPtr, base64_str);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private static Marshalls SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Marshalls_SingletonGetInstance();
    Marshalls ret = (cPtr == global::System.IntPtr.Zero) ? null : new Marshalls(cPtr, false);
    return ret;
  }

}

}
