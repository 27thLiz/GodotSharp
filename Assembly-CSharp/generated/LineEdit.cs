/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class LineEdit : Control {
  public static readonly int ALIGN_LEFT = 0;
  public static readonly int ALIGN_CENTER = 1;
  public static readonly int ALIGN_RIGHT = 2;
  public static readonly int ALIGN_FILL = 3;
  public static readonly int MENU_CUT = 0;
  public static readonly int MENU_COPY = 1;
  public static readonly int MENU_PASTE = 2;
  public static readonly int MENU_CLEAR = 3;
  public static readonly int MENU_SELECT_ALL = 4;
  public static readonly int MENU_UNDO = 5;
  public static readonly int MENU_MAX = 6;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal LineEdit(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.LineEdit_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected LineEdit(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.LineEdit_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LineEdit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_align(int align) {
    GodotEnginePINVOKE.LineEdit_set_align(swigCPtr, align);
  }

  public int get_align() {
    int ret = GodotEnginePINVOKE.LineEdit_get_align(swigCPtr);
    return ret;
  }

  public void clear() {
    GodotEnginePINVOKE.LineEdit_clear(swigCPtr);
  }

  public void select_all() {
    GodotEnginePINVOKE.LineEdit_select_all(swigCPtr);
  }

  public void set_text(string text) {
    GodotEnginePINVOKE.LineEdit_set_text(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_text() {
    string ret = GodotEnginePINVOKE.LineEdit_get_text(swigCPtr);
    return ret;
  }

  public void set_cursor_pos(int pos) {
    GodotEnginePINVOKE.LineEdit_set_cursor_pos(swigCPtr, pos);
  }

  public int get_cursor_pos() {
    int ret = GodotEnginePINVOKE.LineEdit_get_cursor_pos(swigCPtr);
    return ret;
  }

  public void set_max_length(int chars) {
    GodotEnginePINVOKE.LineEdit_set_max_length(swigCPtr, chars);
  }

  public int get_max_length() {
    int ret = GodotEnginePINVOKE.LineEdit_get_max_length(swigCPtr);
    return ret;
  }

  public void append_at_cursor(string text) {
    GodotEnginePINVOKE.LineEdit_append_at_cursor(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_editable(bool enabled) {
    GodotEnginePINVOKE.LineEdit_set_editable(swigCPtr, enabled);
  }

  public bool is_editable() {
    bool ret = GodotEnginePINVOKE.LineEdit_is_editable(swigCPtr);
    return ret;
  }

  public void set_secret(bool enabled) {
    GodotEnginePINVOKE.LineEdit_set_secret(swigCPtr, enabled);
  }

  public bool is_secret() {
    bool ret = GodotEnginePINVOKE.LineEdit_is_secret(swigCPtr);
    return ret;
  }

  public void select(int from, int to) {
    GodotEnginePINVOKE.LineEdit_select__SWIG_0(swigCPtr, from, to);
  }

  public void select(int from) {
    GodotEnginePINVOKE.LineEdit_select__SWIG_1(swigCPtr, from);
  }

  public void select() {
    GodotEnginePINVOKE.LineEdit_select__SWIG_2(swigCPtr);
  }

  public void menu_option(int option) {
    GodotEnginePINVOKE.LineEdit_menu_option(swigCPtr, option);
  }

  public PopupMenu get_menu() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.LineEdit_get_menu(swigCPtr);
    PopupMenu ret = (cPtr == global::System.IntPtr.Zero) ? null : new PopupMenu(cPtr, false);
    return ret;
  }

  public LineEdit() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_LineEdit());
    }
  }

}

}
