using System;
using System.Collections.Generic;

namespace GodotEngine
{
    /// <summary>
    /// Editor-only class. This is not present when running the game. It's used in the editor to properly edit and position collision shapes in [CollisionObject2D]. This is not accessible from regular code. This class is for editing custom shape polygons.
    /// </summary>
    public class CollisionPolygon2D : Node2D
    {
        private const string nativeName = "CollisionPolygon2D";

        public CollisionPolygon2D() : this(false)
        {
            if (ptr == IntPtr.Zero)
                ptr = NativeCalls.godot_icall_CollisionPolygon2D_Ctor(this);
        }

        internal CollisionPolygon2D(bool memoryOwn) : base(memoryOwn) {}

        ~CollisionPolygon2D()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this)
            {
                if (ptr != IntPtr.Zero)
                {
                    if (memoryOwn)
                    {
                        memoryOwn = false;
                        ptr = IntPtr.Zero;
                    }
                }

                GC.SuppressFinalize(this);
            }
        }

        private IntPtr method_bind_0 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "set_polygon");

        /// <summary>
        /// Set the array of points forming the polygon.
        /// When editing the point list via the editor, depending on [method get_build_mode], it has to be a list of points (for [code]build_mode==0[/code]), or a list of lines (for [code]build_mode==1[/code]). In the second case, the even elements of the array define the start point of the line, and the odd elements the end point.
        /// </summary>
        public void set_polygon(List<Vector2> polygon)
        {
            NativeCalls.godot_icall_1_156(method_bind_0, Object.GetPtr(this), polygon.ToArray());
        }

        private IntPtr method_bind_1 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "get_polygon");

        /// <summary>
        /// Return the list of points that define the polygon.
        /// </summary>
        public List<Vector2> get_polygon()
        {
            Vector2[] ret = NativeCalls.godot_icall_0_157(method_bind_1, Object.GetPtr(this));
            return new List<Vector2>(ret);
        }

        private IntPtr method_bind_2 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "set_build_mode");

        /// <summary>
        /// Set whether the polygon is to be a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).
        /// </summary>
        public void set_build_mode(int build_mode)
        {
            NativeCalls.godot_icall_1_4(method_bind_2, Object.GetPtr(this), build_mode);
        }

        private IntPtr method_bind_3 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "get_build_mode");

        /// <summary>
        /// Return whether the polygon is a [ConvexPolygonShape2D] ([code]build_mode==0[/code]), or a [ConcavePolygonShape2D] ([code]build_mode==1[/code]).
        /// </summary>
        public int get_build_mode()
        {
            return NativeCalls.godot_icall_0_0(method_bind_3, Object.GetPtr(this));
        }

        private IntPtr method_bind_4 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "set_trigger");

        /// <summary>
        /// Set whether this polygon is a trigger. A trigger polygon detects collisions, but is otherwise unaffected by physics (i.e. colliding objects will not get blocked).
        /// </summary>
        public void set_trigger(bool trigger)
        {
            NativeCalls.godot_icall_1_13(method_bind_4, Object.GetPtr(this), trigger);
        }

        private IntPtr method_bind_5 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "is_trigger");

        /// <summary>
        /// Return whether this polygon is a trigger.
        /// </summary>
        public bool is_trigger()
        {
            return NativeCalls.godot_icall_0_14(method_bind_5, Object.GetPtr(this));
        }

        private IntPtr method_bind_6 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "get_collision_object_first_shape");

        /// <summary>
        /// Return the index of the first shape generated by the editor.
        /// When [code]build_mode[/code] is set to generate convex polygons, the shape shown in the editor may be decomposed into many convex polygons. In that case, a range of indexes is needed to directly access the [Shape2D].
        /// When [code]build_mode[/code] is set to generate concave polygons, there is only one [Shape2D] generated, so the start index and the end index are the same.
        /// </summary>
        public int get_collision_object_first_shape()
        {
            return NativeCalls.godot_icall_0_0(method_bind_6, Object.GetPtr(this));
        }

        private IntPtr method_bind_7 = NativeCalls.godot_icall_TypeDB_get_method(nativeName, "get_collision_object_last_shape");

        /// <summary>
        /// Return the index of the last shape generated by the editor.
        /// </summary>
        public int get_collision_object_last_shape()
        {
            return NativeCalls.godot_icall_0_0(method_bind_7, Object.GetPtr(this));
        }
    }
}
