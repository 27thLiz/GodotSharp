/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class InputMap : Object {
  private static InputMap instance;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal InputMap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.InputMap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected InputMap(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.InputMap_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(InputMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static InputMap Instance {
    get {
      if (instance == null) {
        instance = SingletonGetInstance();
      }
      return instance;
    }
  }

  internal InputMap() {}


  public bool has_action(string action) {
    bool ret = GodotEnginePINVOKE.InputMap_has_action(swigCPtr, action);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_action_id(string action) {
    int ret = GodotEnginePINVOKE.InputMap_get_action_id(swigCPtr, action);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_action_from_id(int id) {
    string ret = GodotEnginePINVOKE.InputMap_get_action_from_id(swigCPtr, id);
    return ret;
  }

  public SWIGTYPE_p_Array get_actions() {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.InputMap_get_actions(swigCPtr), true);
    return ret;
  }

  public void add_action(string action) {
    GodotEnginePINVOKE.InputMap_add_action(swigCPtr, action);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void erase_action(string action) {
    GodotEnginePINVOKE.InputMap_erase_action(swigCPtr, action);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void action_add_event(string action, SWIGTYPE_p_InputEvent arg1) {
    GodotEnginePINVOKE.InputMap_action_add_event(swigCPtr, action, SWIGTYPE_p_InputEvent.getCPtr(arg1));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool action_has_event(string action, SWIGTYPE_p_InputEvent arg1) {
    bool ret = GodotEnginePINVOKE.InputMap_action_has_event(swigCPtr, action, SWIGTYPE_p_InputEvent.getCPtr(arg1));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void action_erase_event(string action, SWIGTYPE_p_InputEvent arg1) {
    GodotEnginePINVOKE.InputMap_action_erase_event(swigCPtr, action, SWIGTYPE_p_InputEvent.getCPtr(arg1));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Array get_action_list(string action) {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.InputMap_get_action_list(swigCPtr, action), true);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool event_is_action(SWIGTYPE_p_InputEvent arg0, string action) {
    bool ret = GodotEnginePINVOKE.InputMap_event_is_action(swigCPtr, SWIGTYPE_p_InputEvent.getCPtr(arg0), action);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void load_from_globals() {
    GodotEnginePINVOKE.InputMap_load_from_globals(swigCPtr);
  }

  private static InputMap SingletonGetInstance() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.InputMap_SingletonGetInstance();
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    InputMap ret = InternalHelpers.UnmanagedGetManaged(cPtr) as InputMap;
    return ret;
  }

}

}
