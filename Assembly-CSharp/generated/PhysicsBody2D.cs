/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PhysicsBody2D : CollisionObject2D {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PhysicsBody2D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PhysicsBody2D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PhysicsBody2D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PhysicsBody2D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsBody2D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal PhysicsBody2D() {}


  public void set_layer_mask(int mask) {
    GodotEnginePINVOKE.PhysicsBody2D_set_layer_mask(swigCPtr, mask);
  }

  public int get_layer_mask() {
    int ret = GodotEnginePINVOKE.PhysicsBody2D_get_layer_mask(swigCPtr);
    return ret;
  }

  public void set_collision_mask(int mask) {
    GodotEnginePINVOKE.PhysicsBody2D_set_collision_mask(swigCPtr, mask);
  }

  public int get_collision_mask() {
    int ret = GodotEnginePINVOKE.PhysicsBody2D_get_collision_mask(swigCPtr);
    return ret;
  }

  public void set_collision_mask_bit(int bit, bool value) {
    GodotEnginePINVOKE.PhysicsBody2D_set_collision_mask_bit(swigCPtr, bit, value);
  }

  public bool get_collision_mask_bit(int bit) {
    bool ret = GodotEnginePINVOKE.PhysicsBody2D_get_collision_mask_bit(swigCPtr, bit);
    return ret;
  }

  public void set_layer_mask_bit(int bit, bool value) {
    GodotEnginePINVOKE.PhysicsBody2D_set_layer_mask_bit(swigCPtr, bit, value);
  }

  public bool get_layer_mask_bit(int bit) {
    bool ret = GodotEnginePINVOKE.PhysicsBody2D_get_layer_mask_bit(swigCPtr, bit);
    return ret;
  }

  public void set_one_way_collision_direction(Vector2 dir) {
    GodotEnginePINVOKE.PhysicsBody2D_set_one_way_collision_direction(swigCPtr, Vector2.getCPtr(dir));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2 get_one_way_collision_direction() {
    Vector2 ret = new Vector2(GodotEnginePINVOKE.PhysicsBody2D_get_one_way_collision_direction(swigCPtr), true);
    return ret;
  }

  public void set_one_way_collision_max_depth(float depth) {
    GodotEnginePINVOKE.PhysicsBody2D_set_one_way_collision_max_depth(swigCPtr, depth);
  }

  public float get_one_way_collision_max_depth() {
    float ret = GodotEnginePINVOKE.PhysicsBody2D_get_one_way_collision_max_depth(swigCPtr);
    return ret;
  }

  public void add_collision_exception_with(PhysicsBody2D body) {
    GodotEnginePINVOKE.PhysicsBody2D_add_collision_exception_with(swigCPtr, PhysicsBody2D.getCPtr(body));
  }

  public void remove_collision_exception_with(PhysicsBody2D body) {
    GodotEnginePINVOKE.PhysicsBody2D_remove_collision_exception_with(swigCPtr, PhysicsBody2D.getCPtr(body));
  }

}

}
