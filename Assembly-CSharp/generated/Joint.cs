/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Joint : Spatial {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Joint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Joint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Joint(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Joint_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Joint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal Joint() {}


  public void set_node_a(NodePath node) {
    GodotEnginePINVOKE.Joint_set_node_a(swigCPtr, NodePath.getCPtr(node));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodePath get_node_a() {
    NodePath ret = new NodePath(GodotEnginePINVOKE.Joint_get_node_a(swigCPtr), true);
    return ret;
  }

  public void set_node_b(NodePath node) {
    GodotEnginePINVOKE.Joint_set_node_b(swigCPtr, NodePath.getCPtr(node));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodePath get_node_b() {
    NodePath ret = new NodePath(GodotEnginePINVOKE.Joint_get_node_b(swigCPtr), true);
    return ret;
  }

  public void set_solver_priority(int priority) {
    GodotEnginePINVOKE.Joint_set_solver_priority(swigCPtr, priority);
  }

  public int get_solver_priority() {
    int ret = GodotEnginePINVOKE.Joint_get_solver_priority(swigCPtr);
    return ret;
  }

  public void set_exclude_nodes_from_collision(bool enable) {
    GodotEnginePINVOKE.Joint_set_exclude_nodes_from_collision(swigCPtr, enable);
  }

  public bool get_exclude_nodes_from_collision() {
    bool ret = GodotEnginePINVOKE.Joint_get_exclude_nodes_from_collision(swigCPtr);
    return ret;
  }

}

}
