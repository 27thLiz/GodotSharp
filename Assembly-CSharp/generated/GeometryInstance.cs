/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class GeometryInstance : VisualInstance {
  public static readonly int FLAG_VISIBLE = 0;
  public static readonly int FLAG_CAST_SHADOW = 3;
  public static readonly int FLAG_RECEIVE_SHADOWS = 4;
  public static readonly int FLAG_BILLBOARD = 1;
  public static readonly int FLAG_BILLBOARD_FIX_Y = 2;
  public static readonly int FLAG_DEPH_SCALE = 5;
  public static readonly int FLAG_VISIBLE_IN_ALL_ROOMS = 6;
  public static readonly int FLAG_MAX = 8;
  public static readonly int SHADOW_CASTING_SETTING_OFF = 0;
  public static readonly int SHADOW_CASTING_SETTING_ON = 1;
  public static readonly int SHADOW_CASTING_SETTING_DOUBLE_SIDED = 2;
  public static readonly int SHADOW_CASTING_SETTING_SHADOWS_ONLY = 3;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal GeometryInstance(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.GeometryInstance_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected GeometryInstance(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.GeometryInstance_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GeometryInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal GeometryInstance() {}


  public void set_material_override(Object material) {
    GodotEnginePINVOKE.GeometryInstance_set_material_override(swigCPtr, Object.getCPtr(material));
  }

  public Object get_material_override() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.GeometryInstance_get_material_override(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
    	return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void set_flag(int flag, bool value) {
    GodotEnginePINVOKE.GeometryInstance_set_flag(swigCPtr, flag, value);
  }

  public bool get_flag(int flag) {
    bool ret = GodotEnginePINVOKE.GeometryInstance_get_flag(swigCPtr, flag);
    return ret;
  }

  public void set_cast_shadows_setting(int shadow_casting_setting) {
    GodotEnginePINVOKE.GeometryInstance_set_cast_shadows_setting(swigCPtr, shadow_casting_setting);
  }

  public int get_cast_shadows_setting() {
    int ret = GodotEnginePINVOKE.GeometryInstance_get_cast_shadows_setting(swigCPtr);
    return ret;
  }

  public void set_draw_range_begin(float mode) {
    GodotEnginePINVOKE.GeometryInstance_set_draw_range_begin(swigCPtr, mode);
  }

  public float get_draw_range_begin() {
    float ret = GodotEnginePINVOKE.GeometryInstance_get_draw_range_begin(swigCPtr);
    return ret;
  }

  public void set_draw_range_end(float mode) {
    GodotEnginePINVOKE.GeometryInstance_set_draw_range_end(swigCPtr, mode);
  }

  public float get_draw_range_end() {
    float ret = GodotEnginePINVOKE.GeometryInstance_get_draw_range_end(swigCPtr);
    return ret;
  }

  public void set_baked_light_texture_id(int id) {
    GodotEnginePINVOKE.GeometryInstance_set_baked_light_texture_id(swigCPtr, id);
  }

  public int get_baked_light_texture_id() {
    int ret = GodotEnginePINVOKE.GeometryInstance_get_baked_light_texture_id(swigCPtr);
    return ret;
  }

  public void set_extra_cull_margin(float margin) {
    GodotEnginePINVOKE.GeometryInstance_set_extra_cull_margin(swigCPtr, margin);
  }

  public float get_extra_cull_margin() {
    float ret = GodotEnginePINVOKE.GeometryInstance_get_extra_cull_margin(swigCPtr);
    return ret;
  }

}

}
