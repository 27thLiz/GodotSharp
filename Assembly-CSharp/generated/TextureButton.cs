/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class TextureButton : BaseButton {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal TextureButton(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.TextureButton_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected TextureButton(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.TextureButton_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureButton obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_normal_texture(Texture texture) {
    GodotEnginePINVOKE.TextureButton_set_normal_texture(swigCPtr, Texture.getCPtr(texture));
  }

  public void set_pressed_texture(Texture texture) {
    GodotEnginePINVOKE.TextureButton_set_pressed_texture(swigCPtr, Texture.getCPtr(texture));
  }

  public void set_hover_texture(Texture texture) {
    GodotEnginePINVOKE.TextureButton_set_hover_texture(swigCPtr, Texture.getCPtr(texture));
  }

  public void set_disabled_texture(Texture texture) {
    GodotEnginePINVOKE.TextureButton_set_disabled_texture(swigCPtr, Texture.getCPtr(texture));
  }

  public void set_focused_texture(Texture texture) {
    GodotEnginePINVOKE.TextureButton_set_focused_texture(swigCPtr, Texture.getCPtr(texture));
  }

  public void set_click_mask(BitMap mask) {
    GodotEnginePINVOKE.TextureButton_set_click_mask(swigCPtr, BitMap.getCPtr(mask));
  }

  public void set_texture_scale(Vector2 scale) {
    GodotEnginePINVOKE.TextureButton_set_texture_scale(swigCPtr, ref scale);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_modulate(SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.TextureButton_set_modulate(swigCPtr, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Texture get_normal_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureButton_get_normal_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    return ret;
}

  public Texture get_pressed_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureButton_get_pressed_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    return ret;
}

  public Texture get_hover_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureButton_get_hover_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    return ret;
}

  public Texture get_disabled_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureButton_get_disabled_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    return ret;
}

  public Texture get_focused_texture() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureButton_get_focused_texture(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    Texture ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Texture;
    return ret;
}

  public BitMap get_click_mask() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.TextureButton_get_click_mask(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
      return null;
    BitMap ret = InternalHelpers.UnmanagedGetManaged(cPtr) as BitMap;
    return ret;
}

  public Vector2 get_texture_scale() {
    Vector2 ret = GodotEnginePINVOKE.TextureButton_get_texture_scale(swigCPtr);
    return ret;
}

  public SWIGTYPE_p_Color get_modulate() {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.TextureButton_get_modulate(swigCPtr), true);
    return ret;
  }

  public TextureButton() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_TextureButton());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
