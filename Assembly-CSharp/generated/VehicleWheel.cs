/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class VehicleWheel : Spatial {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal VehicleWheel(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.VehicleWheel_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected VehicleWheel(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.VehicleWheel_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VehicleWheel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public VehicleWheel() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_VehicleWheel());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void set_radius(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_radius(swigCPtr, length);
  }

  public float get_radius() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_radius(swigCPtr);
    return ret;
  }

  public void set_suspension_rest_length(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_suspension_rest_length(swigCPtr, length);
  }

  public float get_suspension_rest_length() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_suspension_rest_length(swigCPtr);
    return ret;
  }

  public void set_suspension_travel(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_suspension_travel(swigCPtr, length);
  }

  public float get_suspension_travel() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_suspension_travel(swigCPtr);
    return ret;
  }

  public void set_suspension_stiffness(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_suspension_stiffness(swigCPtr, length);
  }

  public float get_suspension_stiffness() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_suspension_stiffness(swigCPtr);
    return ret;
  }

  public void set_suspension_max_force(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_suspension_max_force(swigCPtr, length);
  }

  public float get_suspension_max_force() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_suspension_max_force(swigCPtr);
    return ret;
  }

  public void set_damping_compression(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_damping_compression(swigCPtr, length);
  }

  public float get_damping_compression() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_damping_compression(swigCPtr);
    return ret;
  }

  public void set_damping_relaxation(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_damping_relaxation(swigCPtr, length);
  }

  public float get_damping_relaxation() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_damping_relaxation(swigCPtr);
    return ret;
  }

  public void set_use_as_traction(bool enable) {
    GodotEnginePINVOKE.VehicleWheel_set_use_as_traction(swigCPtr, enable);
  }

  public bool is_used_as_traction() {
    bool ret = GodotEnginePINVOKE.VehicleWheel_is_used_as_traction(swigCPtr);
    return ret;
  }

  public void set_use_as_steering(bool enable) {
    GodotEnginePINVOKE.VehicleWheel_set_use_as_steering(swigCPtr, enable);
  }

  public bool is_used_as_steering() {
    bool ret = GodotEnginePINVOKE.VehicleWheel_is_used_as_steering(swigCPtr);
    return ret;
  }

  public void set_friction_slip(float length) {
    GodotEnginePINVOKE.VehicleWheel_set_friction_slip(swigCPtr, length);
  }

  public float get_friction_slip() {
    float ret = GodotEnginePINVOKE.VehicleWheel_get_friction_slip(swigCPtr);
    return ret;
  }

}

}
