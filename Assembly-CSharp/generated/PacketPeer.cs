/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PacketPeer : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PacketPeer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PacketPeer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PacketPeer(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PacketPeer_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PacketPeer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PacketPeer() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_PacketPeer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  internal PacketPeer() {}


  public Variant get_var() {
    Variant ret = new Variant(GodotEnginePINVOKE.PacketPeer_get_var(swigCPtr), true);
    return ret;
  }

  public int put_var(Variant var) {
    int ret = GodotEnginePINVOKE.PacketPeer_put_var(swigCPtr, Variant.getCPtr(var));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_RawArray get_packet() {
    SWIGTYPE_p_RawArray ret = new SWIGTYPE_p_RawArray(GodotEnginePINVOKE.PacketPeer_get_packet(swigCPtr), true);
    return ret;
  }

  public int put_packet(SWIGTYPE_p_RawArray buffer) {
    int ret = GodotEnginePINVOKE.PacketPeer_put_packet(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(buffer));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int get_packet_error() {
    int ret = GodotEnginePINVOKE.PacketPeer_get_packet_error(swigCPtr);
    return ret;
  }

  public int get_available_packet_count() {
    int ret = GodotEnginePINVOKE.PacketPeer_get_available_packet_count(swigCPtr);
    return ret;
  }

}

}
