/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class BackBufferCopy : Node2D {
  public static readonly int COPY_MODE_DISABLED = 0;
  public static readonly int COPY_MODE_RECT = 1;
  public static readonly int COPY_MODE_VIEWPORT = 2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal BackBufferCopy(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.BackBufferCopy_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected BackBufferCopy(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.BackBufferCopy_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BackBufferCopy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_rect(SWIGTYPE_p_Rect2 rect) {
    GodotEnginePINVOKE.BackBufferCopy_set_rect(swigCPtr, SWIGTYPE_p_Rect2.getCPtr(rect));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Rect2 get_rect() {
    SWIGTYPE_p_Rect2 ret = new SWIGTYPE_p_Rect2(GodotEnginePINVOKE.BackBufferCopy_get_rect(swigCPtr), true);
    return ret;
  }

  public void set_copy_mode(int copy_mode) {
    GodotEnginePINVOKE.BackBufferCopy_set_copy_mode(swigCPtr, copy_mode);
  }

  public int get_copy_mode() {
    int ret = GodotEnginePINVOKE.BackBufferCopy_get_copy_mode(swigCPtr);
    return ret;
  }

  public BackBufferCopy() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_BackBufferCopy());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
