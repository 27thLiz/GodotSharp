/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Sample : Resource {
  public static readonly int FORMAT_PCM8 = 0;
  public static readonly int FORMAT_PCM16 = 1;
  public static readonly int FORMAT_IMA_ADPCM = 2;
  public static readonly int LOOP_NONE = 0;
  public static readonly int LOOP_FORWARD = 1;
  public static readonly int LOOP_PING_PONG = 2;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Sample(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Sample_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Sample(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Sample_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Sample obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Sample() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Sample(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public Sample() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Sample());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

  public void create(int format, bool stereo, int length) {
    GodotEnginePINVOKE.Sample_create(swigCPtr, format, stereo, length);
  }

  public int get_format() {
    int ret = GodotEnginePINVOKE.Sample_get_format(swigCPtr);
    return ret;
  }

  public bool is_stereo() {
    bool ret = GodotEnginePINVOKE.Sample_is_stereo(swigCPtr);
    return ret;
  }

  public int get_length() {
    int ret = GodotEnginePINVOKE.Sample_get_length(swigCPtr);
    return ret;
  }

  public void set_data(SWIGTYPE_p_RawArray data) {
    GodotEnginePINVOKE.Sample_set_data(swigCPtr, SWIGTYPE_p_RawArray.getCPtr(data));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RawArray get_data() {
    SWIGTYPE_p_RawArray ret = new SWIGTYPE_p_RawArray(GodotEnginePINVOKE.Sample_get_data(swigCPtr), true);
    return ret;
  }

  public void set_mix_rate(int hz) {
    GodotEnginePINVOKE.Sample_set_mix_rate(swigCPtr, hz);
  }

  public int get_mix_rate() {
    int ret = GodotEnginePINVOKE.Sample_get_mix_rate(swigCPtr);
    return ret;
  }

  public void set_loop_format(int format) {
    GodotEnginePINVOKE.Sample_set_loop_format(swigCPtr, format);
  }

  public int get_loop_format() {
    int ret = GodotEnginePINVOKE.Sample_get_loop_format(swigCPtr);
    return ret;
  }

  public void set_loop_begin(int pos) {
    GodotEnginePINVOKE.Sample_set_loop_begin(swigCPtr, pos);
  }

  public int get_loop_begin() {
    int ret = GodotEnginePINVOKE.Sample_get_loop_begin(swigCPtr);
    return ret;
  }

  public void set_loop_end(int pos) {
    GodotEnginePINVOKE.Sample_set_loop_end(swigCPtr, pos);
  }

  public int get_loop_end() {
    int ret = GodotEnginePINVOKE.Sample_get_loop_end(swigCPtr);
    return ret;
  }

}

}
