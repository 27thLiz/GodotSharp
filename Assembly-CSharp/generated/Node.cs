/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Node : Object {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Node(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Node_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  new internal void internal_init(global::System.IntPtr cPtr, bool cMemoryOwn) {
    base.internal_init(GodotEnginePINVOKE.Node_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Node obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Node() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GodotEnginePINVOKE.delete_Node(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Node get_node(string node) {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.Node_get_node(swigCPtr, node);
    Node ret = InternalHelpers.GetManagedObjectFor(cPtr) as Node;
    if (ret == null) {
      ret = new Node(cPtr, false);
    }
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_process(bool p_process) {
    GodotEnginePINVOKE.Node_set_process(swigCPtr, p_process);
  }

  public Node() {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Node(), false);
    }
  }

}

}
