/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class PhysicsShapeQueryParameters : Reference {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal PhysicsShapeQueryParameters(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.PhysicsShapeQueryParameters_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected PhysicsShapeQueryParameters(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.PhysicsShapeQueryParameters_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsShapeQueryParameters obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_shape(SWIGTYPE_p_RefT_Shape_t shape) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_shape(swigCPtr, SWIGTYPE_p_RefT_Shape_t.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_shape_rid(SWIGTYPE_p_RID shape) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_shape_rid(swigCPtr, SWIGTYPE_p_RID.getCPtr(shape));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RID get_shape_rid() {
    SWIGTYPE_p_RID ret = new SWIGTYPE_p_RID(GodotEnginePINVOKE.PhysicsShapeQueryParameters_get_shape_rid(swigCPtr), true);
    return ret;
  }

  public void set_transform(SWIGTYPE_p_Transform transform) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_transform(swigCPtr, SWIGTYPE_p_Transform.getCPtr(transform));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Transform get_transform() {
    SWIGTYPE_p_Transform ret = new SWIGTYPE_p_Transform(GodotEnginePINVOKE.PhysicsShapeQueryParameters_get_transform(swigCPtr), true);
    return ret;
  }

  public void set_margin(float margin) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_margin(swigCPtr, margin);
  }

  public float get_margin() {
    float ret = GodotEnginePINVOKE.PhysicsShapeQueryParameters_get_margin(swigCPtr);
    return ret;
  }

  public void set_layer_mask(int layer_mask) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_layer_mask(swigCPtr, layer_mask);
  }

  public int get_layer_mask() {
    int ret = GodotEnginePINVOKE.PhysicsShapeQueryParameters_get_layer_mask(swigCPtr);
    return ret;
  }

  public void set_object_type_mask(int object_type_mask) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_object_type_mask(swigCPtr, object_type_mask);
  }

  public int get_object_type_mask() {
    int ret = GodotEnginePINVOKE.PhysicsShapeQueryParameters_get_object_type_mask(swigCPtr);
    return ret;
  }

  public void set_exclude(SWIGTYPE_p_Array exclude) {
    GodotEnginePINVOKE.PhysicsShapeQueryParameters_set_exclude(swigCPtr, SWIGTYPE_p_Array.getCPtr(exclude));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Array get_exclude() {
    SWIGTYPE_p_Array ret = new SWIGTYPE_p_Array(GodotEnginePINVOKE.PhysicsShapeQueryParameters_get_exclude(swigCPtr), true);
    return ret;
  }

  public PhysicsShapeQueryParameters() : this(true) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_PhysicsShapeQueryParameters());
    }
  }

}

}
