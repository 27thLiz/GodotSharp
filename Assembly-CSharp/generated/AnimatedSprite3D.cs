/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class AnimatedSprite3D : SpriteBase3D {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal AnimatedSprite3D(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.AnimatedSprite3D_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected AnimatedSprite3D(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.AnimatedSprite3D_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AnimatedSprite3D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_sprite_frames(SWIGTYPE_p_RefT_SpriteFrames_t sprite_frames) {
    GodotEnginePINVOKE.AnimatedSprite3D_set_sprite_frames(swigCPtr, SWIGTYPE_p_RefT_SpriteFrames_t.getCPtr(sprite_frames));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_RefT_SpriteFrames_t get_sprite_frames() {
    SWIGTYPE_p_RefT_SpriteFrames_t ret = new SWIGTYPE_p_RefT_SpriteFrames_t(GodotEnginePINVOKE.AnimatedSprite3D_get_sprite_frames(swigCPtr), true);
    return ret;
  }

  public void set_animation(string animation) {
    GodotEnginePINVOKE.AnimatedSprite3D_set_animation(swigCPtr, animation);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_animation() {
    string ret = GodotEnginePINVOKE.AnimatedSprite3D_get_animation(swigCPtr);
    return ret;
  }

  public void play(string anim) {
    GodotEnginePINVOKE.AnimatedSprite3D_play__SWIG_0(swigCPtr, anim);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void play() {
    GodotEnginePINVOKE.AnimatedSprite3D_play__SWIG_1(swigCPtr);
  }

  public void stop() {
    GodotEnginePINVOKE.AnimatedSprite3D_stop(swigCPtr);
  }

  public bool is_playing() {
    bool ret = GodotEnginePINVOKE.AnimatedSprite3D_is_playing(swigCPtr);
    return ret;
  }

  public void set_frame(int frame) {
    GodotEnginePINVOKE.AnimatedSprite3D_set_frame(swigCPtr, frame);
  }

  public int get_frame() {
    int ret = GodotEnginePINVOKE.AnimatedSprite3D_get_frame(swigCPtr);
    return ret;
  }

  public AnimatedSprite3D() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_AnimatedSprite3D());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
