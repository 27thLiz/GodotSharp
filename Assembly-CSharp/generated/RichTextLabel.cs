/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class RichTextLabel : Control {
  public static readonly int ALIGN_LEFT = 0;
  public static readonly int ALIGN_CENTER = 1;
  public static readonly int ALIGN_RIGHT = 2;
  public static readonly int ALIGN_FILL = 3;
  public static readonly int LIST_NUMBERS = 0;
  public static readonly int LIST_LETTERS = 1;
  public static readonly int LIST_DOTS = 2;
  public static readonly int ITEM_FRAME = 0;
  public static readonly int ITEM_TEXT = 1;
  public static readonly int ITEM_IMAGE = 2;
  public static readonly int ITEM_NEWLINE = 3;
  public static readonly int ITEM_FONT = 4;
  public static readonly int ITEM_COLOR = 5;
  public static readonly int ITEM_UNDERLINE = 6;
  public static readonly int ITEM_ALIGN = 7;
  public static readonly int ITEM_INDENT = 8;
  public static readonly int ITEM_LIST = 9;
  public static readonly int ITEM_META = 11;

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal RichTextLabel(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.RichTextLabel_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected RichTextLabel(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.RichTextLabel_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RichTextLabel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void add_text(string text) {
    GodotEnginePINVOKE.RichTextLabel_add_text(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_image(SWIGTYPE_p_RefT_Texture_t image) {
    GodotEnginePINVOKE.RichTextLabel_add_image(swigCPtr, SWIGTYPE_p_RefT_Texture_t.getCPtr(image));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void newline() {
    GodotEnginePINVOKE.RichTextLabel_newline(swigCPtr);
  }

  public void push_font(Object font) {
    GodotEnginePINVOKE.RichTextLabel_push_font(swigCPtr, Object.getCPtr(font));
  }

  public void push_color(SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.RichTextLabel_push_color(swigCPtr, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void push_align(int align) {
    GodotEnginePINVOKE.RichTextLabel_push_align(swigCPtr, align);
  }

  public void push_indent(int level) {
    GodotEnginePINVOKE.RichTextLabel_push_indent(swigCPtr, level);
  }

  public void push_list(int type) {
    GodotEnginePINVOKE.RichTextLabel_push_list(swigCPtr, type);
  }

  public void push_meta(Variant data) {
    GodotEnginePINVOKE.RichTextLabel_push_meta(swigCPtr, Variant.getCPtr(data));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void push_underline() {
    GodotEnginePINVOKE.RichTextLabel_push_underline(swigCPtr);
  }

  public void push_table(int columns) {
    GodotEnginePINVOKE.RichTextLabel_push_table(swigCPtr, columns);
  }

  public void set_table_column_expand(int column, bool expand, int ratio) {
    GodotEnginePINVOKE.RichTextLabel_set_table_column_expand(swigCPtr, column, expand, ratio);
  }

  public void push_cell() {
    GodotEnginePINVOKE.RichTextLabel_push_cell(swigCPtr);
  }

  public void pop() {
    GodotEnginePINVOKE.RichTextLabel_pop(swigCPtr);
  }

  public void clear() {
    GodotEnginePINVOKE.RichTextLabel_clear(swigCPtr);
  }

  public void set_meta_underline(bool enable) {
    GodotEnginePINVOKE.RichTextLabel_set_meta_underline(swigCPtr, enable);
  }

  public bool is_meta_underlined() {
    bool ret = GodotEnginePINVOKE.RichTextLabel_is_meta_underlined(swigCPtr);
    return ret;
  }

  public void set_scroll_active(bool active) {
    GodotEnginePINVOKE.RichTextLabel_set_scroll_active(swigCPtr, active);
  }

  public bool is_scroll_active() {
    bool ret = GodotEnginePINVOKE.RichTextLabel_is_scroll_active(swigCPtr);
    return ret;
  }

  public void set_scroll_follow(bool follow) {
    GodotEnginePINVOKE.RichTextLabel_set_scroll_follow(swigCPtr, follow);
  }

  public bool is_scroll_following() {
    bool ret = GodotEnginePINVOKE.RichTextLabel_is_scroll_following(swigCPtr);
    return ret;
  }

  public Object get_v_scroll() {
    global::System.IntPtr cPtr = GodotEnginePINVOKE.RichTextLabel_get_v_scroll(swigCPtr);
    if (cPtr == global::System.IntPtr.Zero)
    	return null;
    Object ret = InternalHelpers.UnmanagedGetManaged(cPtr) as Object;
    return ret;
  }

  public void scroll_to_line(int line) {
    GodotEnginePINVOKE.RichTextLabel_scroll_to_line(swigCPtr, line);
  }

  public void set_tab_size(int spaces) {
    GodotEnginePINVOKE.RichTextLabel_set_tab_size(swigCPtr, spaces);
  }

  public int get_tab_size() {
    int ret = GodotEnginePINVOKE.RichTextLabel_get_tab_size(swigCPtr);
    return ret;
  }

  public void set_selection_enabled(bool enabled) {
    GodotEnginePINVOKE.RichTextLabel_set_selection_enabled(swigCPtr, enabled);
  }

  public bool is_selection_enabled() {
    bool ret = GodotEnginePINVOKE.RichTextLabel_is_selection_enabled(swigCPtr);
    return ret;
  }

  public int parse_bbcode(string bbcode) {
    int ret = GodotEnginePINVOKE.RichTextLabel_parse_bbcode(swigCPtr, bbcode);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int append_bbcode(string bbcode) {
    int ret = GodotEnginePINVOKE.RichTextLabel_append_bbcode(swigCPtr, bbcode);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_bbcode(string text) {
    GodotEnginePINVOKE.RichTextLabel_set_bbcode(swigCPtr, text);
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public string get_bbcode() {
    string ret = GodotEnginePINVOKE.RichTextLabel_get_bbcode(swigCPtr);
    return ret;
  }

  public void set_visible_characters(int amount) {
    GodotEnginePINVOKE.RichTextLabel_set_visible_characters(swigCPtr, amount);
  }

  public int get_visible_characters() {
    int ret = GodotEnginePINVOKE.RichTextLabel_get_visible_characters(swigCPtr);
    return ret;
  }

  public int get_total_character_count() {
    int ret = GodotEnginePINVOKE.RichTextLabel_get_total_character_count(swigCPtr);
    return ret;
  }

  public void set_use_bbcode(bool enable) {
    GodotEnginePINVOKE.RichTextLabel_set_use_bbcode(swigCPtr, enable);
  }

  public bool is_using_bbcode() {
    bool ret = GodotEnginePINVOKE.RichTextLabel_is_using_bbcode(swigCPtr);
    return ret;
  }

  public RichTextLabel() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_RichTextLabel());
      InternalHelpers.TieManagedToUnmanaged(this, swigCPtr.Handle);
    }
  }

}

}
