/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace GodotEngine {

public class Portal : VisualInstance {

  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
  internal Portal(global::System.IntPtr cPtr, bool cMemoryOwn) : base(GodotEnginePINVOKE.Portal_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }  
  
  protected Portal(bool cMemoryOwn) : base(cMemoryOwn) {}
  
  new internal void internal_init(global::System.IntPtr cPtr) {
    base.internal_init(GodotEnginePINVOKE.Portal_SWIGUpcast(cPtr));
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }
  
  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Portal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }



  public void set_shape(SWIGTYPE_p_Vector2Array points) {
    GodotEnginePINVOKE.Portal_set_shape(swigCPtr, SWIGTYPE_p_Vector2Array.getCPtr(points));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector2Array get_shape() {
    SWIGTYPE_p_Vector2Array ret = new SWIGTYPE_p_Vector2Array(GodotEnginePINVOKE.Portal_get_shape(swigCPtr), true);
    return ret;
  }

  public void set_enabled(bool enable) {
    GodotEnginePINVOKE.Portal_set_enabled(swigCPtr, enable);
  }

  public bool is_enabled() {
    bool ret = GodotEnginePINVOKE.Portal_is_enabled(swigCPtr);
    return ret;
  }

  public void set_disable_distance(float distance) {
    GodotEnginePINVOKE.Portal_set_disable_distance(swigCPtr, distance);
  }

  public float get_disable_distance() {
    float ret = GodotEnginePINVOKE.Portal_get_disable_distance(swigCPtr);
    return ret;
  }

  public void set_disabled_color(SWIGTYPE_p_Color color) {
    GodotEnginePINVOKE.Portal_set_disabled_color(swigCPtr, SWIGTYPE_p_Color.getCPtr(color));
    if (GodotEnginePINVOKE.SWIGPendingException.Pending) throw GodotEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Color get_disabled_color() {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(GodotEnginePINVOKE.Portal_get_disabled_color(swigCPtr), true);
    return ret;
  }

  public void set_connect_range(float range) {
    GodotEnginePINVOKE.Portal_set_connect_range(swigCPtr, range);
  }

  public float get_connect_range() {
    float ret = GodotEnginePINVOKE.Portal_get_connect_range(swigCPtr);
    return ret;
  }

  public Portal() : this(false) {
    if (swigCPtr.Handle == global::System.IntPtr.Zero) {
      internal_init(GodotEnginePINVOKE.new_Portal());
    }
  }

}

}
